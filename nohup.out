INFO 02-16 17:39:11 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 17:39:12 api_server.py:840] vLLM API server version 0.7.2
INFO 02-16 17:39:12 api_server.py:841] args: Namespace(subparser='serve', model_tag='snunlp/bigdata_gemma2_9b_dora', config='', host=None, port=8000, uvicorn_log_level='info', allow_credentials=False, allowed_origins=['*'], allowed_methods=['*'], allowed_headers=['*'], api_key='token-snuintern2025', lora_modules=None, prompt_adapters=None, chat_template=None, chat_template_content_format='auto', response_role='assistant', ssl_keyfile=None, ssl_certfile=None, ssl_ca_certs=None, ssl_cert_reqs=0, root_path=None, middleware=[], return_tokens_as_token_ids=False, disable_frontend_multiprocessing=False, enable_request_id_headers=False, enable_auto_tool_choice=False, enable_reasoning=False, reasoning_parser=None, tool_call_parser=None, tool_parser_plugin='', model='snunlp/bigdata_gemma2_9b_dora', task='auto', tokenizer=None, skip_tokenizer_init=False, revision=None, code_revision=None, tokenizer_revision=None, tokenizer_mode='auto', trust_remote_code=False, allowed_local_media_path=None, download_dir=None, load_format='auto', config_format=<ConfigFormat.AUTO: 'auto'>, dtype='auto', kv_cache_dtype='auto', max_model_len=None, guided_decoding_backend='xgrammar', logits_processor_pattern=None, model_impl='auto', distributed_executor_backend=None, pipeline_parallel_size=1, tensor_parallel_size=1, max_parallel_loading_workers=None, ray_workers_use_nsight=False, block_size=None, enable_prefix_caching=None, disable_sliding_window=False, use_v2_block_manager=True, num_lookahead_slots=0, seed=0, swap_space=4, cpu_offload_gb=0, gpu_memory_utilization=0.9, num_gpu_blocks_override=None, max_num_batched_tokens=None, max_num_seqs=None, max_logprobs=20, disable_log_stats=False, quantization=None, rope_scaling=None, rope_theta=None, hf_overrides=None, enforce_eager=False, max_seq_len_to_capture=8192, disable_custom_all_reduce=False, tokenizer_pool_size=0, tokenizer_pool_type='ray', tokenizer_pool_extra_config=None, limit_mm_per_prompt=None, mm_processor_kwargs=None, disable_mm_preprocessor_cache=False, enable_lora=False, enable_lora_bias=False, max_loras=1, max_lora_rank=16, lora_extra_vocab_size=256, lora_dtype='auto', long_lora_scaling_factors=None, max_cpu_loras=None, fully_sharded_loras=False, enable_prompt_adapter=False, max_prompt_adapters=1, max_prompt_adapter_token=0, device='auto', num_scheduler_steps=1, multi_step_stream_outputs=True, scheduler_delay_factor=0.0, enable_chunked_prefill=None, speculative_model=None, speculative_model_quantization=None, num_speculative_tokens=None, speculative_disable_mqa_scorer=False, speculative_draft_tensor_parallel_size=None, speculative_max_model_len=None, speculative_disable_by_batch_size=None, ngram_prompt_lookup_max=None, ngram_prompt_lookup_min=None, spec_decoding_acceptance_method='rejection_sampler', typical_acceptance_sampler_posterior_threshold=None, typical_acceptance_sampler_posterior_alpha=None, disable_logprobs_during_spec_decoding=None, model_loader_extra_config=None, ignore_patterns=[], preemption_mode=None, served_model_name=None, qlora_adapter_name_or_path=None, otlp_traces_endpoint=None, collect_detailed_traces=None, disable_async_output_proc=False, scheduling_policy='fcfs', override_neuron_config=None, override_pooler_config=None, compilation_config=None, kv_transfer_config=None, worker_cls='auto', generation_config=None, override_generation_config=None, enable_sleep_mode=False, calculate_kv_scales=False, disable_log_requests=False, max_log_len=None, disable_fastapi_docs=False, enable_prompt_tokens_details=False, dispatch_function=<function serve at 0x7fcea4b5bec0>)
INFO 02-16 17:39:12 api_server.py:206] Started engine process with PID 3863836
INFO 02-16 17:39:16 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 17:39:21 config.py:542] This model supports multiple tasks: {'generate', 'classify', 'score', 'reward', 'embed'}. Defaulting to 'generate'.
INFO 02-16 17:39:26 config.py:542] This model supports multiple tasks: {'embed', 'classify', 'reward', 'generate', 'score'}. Defaulting to 'generate'.
INFO 02-16 17:39:26 llm_engine.py:234] Initializing a V0 LLM engine (v0.7.2) with config: model='snunlp/bigdata_gemma2_9b_dora', speculative_config=None, tokenizer='snunlp/bigdata_gemma2_9b_dora', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=snunlp/bigdata_gemma2_9b_dora, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=True, 
INFO 02-16 17:39:30 cuda.py:230] Using Flash Attention backend.
INFO 02-16 17:39:30 model_runner.py:1110] Starting to load model snunlp/bigdata_gemma2_9b_dora...
INFO 02-16 17:39:31 weight_utils.py:252] Using model weights format ['*.safetensors']
Traceback (most recent call last):
  File "/home/hyeznee/.local/bin/vllm", line 8, in <module>
    sys.exit(main())
             ^^^^^^
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/scripts.py", line 204, in main
    args.dispatch_function(args)
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/scripts.py", line 44, in serve
    uvloop.run(run_server(args))
  File "/home/hyeznee/.local/lib/python3.12/site-packages/uvloop/__init__.py", line 109, in run
    return __asyncio.run(
           ^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/asyncio/runners.py", line 194, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/asyncio/runners.py", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "uvloop/loop.pyx", line 1512, in uvloop.loop.Loop.run_until_complete
  File "uvloop/loop.pyx", line 1505, in uvloop.loop.Loop.run_until_complete
  File "uvloop/loop.pyx", line 1379, in uvloop.loop.Loop.run_forever
  File "uvloop/loop.pyx", line 557, in uvloop.loop.Loop._run
  File "uvloop/handles/poll.pyx", line 216, in uvloop.loop.__on_uvpoll_event
  File "uvloop/cbhandles.pyx", line 83, in uvloop.loop.Handle._run
  File "uvloop/cbhandles.pyx", line 66, in uvloop.loop.Handle._run
  File "uvloop/loop.pyx", line 399, in uvloop.loop.Loop._read_from_self
  File "uvloop/loop.pyx", line 404, in uvloop.loop.Loop._invoke_signals
  File "uvloop/loop.pyx", line 379, in uvloop.loop.Loop._ceval_process_signals
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/api_server.py", line 871, in signal_handler
    raise KeyboardInterrupt("terminated")
KeyboardInterrupt: terminated
/opt/anaconda3/lib/python3.12/multiprocessing/resource_tracker.py:254: UserWarning: resource_tracker: There appear to be 1 leaked semaphore objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
INFO 02-16 19:53:01 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 19:53:02 api_server.py:840] vLLM API server version 0.7.2
INFO 02-16 19:53:02 api_server.py:841] args: Namespace(subparser='serve', model_tag='snunlp/bigdata_gemma2_9b_dora', config='', host=None, port=8000, uvicorn_log_level='info', allow_credentials=False, allowed_origins=['*'], allowed_methods=['*'], allowed_headers=['*'], api_key='token-snuintern2025', lora_modules=None, prompt_adapters=None, chat_template=None, chat_template_content_format='auto', response_role='assistant', ssl_keyfile=None, ssl_certfile=None, ssl_ca_certs=None, ssl_cert_reqs=0, root_path=None, middleware=[], return_tokens_as_token_ids=False, disable_frontend_multiprocessing=False, enable_request_id_headers=False, enable_auto_tool_choice=False, enable_reasoning=False, reasoning_parser=None, tool_call_parser=None, tool_parser_plugin='', model='snunlp/bigdata_gemma2_9b_dora', task='auto', tokenizer=None, skip_tokenizer_init=False, revision=None, code_revision=None, tokenizer_revision=None, tokenizer_mode='auto', trust_remote_code=False, allowed_local_media_path=None, download_dir=None, load_format='auto', config_format=<ConfigFormat.AUTO: 'auto'>, dtype='auto', kv_cache_dtype='auto', max_model_len=None, guided_decoding_backend='xgrammar', logits_processor_pattern=None, model_impl='auto', distributed_executor_backend=None, pipeline_parallel_size=1, tensor_parallel_size=1, max_parallel_loading_workers=None, ray_workers_use_nsight=False, block_size=None, enable_prefix_caching=None, disable_sliding_window=False, use_v2_block_manager=True, num_lookahead_slots=0, seed=0, swap_space=4, cpu_offload_gb=0, gpu_memory_utilization=0.9, num_gpu_blocks_override=None, max_num_batched_tokens=None, max_num_seqs=None, max_logprobs=20, disable_log_stats=False, quantization=None, rope_scaling=None, rope_theta=None, hf_overrides=None, enforce_eager=False, max_seq_len_to_capture=8192, disable_custom_all_reduce=False, tokenizer_pool_size=0, tokenizer_pool_type='ray', tokenizer_pool_extra_config=None, limit_mm_per_prompt=None, mm_processor_kwargs=None, disable_mm_preprocessor_cache=False, enable_lora=False, enable_lora_bias=False, max_loras=1, max_lora_rank=16, lora_extra_vocab_size=256, lora_dtype='auto', long_lora_scaling_factors=None, max_cpu_loras=None, fully_sharded_loras=False, enable_prompt_adapter=False, max_prompt_adapters=1, max_prompt_adapter_token=0, device='auto', num_scheduler_steps=1, multi_step_stream_outputs=True, scheduler_delay_factor=0.0, enable_chunked_prefill=None, speculative_model=None, speculative_model_quantization=None, num_speculative_tokens=None, speculative_disable_mqa_scorer=False, speculative_draft_tensor_parallel_size=None, speculative_max_model_len=None, speculative_disable_by_batch_size=None, ngram_prompt_lookup_max=None, ngram_prompt_lookup_min=None, spec_decoding_acceptance_method='rejection_sampler', typical_acceptance_sampler_posterior_threshold=None, typical_acceptance_sampler_posterior_alpha=None, disable_logprobs_during_spec_decoding=None, model_loader_extra_config=None, ignore_patterns=[], preemption_mode=None, served_model_name=None, qlora_adapter_name_or_path=None, otlp_traces_endpoint=None, collect_detailed_traces=None, disable_async_output_proc=False, scheduling_policy='fcfs', override_neuron_config=None, override_pooler_config=None, compilation_config=None, kv_transfer_config=None, worker_cls='auto', generation_config=None, override_generation_config=None, enable_sleep_mode=False, calculate_kv_scales=False, disable_log_requests=False, max_log_len=None, disable_fastapi_docs=False, enable_prompt_tokens_details=False, dispatch_function=<function serve at 0x7fdd29f8bec0>)
INFO 02-16 19:53:02 api_server.py:206] Started engine process with PID 3948120
INFO 02-16 19:53:06 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 19:53:12 config.py:542] This model supports multiple tasks: {'score', 'generate', 'classify', 'reward', 'embed'}. Defaulting to 'generate'.
INFO 02-16 19:53:17 config.py:542] This model supports multiple tasks: {'reward', 'generate', 'embed', 'score', 'classify'}. Defaulting to 'generate'.
INFO 02-16 19:53:17 llm_engine.py:234] Initializing a V0 LLM engine (v0.7.2) with config: model='snunlp/bigdata_gemma2_9b_dora', speculative_config=None, tokenizer='snunlp/bigdata_gemma2_9b_dora', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=snunlp/bigdata_gemma2_9b_dora, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=True, 
INFO 02-16 19:53:22 cuda.py:230] Using Flash Attention backend.
INFO 02-16 19:53:23 model_runner.py:1110] Starting to load model snunlp/bigdata_gemma2_9b_dora...
INFO 02-16 19:53:23 weight_utils.py:252] Using model weights format ['*.safetensors']
Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:01<00:04,  1.39s/it]
Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:02<00:02,  1.47s/it]
Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:04<00:01,  1.32s/it]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:05<00:00,  1.39s/it]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:05<00:00,  1.39s/it]

INFO 02-16 19:53:30 model_runner.py:1115] Loading model weights took 17.2180 GB
INFO 02-16 19:53:33 worker.py:267] Memory profiling takes 3.23 seconds
INFO 02-16 19:53:33 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
INFO 02-16 19:53:33 worker.py:267] model weights take 17.22GiB; non_torch_memory takes 0.09GiB; PyTorch activation peak memory takes 2.38GiB; the rest of the memory reserved for KV Cache is 15.76GiB.
INFO 02-16 19:53:34 executor_base.py:110] # CUDA blocks: 3074, # CPU blocks: 780
INFO 02-16 19:53:34 executor_base.py:115] Maximum concurrency for 8192 tokens per request: 6.00x
INFO 02-16 19:53:36 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s]Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:31,  1.07it/s]Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:01<00:24,  1.33it/s]Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:02<00:22,  1.44it/s]Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:02<00:20,  1.52it/s]Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:03<00:19,  1.57it/s]Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:04<00:18,  1.56it/s]Capturing CUDA graph shapes:  20%|██        | 7/35 [00:04<00:17,  1.59it/s]Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:05<00:17,  1.57it/s]Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:05<00:16,  1.53it/s]Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:06<00:16,  1.50it/s]Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:07<00:16,  1.50it/s]Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:07<00:14,  1.55it/s]Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:08<00:13,  1.57it/s]Capturing CUDA graph shapes:  40%|████      | 14/35 [00:09<00:13,  1.61it/s]Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:09<00:12,  1.62it/s]Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:10<00:11,  1.64it/s]Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:10<00:11,  1.64it/s]Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:11<00:10,  1.66it/s]Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:12<00:09,  1.67it/s]Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:12<00:08,  1.68it/s]Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:13<00:08,  1.68it/s]Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:13<00:07,  1.69it/s]Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:14<00:07,  1.70it/s]Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:15<00:06,  1.65it/s]Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:15<00:06,  1.67it/s]Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:16<00:05,  1.64it/s]Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:16<00:04,  1.67it/s]Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:17<00:04,  1.63it/s]Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:18<00:03,  1.65it/s]Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:18<00:03,  1.66it/s]Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:19<00:02,  1.63it/s]Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:19<00:01,  1.63it/s]Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:20<00:01,  1.61it/s]Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:21<00:00,  1.61it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:21<00:00,  1.55it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:21<00:00,  1.59it/s]
INFO 02-16 19:53:58 model_runner.py:1562] Graph capturing finished in 22 secs, took 1.32 GiB
INFO 02-16 19:53:58 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 28.12 seconds
INFO 02-16 19:53:58 api_server.py:756] Using supplied chat template:
INFO 02-16 19:53:58 api_server.py:756] None
INFO 02-16 19:53:58 launcher.py:21] Available routes are:
INFO 02-16 19:53:58 launcher.py:29] Route: /openapi.json, Methods: HEAD, GET
INFO 02-16 19:53:58 launcher.py:29] Route: /docs, Methods: HEAD, GET
INFO 02-16 19:53:58 launcher.py:29] Route: /docs/oauth2-redirect, Methods: HEAD, GET
INFO 02-16 19:53:58 launcher.py:29] Route: /redoc, Methods: HEAD, GET
INFO 02-16 19:53:58 launcher.py:29] Route: /health, Methods: GET
INFO 02-16 19:53:58 launcher.py:29] Route: /ping, Methods: GET, POST
INFO 02-16 19:53:58 launcher.py:29] Route: /tokenize, Methods: POST
INFO 02-16 19:53:58 launcher.py:29] Route: /detokenize, Methods: POST
INFO 02-16 19:53:58 launcher.py:29] Route: /v1/models, Methods: GET
INFO 02-16 19:53:58 launcher.py:29] Route: /version, Methods: GET
INFO 02-16 19:53:58 launcher.py:29] Route: /v1/chat/completions, Methods: POST
INFO 02-16 19:53:58 launcher.py:29] Route: /v1/completions, Methods: POST
INFO 02-16 19:53:58 launcher.py:29] Route: /v1/embeddings, Methods: POST
INFO 02-16 19:53:58 launcher.py:29] Route: /pooling, Methods: POST
INFO 02-16 19:53:58 launcher.py:29] Route: /score, Methods: POST
INFO 02-16 19:53:58 launcher.py:29] Route: /v1/score, Methods: POST
INFO 02-16 19:53:58 launcher.py:29] Route: /rerank, Methods: POST
INFO 02-16 19:53:58 launcher.py:29] Route: /v1/rerank, Methods: POST
INFO 02-16 19:53:58 launcher.py:29] Route: /v2/rerank, Methods: POST
INFO 02-16 19:53:58 launcher.py:29] Route: /invocations, Methods: POST
INFO:     Started server process [3947950]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
INFO:     127.0.0.1:59120 - "GET /docs HTTP/1.1" 200 OK
/home/hyeznee/.local/lib/python3.12/site-packages/fastapi/openapi/utils.py:225: UserWarning: Duplicate Operation ID ping_ping_get for function ping at /home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/api_server.py
  warnings.warn(message, stacklevel=1)
INFO:     127.0.0.1:59120 - "GET /openapi.json HTTP/1.1" 200 OK
INFO:     127.0.0.1:59130 - "GET /health HTTP/1.1" 200 OK
INFO:     127.0.0.1:59130 - "GET /health HTTP/1.1" 200 OK
INFO:     127.0.0.1:35420 - "GET /health HTTP/1.1" 200 OK
INFO:     127.0.0.1:35432 - "GET / HTTP/1.1" 404 Not Found
INFO:     127.0.0.1:35422 - "GET /health HTTP/1.1" 200 OK
INFO:     127.0.0.1:44792 - "GET /health HTTP/1.1" 200 OK
INFO:     127.0.0.1:35464 - "GET /health HTTP/1.1" 200 OK
ERROR 02-16 20:03:27 serving_completion.py:112] Error in preprocessing prompt inputs
ERROR 02-16 20:03:27 serving_completion.py:112] Traceback (most recent call last):
ERROR 02-16 20:03:27 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_completion.py", line 104, in create_completion
ERROR 02-16 20:03:27 serving_completion.py:112]     request_prompts, engine_prompts = await self._preprocess_completion(
ERROR 02-16 20:03:27 serving_completion.py:112]                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 20:03:27 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 349, in _preprocess_completion
ERROR 02-16 20:03:27 serving_completion.py:112]     request_prompts = await self._tokenize_prompt_input_or_inputs_async(
ERROR 02-16 20:03:27 serving_completion.py:112]                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 20:03:27 serving_completion.py:112]   File "/opt/anaconda3/lib/python3.12/concurrent/futures/thread.py", line 58, in run
ERROR 02-16 20:03:27 serving_completion.py:112]     result = self.fn(*self.args, **self.kwargs)
ERROR 02-16 20:03:27 serving_completion.py:112]              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 20:03:27 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 326, in _tokenize_prompt_input_or_inputs
ERROR 02-16 20:03:27 serving_completion.py:112]     self._normalize_prompt_text_to_input(
ERROR 02-16 20:03:27 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 183, in _normalize_prompt_text_to_input
ERROR 02-16 20:03:27 serving_completion.py:112]     return self._validate_input(request, input_ids, input_text)
ERROR 02-16 20:03:27 serving_completion.py:112]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 20:03:27 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 246, in _validate_input
ERROR 02-16 20:03:27 serving_completion.py:112]     raise ValueError(
ERROR 02-16 20:03:27 serving_completion.py:112] ValueError: This model's maximum context length is 8192 tokens. However, you requested 9422 tokens (1230 in the messages, 8192 in the completion). Please reduce the length of the messages or completion.
INFO:     127.0.0.1:50190 - "POST /v1/completions HTTP/1.1" 400 Bad Request
ERROR 02-16 20:14:21 serving_completion.py:112] Error in preprocessing prompt inputs
ERROR 02-16 20:14:21 serving_completion.py:112] Traceback (most recent call last):
ERROR 02-16 20:14:21 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_completion.py", line 104, in create_completion
ERROR 02-16 20:14:21 serving_completion.py:112]     request_prompts, engine_prompts = await self._preprocess_completion(
ERROR 02-16 20:14:21 serving_completion.py:112]                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 20:14:21 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 349, in _preprocess_completion
ERROR 02-16 20:14:21 serving_completion.py:112]     request_prompts = await self._tokenize_prompt_input_or_inputs_async(
ERROR 02-16 20:14:21 serving_completion.py:112]                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 20:14:21 serving_completion.py:112]   File "/opt/anaconda3/lib/python3.12/concurrent/futures/thread.py", line 58, in run
ERROR 02-16 20:14:21 serving_completion.py:112]     result = self.fn(*self.args, **self.kwargs)
ERROR 02-16 20:14:21 serving_completion.py:112]              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 20:14:21 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 326, in _tokenize_prompt_input_or_inputs
ERROR 02-16 20:14:21 serving_completion.py:112]     self._normalize_prompt_text_to_input(
ERROR 02-16 20:14:21 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 183, in _normalize_prompt_text_to_input
ERROR 02-16 20:14:21 serving_completion.py:112]     return self._validate_input(request, input_ids, input_text)
ERROR 02-16 20:14:21 serving_completion.py:112]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 20:14:21 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 246, in _validate_input
ERROR 02-16 20:14:21 serving_completion.py:112]     raise ValueError(
ERROR 02-16 20:14:21 serving_completion.py:112] ValueError: This model's maximum context length is 8192 tokens. However, you requested 9419 tokens (1227 in the messages, 8192 in the completion). Please reduce the length of the messages or completion.
INFO:     127.0.0.1:32778 - "POST /v1/completions HTTP/1.1" 400 Bad Request
INFO 02-16 20:17:49 logger.py:39] Received request cmpl-6895303e248049daadbc4753be4e712f-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 서울대학교 신효필 교수님에 대해 알려줘 <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 163260, 236800, 61864, 60057, 241078, 239498, 75985, 236669, 239957, 236179, 142192, 78183, 238994, 244669, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:35358 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:17:49 engine.py:275] Added request cmpl-6895303e248049daadbc4753be4e712f-0.
INFO 02-16 20:17:50 metrics.py:455] Avg prompt throughput: 124.2 tokens/s, Avg generation throughput: 0.1 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 2.5%, CPU KV cache usage: 0.0%.
INFO 02-16 20:18:01 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 5.9 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:18:11 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:19:57 logger.py:39] Received request cmpl-ea24a2444cc545aa815d3a9550c90481-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 전세계 카카오 생산량에 대해 알려줘 <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 31087, 237533, 238002, 73834, 238222, 237410, 50390, 238325, 240833, 236179, 142192, 78183, 238994, 244669, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:32828 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:19:57 engine.py:275] Added request cmpl-ea24a2444cc545aa815d3a9550c90481-0.
INFO 02-16 20:19:57 metrics.py:455] Avg prompt throughput: 197.0 tokens/s, Avg generation throughput: 0.2 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 2.5%, CPU KV cache usage: 0.0%.
INFO 02-16 20:19:58 logger.py:39] Received request cmpl-b0f3b82c18be43eaa7f0377f496d5fe5-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:19:58 <end_of_turn>\n\n    <start_of_turn>user 전 세계 카카오 생산량 정보 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235274, 235315, 235292, 235308, 235321, 235248, 107, 109, 141, 106, 1645, 31087, 154094, 73834, 238222, 237410, 50390, 238325, 240833, 104569, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:32828 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:19:58 engine.py:275] Added request cmpl-b0f3b82c18be43eaa7f0377f496d5fe5-0.
INFO 02-16 20:20:01 logger.py:39] Received request cmpl-ca11e6ad7f4e4ea4833785207a123f69-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145], lora_request: None, prompt_adapter_request: None.
INFO 02-16 20:20:01 logger.py:39] Received request cmpl-d6786a0f97354166ba568d5a4062a79b-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:36288 - "POST /v1/completions HTTP/1.1" 200 OK
INFO:     127.0.0.1:36294 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:20:01 logger.py:39] Received request cmpl-037973e9f45a4216b99dd6edc3c1f786-0: prompt: "다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        '쿠키 허용'을 클릭하면 통계 및 개인 선호도 산출을 위한 쿠키 제공에 동의하게 됩니다.\n개인정보 보호정책\n에서 쿠키에 대한 자세한 내용을 확인할 수 있습니다.", params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 235303, 240534, 238705, 189305, 237545, 235303, 236392, 91940, 240356, 123472, 83160, 238002, 60709, 49532, 236589, 51914, 238033, 236840, 128538, 238483, 236392, 168947, 222330, 238705, 110308, 236179, 49697, 236137, 101969, 235248, 129090, 235265, 108, 237936, 236589, 173499, 29283, 238033, 236864, 240460, 108, 22803, 222330, 238705, 236179, 71100, 34103, 237533, 236511, 196582, 236392, 88936, 238080, 22618, 55496, 235265], lora_request: None, prompt_adapter_request: None.
INFO 02-16 20:20:01 engine.py:275] Added request cmpl-ca11e6ad7f4e4ea4833785207a123f69-0.
INFO:     127.0.0.1:36300 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:20:01 engine.py:275] Added request cmpl-d6786a0f97354166ba568d5a4062a79b-0.
INFO 02-16 20:20:01 engine.py:275] Added request cmpl-037973e9f45a4216b99dd6edc3c1f786-0.
INFO 02-16 20:20:02 metrics.py:455] Avg prompt throughput: 187.3 tokens/s, Avg generation throughput: 39.7 tokens/s, Running: 3 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.1%, CPU KV cache usage: 0.0%.
INFO 02-16 20:20:07 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 132.3 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.8%, CPU KV cache usage: 0.0%.
INFO 02-16 20:20:12 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 89.9 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.4%, CPU KV cache usage: 0.0%.
INFO 02-16 20:20:14 logger.py:39] Received request cmpl-2e2d6baf23a34fe3a67f494fabe64258-0: prompt: '아래 정보에 기반하여, 사용자의 질문에 답하세요.\n        \n\n\n**텍스트:**\n\n인공지능(AI)은 빠르게 발전하고 있으며, 우리 삶의 모든 영역에 깊숙이 스며들고 있습니다. AI는 의료, 금융, 교육, 엔터테인먼트 등 다양한 분야에서 혁신을 이끌어내고 있습니다. \n\n특히, 의료 분야에서 AI는 질병 진단, 치료법 개발, 약물 검색 등에 활용되고 있습니다. AI 기반의 진단 시스템은 의사의 판단을 보조하고, 새로운 치료법을 찾는 데 도움을 주고 있습니다. 또한, AI는 개인 맞춤형 의료 서비스를 제공하는 데에도 기여하고 있습니다.\n\n금융 분야에서는 AI가 사기 예방, 위험 관리, 투자 분석 등에 활용됩니다. AI 알고리즘은 대량의 데이터를 분석하여 금융 위험을 예측하고, 사기 행위를 감지하는 데 효과적입니다. 또한, AI 기반의 투자 분석 시스템은 투자 결정을 지원하고, 수익률을 향상시키는 데 도움을 줄 수 있습니다.\n\nAI는 교육 분야에서도 혁신을 가져오고 있습니다. AI 기반 학습 플랫폼은 개인의 학습 속도와 학습 스타일을 고려하여 맞춤형 학습 경험을 제공합니다. 또한, AI 챗봇은 학생들의 질문에 즉각적으로 답변하여 학습 지원을 제공합니다.\n\nAI는 엔터테인먼트 분야에서도 혁신적인 변화를 가져오고 있습니다. AI 기반의 콘텐츠 생성 시스템은 영화, 음악, 게임 등 다양한 형태의 콘텐츠를 생성합니다. 또한, AI 추천 시스템은 사용자의 취향에 맞는 콘텐츠를 추천하여 사용자 경험을 향상시킵니다.\n\n결론적으로, AI는 다양한 분야에서 혁신을 이끌어내고 있으며, 우리 삶을 더욱 편리하고 풍요롭게 만들어줄 잠재력을 가지고 있습니다.\n\n\n\n\n\n---\n\n##  신뢰할 수 있는 AI\n\n인공지능(AI) 기술은 빠르게 발전하고 있으며 우리 삶의 많은 측면에 영향을 미치고 있습니다. 그러나 AI 기술의 발전과 함께, 그 신뢰성에 대한 우려도 커지고 있습니다. 사람들은 AI가 정확하고 공정하게 작동하는지, 개인 정보를 안전하게 보호하는지에 대해 걱정합니다. 이러한 우려는 AI 기술이 사회에 긍정적인 영향을 미치기 위해서는 해결되어야 할 중요한 과제입니다.\n\nAI 신뢰성을 높이기 위한 노력은 여러 분야에서 이루어지고 있습니다. 연구자들은 AI 알고리즘의 투명성을 높이고, AI 시스템의 오류를 줄이는 방법을 연구하고 있습니다. 또한, AI 개발 및 배포 과정에서 윤리적 기준을 마련하고, AI 시스템에 대한 감독 및 평가 체계를 구축하는 노력도 진행되고 있습니다.\n\nAI 신뢰성은 단순히 기술적 문제가 아니라 사회적 문제이기도 합니다. 사람들이 AI를 신뢰하기 위해서는 AI 기술에 대한 이해를 높이고, AI 시스템의 의사결정 과정을 투명하게 공개해야 합니다. 또한, AI 기술의 윤리적 측면에 대한 사회적 논의를 활성화하고, AI 기술의 발전과 사회적 책임을 함께 고려하는 노력이 필요합니다.\n\nAI 기술은 잠재력이 막대하지만, 동시에 위험성도 내포하고 있습니다. AI 신뢰성을 높이기 위한 노력은 AI 기술이 사회에 긍정적인 영향을 미치고, 사람들의 삶을 개선하는 데 기여할 수 있도록 하는 데 매우 중요합니다.\n\n\n---\n\n\n## 요약문\n\n본 텍스트는 인공지능(AI) 기술의 발전과 함께 제기되는 신뢰성 문제에 대해 논하고 있습니다. AI의 정확성, 공정성, 개인 정보 보호 등에 대한 우려는 AI 기술이 사회에 긍정적인 영향을 미치기 위해 해결되어야 할 중요한 과제입니다. \n\n텍스트는 AI 신뢰성을 높이기 위한 노력으로 기술적 측면 (알고리즘 투명성, 오류 감소)과 사회적 측면 (AI 이해 증진, 윤리적 논의, 책임 공유)을 제시합니다.  \n\n결론적으로 AI 기술은 막대한 잠재력을 가지지만, 신뢰성 확보를 위한 지속적인 노력이 필요하며, 이는 AI가 사회에 긍정적인 영향을 미치고 인간의 삶을 개선하는 데 기여할 수 있도록 한다는 점을 강조합니다. \n\n\n\n\n\n\n이 웹사이트는 쿠키를 사용합니다.\n쿠키는 웹사이트가 사용자의 컴퓨터에 작은 파일을 저장하여 사용자 경험을 개선하고 분석하기 위해 사용됩니다.\n\n웹사이트 방문 시 쿠키를 통해 사용자의 행동을 추적하고 웹사이트의 성능을 개선하는 데 사용됩니다.\n\n쿠키는 사용자 선호도를 기록하고 개인 맞춤형 콘텐츠를 제공하는 데에도 사용됩니다.\n\n웹사이트 방문 시 쿠키에 대한 동의를 얻는 것이 중요합니다.\n\n사용자는 쿠키 설정을 변경하거나 거부할 수 있습니다.\n\n자세한 내용은 개인정보 보호정책을 참조하십시오.\n\n\n\n\n        사용자 질문: 전세계 카카오 생산량에 대해 알려줘 ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236655, 238608, 104569, 236179, 28693, 238559, 72494, 235269, 61943, 236645, 236137, 160587, 237465, 236179, 235248, 241305, 204551, 235265, 108, 145, 110, 688, 242756, 50691, 66058, 109, 236589, 237495, 236183, 239474, 235278, 11716, 235275, 236648, 235119, 238500, 237458, 66144, 237045, 48060, 218631, 235269, 93241, 235248, 242928, 236137, 87997, 52604, 238071, 236179, 235248, 243890, 241594, 235832, 32275, 238986, 237290, 236464, 55496, 235265, 16481, 236214, 23594, 239077, 235269, 140541, 244091, 235269, 187039, 235269, 209560, 237524, 239060, 236589, 241364, 236859, 73143, 32048, 238780, 236511, 70754, 238305, 22803, 235248, 241356, 237502, 236392, 11464, 243898, 236770, 238151, 236464, 55496, 235265, 235248, 109, 239609, 239055, 235269, 23594, 239077, 70754, 238305, 22803, 16481, 236214, 160587, 240204, 83453, 238335, 235269, 131993, 239077, 239085, 227613, 235269, 151245, 238256, 203755, 73143, 236179, 147226, 237545, 238070, 236464, 55496, 235265, 16481, 28693, 238559, 236137, 83453, 238335, 27941, 202429, 236648, 23594, 236417, 236137, 135101, 238335, 236392, 29283, 237602, 48060, 235269, 201009, 131993, 239077, 239085, 236392, 134498, 236214, 65503, 50316, 240520, 236392, 40712, 236464, 55496, 235265, 86622, 236511, 235269, 16481, 236214, 49532, 236589, 207221, 244417, 238867, 23594, 239077, 206586, 236791, 110308, 40284, 65503, 209929, 28693, 237386, 48060, 55496, 235265, 109, 239079, 244091, 70754, 238305, 180860, 16481, 236361, 17309, 236386, 71277, 238037, 235269, 41423, 240521, 159838, 235269, 148188, 236645, 211558, 73143, 236179, 147226, 237545, 129090, 235265, 16481, 78183, 236464, 236432, 243728, 236648, 26801, 240833, 236137, 112762, 236791, 211558, 72494, 140541, 244091, 41423, 240521, 236392, 71277, 241656, 48060, 235269, 17309, 236386, 105560, 237601, 236791, 99091, 236183, 40284, 65503, 207092, 237233, 237603, 47555, 235265, 86622, 236511, 235269, 16481, 28693, 238559, 236137, 148188, 236645, 211558, 27941, 202429, 236648, 148188, 236645, 72510, 236864, 236392, 224790, 48060, 235269, 22618, 241974, 243156, 236392, 220234, 237047, 236569, 238705, 236214, 65503, 50316, 240520, 236392, 184434, 22618, 55496, 235265, 109, 11716, 236214, 187039, 70754, 238305, 22803, 236840, 235248, 241356, 237502, 236392, 174538, 237410, 236464, 55496, 235265, 16481, 28693, 238559, 126160, 237152, 117904, 243792, 243751, 236648, 49532, 236589, 236137, 126160, 237152, 125507, 236840, 237807, 126160, 237152, 233186, 236392, 46749, 238994, 72494, 207221, 244417, 238867, 126160, 237152, 43033, 240521, 236392, 110308, 43395, 235265, 86622, 236511, 235269, 16481, 235248, 252414, 244524, 236648, 126160, 237889, 132642, 160587, 237465, 236179, 235248, 242579, 238316, 90621, 235248, 241305, 239042, 72494, 126160, 237152, 224790, 236392, 110308, 43395, 235265, 109, 11716, 236214, 209560, 237524, 239060, 236589, 241364, 236859, 70754, 238305, 22803, 236840, 235248, 241356, 237502, 85024, 75980, 236817, 236791, 174538, 237410, 236464, 55496, 235265, 16481, 28693, 238559, 236137, 176427, 116518, 27941, 202429, 236648, 122907, 235269, 107342, 240146, 235269, 144280, 73143, 32048, 238780, 236511, 112507, 239190, 236137, 176427, 236791, 116518, 43395, 235265, 86622, 236511, 235269, 16481, 75943, 239250, 27941, 202429, 236648, 61943, 236645, 236137, 174375, 240112, 236179, 207221, 236214, 176427, 236791, 75943, 239250, 72494, 61943, 236645, 43033, 240521, 236392, 220234, 237047, 236569, 247157, 12957, 235265, 109, 238665, 240405, 90621, 235269, 16481, 236214, 32048, 238780, 236511, 70754, 238305, 22803, 235248, 241356, 237502, 236392, 11464, 243898, 236770, 238151, 236464, 218631, 235269, 93241, 235248, 242928, 236392, 70231, 243093, 136188, 236432, 48060, 209727, 237526, 243130, 237458, 128047, 236770, 240957, 235248, 242163, 238360, 238365, 236392, 128753, 236464, 55496, 235265, 113, 3976, 109, 1620, 139, 237502, 244066, 238080, 22618, 72941, 16481, 109, 236589, 237495, 236183, 239474, 235278, 11716, 235275, 213222, 236648, 235119, 238500, 237458, 66144, 237045, 48060, 218631, 93241, 235248, 242928, 236137, 139148, 235248, 241656, 237722, 236179, 52604, 240112, 236392, 48835, 237924, 236464, 55496, 235265, 20350, 122865, 16481, 213222, 236137, 66144, 237045, 237233, 135132, 235269, 20350, 60057, 244066, 237154, 236179, 71100, 54087, 238994, 236840, 134512, 236183, 236464, 55496, 235265, 64691, 84551, 16481, 236361, 35467, 239131, 48060, 41388, 236864, 101969, 63806, 237358, 40284, 236183, 235269, 49532, 236589, 104569, 236791, 70685, 237045, 101969, 29283, 238033, 40284, 236183, 236179, 142192, 235248, 245935, 236864, 43395, 235265, 11464, 174287, 54087, 238994, 236214, 16481, 213222, 235832, 208667, 236179, 235248, 246133, 236864, 85024, 52604, 240112, 236392, 48835, 237924, 236386, 93806, 234631, 56787, 238665, 141048, 238305, 69225, 215134, 236511, 65084, 236939, 47555, 235265, 109, 11716, 60057, 244066, 237154, 236392, 187800, 235832, 236386, 168947, 61138, 238365, 236648, 197781, 70754, 238305, 22803, 11464, 238949, 236770, 236183, 236464, 55496, 235265, 195363, 236645, 84551, 16481, 78183, 236464, 236432, 243728, 236137, 148188, 238068, 237154, 236392, 187800, 224907, 235269, 16481, 27941, 202429, 236137, 44245, 239758, 236791, 184434, 206367, 130059, 236392, 195363, 48060, 55496, 235265, 86622, 236511, 235269, 16481, 227613, 60709, 50548, 238199, 65084, 236864, 22803, 223187, 236432, 237603, 28693, 239558, 236392, 41645, 240429, 48060, 235269, 16481, 27941, 202429, 236179, 71100, 99091, 239821, 60709, 119339, 236361, 109962, 238002, 236791, 49061, 240130, 40284, 61138, 238365, 236840, 83453, 238356, 238070, 236464, 55496, 235265, 109, 11716, 60057, 244066, 237154, 236648, 80289, 239937, 239055, 213222, 237603, 132793, 236361, 206682, 208667, 237603, 132793, 235832, 222278, 179694, 235265, 64691, 94525, 16481, 236791, 60057, 244066, 72159, 93806, 234631, 16481, 213222, 236179, 71100, 201194, 236791, 187800, 224907, 235269, 16481, 27941, 202429, 236137, 23594, 236417, 238665, 236864, 65084, 236864, 236392, 148188, 238068, 101969, 41388, 237936, 149735, 179694, 235265, 86622, 236511, 235269, 16481, 213222, 236137, 223187, 236432, 237603, 235248, 241656, 237722, 236179, 71100, 208667, 237603, 225252, 236137, 236791, 147226, 237154, 236817, 48060, 235269, 16481, 213222, 236137, 66144, 237045, 237233, 208667, 237603, 185820, 238700, 236392, 135132, 46749, 238994, 40284, 61138, 238365, 235832, 126942, 43395, 235265, 109, 11716, 213222, 236648, 235248, 242163, 238360, 238365, 235832, 235248, 240750, 236800, 74860, 237598, 235269, 49697, 236569, 236179, 41423, 240521, 237154, 236840, 58272, 238199, 48060, 55496, 235265, 16481, 60057, 244066, 237154, 236392, 187800, 235832, 236386, 168947, 61138, 238365, 236648, 16481, 213222, 235832, 208667, 236179, 235248, 246133, 236864, 85024, 52604, 240112, 236392, 48835, 237924, 236464, 235269, 64691, 132642, 235248, 242928, 236392, 49532, 237700, 40284, 65503, 28693, 237386, 238080, 22618, 21167, 153145, 109976, 65503, 195531, 215134, 43395, 235265, 110, 3976, 110, 1620, 73713, 239618, 237465, 109, 238744, 235248, 242756, 50691, 236214, 30743, 237495, 236183, 239474, 235278, 11716, 235275, 213222, 236137, 66144, 237045, 237233, 135132, 31850, 236386, 156610, 60057, 244066, 237154, 132793, 236179, 142192, 225252, 48060, 55496, 235265, 16481, 236137, 35467, 239131, 237154, 235269, 41388, 236864, 237154, 235269, 49532, 236589, 104569, 29283, 238033, 73143, 236179, 71100, 54087, 238994, 236214, 16481, 213222, 235832, 208667, 236179, 235248, 246133, 236864, 85024, 52604, 240112, 236392, 48835, 237924, 236386, 93806, 56787, 238665, 141048, 238305, 69225, 215134, 236511, 65084, 236939, 47555, 235265, 235248, 109, 242756, 50691, 236214, 16481, 60057, 244066, 237154, 236392, 187800, 235832, 236386, 168947, 61138, 238365, 26291, 213222, 237603, 235248, 241656, 237722, 591, 239414, 236464, 236432, 243728, 148188, 238068, 237154, 235269, 44245, 239758, 99091, 237433, 235275, 237233, 208667, 237603, 235248, 241656, 237722, 591, 11716, 201194, 160284, 237589, 235269, 223187, 236432, 237603, 225252, 236137, 235269, 185820, 238700, 41388, 237766, 235275, 236392, 31850, 236569, 43395, 235265, 139, 109, 238665, 240405, 90621, 16481, 213222, 236648, 235248, 240750, 192312, 235248, 242163, 238360, 238365, 236392, 128753, 95091, 235269, 60057, 244066, 237154, 69781, 237036, 236791, 168947, 34805, 238982, 85024, 61138, 238365, 235832, 126942, 206716, 235269, 11464, 236214, 16481, 236361, 208667, 236179, 235248, 246133, 236864, 85024, 52604, 240112, 236392, 48835, 237924, 236464, 30743, 238264, 236137, 235248, 242928, 236392, 49532, 237700, 40284, 65503, 28693, 237386, 238080, 22618, 21167, 153145, 153422, 236214, 131901, 236392, 84608, 237602, 43395, 235265, 235248, 114, 235832, 31288, 236417, 78749, 236214, 222330, 238705, 236791, 61943, 43395, 235265, 108, 240534, 238705, 236214, 31288, 236417, 78749, 236361, 61943, 236645, 236137, 235248, 241897, 243032, 237524, 236179, 63806, 236648, 145240, 236392, 143077, 72494, 61943, 236645, 43033, 240521, 236392, 49532, 237700, 48060, 211558, 72159, 93806, 61943, 129090, 235265, 109, 237941, 236417, 78749, 51806, 237465, 27941, 222330, 238705, 236791, 187118, 61943, 236645, 236137, 105560, 237358, 236392, 75943, 237603, 48060, 31288, 236417, 78749, 236137, 64301, 239474, 236392, 49532, 237700, 40284, 65503, 61943, 129090, 235265, 109, 240534, 238705, 236214, 61943, 236645, 51914, 238033, 236840, 236791, 28693, 238779, 48060, 49532, 236589, 207221, 244417, 238867, 176427, 236791, 110308, 40284, 65503, 209929, 61943, 129090, 235265, 109, 237941, 236417, 78749, 51806, 237465, 27941, 222330, 238705, 236179, 71100, 49697, 236137, 236791, 210976, 236214, 93205, 215134, 43395, 235265, 109, 236417, 237545, 236645, 236214, 222330, 238705, 127479, 236392, 170116, 236345, 160696, 73523, 237092, 238080, 22618, 55496, 235265, 109, 236645, 237533, 236511, 196582, 236648, 49532, 236589, 173499, 29283, 238033, 236864, 240460, 236392, 120816, 237602, 197538, 235265, 112, 145, 236417, 237545, 236645, 160587, 237465, 235292, 31087, 237533, 238002, 73834, 238222, 237410, 50390, 238325, 240833, 236179, 142192, 78183, 238994, 244669, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:40600 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:20:14 engine.py:275] Added request cmpl-2e2d6baf23a34fe3a67f494fabe64258-0.
INFO 02-16 20:20:26 metrics.py:455] Avg prompt throughput: 99.4 tokens/s, Avg generation throughput: 12.9 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:20:36 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:21:27 logger.py:39] Received request cmpl-52bd63eb7007429696c0ad5b860cb705-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 부산 호텔 화재 사건에 대해 알려줘 <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 43761, 238325, 83942, 241411, 25419, 238360, 17309, 239056, 236179, 142192, 78183, 238994, 244669, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:40542 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:21:27 engine.py:275] Added request cmpl-52bd63eb7007429696c0ad5b860cb705-0.
INFO 02-16 20:21:29 logger.py:39] Received request cmpl-15437b6488884c1cb19cb531fbe5e70f-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:21:29 <end_of_turn>\n\n    <start_of_turn>user 부산 호텔 화재 사건 발생 시기 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235284, 235274, 235292, 235284, 235315, 235248, 107, 109, 141, 106, 1645, 43761, 238325, 83942, 241411, 25419, 238360, 17309, 239056, 205209, 27941, 236386, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:40542 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:21:29 engine.py:275] Added request cmpl-15437b6488884c1cb19cb531fbe5e70f-0.
INFO 02-16 20:21:30 logger.py:39] Received request cmpl-bf64bdc56e2b4433ac2622f53cfbd696-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:21:30 <end_of_turn>\n\n    <start_of_turn>user 부산 호텔 화재 사건 발생 장소 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235284, 235274, 235292, 235304, 235276, 235248, 107, 109, 141, 106, 1645, 43761, 238325, 83942, 241411, 25419, 238360, 17309, 239056, 205209, 60318, 237433, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:40542 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:21:30 engine.py:275] Added request cmpl-bf64bdc56e2b4433ac2622f53cfbd696-0.
INFO 02-16 20:21:31 metrics.py:455] Avg prompt throughput: 450.2 tokens/s, Avg generation throughput: 38.5 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.1%, CPU KV cache usage: 0.0%.
INFO 02-16 20:21:31 logger.py:39] Received request cmpl-82cf8251aa8e43d3b45117bd26a959a8-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:21:31 <end_of_turn>\n\n    <start_of_turn>user 부산 호텔 화재 사건의 원인 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235284, 235274, 235292, 235304, 235274, 235248, 107, 109, 141, 106, 1645, 43761, 238325, 83942, 241411, 25419, 238360, 17309, 239056, 236137, 68586, 236589, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:40542 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:21:31 engine.py:275] Added request cmpl-82cf8251aa8e43d3b45117bd26a959a8-0.
INFO 02-16 20:21:33 logger.py:39] Received request cmpl-9245c71abbdd41c1b8cca9afca5d22c2-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:21:33 <end_of_turn>\n\n    <start_of_turn>user 부산 호텔 화재 사건으로 인한 피해 규모 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235284, 235274, 235292, 235304, 235304, 235248, 107, 109, 141, 106, 1645, 43761, 238325, 83942, 241411, 25419, 238360, 17309, 239056, 26291, 30743, 236511, 99742, 237138, 235248, 240753, 237551, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:40542 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:21:33 engine.py:275] Added request cmpl-9245c71abbdd41c1b8cca9afca5d22c2-0.
INFO 02-16 20:21:34 logger.py:39] Received request cmpl-7dcc166a2e8241f3b964fe7d4c9076ee-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:21:34 <end_of_turn>\n\n    <start_of_turn>user 부산 호텔 화재 사건에 대한 공식 조사 결과 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235284, 235274, 235292, 235304, 235310, 235248, 107, 109, 141, 106, 1645, 43761, 238325, 83942, 241411, 25419, 238360, 17309, 239056, 236179, 71100, 194301, 42916, 236417, 161050, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:40542 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:21:34 engine.py:275] Added request cmpl-7dcc166a2e8241f3b964fe7d4c9076ee-0.
INFO 02-16 20:21:45 metrics.py:455] Avg prompt throughput: 104.5 tokens/s, Avg generation throughput: 16.9 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:21:55 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:24:42 logger.py:39] Received request cmpl-4d5f1b2228ec4fb2bab585d7a0ca42fe-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 카카오와 네이버의 주가를 비교해주고, 앞으로의 전망을 예측해줘 <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 73834, 238222, 237410, 237807, 123722, 210738, 236137, 40712, 236361, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 192757, 26291, 236137, 31087, 240547, 236392, 71277, 241656, 237138, 244669, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:36840 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:24:42 engine.py:275] Added request cmpl-4d5f1b2228ec4fb2bab585d7a0ca42fe-0.
INFO 02-16 20:24:42 metrics.py:455] Avg prompt throughput: 195.7 tokens/s, Avg generation throughput: 0.2 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 2.5%, CPU KV cache usage: 0.0%.
INFO 02-16 20:24:54 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 7.7 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:25:04 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:28:46 logger.py:39] Received request cmpl-166cae5a17c34ad3924650e01ee98d3c-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 서버사이드 프로그래밍에 대해 알려줘 <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236179, 142192, 78183, 238994, 244669, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:36154 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:28:46 engine.py:275] Added request cmpl-166cae5a17c34ad3924650e01ee98d3c-0.
INFO 02-16 20:28:48 logger.py:39] Received request cmpl-115d4b249ec947ebbed870231dfc7dbd-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:28:48 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍의 정의 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235284, 235321, 235292, 235310, 235321, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236137, 35467, 236137, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:36154 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:28:48 engine.py:275] Added request cmpl-115d4b249ec947ebbed870231dfc7dbd-0.
INFO 02-16 20:28:49 metrics.py:455] Avg prompt throughput: 348.1 tokens/s, Avg generation throughput: 32.2 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:28:49 logger.py:39] Received request cmpl-2e61b6cddab042e5bb597609ac79b4f2-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:28:49 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍 언어 예시 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235284, 235321, 235292, 235310, 235315, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 171754, 236770, 71277, 236569, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:36154 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:28:49 engine.py:275] Added request cmpl-2e61b6cddab042e5bb597609ac79b4f2-0.
INFO 02-16 20:28:50 logger.py:39] Received request cmpl-5d337b3f8a8740c388370bb904d59298-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:28:50 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍의 역할 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235284, 235321, 235292, 235308, 235276, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236137, 61169, 238080, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:36154 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:28:50 engine.py:275] Added request cmpl-5d337b3f8a8740c388370bb904d59298-0.
INFO 02-16 20:28:52 logger.py:39] Received request cmpl-33f4efe4d7934a6498b5dd2a7bf0daf8-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:28:52 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍과 클라이언트사이드 프로그래밍의 차이점 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235284, 235321, 235292, 235308, 235284, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 237233, 91940, 122717, 239753, 236859, 236417, 217534, 58510, 93674, 238608, 243903, 236137, 91292, 235832, 239158, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:36154 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:28:52 engine.py:275] Added request cmpl-33f4efe4d7934a6498b5dd2a7bf0daf8-0.
INFO 02-16 20:28:56 logger.py:39] Received request cmpl-d2ae59897cfd44ada215b939795286b2-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        웹 프로그래밍에서서버 사이드/클리아언트 사이드는 엄청난 의미를 가진다.왜냐하면 어느쪽에 중심을 두느냐에 따라 프로젝트의 방향이 완전히 다르기때문이다.1. 클라이언트 사이드(Client-Side)-클라이언트(사용자) 측에서 처리하는 것.클라이언트가 입력한것을 수신해서 HTML로 만들어서 크롬과 같은 어플리케이션에 해석해서 표시.대표적으로 자바스크립트(Javascript)이 있다.2. 서버 사이드(Server-Side)-서버(제공자) 측에서 즉시 처리하는 것.서버 사이드는클라이언트로 보낼\xa0웹 페이지(HTML,\xa0JavaScript 등이 담긴)를\xa0만들며,정말 중요한 작업들(사용자 유효성, DB 관련 등)을 수행한다.대표적인 언어는 Java, PHP, Ruby, Python, Node.js 등을 언급할 수 있다.즉,서버와클라이언트는 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.클라이언트 사이드 언어를 다루고 그에 관련된 개발자를= 프론트 엔드서버 사이드 언어를 다루고 그에 관련된 개발자= 백엔드라 부른다.Recommand Posting For you Guys* PHP란 대체 무엇인가..?* 프론트 개발자가 알아야할 기술이 뭐지?* 프로토컬, IP, 도메인네임 그게 다 뭔데?* JSON 대체 뭐하는 애야..?', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 237941, 58510, 93674, 238608, 243903, 22803, 236554, 238364, 160590, 237135, 235283, 239483, 140801, 239753, 236859, 160590, 237135, 236214, 235248, 241490, 239151, 240198, 223616, 236791, 23248, 237589, 236039, 235265, 242940, 243383, 123472, 53355, 241039, 240734, 236179, 47250, 239308, 236392, 93828, 241039, 243383, 236179, 156976, 132880, 242989, 236859, 236137, 51806, 240112, 235832, 123248, 232523, 32048, 238500, 236386, 238740, 237465, 61742, 235265, 235274, 235265, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 7817, 239483, 122717, 239753, 236859, 235278, 236417, 237545, 236645, 235275, 235248, 241656, 22803, 168788, 40284, 29599, 235265, 239483, 122717, 239753, 236859, 236361, 120618, 236511, 237506, 236392, 22618, 237502, 206666, 19319, 236375, 128047, 236770, 236554, 94177, 244875, 237233, 132929, 53355, 239135, 236432, 239814, 146689, 236179, 56787, 239465, 206666, 100280, 236569, 235265, 236800, 238946, 90621, 34103, 238131, 161615, 239837, 236859, 235278, 95661, 235275, 235832, 69581, 235265, 235284, 235265, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 7817, 236554, 238364, 235278, 236939, 237495, 236645, 235275, 235248, 241656, 22803, 235248, 242579, 236569, 168788, 40284, 29599, 235265, 236554, 238364, 160590, 237135, 236214, 239483, 122717, 239753, 236859, 236375, 29283, 245186, 236338, 237941, 106191, 235278, 11271, 235269, 236338, 44980, 73143, 235832, 205799, 241615, 235275, 236791, 236338, 237598, 237290, 238986, 235269, 236864, 238989, 215134, 236511, 211896, 237290, 235278, 236417, 237545, 236645, 46355, 241078, 237154, 235269, 13986, 187003, 73143, 235275, 236392, 22618, 238356, 78949, 235265, 236800, 238946, 85024, 171754, 236770, 236214, 12071, 235269, 29617, 235269, 39671, 235269, 21237, 235269, 13116, 235265, 2833, 73143, 236392, 171754, 240115, 238080, 22618, 69581, 235265, 242579, 235269, 236554, 238364, 237807, 239483, 122717, 239753, 236859, 236214, 31288, 106191, 236375, 55154, 236375, 134512, 242780, 236405, 239814, 146689, 236392, 153422, 236464, 181539, 22618, 69581, 235265, 239483, 122717, 239753, 236859, 160590, 237135, 171754, 236770, 236791, 32048, 238949, 236464, 20350, 236179, 187003, 238602, 227613, 236645, 236791, 235293, 58510, 240405, 236859, 209560, 237135, 236554, 238364, 160590, 237135, 171754, 236770, 236791, 32048, 238949, 236464, 20350, 236179, 187003, 238602, 227613, 236645, 235293, 124559, 241167, 237135, 236950, 43761, 239296, 236039, 235265, 987, 6000, 121514, 1699, 692, 36836, 235287, 29617, 240136, 26801, 238308, 60331, 242513, 236589, 236361, 95879, 235287, 58510, 240405, 236859, 227613, 184819, 78183, 236655, 238305, 238080, 213222, 235832, 235248, 245365, 236183, 158757, 132880, 238772, 241725, 235269, 9790, 235269, 50316, 238519, 236589, 239156, 238700, 20350, 237458, 32048, 235248, 247291, 238266, 158757, 11384, 26801, 238308, 235248, 245365, 40284, 122096, 238305, 95879], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:50018 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:28:56 engine.py:275] Added request cmpl-d2ae59897cfd44ada215b939795286b2-0.
INFO 02-16 20:28:56 logger.py:39] Received request cmpl-4959ee8f4afb465c891ec25fb4fb5207-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        \n![](https://velog.velcdn.com/images/hope1213/post/54bce33a-07d8-4d3d-96c5-6a99b9d9cdc7/image.png)\n\n웹 개발을 할 때 가장 중요한 결정 중 하나는 어떤 작업을 서버 사이드(Server-side)에서 처리할지, 클라이언트 사이드(Client-side)에서 처리할지를 결정하는 것입니다. 이 글에서는 서버 사이드와 클라이언트 사이드의 차이점, 각 방식의 장단점, 그리고 어떤 상황에서 어떤 방식을 선택해야 하는지에 대해 살펴보겠습니다.\n\n#### 서버 사이드(Server-side)란?\n\n서버 사이드 프로그래밍은 웹 서버에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 클라이언트(사용자의 브라우저)에서 요청을 받을 때 실행됩니다. 서버 사이드 스크립트는 데이터베이스에 접근하고, 데이터를 처리하고, HTML 페이지를 동적으로 생성하는 데 사용됩니다.\n즉 웹에서 서버와 클라이언트는 정해진 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.\n\n\n**주요 언어 및 기술:**\n![](https://velog.velcdn.com/images/hope1213/post/6f8e3e86-7b7d-453a-8684-da3898c25af4/image.png)\n\n- PHP\n- Python (Django, Flask)\n- Ruby (Ruby on Rails)\n- Java (Spring)\n- Node.js\n\n**장점:**\n1. **보안**: 중요한 로직과 데이터베이스 접근이 서버에서 처리되어 클라이언트에서 접근할 수 없습니다.\n2. **데이터베이스 접근**: 서버에서 직접 데이터베이스와 상호작용할 수 있어 데이터 처리와 저장이 용이합니다.\n3. **호환성**: 모든 클라이언트가 동일한 서버 측 코드를 실행하므로 브라우저 호환성 문제를 줄일 수 있습니다.\n\n**단점:**\n1. **서버 부하**: 모든 처리가 서버에서 이루어지기 때문에 서버의 부하가 증가할 수 있습니다.\n2. **응답 시간**: 클라이언트가 요청을 보내고 서버가 응답할 때까지 시간이 걸릴 수 있습니다.\n\n#### 클라이언트 사이드(Client-side)란?\n\n클라이언트 사이드 프로그래밍은 사용자의 브라우저에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 HTML, CSS, JavaScript로 작성되며, 사용자의 인터페이스를 조작하고 사용자와 상호작용합니다.\n\n![](https://velog.velcdn.com/images/hope1213/post/d9319a2f-6c80-477b-987e-2102e2d24bbe/image.png) 일반적으로 Chrome과 같은 웹브라우저는 굉장히 많은 메모리를 차지합니다.\n\n단순히 탐색을 진행했을 뿐인데 다른 프로세스에 비해 굉장히 많은 메모리를 사용한다는 점에서 의문을 가질수 있습니다. 그 이유는 현재 Web쪽에 무거운 처리 대부분은 클라이언트 사이드 언어로 작업하기 때문입니다.\n\n\n**주요 언어 및 기술:**\n- HTML\n- CSS\n- JavaScript (React, Angular, Vue.js)\n\n\n**장점:**\n1. **빠른 응답**: 서버에 요청을 보내지 않고 브라우저에서 바로 처리하므로 응답 속도가 빠릅니다.\n2. **서버 부하 감소**: 많은 작업을 클라이언트에서 처리함으로써 서버의 부담을 줄일 수 있습니다.\n3. **향상된 사용자 경험**: 애니메이션, 실시간 업데이트 등 사용자 인터페이스를 더욱 풍부하게 만들 수 있습니다.\n\n**단점:**\n1. **보안 문제**: 클라이언트 사이드 코드가 브라우저에 노출되므로 보안에 취약할 수 있습니다.\n2. **브라우저 호환성**: 다양한 브라우저에서 동일하게 작동하도록 코드 작성이 어려울 수 있습니다.\n3. **제한된 성능**: 클라이언트의 기기 성능에 따라 처리 속도가 달라질 수 있습니다.\n\n#### 언제 서버 사이드를 선택해야 할까?\n\n- **보안이 중요한 경우**: 민감한 데이터나 중요한 비즈니스 로직이 포함된 경우 서버 사이드 처리가 필요합니다.\n- **데이터베이스 작업**: 데이터베이스와의 상호작용이 빈번하게 이루어질 때 서버 사이드가 적합합니다.\n- **복잡한 처리**: 복잡한 계산이나 대량의 데이터 처리가 필요할 때 서버 측에서 처리하는 것이 좋습니다.\n\n#### 언제 클라이언트 사이드를 선택해야 할까?\n\n- **실시간 상호작용**: 사용자와의 실시간 상호작용이 중요한 경우 클라이언트 사이드 처리가 필요합니다.\n- **인터페이스 동적 처리**: 동적인 사용자 인터페이스, 애니메이션, 실시간 업데이트 등은 클라이언트 사이드에서 처리하는 것이 좋습니다.\n- **서버 부하 분산**: 서버의 부하를 줄이고자 할 때 일부 처리를 클라이언트 사이드로 이동할 수 있습니다.\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 32463, 235274, 235284, 235274, 235304, 235283, 2729, 235283, 235308, 235310, 235268, 532, 235304, 235304, 235250, 235290, 235276, 235324, 235258, 235321, 235290, 235310, 235258, 235304, 235258, 235290, 235315, 235318, 235260, 235308, 235290, 235318, 235250, 235315, 235315, 235268, 235315, 235258, 235315, 88911, 235324, 235283, 2502, 235265, 7424, 235275, 109, 237941, 227613, 236392, 69225, 54715, 126277, 215134, 236511, 72510, 236864, 47250, 113859, 236214, 53355, 242251, 211896, 236392, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 2043, 235275, 22803, 168788, 238080, 236183, 235269, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 2043, 235275, 22803, 168788, 238080, 231588, 72510, 236864, 40284, 121393, 235265, 11464, 153818, 180860, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 91292, 235832, 239158, 235269, 163558, 51806, 238186, 236137, 60318, 238335, 239158, 235269, 213512, 53355, 242251, 36203, 240054, 22803, 53355, 242251, 51806, 238186, 236392, 134472, 149735, 109976, 236183, 236179, 142192, 130412, 245435, 237036, 241716, 21743, 235265, 109, 3308, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 2043, 235275, 240136, 235336, 109, 236554, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 31288, 55154, 238364, 22803, 191754, 156610, 215441, 236791, 198766, 40284, 109241, 223616, 43395, 235265, 11464, 215441, 236214, 91940, 122717, 239753, 236859, 235278, 236417, 237545, 236645, 236137, 129669, 236950, 237312, 238721, 235275, 22803, 227038, 236392, 101260, 236392, 54715, 191754, 129090, 235265, 55154, 238364, 160590, 237135, 32275, 237611, 239837, 236859, 236214, 112762, 239571, 131006, 236179, 165866, 239969, 48060, 235269, 112762, 236791, 168788, 48060, 235269, 19319, 106191, 236791, 49697, 90621, 116518, 40284, 65503, 61943, 129090, 235265, 108, 242579, 31288, 22803, 55154, 238364, 237807, 91940, 122717, 239753, 236859, 236214, 35467, 237138, 237589, 31288, 106191, 236375, 55154, 236375, 134512, 242780, 236405, 239814, 146689, 236392, 153422, 236464, 181539, 22618, 69581, 235265, 110, 688, 237014, 237526, 171754, 236770, 60709, 213222, 66058, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 32463, 235274, 235284, 235274, 235304, 235283, 2729, 235283, 235318, 235266, 235321, 235249, 235304, 235249, 235321, 235318, 235290, 235324, 235268, 235324, 235258, 235290, 235310, 235308, 235304, 235250, 235290, 235321, 235318, 235321, 235310, 235290, 1335, 235304, 235321, 235315, 235321, 235260, 235284, 235308, 2518, 235310, 235283, 2502, 235265, 7424, 235275, 109, 235290, 29617, 108, 235290, 21237, 591, 125068, 235269, 57155, 235275, 108, 235290, 39671, 591, 53481, 611, 88887, 235275, 108, 235290, 12071, 591, 13198, 235275, 108, 235290, 13116, 235265, 2833, 109, 688, 237199, 239158, 66058, 108, 235274, 235265, 5231, 237036, 238179, 95573, 215134, 236511, 54868, 239385, 237233, 112762, 239571, 131006, 165866, 239969, 235832, 55154, 238364, 22803, 168788, 141048, 91940, 122717, 239753, 236859, 22803, 165866, 239969, 238080, 22618, 176124, 235265, 108, 235284, 235265, 5231, 238266, 90081, 239571, 131006, 165866, 239969, 95573, 55154, 238364, 22803, 143636, 240449, 112762, 239571, 131006, 237807, 36203, 238033, 238115, 237545, 238080, 22618, 215995, 112762, 168788, 237807, 143077, 235832, 120340, 235832, 43395, 235265, 108, 235304, 235265, 5231, 238033, 239457, 237154, 95573, 87997, 91940, 122717, 239753, 236859, 236361, 49697, 236666, 236511, 55154, 238364, 235248, 241656, 215441, 236791, 191754, 236345, 212026, 129669, 236950, 237312, 238721, 83942, 239457, 237154, 132793, 236791, 184434, 236666, 22618, 55496, 235265, 109, 688, 238335, 239158, 66058, 108, 235274, 235265, 5231, 236554, 238364, 43761, 236345, 95573, 87997, 168788, 236361, 55154, 238364, 22803, 11464, 238949, 236770, 236183, 236386, 147801, 55154, 238364, 236137, 43761, 236345, 236361, 160284, 236361, 238080, 22618, 55496, 235265, 108, 235284, 235265, 5231, 240981, 241305, 118058, 95573, 91940, 122717, 239753, 236859, 236361, 227038, 236392, 29283, 238151, 236464, 55154, 238364, 236361, 224047, 241305, 238080, 54715, 109535, 118058, 235832, 180850, 241949, 22618, 55496, 235265, 109, 3308, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 2043, 235275, 240136, 235336, 109, 239483, 122717, 239753, 236859, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 61943, 236645, 236137, 129669, 236950, 237312, 238721, 22803, 191754, 156610, 215441, 236791, 198766, 40284, 109241, 223616, 43395, 235265, 11464, 215441, 236214, 19319, 235269, 26862, 235269, 22978, 236375, 198766, 238070, 238986, 235269, 61943, 236645, 236137, 227397, 67650, 236354, 236791, 42916, 238115, 48060, 61943, 236645, 237807, 36203, 238033, 238115, 237545, 43395, 235265, 109, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 32463, 235274, 235284, 235274, 235304, 235283, 2729, 235283, 235258, 235315, 235304, 235274, 235315, 235250, 235284, 235266, 235290, 235318, 235260, 235321, 235276, 235290, 235310, 235324, 235324, 235268, 235290, 235315, 235321, 235324, 235249, 235290, 235284, 235274, 235276, 235284, 235249, 235284, 235258, 235284, 235310, 12479, 235283, 2502, 235265, 7424, 235275, 234541, 90621, 23133, 237233, 132929, 31288, 238997, 236950, 237312, 238721, 236214, 235248, 250016, 237199, 239055, 139148, 75630, 237551, 176947, 91292, 236183, 43395, 235265, 109, 238335, 239937, 239055, 235248, 242850, 238931, 236392, 83453, 238356, 238267, 236392, 235248, 242591, 236589, 238266, 102708, 132880, 237533, 236354, 236179, 51732, 237138, 235248, 250016, 237199, 239055, 139148, 75630, 237551, 176947, 61943, 78949, 236214, 131901, 22803, 23594, 237465, 236392, 23248, 239574, 236669, 55496, 235265, 20350, 11464, 237766, 236214, 200944, 4556, 240734, 236179, 60331, 238154, 238138, 168788, 26801, 237092, 238304, 236648, 91940, 122717, 239753, 236859, 160590, 237135, 171754, 236770, 236375, 211896, 72159, 119518, 47555, 235265, 110, 688, 237014, 237526, 171754, 236770, 60709, 213222, 66058, 108, 235290, 19319, 108, 235290, 26862, 108, 235290, 22978, 591, 22469, 235269, 62173, 235269, 38244, 235265, 2833, 235275, 110, 688, 237199, 239158, 66058, 108, 235274, 235265, 5231, 241632, 239296, 224047, 241305, 95573, 55154, 238364, 236179, 227038, 236392, 29283, 238151, 236183, 48682, 236464, 129669, 236950, 237312, 238721, 22803, 55393, 236375, 168788, 236345, 212026, 224047, 241305, 125507, 236840, 236361, 235119, 245257, 12957, 235265, 108, 235284, 235265, 5231, 236554, 238364, 43761, 236345, 99091, 237433, 95573, 139148, 211896, 236392, 91940, 122717, 239753, 236859, 22803, 168788, 238467, 26291, 242974, 55154, 238364, 236137, 43761, 240599, 236392, 184434, 236666, 22618, 55496, 235265, 108, 235304, 235265, 5231, 240112, 237047, 238602, 61943, 236645, 43033, 240521, 95573, 122096, 221570, 235269, 61928, 210450, 142995, 238266, 78749, 73143, 61943, 236645, 227397, 67650, 236354, 236791, 70231, 243093, 209727, 237092, 101969, 128047, 22618, 55496, 235265, 109, 688, 238335, 239158, 66058, 108, 235274, 235265, 5231, 237036, 238179, 132793, 95573, 91940, 122717, 239753, 236859, 160590, 237135, 215441, 236361, 129669, 236950, 237312, 238721, 236179, 61138, 238483, 238070, 212026, 29283, 238179, 236179, 174375, 239618, 238080, 22618, 55496, 235265, 108, 235284, 235265, 5231, 238997, 236950, 237312, 238721, 83942, 239457, 237154, 95573, 32048, 238780, 236511, 129669, 236950, 237312, 238721, 22803, 49697, 236666, 101969, 63806, 237358, 236345, 153145, 215441, 198766, 235832, 53355, 238994, 239254, 22618, 55496, 235265, 108, 235304, 235265, 5231, 236939, 236511, 238602, 64301, 239474, 95573, 91940, 122717, 239753, 236859, 236137, 28693, 236386, 64301, 239474, 236179, 156976, 168788, 125507, 236840, 236361, 123083, 236950, 239574, 22618, 55496, 235265, 109, 3308, 171754, 236939, 55154, 238364, 160590, 237135, 236791, 134472, 149735, 69225, 239303, 235336, 109, 235290, 5231, 237036, 238179, 235832, 215134, 236511, 95917, 95573, 153107, 239199, 236511, 112762, 236915, 215134, 236511, 51732, 238894, 236405, 236354, 54868, 239385, 235832, 157329, 238602, 95917, 55154, 238364, 160590, 237135, 168788, 236361, 126942, 43395, 235265, 108, 235290, 5231, 238266, 90081, 239571, 131006, 211896, 95573, 112762, 239571, 131006, 237807, 236137, 36203, 238033, 238115, 237545, 235832, 235248, 241266, 238628, 101969, 11464, 238949, 236770, 239574, 54715, 55154, 238364, 160590, 237135, 236361, 99797, 237961, 43395, 235265, 108, 235290, 5231, 239205, 241533, 236511, 168788, 95573, 122447, 241533, 236511, 74715, 238325, 180521, 26801, 240833, 236137, 112762, 168788, 236361, 126942, 238080, 54715, 55154, 238364, 235248, 241656, 22803, 168788, 40284, 93205, 106509, 21743, 235265, 109, 3308, 171754, 236939, 91940, 122717, 239753, 236859, 160590, 237135, 236791, 134472, 149735, 69225, 239303, 235336, 109, 235290, 5231, 238146, 210450, 36203, 238033, 238115, 237545, 95573, 61943, 236645, 237807, 236137, 61928, 210450, 36203, 238033, 238115, 237545, 235832, 215134, 236511, 95917, 91940, 122717, 239753, 236859, 160590, 237135, 168788, 236361, 126942, 43395, 235265, 108, 235290, 5231, 236589, 237524, 67650, 236354, 49697, 237603, 168788, 95573, 49697, 85024, 61943, 236645, 227397, 67650, 236354, 235269, 122096, 221570, 235269, 61928, 210450, 142995, 238266, 78749, 73143, 236648, 91940, 122717, 239753, 236859, 160590, 237135, 22803, 168788, 40284, 93205, 106509, 21743, 235265, 108, 235290, 5231, 236554, 238364, 43761, 236345, 70754, 238325, 95573, 55154, 238364, 236137, 43761, 236345, 236791, 184434, 224907, 236645, 69225, 54715, 32929, 237092, 168788, 236791, 91940, 122717, 239753, 236859, 160590, 237135, 236375, 195532, 238080, 22618, 55496, 235265, 108], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:50022 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:28:56 logger.py:39] Received request cmpl-cfb987f53a104b979b1cb5c8d908a263-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        서버사이드스크립트언ㅇ, JSP , ASP, PHP의 차이점은?\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\nJSP, ASP, PHP는 서버사이드스크립트언어의 대표적인 언어들입니다. 스크립트언어란, SW를 직접적으로 개발하는 일반적인 프로그래밍 언어와 달리 이미 만들어진 SW를 제어하는 용도로 사용됩니다.\n\u200b\n\u200b\n예를 들어 일반적인 사용자를 클라이언트라 불르고 서버와 클라이언트는 서로 통신합니다. 클라이언트가 특정 웹사이트에 접속하려고하면 클라이언트에서 보낸 요청이 서버로 가고 서버에서 클라이언트로 응답합니다. 이때 서버측에 있는 프로그램을 서버사이드 프로그램이라고 합니다. 반대의 개념으로는 클라이언트사이드언어와 클라이언트사이드가 있습니다.\n\u200b\n\u200b\n언어별 차이점은?\n\u200b\n\u200b\n\u200b\n현재 우리나라는 JAVA의 점유율이 압도적으로 높은데요. 자바의 점유율을 높인 것이 바로 JSP입니다. JSP는 원래 Java Server Page의 약자였지만 오픈소스이기 때문에 오라클사의 상표권문제로 Jakarta server page로 이름 바꿔 여전히 JSP라 불립니다. JSP는 주로 대규모 기업용 시스템 구축에 사용됩니다. 안정적이고 유지보수가 쉽기 때문입니다.\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\nPHP는 Personal Home Page Tools로 웹 페이지 제작시 기본적으로 웹관련 함수들이 많아 생산성이 높다는 점을 장점으로 많이 사용하고 있습니다. 개발속도가 빠르고 배포가 간편해서 주로 쇼핑몰같은 가볍고 규모가 작은 웹페이지에서 많이 사용됩니다.\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\nASP는 Active Server Pages의 약자이며, 마이크로소프트가 제작한 서버사이드스크립트엔진입니다. 국내에선 사용자가 적은데 이유는 윈도우서버에서 강점을 보이며 리눅스환경에서는 다른 서버사이드언어들의 점유율이 높기 때문입니다. 국내서버환경은 비용문제로 리눅스의 점유율이 높기 때문에 국내에서의 점유율은 높지 않습니다. 다만 윈도우환경에서는 압도적인 강점을 보이며 PHP와 JSP는 제한된 언어에서 구동되지만 ASP는 윈도우에서 지원하는 모든 언어를 웹에서 쓸 수 있도록 하는 장점이 있습니다.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 236554, 238364, 236417, 217534, 161615, 239837, 236859, 239753, 241805, 235269, 196371, 1688, 48623, 235269, 29617, 236137, 91292, 235832, 239158, 236648, 235336, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 187655, 235269, 48623, 235269, 29617, 236214, 55154, 238364, 236417, 217534, 161615, 239837, 236859, 239753, 236770, 236137, 26801, 238946, 85024, 171754, 236770, 237290, 47555, 235265, 32275, 237611, 239837, 236859, 239753, 236770, 240136, 235269, 13179, 236791, 143636, 240449, 90621, 227613, 40284, 234541, 85024, 58510, 93674, 238608, 243903, 171754, 236770, 237807, 123083, 236432, 22573, 128047, 236770, 237589, 13179, 236791, 31850, 236770, 40284, 120340, 236840, 236375, 61943, 129090, 235265, 108, 235421, 108, 235421, 108, 238748, 236791, 153935, 234541, 85024, 61943, 236645, 236791, 91940, 122717, 239753, 236859, 236950, 83133, 238500, 236464, 55154, 238364, 237807, 91940, 122717, 239753, 236859, 236214, 55154, 236375, 83160, 237502, 43395, 235265, 91940, 122717, 239753, 236859, 236361, 94492, 236864, 31288, 236417, 78749, 236179, 165866, 238982, 227860, 236464, 123472, 91940, 122717, 239753, 236859, 22803, 29283, 243927, 227038, 235832, 55154, 238364, 236375, 23248, 236464, 55154, 238364, 22803, 91940, 122717, 239753, 236859, 236375, 224047, 241305, 43395, 235265, 11464, 238740, 55154, 238364, 241656, 236179, 72941, 226417, 236392, 55154, 238364, 236417, 217534, 226417, 235832, 112778, 179694, 235265, 78821, 236800, 236137, 49532, 241631, 26291, 236214, 91940, 122717, 239753, 236859, 236417, 217534, 239753, 236770, 237807, 91940, 122717, 239753, 236859, 236417, 217534, 236361, 55496, 235265, 108, 235421, 108, 235421, 108, 239753, 236770, 239793, 91292, 235832, 239158, 236648, 235336, 108, 235421, 108, 235421, 108, 235421, 108, 238513, 238360, 93241, 236915, 139978, 160705, 236137, 131901, 237766, 241938, 235832, 235248, 242189, 236840, 90621, 187800, 236648, 238266, 237526, 235265, 34103, 238131, 236137, 131901, 237766, 241938, 236392, 187800, 236589, 93205, 55393, 236375, 196371, 47555, 235265, 196371, 236214, 68586, 238608, 12071, 13506, 6974, 236137, 151245, 236645, 239867, 95091, 44245, 244142, 237433, 236354, 235832, 236386, 147801, 44245, 236950, 239483, 236417, 236137, 36203, 238946, 239765, 237465, 236939, 236375, 35285, 6934, 2602, 236375, 145887, 55393, 246974, 41896, 232523, 196371, 236950, 83133, 239837, 12957, 235265, 196371, 236214, 40712, 236375, 26801, 240753, 237551, 28693, 238391, 237545, 27941, 202429, 49061, 240130, 236179, 61943, 129090, 235265, 70685, 236864, 237603, 224907, 46355, 236183, 237036, 236669, 236361, 235248, 243274, 236386, 119518, 47555, 235265, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 29697, 236214, 15103, 4566, 6974, 20506, 236375, 31288, 106191, 31850, 238115, 236569, 28693, 238744, 90621, 31288, 237956, 240429, 200901, 94525, 99805, 236655, 50390, 238325, 237154, 235832, 187800, 161509, 131901, 236392, 60318, 239158, 26291, 99805, 235832, 61943, 48060, 55496, 235265, 227613, 238982, 236840, 236361, 235119, 238500, 236464, 50548, 238199, 236361, 127149, 239813, 206666, 40712, 236375, 235248, 241830, 241496, 242515, 239012, 236648, 23248, 249270, 236464, 235248, 240753, 237551, 236361, 63806, 236648, 31288, 83137, 22803, 99805, 235832, 61943, 129090, 235265, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 47263, 236214, 19380, 13506, 27779, 236137, 151245, 236645, 225022, 235269, 41645, 227195, 236375, 237433, 237964, 236859, 236361, 31850, 238115, 236511, 55154, 238364, 236417, 217534, 161615, 239837, 236859, 241167, 237589, 47555, 235265, 74116, 238151, 236179, 237700, 61943, 184819, 99797, 236648, 238266, 11464, 237766, 236214, 235248, 242984, 236840, 237312, 236554, 238364, 22803, 84608, 239158, 236392, 29283, 225022, 63102, 250412, 236354, 239457, 237392, 180860, 102708, 55154, 238364, 236417, 217534, 239753, 236770, 132642, 131901, 237766, 241938, 235832, 187800, 236386, 119518, 47555, 235265, 74116, 238151, 236554, 238364, 239457, 237392, 236648, 51732, 237545, 237465, 236939, 236375, 63102, 250412, 236354, 236137, 131901, 237766, 241938, 235832, 187800, 236386, 147801, 74116, 238151, 22803, 236137, 131901, 237766, 241938, 236648, 187800, 236183, 187132, 235265, 32048, 237598, 235248, 242984, 236840, 237312, 239457, 237392, 180860, 235248, 242189, 236840, 85024, 84608, 239158, 236392, 29283, 225022, 29617, 237807, 196371, 236214, 31850, 236511, 238602, 171754, 236770, 22803, 49061, 237358, 238070, 95091, 48623, 236214, 235248, 242984, 236840, 237312, 22803, 224790, 40284, 87997, 171754, 236770, 236791, 31288, 22803, 235248, 245471, 22618, 21167, 153145, 109976, 60318, 239158, 235832, 55496, 235265], lora_request: None, prompt_adapter_request: None.
INFO 02-16 20:28:56 logger.py:39] Received request cmpl-1ae4271cf7ce4d65b53c88897be16c72-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        웹/앱 외주 개발 시 꼭 알아야 하는 IT용어 - 웹\n이 작업을 위해 서버에서 사용하는 개발 언어들이 있는데요. 대표적인 개발 언어(서버사이드 스크립트 언어)로는 PHP, 파이썬(Python), 노드(Node.js), 루비(Ruby) 등이 있습니다. 앱/웹 서비스의 모든 비즈니스 로직은 서버 쪽 언어를 통해 구현되고 있지', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 237941, 235283, 243582, 136201, 237014, 227613, 27941, 235248, 245267, 78183, 236655, 238305, 109976, 6349, 237545, 236770, 728, 31288, 108, 235832, 211896, 236392, 93806, 55154, 238364, 22803, 61943, 40284, 227613, 171754, 236770, 94525, 72941, 238266, 237526, 235265, 26801, 238946, 85024, 227613, 171754, 236770, 235278, 236554, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 171754, 236770, 235275, 236375, 236214, 29617, 235269, 59994, 235832, 246881, 235278, 27922, 823, 61138, 237135, 235278, 3432, 235265, 2833, 823, 200936, 237584, 235278, 53481, 235275, 73143, 235832, 55496, 235265, 235248, 243582, 235283, 237941, 206586, 236137, 87997, 51732, 238894, 236405, 236354, 54868, 239385, 236648, 55154, 238364, 235248, 240734, 171754, 236770, 236791, 187118, 49061, 238513, 238070, 236464, 21167, 236183], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:50032 - "POST /v1/completions HTTP/1.1" 200 OK
INFO:     127.0.0.1:50046 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:28:56 engine.py:275] Added request cmpl-4959ee8f4afb465c891ec25fb4fb5207-0.
INFO 02-16 20:28:56 engine.py:275] Added request cmpl-cfb987f53a104b979b1cb5c8d908a263-0.
INFO 02-16 20:28:56 engine.py:275] Added request cmpl-1ae4271cf7ce4d65b53c88897be16c72-0.
INFO 02-16 20:28:56 metrics.py:455] Avg prompt throughput: 275.6 tokens/s, Avg generation throughput: 30.7 tokens/s, Running: 4 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 6.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:29:01 metrics.py:455] Avg prompt throughput: 483.7 tokens/s, Avg generation throughput: 190.6 tokens/s, Running: 4 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 8.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:29:03 logger.py:39] Received request cmpl-ec7c61d6e79c4ee5869cbb4f100f7f11-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ✏️ 서버 사이드(Server-Side)와 클라이언트 사이드(Client-Side)서버 사이드(Server-Side)란\xa0네트워크의 한 방식인 클라이언트-서버 구조에서 서버에서의 처리를 말한다웹에서의 서버 사이드를 간단히 말하자면, 웹 서버에서 하는 작업을 의미한다클라이언트로 요청을 받아 처리하고 처리 결과를 브라우저에 송신, 응답하는 역할을 한다클라이언트 사이드(Client-Side)란, 네트워크의 한 방식인 클라이언트-서버 구조에서 클라이언트의 처리를 말한다웹에서의 클라이언트는, 서버와는 상대되는 개념으로 어떤 서비스를 요청하는 역할을 하게 된다웹 페이지를 요청하는 것은 클라이언트의 역할이라고 말할 수 있다웹 페이지의 요청은 대부분 웹 브라우저가 하게 된다.그렇기 때문에 일반적으로 웹에서의 클라이언트는 웹 브라우저를 의미한다✏️ 데이터의 처리서버 사이드(Server-Side)에서의 처리서버 관리자의 입장에서 데이터 위조의 가능성을 비교적 줄일 수 있다클라이언트 사용자의 입장에서 클라이언트 컴퓨터의 처리 부담이 줄어든다반면 서버 처리 부담이 커져, 서버 비용이 늘어난다클라이언트 사이드(Client-Side)에서의 처리서버 관리자의 입장에서 서버 처리 부담이 적어져, 서버 비용이 줄어든다클라이언트 사용자의 입장에서 클라이언트 컴퓨터의 처리 부담이 높아진다보안에 민감한 데이터의 경우 통신에 대비해 암호화할 필요가 없으므로 암호화 소요가 줄어든다클라이언트 사이드에서 데이터를 위조하기 쉽다[참고 1]위키 백과 - 클라이언트 서버 모델,위키 백과 - 서버 사이드,위키 백과 - 클라이언트 사이드', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 154533, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 235275, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 235275, 236554, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 235275, 240136, 236338, 239156, 236859, 239779, 237611, 236137, 35191, 51806, 238186, 236589, 91940, 122717, 239753, 236859, 235290, 236554, 238364, 49061, 237602, 22803, 55154, 238364, 22803, 236137, 168788, 236791, 72163, 78949, 237941, 22803, 236137, 55154, 238364, 160590, 237135, 236791, 127149, 238335, 239055, 72163, 236345, 236645, 237722, 235269, 31288, 55154, 238364, 22803, 109976, 211896, 236392, 223616, 78949, 239483, 122717, 239753, 236859, 236375, 227038, 236392, 101260, 236655, 168788, 48060, 168788, 161050, 236791, 129669, 236950, 237312, 238721, 236179, 235248, 239673, 237502, 235269, 224047, 241305, 40284, 61169, 238080, 236392, 153422, 239483, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 235275, 240136, 235269, 123722, 236859, 239779, 237611, 236137, 35191, 51806, 238186, 236589, 91940, 122717, 239753, 236859, 235290, 236554, 238364, 49061, 237602, 22803, 91940, 122717, 239753, 236859, 236137, 168788, 236791, 72163, 78949, 237941, 22803, 236137, 91940, 122717, 239753, 236859, 236214, 235269, 55154, 238364, 237807, 236214, 36203, 236800, 156610, 49532, 241631, 26291, 53355, 242251, 206586, 236791, 227038, 40284, 61169, 238080, 236392, 30181, 237458, 95622, 236039, 237941, 106191, 236791, 227038, 40284, 143613, 91940, 122717, 239753, 236859, 236137, 61169, 238080, 235832, 112778, 72163, 238080, 22618, 69581, 237941, 106191, 236137, 227038, 236648, 26801, 237092, 238304, 31288, 129669, 236950, 237312, 238721, 236361, 30181, 237458, 95622, 236039, 235265, 236671, 241838, 236386, 147801, 234541, 90621, 31288, 22803, 236137, 91940, 122717, 239753, 236859, 236214, 31288, 129669, 236950, 237312, 238721, 236791, 223616, 78949, 154533, 112762, 236137, 168788, 236554, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 235275, 22803, 236137, 168788, 236554, 238364, 159838, 236645, 236137, 74209, 237199, 22803, 112762, 41423, 237602, 236137, 153728, 237154, 236392, 51732, 237905, 237603, 184434, 236666, 22618, 69581, 239483, 122717, 239753, 236859, 61943, 236645, 236137, 74209, 237199, 22803, 91940, 122717, 239753, 236859, 235248, 241897, 243032, 237524, 236137, 168788, 43761, 240599, 235832, 184434, 236770, 239227, 236039, 238559, 237722, 55154, 238364, 168788, 43761, 240599, 235832, 134512, 240586, 235269, 55154, 238364, 51732, 237545, 235832, 235248, 240703, 236770, 240198, 236039, 239483, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 235275, 22803, 236137, 168788, 236554, 238364, 159838, 236645, 236137, 74209, 237199, 22803, 55154, 238364, 168788, 43761, 240599, 235832, 99797, 236770, 240586, 235269, 55154, 238364, 51732, 237545, 235832, 184434, 236770, 239227, 236039, 239483, 122717, 239753, 236859, 61943, 236645, 236137, 74209, 237199, 22803, 91940, 122717, 239753, 236859, 235248, 241897, 243032, 237524, 236137, 168788, 43761, 240599, 235832, 187800, 236655, 237589, 236039, 237036, 238179, 236179, 153107, 239199, 236511, 112762, 236137, 95917, 83160, 237502, 236179, 26801, 237584, 237138, 235248, 241560, 238033, 236817, 238080, 126942, 236361, 56341, 237214, 212026, 235248, 241560, 238033, 236817, 44997, 237526, 236361, 184434, 236770, 239227, 236039, 239483, 122717, 239753, 236859, 160590, 237135, 22803, 112762, 236791, 41423, 237602, 72159, 235248, 243274, 236039, 235309, 189764, 235248, 235274, 235307, 237601, 238705, 124559, 237233, 728, 91940, 122717, 239753, 236859, 55154, 238364, 162570, 235269, 237601, 238705, 124559, 237233, 728, 55154, 238364, 160590, 237135, 235269, 237601, 238705, 124559, 237233, 728, 91940, 122717, 239753, 236859, 160590, 237135], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:50032 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:29:03 engine.py:275] Added request cmpl-ec7c61d6e79c4ee5869cbb4f100f7f11-0.
ERROR 02-16 20:29:03 serving_completion.py:112] Error in preprocessing prompt inputs
ERROR 02-16 20:29:03 serving_completion.py:112] Traceback (most recent call last):
ERROR 02-16 20:29:03 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_completion.py", line 104, in create_completion
ERROR 02-16 20:29:03 serving_completion.py:112]     request_prompts, engine_prompts = await self._preprocess_completion(
ERROR 02-16 20:29:03 serving_completion.py:112]                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 20:29:03 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 349, in _preprocess_completion
ERROR 02-16 20:29:03 serving_completion.py:112]     request_prompts = await self._tokenize_prompt_input_or_inputs_async(
ERROR 02-16 20:29:03 serving_completion.py:112]                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 20:29:03 serving_completion.py:112]   File "/opt/anaconda3/lib/python3.12/concurrent/futures/thread.py", line 58, in run
ERROR 02-16 20:29:03 serving_completion.py:112]     result = self.fn(*self.args, **self.kwargs)
ERROR 02-16 20:29:03 serving_completion.py:112]              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 20:29:03 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 326, in _tokenize_prompt_input_or_inputs
ERROR 02-16 20:29:03 serving_completion.py:112]     self._normalize_prompt_text_to_input(
ERROR 02-16 20:29:03 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 183, in _normalize_prompt_text_to_input
ERROR 02-16 20:29:03 serving_completion.py:112]     return self._validate_input(request, input_ids, input_text)
ERROR 02-16 20:29:03 serving_completion.py:112]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 20:29:03 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 246, in _validate_input
ERROR 02-16 20:29:03 serving_completion.py:112]     raise ValueError(
ERROR 02-16 20:29:03 serving_completion.py:112] ValueError: This model's maximum context length is 8192 tokens. However, you requested 8934 tokens (3934 in the messages, 5000 in the completion). Please reduce the length of the messages or completion.
INFO:     127.0.0.1:50018 - "POST /v1/completions HTTP/1.1" 400 Bad Request
INFO 02-16 20:29:03 engine.py:293] Aborted request cmpl-1ae4271cf7ce4d65b53c88897be16c72-0.
INFO 02-16 20:29:03 engine.py:293] Aborted request cmpl-ec7c61d6e79c4ee5869cbb4f100f7f11-0.
INFO 02-16 20:29:03 engine.py:293] Aborted request cmpl-4959ee8f4afb465c891ec25fb4fb5207-0.
INFO 02-16 20:29:13 metrics.py:455] Avg prompt throughput: 51.8 tokens/s, Avg generation throughput: 29.6 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:29:23 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:30:06 logger.py:39] Received request cmpl-aae5c5e037a54774884af9b9aa1b69f8-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 서버사이드 프로그래밍에 대해 알려줘 <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236179, 142192, 78183, 238994, 244669, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53152 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:06 engine.py:275] Added request cmpl-aae5c5e037a54774884af9b9aa1b69f8-0.
INFO 02-16 20:30:08 metrics.py:455] Avg prompt throughput: 245.2 tokens/s, Avg generation throughput: 19.9 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 2.7%, CPU KV cache usage: 0.0%.
INFO 02-16 20:30:09 logger.py:39] Received request cmpl-dade2f1e868145ddbe307b93bd75f889-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:30:09 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍이란 무엇인가 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235304, 235276, 235292, 235276, 235315, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 235832, 240136, 60331, 242513, 236589, 236361, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53152 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:09 engine.py:275] Added request cmpl-dade2f1e868145ddbe307b93bd75f889-0.
INFO 02-16 20:30:10 logger.py:39] Received request cmpl-de86424688f64d788fbd55bc0576c15d-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:30:10 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍의 역할 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235304, 235276, 235292, 235274, 235276, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236137, 61169, 238080, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53152 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:10 engine.py:275] Added request cmpl-de86424688f64d788fbd55bc0576c15d-0.
INFO 02-16 20:30:11 logger.py:39] Received request cmpl-3806aba8621f4b8ba08c2dc56538ffc9-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:30:11 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍 언어 예시 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235304, 235276, 235292, 235274, 235274, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 171754, 236770, 71277, 236569, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53152 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:11 engine.py:275] Added request cmpl-3806aba8621f4b8ba08c2dc56538ffc9-0.
INFO 02-16 20:30:13 logger.py:39] Received request cmpl-ef8e8915bab0403bb9da42c13af53340-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:30:13 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍 프레임워크 예시 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235304, 235276, 235292, 235274, 235304, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 58510, 237990, 238700, 239779, 237611, 71277, 236569, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53152 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:13 engine.py:275] Added request cmpl-ef8e8915bab0403bb9da42c13af53340-0.
INFO 02-16 20:30:13 metrics.py:455] Avg prompt throughput: 410.7 tokens/s, Avg generation throughput: 51.6 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.2%, CPU KV cache usage: 0.0%.
INFO 02-16 20:30:14 logger.py:39] Received request cmpl-856882a1fed14423a95e5d2865076e5a-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:30:14 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍과 클라이언트사이드 프로그래밍의 차이점 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235304, 235276, 235292, 235274, 235310, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 237233, 91940, 122717, 239753, 236859, 236417, 217534, 58510, 93674, 238608, 243903, 236137, 91292, 235832, 239158, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53152 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:14 engine.py:275] Added request cmpl-856882a1fed14423a95e5d2865076e5a-0.
INFO 02-16 20:30:18 logger.py:39] Received request cmpl-127f808c41284f5b92f7669894dd3440-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        웹 프로그래밍에서서버 사이드/클리아언트 사이드는 엄청난 의미를 가진다.왜냐하면 어느쪽에 중심을 두느냐에 따라 프로젝트의 방향이 완전히 다르기때문이다.1. 클라이언트 사이드(Client-Side)-클라이언트(사용자) 측에서 처리하는 것.클라이언트가 입력한것을 수신해서 HTML로 만들어서 크롬과 같은 어플리케이션에 해석해서 표시.대표적으로 자바스크립트(Javascript)이 있다.2. 서버 사이드(Server-Side)-서버(제공자) 측에서 즉시 처리하는 것.서버 사이드는클라이언트로 보낼\xa0웹 페이지(HTML,\xa0JavaScript 등이 담긴)를\xa0만들며,정말 중요한 작업들(사용자 유효성, DB 관련 등)을 수행한다.대표적인 언어는 Java, PHP, Ruby, Python, Node.js 등을 언급할 수 있다.즉,서버와클라이언트는 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.클라이언트 사이드 언어를 다루고 그에 관련된 개발자를= 프론트 엔드서버 사이드 언어를 다루고 그에 관련된 개발자= 백엔드라 부른다.Recommand Posting For you Guys* PHP란 대체 무엇인가..?* 프론트 개발자가 알아야할 기술이 뭐지?* 프로토컬, IP, 도메인네임 그게 다 뭔데?* JSON 대체 뭐하는 애야..?', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 237941, 58510, 93674, 238608, 243903, 22803, 236554, 238364, 160590, 237135, 235283, 239483, 140801, 239753, 236859, 160590, 237135, 236214, 235248, 241490, 239151, 240198, 223616, 236791, 23248, 237589, 236039, 235265, 242940, 243383, 123472, 53355, 241039, 240734, 236179, 47250, 239308, 236392, 93828, 241039, 243383, 236179, 156976, 132880, 242989, 236859, 236137, 51806, 240112, 235832, 123248, 232523, 32048, 238500, 236386, 238740, 237465, 61742, 235265, 235274, 235265, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 7817, 239483, 122717, 239753, 236859, 235278, 236417, 237545, 236645, 235275, 235248, 241656, 22803, 168788, 40284, 29599, 235265, 239483, 122717, 239753, 236859, 236361, 120618, 236511, 237506, 236392, 22618, 237502, 206666, 19319, 236375, 128047, 236770, 236554, 94177, 244875, 237233, 132929, 53355, 239135, 236432, 239814, 146689, 236179, 56787, 239465, 206666, 100280, 236569, 235265, 236800, 238946, 90621, 34103, 238131, 161615, 239837, 236859, 235278, 95661, 235275, 235832, 69581, 235265, 235284, 235265, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 7817, 236554, 238364, 235278, 236939, 237495, 236645, 235275, 235248, 241656, 22803, 235248, 242579, 236569, 168788, 40284, 29599, 235265, 236554, 238364, 160590, 237135, 236214, 239483, 122717, 239753, 236859, 236375, 29283, 245186, 236338, 237941, 106191, 235278, 11271, 235269, 236338, 44980, 73143, 235832, 205799, 241615, 235275, 236791, 236338, 237598, 237290, 238986, 235269, 236864, 238989, 215134, 236511, 211896, 237290, 235278, 236417, 237545, 236645, 46355, 241078, 237154, 235269, 13986, 187003, 73143, 235275, 236392, 22618, 238356, 78949, 235265, 236800, 238946, 85024, 171754, 236770, 236214, 12071, 235269, 29617, 235269, 39671, 235269, 21237, 235269, 13116, 235265, 2833, 73143, 236392, 171754, 240115, 238080, 22618, 69581, 235265, 242579, 235269, 236554, 238364, 237807, 239483, 122717, 239753, 236859, 236214, 31288, 106191, 236375, 55154, 236375, 134512, 242780, 236405, 239814, 146689, 236392, 153422, 236464, 181539, 22618, 69581, 235265, 239483, 122717, 239753, 236859, 160590, 237135, 171754, 236770, 236791, 32048, 238949, 236464, 20350, 236179, 187003, 238602, 227613, 236645, 236791, 235293, 58510, 240405, 236859, 209560, 237135, 236554, 238364, 160590, 237135, 171754, 236770, 236791, 32048, 238949, 236464, 20350, 236179, 187003, 238602, 227613, 236645, 235293, 124559, 241167, 237135, 236950, 43761, 239296, 236039, 235265, 987, 6000, 121514, 1699, 692, 36836, 235287, 29617, 240136, 26801, 238308, 60331, 242513, 236589, 236361, 95879, 235287, 58510, 240405, 236859, 227613, 184819, 78183, 236655, 238305, 238080, 213222, 235832, 235248, 245365, 236183, 158757, 132880, 238772, 241725, 235269, 9790, 235269, 50316, 238519, 236589, 239156, 238700, 20350, 237458, 32048, 235248, 247291, 238266, 158757, 11384, 26801, 238308, 235248, 245365, 40284, 122096, 238305, 95879], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:42368 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:18 engine.py:275] Added request cmpl-127f808c41284f5b92f7669894dd3440-0.
INFO 02-16 20:30:18 logger.py:39] Received request cmpl-3a1721456ada42a689e10f22057621d7-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        \n![](https://velog.velcdn.com/images/hope1213/post/54bce33a-07d8-4d3d-96c5-6a99b9d9cdc7/image.png)\n\n웹 개발을 할 때 가장 중요한 결정 중 하나는 어떤 작업을 서버 사이드(Server-side)에서 처리할지, 클라이언트 사이드(Client-side)에서 처리할지를 결정하는 것입니다. 이 글에서는 서버 사이드와 클라이언트 사이드의 차이점, 각 방식의 장단점, 그리고 어떤 상황에서 어떤 방식을 선택해야 하는지에 대해 살펴보겠습니다.\n\n#### 서버 사이드(Server-side)란?\n\n서버 사이드 프로그래밍은 웹 서버에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 클라이언트(사용자의 브라우저)에서 요청을 받을 때 실행됩니다. 서버 사이드 스크립트는 데이터베이스에 접근하고, 데이터를 처리하고, HTML 페이지를 동적으로 생성하는 데 사용됩니다.\n즉 웹에서 서버와 클라이언트는 정해진 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.\n\n\n**주요 언어 및 기술:**\n![](https://velog.velcdn.com/images/hope1213/post/6f8e3e86-7b7d-453a-8684-da3898c25af4/image.png)\n\n- PHP\n- Python (Django, Flask)\n- Ruby (Ruby on Rails)\n- Java (Spring)\n- Node.js\n\n**장점:**\n1. **보안**: 중요한 로직과 데이터베이스 접근이 서버에서 처리되어 클라이언트에서 접근할 수 없습니다.\n2. **데이터베이스 접근**: 서버에서 직접 데이터베이스와 상호작용할 수 있어 데이터 처리와 저장이 용이합니다.\n3. **호환성**: 모든 클라이언트가 동일한 서버 측 코드를 실행하므로 브라우저 호환성 문제를 줄일 수 있습니다.\n\n**단점:**\n1. **서버 부하**: 모든 처리가 서버에서 이루어지기 때문에 서버의 부하가 증가할 수 있습니다.\n2. **응답 시간**: 클라이언트가 요청을 보내고 서버가 응답할 때까지 시간이 걸릴 수 있습니다.\n\n#### 클라이언트 사이드(Client-side)란?\n\n클라이언트 사이드 프로그래밍은 사용자의 브라우저에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 HTML, CSS, JavaScript로 작성되며, 사용자의 인터페이스를 조작하고 사용자와 상호작용합니다.\n\n![](https://velog.velcdn.com/images/hope1213/post/d9319a2f-6c80-477b-987e-2102e2d24bbe/image.png) 일반적으로 Chrome과 같은 웹브라우저는 굉장히 많은 메모리를 차지합니다.\n\n단순히 탐색을 진행했을 뿐인데 다른 프로세스에 비해 굉장히 많은 메모리를 사용한다는 점에서 의문을 가질수 있습니다. 그 이유는 현재 Web쪽에 무거운 처리 대부분은 클라이언트 사이드 언어로 작업하기 때문입니다.\n\n\n**주요 언어 및 기술:**\n- HTML\n- CSS\n- JavaScript (React, Angular, Vue.js)\n\n\n**장점:**\n1. **빠른 응답**: 서버에 요청을 보내지 않고 브라우저에서 바로 처리하므로 응답 속도가 빠릅니다.\n2. **서버 부하 감소**: 많은 작업을 클라이언트에서 처리함으로써 서버의 부담을 줄일 수 있습니다.\n3. **향상된 사용자 경험**: 애니메이션, 실시간 업데이트 등 사용자 인터페이스를 더욱 풍부하게 만들 수 있습니다.\n\n**단점:**\n1. **보안 문제**: 클라이언트 사이드 코드가 브라우저에 노출되므로 보안에 취약할 수 있습니다.\n2. **브라우저 호환성**: 다양한 브라우저에서 동일하게 작동하도록 코드 작성이 어려울 수 있습니다.\n3. **제한된 성능**: 클라이언트의 기기 성능에 따라 처리 속도가 달라질 수 있습니다.\n\n#### 언제 서버 사이드를 선택해야 할까?\n\n- **보안이 중요한 경우**: 민감한 데이터나 중요한 비즈니스 로직이 포함된 경우 서버 사이드 처리가 필요합니다.\n- **데이터베이스 작업**: 데이터베이스와의 상호작용이 빈번하게 이루어질 때 서버 사이드가 적합합니다.\n- **복잡한 처리**: 복잡한 계산이나 대량의 데이터 처리가 필요할 때 서버 측에서 처리하는 것이 좋습니다.\n\n#### 언제 클라이언트 사이드를 선택해야 할까?\n\n- **실시간 상호작용**: 사용자와의 실시간 상호작용이 중요한 경우 클라이언트 사이드 처리가 필요합니다.\n- **인터페이스 동적 처리**: 동적인 사용자 인터페이스, 애니메이션, 실시간 업데이트 등은 클라이언트 사이드에서 처리하는 것이 좋습니다.\n- **서버 부하 분산**: 서버의 부하를 줄이고자 할 때 일부 처리를 클라이언트 사이드로 이동할 수 있습니다.\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 32463, 235274, 235284, 235274, 235304, 235283, 2729, 235283, 235308, 235310, 235268, 532, 235304, 235304, 235250, 235290, 235276, 235324, 235258, 235321, 235290, 235310, 235258, 235304, 235258, 235290, 235315, 235318, 235260, 235308, 235290, 235318, 235250, 235315, 235315, 235268, 235315, 235258, 235315, 88911, 235324, 235283, 2502, 235265, 7424, 235275, 109, 237941, 227613, 236392, 69225, 54715, 126277, 215134, 236511, 72510, 236864, 47250, 113859, 236214, 53355, 242251, 211896, 236392, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 2043, 235275, 22803, 168788, 238080, 236183, 235269, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 2043, 235275, 22803, 168788, 238080, 231588, 72510, 236864, 40284, 121393, 235265, 11464, 153818, 180860, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 91292, 235832, 239158, 235269, 163558, 51806, 238186, 236137, 60318, 238335, 239158, 235269, 213512, 53355, 242251, 36203, 240054, 22803, 53355, 242251, 51806, 238186, 236392, 134472, 149735, 109976, 236183, 236179, 142192, 130412, 245435, 237036, 241716, 21743, 235265, 109, 3308, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 2043, 235275, 240136, 235336, 109, 236554, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 31288, 55154, 238364, 22803, 191754, 156610, 215441, 236791, 198766, 40284, 109241, 223616, 43395, 235265, 11464, 215441, 236214, 91940, 122717, 239753, 236859, 235278, 236417, 237545, 236645, 236137, 129669, 236950, 237312, 238721, 235275, 22803, 227038, 236392, 101260, 236392, 54715, 191754, 129090, 235265, 55154, 238364, 160590, 237135, 32275, 237611, 239837, 236859, 236214, 112762, 239571, 131006, 236179, 165866, 239969, 48060, 235269, 112762, 236791, 168788, 48060, 235269, 19319, 106191, 236791, 49697, 90621, 116518, 40284, 65503, 61943, 129090, 235265, 108, 242579, 31288, 22803, 55154, 238364, 237807, 91940, 122717, 239753, 236859, 236214, 35467, 237138, 237589, 31288, 106191, 236375, 55154, 236375, 134512, 242780, 236405, 239814, 146689, 236392, 153422, 236464, 181539, 22618, 69581, 235265, 110, 688, 237014, 237526, 171754, 236770, 60709, 213222, 66058, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 32463, 235274, 235284, 235274, 235304, 235283, 2729, 235283, 235318, 235266, 235321, 235249, 235304, 235249, 235321, 235318, 235290, 235324, 235268, 235324, 235258, 235290, 235310, 235308, 235304, 235250, 235290, 235321, 235318, 235321, 235310, 235290, 1335, 235304, 235321, 235315, 235321, 235260, 235284, 235308, 2518, 235310, 235283, 2502, 235265, 7424, 235275, 109, 235290, 29617, 108, 235290, 21237, 591, 125068, 235269, 57155, 235275, 108, 235290, 39671, 591, 53481, 611, 88887, 235275, 108, 235290, 12071, 591, 13198, 235275, 108, 235290, 13116, 235265, 2833, 109, 688, 237199, 239158, 66058, 108, 235274, 235265, 5231, 237036, 238179, 95573, 215134, 236511, 54868, 239385, 237233, 112762, 239571, 131006, 165866, 239969, 235832, 55154, 238364, 22803, 168788, 141048, 91940, 122717, 239753, 236859, 22803, 165866, 239969, 238080, 22618, 176124, 235265, 108, 235284, 235265, 5231, 238266, 90081, 239571, 131006, 165866, 239969, 95573, 55154, 238364, 22803, 143636, 240449, 112762, 239571, 131006, 237807, 36203, 238033, 238115, 237545, 238080, 22618, 215995, 112762, 168788, 237807, 143077, 235832, 120340, 235832, 43395, 235265, 108, 235304, 235265, 5231, 238033, 239457, 237154, 95573, 87997, 91940, 122717, 239753, 236859, 236361, 49697, 236666, 236511, 55154, 238364, 235248, 241656, 215441, 236791, 191754, 236345, 212026, 129669, 236950, 237312, 238721, 83942, 239457, 237154, 132793, 236791, 184434, 236666, 22618, 55496, 235265, 109, 688, 238335, 239158, 66058, 108, 235274, 235265, 5231, 236554, 238364, 43761, 236345, 95573, 87997, 168788, 236361, 55154, 238364, 22803, 11464, 238949, 236770, 236183, 236386, 147801, 55154, 238364, 236137, 43761, 236345, 236361, 160284, 236361, 238080, 22618, 55496, 235265, 108, 235284, 235265, 5231, 240981, 241305, 118058, 95573, 91940, 122717, 239753, 236859, 236361, 227038, 236392, 29283, 238151, 236464, 55154, 238364, 236361, 224047, 241305, 238080, 54715, 109535, 118058, 235832, 180850, 241949, 22618, 55496, 235265, 109, 3308, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 2043, 235275, 240136, 235336, 109, 239483, 122717, 239753, 236859, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 61943, 236645, 236137, 129669, 236950, 237312, 238721, 22803, 191754, 156610, 215441, 236791, 198766, 40284, 109241, 223616, 43395, 235265, 11464, 215441, 236214, 19319, 235269, 26862, 235269, 22978, 236375, 198766, 238070, 238986, 235269, 61943, 236645, 236137, 227397, 67650, 236354, 236791, 42916, 238115, 48060, 61943, 236645, 237807, 36203, 238033, 238115, 237545, 43395, 235265, 109, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 32463, 235274, 235284, 235274, 235304, 235283, 2729, 235283, 235258, 235315, 235304, 235274, 235315, 235250, 235284, 235266, 235290, 235318, 235260, 235321, 235276, 235290, 235310, 235324, 235324, 235268, 235290, 235315, 235321, 235324, 235249, 235290, 235284, 235274, 235276, 235284, 235249, 235284, 235258, 235284, 235310, 12479, 235283, 2502, 235265, 7424, 235275, 234541, 90621, 23133, 237233, 132929, 31288, 238997, 236950, 237312, 238721, 236214, 235248, 250016, 237199, 239055, 139148, 75630, 237551, 176947, 91292, 236183, 43395, 235265, 109, 238335, 239937, 239055, 235248, 242850, 238931, 236392, 83453, 238356, 238267, 236392, 235248, 242591, 236589, 238266, 102708, 132880, 237533, 236354, 236179, 51732, 237138, 235248, 250016, 237199, 239055, 139148, 75630, 237551, 176947, 61943, 78949, 236214, 131901, 22803, 23594, 237465, 236392, 23248, 239574, 236669, 55496, 235265, 20350, 11464, 237766, 236214, 200944, 4556, 240734, 236179, 60331, 238154, 238138, 168788, 26801, 237092, 238304, 236648, 91940, 122717, 239753, 236859, 160590, 237135, 171754, 236770, 236375, 211896, 72159, 119518, 47555, 235265, 110, 688, 237014, 237526, 171754, 236770, 60709, 213222, 66058, 108, 235290, 19319, 108, 235290, 26862, 108, 235290, 22978, 591, 22469, 235269, 62173, 235269, 38244, 235265, 2833, 235275, 110, 688, 237199, 239158, 66058, 108, 235274, 235265, 5231, 241632, 239296, 224047, 241305, 95573, 55154, 238364, 236179, 227038, 236392, 29283, 238151, 236183, 48682, 236464, 129669, 236950, 237312, 238721, 22803, 55393, 236375, 168788, 236345, 212026, 224047, 241305, 125507, 236840, 236361, 235119, 245257, 12957, 235265, 108, 235284, 235265, 5231, 236554, 238364, 43761, 236345, 99091, 237433, 95573, 139148, 211896, 236392, 91940, 122717, 239753, 236859, 22803, 168788, 238467, 26291, 242974, 55154, 238364, 236137, 43761, 240599, 236392, 184434, 236666, 22618, 55496, 235265, 108, 235304, 235265, 5231, 240112, 237047, 238602, 61943, 236645, 43033, 240521, 95573, 122096, 221570, 235269, 61928, 210450, 142995, 238266, 78749, 73143, 61943, 236645, 227397, 67650, 236354, 236791, 70231, 243093, 209727, 237092, 101969, 128047, 22618, 55496, 235265, 109, 688, 238335, 239158, 66058, 108, 235274, 235265, 5231, 237036, 238179, 132793, 95573, 91940, 122717, 239753, 236859, 160590, 237135, 215441, 236361, 129669, 236950, 237312, 238721, 236179, 61138, 238483, 238070, 212026, 29283, 238179, 236179, 174375, 239618, 238080, 22618, 55496, 235265, 108, 235284, 235265, 5231, 238997, 236950, 237312, 238721, 83942, 239457, 237154, 95573, 32048, 238780, 236511, 129669, 236950, 237312, 238721, 22803, 49697, 236666, 101969, 63806, 237358, 236345, 153145, 215441, 198766, 235832, 53355, 238994, 239254, 22618, 55496, 235265, 108, 235304, 235265, 5231, 236939, 236511, 238602, 64301, 239474, 95573, 91940, 122717, 239753, 236859, 236137, 28693, 236386, 64301, 239474, 236179, 156976, 168788, 125507, 236840, 236361, 123083, 236950, 239574, 22618, 55496, 235265, 109, 3308, 171754, 236939, 55154, 238364, 160590, 237135, 236791, 134472, 149735, 69225, 239303, 235336, 109, 235290, 5231, 237036, 238179, 235832, 215134, 236511, 95917, 95573, 153107, 239199, 236511, 112762, 236915, 215134, 236511, 51732, 238894, 236405, 236354, 54868, 239385, 235832, 157329, 238602, 95917, 55154, 238364, 160590, 237135, 168788, 236361, 126942, 43395, 235265, 108, 235290, 5231, 238266, 90081, 239571, 131006, 211896, 95573, 112762, 239571, 131006, 237807, 236137, 36203, 238033, 238115, 237545, 235832, 235248, 241266, 238628, 101969, 11464, 238949, 236770, 239574, 54715, 55154, 238364, 160590, 237135, 236361, 99797, 237961, 43395, 235265, 108, 235290, 5231, 239205, 241533, 236511, 168788, 95573, 122447, 241533, 236511, 74715, 238325, 180521, 26801, 240833, 236137, 112762, 168788, 236361, 126942, 238080, 54715, 55154, 238364, 235248, 241656, 22803, 168788, 40284, 93205, 106509, 21743, 235265, 109, 3308, 171754, 236939, 91940, 122717, 239753, 236859, 160590, 237135, 236791, 134472, 149735, 69225, 239303, 235336, 109, 235290, 5231, 238146, 210450, 36203, 238033, 238115, 237545, 95573, 61943, 236645, 237807, 236137, 61928, 210450, 36203, 238033, 238115, 237545, 235832, 215134, 236511, 95917, 91940, 122717, 239753, 236859, 160590, 237135, 168788, 236361, 126942, 43395, 235265, 108, 235290, 5231, 236589, 237524, 67650, 236354, 49697, 237603, 168788, 95573, 49697, 85024, 61943, 236645, 227397, 67650, 236354, 235269, 122096, 221570, 235269, 61928, 210450, 142995, 238266, 78749, 73143, 236648, 91940, 122717, 239753, 236859, 160590, 237135, 22803, 168788, 40284, 93205, 106509, 21743, 235265, 108, 235290, 5231, 236554, 238364, 43761, 236345, 70754, 238325, 95573, 55154, 238364, 236137, 43761, 236345, 236791, 184434, 224907, 236645, 69225, 54715, 32929, 237092, 168788, 236791, 91940, 122717, 239753, 236859, 160590, 237135, 236375, 195532, 238080, 22618, 55496, 235265, 108], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:42372 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:18 logger.py:39] Received request cmpl-163324ef4d1e4147b21e8911e159968e-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ✏️ 서버 사이드(Server-Side)와 클라이언트 사이드(Client-Side)서버 사이드(Server-Side)란\xa0네트워크의 한 방식인 클라이언트-서버 구조에서 서버에서의 처리를 말한다웹에서의 서버 사이드를 간단히 말하자면, 웹 서버에서 하는 작업을 의미한다클라이언트로 요청을 받아 처리하고 처리 결과를 브라우저에 송신, 응답하는 역할을 한다클라이언트 사이드(Client-Side)란, 네트워크의 한 방식인 클라이언트-서버 구조에서 클라이언트의 처리를 말한다웹에서의 클라이언트는, 서버와는 상대되는 개념으로 어떤 서비스를 요청하는 역할을 하게 된다웹 페이지를 요청하는 것은 클라이언트의 역할이라고 말할 수 있다웹 페이지의 요청은 대부분 웹 브라우저가 하게 된다.그렇기 때문에 일반적으로 웹에서의 클라이언트는 웹 브라우저를 의미한다✏️ 데이터의 처리서버 사이드(Server-Side)에서의 처리서버 관리자의 입장에서 데이터 위조의 가능성을 비교적 줄일 수 있다클라이언트 사용자의 입장에서 클라이언트 컴퓨터의 처리 부담이 줄어든다반면 서버 처리 부담이 커져, 서버 비용이 늘어난다클라이언트 사이드(Client-Side)에서의 처리서버 관리자의 입장에서 서버 처리 부담이 적어져, 서버 비용이 줄어든다클라이언트 사용자의 입장에서 클라이언트 컴퓨터의 처리 부담이 높아진다보안에 민감한 데이터의 경우 통신에 대비해 암호화할 필요가 없으므로 암호화 소요가 줄어든다클라이언트 사이드에서 데이터를 위조하기 쉽다[참고 1]위키 백과 - 클라이언트 서버 모델,위키 백과 - 서버 사이드,위키 백과 - 클라이언트 사이드', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 154533, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 235275, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 235275, 236554, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 235275, 240136, 236338, 239156, 236859, 239779, 237611, 236137, 35191, 51806, 238186, 236589, 91940, 122717, 239753, 236859, 235290, 236554, 238364, 49061, 237602, 22803, 55154, 238364, 22803, 236137, 168788, 236791, 72163, 78949, 237941, 22803, 236137, 55154, 238364, 160590, 237135, 236791, 127149, 238335, 239055, 72163, 236345, 236645, 237722, 235269, 31288, 55154, 238364, 22803, 109976, 211896, 236392, 223616, 78949, 239483, 122717, 239753, 236859, 236375, 227038, 236392, 101260, 236655, 168788, 48060, 168788, 161050, 236791, 129669, 236950, 237312, 238721, 236179, 235248, 239673, 237502, 235269, 224047, 241305, 40284, 61169, 238080, 236392, 153422, 239483, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 235275, 240136, 235269, 123722, 236859, 239779, 237611, 236137, 35191, 51806, 238186, 236589, 91940, 122717, 239753, 236859, 235290, 236554, 238364, 49061, 237602, 22803, 91940, 122717, 239753, 236859, 236137, 168788, 236791, 72163, 78949, 237941, 22803, 236137, 91940, 122717, 239753, 236859, 236214, 235269, 55154, 238364, 237807, 236214, 36203, 236800, 156610, 49532, 241631, 26291, 53355, 242251, 206586, 236791, 227038, 40284, 61169, 238080, 236392, 30181, 237458, 95622, 236039, 237941, 106191, 236791, 227038, 40284, 143613, 91940, 122717, 239753, 236859, 236137, 61169, 238080, 235832, 112778, 72163, 238080, 22618, 69581, 237941, 106191, 236137, 227038, 236648, 26801, 237092, 238304, 31288, 129669, 236950, 237312, 238721, 236361, 30181, 237458, 95622, 236039, 235265, 236671, 241838, 236386, 147801, 234541, 90621, 31288, 22803, 236137, 91940, 122717, 239753, 236859, 236214, 31288, 129669, 236950, 237312, 238721, 236791, 223616, 78949, 154533, 112762, 236137, 168788, 236554, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 235275, 22803, 236137, 168788, 236554, 238364, 159838, 236645, 236137, 74209, 237199, 22803, 112762, 41423, 237602, 236137, 153728, 237154, 236392, 51732, 237905, 237603, 184434, 236666, 22618, 69581, 239483, 122717, 239753, 236859, 61943, 236645, 236137, 74209, 237199, 22803, 91940, 122717, 239753, 236859, 235248, 241897, 243032, 237524, 236137, 168788, 43761, 240599, 235832, 184434, 236770, 239227, 236039, 238559, 237722, 55154, 238364, 168788, 43761, 240599, 235832, 134512, 240586, 235269, 55154, 238364, 51732, 237545, 235832, 235248, 240703, 236770, 240198, 236039, 239483, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 235275, 22803, 236137, 168788, 236554, 238364, 159838, 236645, 236137, 74209, 237199, 22803, 55154, 238364, 168788, 43761, 240599, 235832, 99797, 236770, 240586, 235269, 55154, 238364, 51732, 237545, 235832, 184434, 236770, 239227, 236039, 239483, 122717, 239753, 236859, 61943, 236645, 236137, 74209, 237199, 22803, 91940, 122717, 239753, 236859, 235248, 241897, 243032, 237524, 236137, 168788, 43761, 240599, 235832, 187800, 236655, 237589, 236039, 237036, 238179, 236179, 153107, 239199, 236511, 112762, 236137, 95917, 83160, 237502, 236179, 26801, 237584, 237138, 235248, 241560, 238033, 236817, 238080, 126942, 236361, 56341, 237214, 212026, 235248, 241560, 238033, 236817, 44997, 237526, 236361, 184434, 236770, 239227, 236039, 239483, 122717, 239753, 236859, 160590, 237135, 22803, 112762, 236791, 41423, 237602, 72159, 235248, 243274, 236039, 235309, 189764, 235248, 235274, 235307, 237601, 238705, 124559, 237233, 728, 91940, 122717, 239753, 236859, 55154, 238364, 162570, 235269, 237601, 238705, 124559, 237233, 728, 55154, 238364, 160590, 237135, 235269, 237601, 238705, 124559, 237233, 728, 91940, 122717, 239753, 236859, 160590, 237135], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:42378 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:18 logger.py:39] Received request cmpl-22c088de38764ef29518a7c772586c42-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        MDN의 초심자용 서버 사이드 프로그래밍에 대한 기사를 읽고 그에 대한 공부를 해볼 예정이다.\n여기서 서버 측 프로그래밍이 무엇이고, 어떤 일을 할 수 있는지, 클라이언트 프로그래밍과 어떤 점이 다른지에 대해 배워볼 것이다.\n\n현대의 전 세계 웹 개발자들은 서버측 개발을 공부하는 것을 권고 하고 있다. 대부분의 큰 사이트들은 동적으로 보여주기 위한 다양한 데이터가 필요할 때 서버측의 코드를 사용한다.\n일반적으로 서버에 있는 데이터베이스에 저장된 데이터를 빼내서 일부 코드를 통해 보일 수 있도록 클라이언트(HTML 또는 JavaScript)에게 송신한다.\n서버측 코드의 큰 장점은 개별 사용자를 위한 맞춤 웹사이트 컨텐츠를 제공한다는 것이다. 동적 웹사이트는 사용자의 선호도 및 습관에 따라 더 관련성 높은 컨텐츠를 강조 표시할 수 있다.\n또한 이것은 사이트를 저장된 개인 선호와 정보를 사용하기 쉽게 만들어 준다.\n\n### 서버사이드 웹사이트 프로그래밍이 무엇인가?\n웹 서버와 통신하는 웹 브라우저는 HyperText Transport Protocol(HTTP)을 사용하고 있다.\n우리가 웹페이지의 링크를 클릭하거나 폼을 전송하거나 검색을 시작할 때 우리의 웹 브라우저는 HTTP request를 목적 서버에 전달한다. 요청에는 영향을 받는 리소스를 식별하는 URL, 필요 작업을 정의하는 메서드가 포함된다.\n(메소드의 예시로는 리소스를 가져오거나, 삭제하거나 게시하는 것이 있다.\n그리고 URL 매개변수(query 문자열 통해 전송된 값-쌍으로 이루어진 객체), POST 데이터(HTTP POST 메소드에 의해 전송된 데이터), 관련 쿠키 파일을 이용해 인코딩된 추가 정보를 포함할 수 있다.\n\n웹 서버는 클라이언트의 요청이 오길 기다리고, 요청이 도착하면 작업을 진행해, 웹 브라우저에 \\u003cstrong>HTTP 응답 메세지\\u003c/strong>를 보낸다. 그 응답은 요청이 성공 또는 실패를 지시하는 상태 라인을 포함하고 있다.\n요청에 대한 응답이 성공적이라면 본문은 요청 리소스를 포함할 것이고 이는 웹 브라우저에 보여질 수 있다.\n\n\n#### 정적 웹 사이트 (Static Website)\n아래 그림은 정적 웹 사이트의 기본 웹 구조를 보여준다. (정적 웹 사이트는 특별한 리소스 요청이 들어올 때 서버에서 하드 코딩된 동일 컨텐츠를 반환한다.)\n사용자가 페이지를 탐색하거나, 브라우저가 지정된 URL에 HTTP \\"GET\\" 요청을 보낼 때 서버는 파일 시스템에서 요청한 문서를 검색하고 문서과 `success status`를 포함한 HTTP 응답을 반환한다.\n만일 어떠한 이유 때문에 파일을 검색 할 수 없는 경우 `error status`가 반환된다.\n![](https://velog.velcdn.com/images/lmyno/post/ccf3fe62-5d7d-48b3-a397-abe391546c1b/image.png)\n\n#### 동적 웹사이트 (Dynamic Website)\n동적 웹사이트는 필요할 때마다 동적으로 응답 컨텐츠가 생성된다.\n동적 웹사이트의 웹페이지는 보통 HTML 템플릿에 있는 자리 표시자에 데이터베이스에서 가져온 데이터를 넣어 생성된다. (이 방법은 많은 양의 컨텐츠를 저장하기에 정적 웹사이트를 이용하는 것보다 효과적이다.)\n동적 웹사이트는 사용자 또는 저장된 환경을 기반으로 URL에 대해 다른 데이터를 반환할 수 있고, 응답을 반환하는 과정에서 다른 작업을 수행할 수 있다.\n\n동적 웹사이트를 지원하는 코드는 서버에서 실행되어야 한다. 이러한 코드를 만드는 것을 \\u003cspan style=\\"font-size: 150%\\">\\"sever-side programming\\"\\u003c/span>이라 알려져 있다. (또는 \\u003cspan style=\\"font-size: 150%\\">\\"back-end scripting\\"\\u003c/span>이라고도 불린다.)\n\n아래 그림은 동적 웹사이트의 간단한 구조를 보여주고 있다.\n정적 웹사이트와 같이 브라우저는 HTTP 요청을 서버에 보내고, 서버는 요청을 처리하고 적절한 HTTP 응답을 반환한다. 정적 리소스의 요청은 정적 사이트에서의 방법과 같은 방법으로 처리한다. (정적 리소스, 파일은 변하지 않는 파일로 일반적으로 CSS, JS, Image 등등이 있다.)\n![](https://velog.velcdn.com/images/lmyno/post/d971cb86-b6ee-4361-b7b6-be5f03d9f499/image.png)\n\n동적 리소스를 위한 요청은 ② 서버측 코드에 대신 전달(위 그림에서 웹 애플리케이션으로 보이는 부분), ③\\"동적 응답\\"을 위해 서버는 응답을 해석해 필요한 정보를 데이터베이스에서 읽고, ④탐색한 데이터와 HTML 템플릿을 결합하고, ⑤⑥생성된 HTML을 포함한 응답을 다시 보내준다.\n\n서버 사이드와 클라이언트 사이드의 프로그래밍은 같은가?\n이전으로 돌아와서 서버 측에 관여하는 코드와 클라이언트 측에 관여하는 코드를 살펴 보자.\n각각의 케이스마다 코드는 명확히 다른데, 두 사이드의 차이를 보면\n> 1) 그들의 목적과 고민이 서로 다르다.\n2) 일반적으로 같은 프로그래밍 언어를 쓰지 않는다. (JS는 예외적으로 서버와 클라이언트 사이드 둘 다 사용 가능하다.)\n3) 그들은 다른 운영체제 환경에서 수행된다.\n\n브라우저에서 실행되는 코드는 `client-side code`로 알려져 있다. `client-side code`의 주 관심사는 렌더링된 웹페이지의 모양과 행동을 개선시키는 것이다.\n이것은 UI 구성요소 선택 및 스타일 지정, 레이아웃 만들기, 탐색, 양식 유효성 검사 등을 포함하고 있다. 대조적으로, server-side 웹 사이트 프로그래밍은 대부분 브라우저의 요청에 대한 응답으로 어떤 컨텐츠를 반환하는 지 선택하는 것을 포함한다. server-side code는 제출된 데이터 및 요청의 유효성 검사, 데이터 저장 및 검색을 위한 데이터베이스 사용, 필요에 따라 올바른 데이터 전송과 같은 작업을 처리한다.\n\n클라이언트 측 코드는 HTML, CSS, 그리고 JS로 작성된다.\n이것들은 웹 브라우저 안에서 실행되고 기본 운영체제와 연결되지 않거나 아주 약간 연결된다. (파일 시스템의 연결의 제한이 포함되어 있다.) 웹 개발자는 모든 사용자가 웹사이트를 보는 데 사용할 수 있는 브라우저를 조작할 수 없다.\n브라우저는 클라이언트 측 코드 기능과 일관성 없는 수준의 호환성을 제공해, 클라이언트 측 프로그래밍의 어려움은 브라우저 지원의 차이를 정상적으로 처리하는 것이다.\n\n서버측 코드는 다양한 프로그래밍 언어로 작성 가능하다.\n대중적인 서버측 웹 언어를 포함한 예시로 PHP, Python, Ruby, 그리고 C#이 있다. 서버측 코드는 서버의 운영체제와 모든 접속 권한을 가지고, 개발자는 그들이 원하는 프로그래밍 언어를 사용 가능하다.\n\n개발자는 일반적으로 \\u003cstrong>web frameworks(웹 프레임워크)\\u003c/strong>를 이용해 코드를 작성한다. 웹 프레임워크는 일반적인 문제를 해결하고 개발 속도를 높이며 특정 도메인에서 직면하는 다양한 유형의 작업을 단순화하기 위해 설계된 함수, 객체, 규칙 및 기타 코드 구성 요소의 모음이다.\n다시 말하면 클라이언트와 서버 사이드 코드 둘 다 프레임워크를 사용하지만 도메인은 다르지 때문에 프레임워크도 다르다. 클라이언트 측 웹 프레임워크는 레이아웃 및 프레젠테이션 작업을 단순화하는 반면 서버 측 웹 프레임워크는 직접 구현해야 하는 많은 \\"공통\\" 웹 서버 기능을 제공한다.\n(서버 측 공통 웹 서버 기능으로 세션 지원, 사용자와 인증을 지원, 데이터베이스와 쉬운 연결 등등이 있다.)\n\n>참고\n클라이언트 측 프레임워크는 때때로 클라이언트 측 코드를 개발하는 속도를 올릴 수 있게 도와주도록 사용하지만, 우리는 모든 코드를 직접 작성할 수도 있다. **사실 우리가 작고 간단한 사이트의 UI를 만든다면 우리가 직접 작성하는 코드가 더 빠르고 효과적일 수 있다.**\n이와 대조적으로, 우리가 서버측 웹 애플리케이션의 컴포넌트를 **프레임워크 없이 작성하는 것은 거의 생각하기 어려울 것**이다. (Python에서 HTTP 서버와 같은 중요한 기능 구현을 처음부터 하는 것은 어렵지만 Django와 같은 Python 웹 프레임워크는 다른 유용한 도구와 함께 즉시 사용할 수 있는 도구를 제공한다.)\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 11603, 235300, 236137, 87634, 239308, 236645, 237545, 55154, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236179, 71100, 28693, 236417, 236791, 229288, 236464, 20350, 236179, 71100, 41388, 237092, 236791, 56787, 241100, 71277, 236864, 61742, 235265, 108, 237386, 236386, 236554, 55154, 238364, 235248, 241656, 58510, 93674, 238608, 243903, 235832, 60331, 242513, 224907, 235269, 53355, 242251, 32929, 236392, 69225, 22618, 72941, 236183, 235269, 91940, 122717, 239753, 236859, 58510, 93674, 238608, 243903, 237233, 53355, 242251, 131901, 235832, 102708, 236183, 236179, 142192, 50548, 239779, 241100, 170613, 235265, 109, 238513, 236800, 236137, 31087, 154094, 31288, 227613, 236645, 84551, 55154, 238364, 241656, 227613, 236392, 41388, 237092, 40284, 109241, 155280, 236464, 197022, 69581, 235265, 26801, 237092, 238304, 236137, 185075, 17309, 78749, 84551, 49697, 90621, 29283, 237386, 237014, 236386, 168947, 32048, 238780, 236511, 112762, 236361, 126942, 238080, 54715, 55154, 238364, 241656, 236137, 215441, 236791, 61943, 78949, 235265, 108, 236666, 238559, 90621, 55154, 238364, 236179, 72941, 112762, 239571, 131006, 236179, 143077, 238602, 112762, 236791, 235248, 245122, 238151, 236554, 32929, 237092, 215441, 236791, 187118, 29283, 236666, 22618, 21167, 153145, 91940, 122717, 239753, 236859, 235278, 11271, 132879, 22978, 235275, 70471, 235248, 239673, 237502, 78949, 235265, 108, 236554, 238364, 241656, 215441, 236137, 185075, 60318, 239158, 236648, 49532, 239793, 61943, 236645, 236791, 168947, 207221, 244417, 31288, 236417, 78749, 235248, 241996, 164594, 236791, 110308, 78949, 236214, 170613, 235265, 49697, 237603, 31288, 236417, 78749, 236214, 61943, 236645, 236137, 51914, 238033, 236840, 60709, 235248, 237152, 237956, 236179, 156976, 70231, 187003, 237154, 187800, 236648, 235248, 241996, 164594, 236791, 84608, 237602, 100280, 236569, 238080, 22618, 69581, 235265, 108, 239607, 236511, 11464, 139988, 17309, 78749, 236791, 143077, 238602, 49532, 236589, 51914, 238033, 237807, 104569, 236791, 61943, 72159, 235248, 243274, 237458, 128047, 236770, 166422, 236039, 235265, 109, 6176, 55154, 238364, 236417, 217534, 31288, 236417, 78749, 58510, 93674, 238608, 243903, 235832, 60331, 242513, 236589, 236361, 235336, 108, 237941, 55154, 238364, 237807, 83160, 237502, 40284, 31288, 129669, 236950, 237312, 238721, 236214, 27808, 1637, 13426, 33209, 235278, 20672, 235275, 236392, 61943, 48060, 69581, 235265, 108, 237312, 228773, 31288, 83137, 236137, 76326, 236791, 91940, 240356, 236345, 160696, 235248, 243751, 236392, 31087, 239673, 236345, 160696, 203755, 236392, 106793, 238080, 54715, 93241, 236137, 31288, 129669, 236950, 237312, 238721, 236214, 24493, 3853, 236791, 86040, 237603, 55154, 238364, 236179, 31087, 239522, 78949, 235265, 227038, 96564, 52604, 240112, 236392, 101260, 236214, 63102, 237433, 236354, 236791, 130886, 239793, 40284, 10822, 235269, 126942, 211896, 236392, 35467, 236137, 40284, 75630, 236554, 237135, 236361, 157329, 238602, 236039, 235265, 108, 235278, 238519, 237433, 237135, 236137, 71277, 236569, 236375, 236214, 63102, 237433, 236354, 236791, 174538, 237410, 160696, 235269, 155718, 236345, 160696, 219687, 40284, 93205, 69581, 235265, 108, 186223, 10822, 80431, 237936, 239042, 236669, 235278, 3630, 45980, 236645, 239375, 187118, 31087, 239673, 238602, 147342, 235290, 244444, 26291, 11464, 238949, 236770, 237589, 209611, 823, 19124, 112762, 235278, 20672, 19124, 75630, 237433, 237135, 236179, 23594, 237138, 31087, 239673, 238602, 112762, 823, 187003, 222330, 238705, 145240, 236392, 208134, 237138, 30743, 238494, 241103, 238602, 133818, 104569, 236791, 157329, 238080, 22618, 69581, 235265, 109, 237941, 55154, 238364, 236214, 91940, 122717, 239753, 236859, 236137, 227038, 235832, 44245, 240373, 28693, 236039, 102536, 235269, 227038, 235832, 50316, 241293, 123472, 211896, 236392, 83453, 238356, 237138, 235269, 31288, 129669, 236950, 237312, 238721, 236179, 730, 235261, 235276, 235276, 235304, 235260, 19265, 235313, 20672, 224047, 241305, 75630, 237533, 236183, 235286, 235261, 235276, 235276, 235304, 235260, 235283, 19265, 235313, 236791, 29283, 243927, 236039, 235265, 20350, 224047, 241305, 236648, 227038, 235832, 192111, 132879, 234661, 236791, 34805, 236569, 40284, 209975, 79871, 236589, 236392, 157329, 48060, 69581, 235265, 108, 237526, 239151, 236179, 71100, 224047, 241305, 235832, 192111, 237603, 235832, 236950, 237722, 138720, 237465, 236648, 227038, 63102, 237433, 236354, 236791, 157329, 238080, 93205, 236464, 11464, 236214, 31288, 129669, 236950, 237312, 238721, 236179, 29283, 237386, 239574, 22618, 69581, 235265, 110, 3308, 35467, 237603, 31288, 17309, 78749, 591, 22555, 13683, 235275, 108, 236655, 238608, 142479, 236648, 35467, 237603, 31288, 17309, 78749, 236137, 28693, 238744, 31288, 49061, 237602, 236791, 29283, 237386, 239558, 236039, 235265, 591, 236864, 237603, 31288, 17309, 78749, 236214, 94492, 239793, 236511, 63102, 237433, 236354, 227038, 235832, 153935, 240256, 54715, 55154, 238364, 22803, 30181, 237135, 76230, 241103, 238602, 49697, 236666, 235248, 241996, 164594, 236791, 78821, 239457, 78949, 2330, 108, 236417, 237545, 184819, 106191, 236791, 235248, 242850, 238931, 236345, 160696, 235269, 129669, 236950, 237312, 238721, 236361, 34805, 236864, 238602, 10822, 236179, 24493, 30044, 6041, 13663, 227038, 236392, 29283, 245186, 54715, 55154, 238364, 236214, 145240, 27941, 202429, 22803, 227038, 236511, 133889, 236791, 203755, 48060, 133889, 237233, 4103, 6550, 4938, 235376, 236791, 157329, 236511, 24493, 224047, 241305, 236392, 78821, 239457, 78949, 235265, 108, 237598, 236666, 53355, 242664, 236511, 11464, 237766, 147801, 145240, 236392, 203755, 69225, 22618, 233473, 95917, 4103, 1761, 4938, 235376, 236361, 78821, 239457, 238602, 236039, 235265, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 235257, 1723, 956, 235283, 2729, 235283, 229802, 235304, 1039, 235318, 235284, 235290, 235308, 235258, 235324, 235258, 235290, 235310, 235321, 235268, 235304, 235290, 235250, 235304, 235315, 235324, 235290, 51071, 235304, 235315, 235274, 235308, 235310, 235318, 235260, 235274, 235268, 235283, 2502, 235265, 7424, 235275, 109, 3308, 49697, 237603, 31288, 236417, 78749, 591, 28500, 13683, 235275, 108, 237358, 237603, 31288, 236417, 78749, 236214, 126942, 238080, 54715, 237354, 236039, 49697, 90621, 224047, 241305, 235248, 241996, 164594, 236361, 116518, 238602, 236039, 235265, 108, 237358, 237603, 31288, 236417, 78749, 236137, 31288, 83137, 236214, 29283, 238693, 19319, 235248, 240940, 239135, 241982, 236179, 72941, 34103, 236432, 100280, 236569, 236645, 236179, 112762, 239571, 131006, 22803, 174538, 239956, 112762, 236791, 235248, 242665, 236770, 116518, 238602, 236039, 235265, 591, 235832, 130059, 236648, 139148, 119452, 236137, 235248, 241996, 164594, 236791, 143077, 72159, 236179, 35467, 237603, 31288, 236417, 78749, 236791, 208134, 40284, 29599, 180677, 207092, 237233, 237603, 61742, 2330, 108, 237358, 237603, 31288, 236417, 78749, 236214, 61943, 236645, 132879, 143077, 238602, 161409, 237392, 236392, 28693, 238559, 26291, 10822, 236179, 142192, 102708, 112762, 236791, 78821, 239457, 238080, 22618, 21167, 236464, 235269, 224047, 241305, 236392, 78821, 239457, 40284, 65084, 236864, 22803, 102708, 211896, 236392, 22618, 238356, 238080, 22618, 69581, 235265, 109, 237358, 237603, 31288, 236417, 78749, 236791, 224790, 40284, 215441, 236214, 55154, 238364, 22803, 191754, 141048, 238305, 153422, 235265, 11464, 174287, 215441, 236791, 49427, 237135, 236214, 109241, 730, 235261, 235276, 235276, 235304, 235260, 1432, 3411, 14001, 4274, 235290, 1934, 235292, 235248, 235274, 235308, 235276, 10149, 768, 13663, 27169, 235290, 2043, 19991, 86170, 235261, 235276, 235276, 235304, 235260, 235283, 1432, 235313, 235832, 236950, 78183, 238994, 240586, 69581, 235265, 591, 239607, 236214, 730, 235261, 235276, 235276, 235304, 235260, 1432, 3411, 14001, 4274, 235290, 1934, 235292, 235248, 235274, 235308, 235276, 10149, 768, 13663, 1811, 235290, 615, 141988, 86170, 235261, 235276, 235276, 235304, 235260, 235283, 1432, 235313, 235832, 112778, 236840, 83133, 239263, 236039, 2330, 109, 236655, 238608, 142479, 236648, 49697, 237603, 31288, 236417, 78749, 236137, 127149, 238335, 236511, 49061, 237602, 236791, 29283, 237386, 237014, 236464, 69581, 235265, 108, 236864, 237603, 31288, 236417, 78749, 237807, 81673, 235832, 129669, 236950, 237312, 238721, 236214, 24493, 227038, 236392, 55154, 238364, 236179, 29283, 238151, 236464, 235269, 55154, 238364, 236214, 227038, 236392, 168788, 48060, 99797, 240046, 236511, 24493, 224047, 241305, 236392, 78821, 239457, 78949, 235265, 35467, 237603, 63102, 237433, 236354, 236137, 227038, 236648, 35467, 237603, 17309, 78749, 22803, 236137, 130059, 237233, 132929, 130059, 26291, 168788, 78949, 235265, 591, 236864, 237603, 63102, 237433, 236354, 235269, 145240, 236648, 75980, 74860, 186830, 145240, 236375, 234541, 90621, 26862, 235269, 31302, 235269, 8092, 73143, 238650, 235832, 69581, 2330, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 235257, 1723, 956, 235283, 2729, 235283, 235258, 235315, 235324, 235274, 9359, 235321, 235318, 235290, 235268, 235318, 1537, 235290, 235310, 235304, 235318, 235274, 235290, 235268, 235324, 235268, 235318, 235290, 555, 235308, 235266, 235276, 235304, 235258, 235315, 235266, 235310, 235315, 235315, 235283, 2502, 235265, 7424, 235275, 109, 237358, 237603, 63102, 237433, 236354, 236791, 168947, 227038, 236648, 93552, 55154, 238364, 241656, 215441, 236179, 26801, 237502, 31087, 239522, 235278, 237601, 142479, 22803, 31288, 122096, 239135, 236432, 239814, 146689, 26291, 29283, 206367, 43761, 238304, 823, 159545, 13663, 237358, 237603, 224047, 241305, 13663, 236392, 93806, 55154, 238364, 236214, 224047, 241305, 236392, 56787, 239465, 237138, 126942, 236511, 104569, 236791, 112762, 239571, 131006, 22803, 229288, 236464, 235269, 235248, 239221, 242850, 238931, 236511, 112762, 237807, 19319, 235248, 240940, 239135, 241982, 236392, 72510, 237961, 48060, 235269, 235248, 240104, 240967, 237889, 237154, 238602, 19319, 236392, 157329, 236511, 224047, 241305, 236392, 171167, 29283, 238151, 239558, 236039, 235265, 109, 236554, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 58510, 93674, 238608, 243903, 236648, 132929, 236361, 235336, 108, 235832, 237045, 26291, 138153, 236655, 237807, 236554, 55154, 238364, 235248, 241656, 236179, 55526, 237386, 40284, 215441, 237807, 91940, 122717, 239753, 236859, 235248, 241656, 236179, 55526, 237386, 40284, 215441, 236791, 130412, 245435, 29283, 236645, 235265, 108, 238316, 238316, 236137, 170609, 131006, 237354, 236039, 215441, 236214, 95165, 239131, 239055, 102708, 238266, 235269, 93828, 160590, 237135, 236137, 91292, 235832, 236791, 29283, 237722, 108, 235313, 235248, 235274, 235275, 20350, 132642, 86040, 237603, 237233, 46749, 238754, 235832, 55154, 236375, 32048, 238500, 236039, 235265, 108, 235284, 235275, 234541, 90621, 132929, 58510, 93674, 238608, 243903, 171754, 236770, 236791, 198670, 236183, 186830, 236039, 235265, 591, 16436, 236214, 71277, 238643, 90621, 55154, 238364, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 235248, 242870, 32048, 61943, 153728, 188898, 2330, 108, 235304, 235275, 20350, 84551, 102708, 118566, 237759, 238308, 236939, 161409, 237392, 22803, 22618, 238356, 238602, 236039, 235265, 109, 238997, 236950, 237312, 238721, 22803, 191754, 156610, 215441, 236214, 4103, 5251, 235290, 2043, 3409, 235376, 236375, 78183, 238994, 240586, 69581, 235265, 4103, 5251, 235290, 2043, 3409, 235376, 236137, 40712, 55526, 239308, 236417, 236214, 235248, 241486, 238589, 239074, 238602, 31288, 83137, 236137, 34459, 238780, 237233, 105560, 237358, 236392, 49532, 237700, 236569, 238705, 236214, 170613, 235265, 108, 235832, 139988, 13566, 220641, 237526, 237433, 134472, 60709, 233186, 34805, 236864, 235269, 161882, 236655, 241736, 128047, 236386, 235269, 235248, 242850, 238931, 235269, 119452, 238186, 46355, 241078, 237154, 102890, 236417, 73143, 236392, 157329, 48060, 69581, 235265, 26801, 237602, 90621, 235269, 6934, 235290, 2043, 31288, 17309, 78749, 58510, 93674, 238608, 243903, 236648, 26801, 237092, 238304, 129669, 236950, 237312, 238721, 236137, 227038, 236179, 71100, 224047, 241305, 26291, 53355, 242251, 235248, 241996, 164594, 236791, 78821, 239457, 40284, 34805, 134472, 40284, 109241, 157329, 78949, 235265, 6934, 235290, 2043, 3409, 236214, 31850, 238483, 238602, 112762, 60709, 227038, 236137, 46355, 241078, 237154, 102890, 236417, 235269, 112762, 143077, 60709, 203755, 236392, 168947, 112762, 239571, 131006, 61943, 235269, 126942, 236179, 156976, 133057, 238131, 239296, 112762, 31087, 239673, 237233, 132929, 211896, 236392, 168788, 78949, 235265, 109, 239483, 122717, 239753, 236859, 235248, 241656, 215441, 236214, 19319, 235269, 26862, 235269, 213512, 31302, 236375, 198766, 238602, 236039, 235265, 108, 235832, 237506, 84551, 31288, 129669, 236950, 237312, 238721, 70685, 22803, 191754, 238070, 236464, 28693, 238744, 118566, 237759, 238308, 236939, 237807, 197054, 234654, 48682, 160696, 23745, 237014, 151245, 238264, 197054, 238602, 236039, 235265, 591, 173331, 27941, 202429, 236137, 197054, 236137, 31850, 236511, 235832, 157329, 141048, 69581, 2330, 31288, 227613, 236645, 236214, 87997, 61943, 184819, 31288, 236417, 78749, 236791, 29283, 236214, 65503, 61943, 238080, 22618, 72941, 129669, 236950, 237312, 238721, 236791, 42916, 238115, 238080, 22618, 56341, 236039, 235265, 108, 238997, 236950, 237312, 238721, 236214, 91940, 122717, 239753, 236859, 235248, 241656, 215441, 201619, 237233, 32929, 237956, 237154, 233473, 22618, 239558, 236137, 83942, 239457, 237154, 236392, 110308, 237138, 235269, 91940, 122717, 239753, 236859, 235248, 241656, 58510, 93674, 238608, 243903, 236137, 53355, 238994, 240520, 236648, 129669, 236950, 237312, 238721, 224790, 236137, 91292, 235832, 236791, 35467, 237047, 90621, 168788, 40284, 170613, 235265, 109, 236554, 238364, 241656, 215441, 236214, 32048, 238780, 236511, 58510, 93674, 238608, 243903, 171754, 236770, 236375, 198766, 153728, 188898, 235265, 108, 236800, 237935, 85024, 55154, 238364, 241656, 31288, 171754, 236770, 236791, 157329, 236511, 71277, 236569, 236375, 29617, 235269, 21237, 235269, 39671, 235269, 213512, 585, 235345, 235832, 69581, 235265, 55154, 238364, 241656, 215441, 236214, 55154, 238364, 236137, 118566, 237759, 238308, 236939, 237807, 87997, 165866, 238982, 155280, 236511, 236392, 128753, 236464, 235269, 227613, 236645, 236214, 20350, 94525, 68586, 40284, 58510, 93674, 238608, 243903, 171754, 236770, 236791, 61943, 153728, 188898, 235265, 109, 237936, 238526, 236645, 236214, 234541, 90621, 730, 235261, 235276, 235276, 235304, 235260, 19265, 235313, 4405, 70774, 235278, 237941, 58510, 237990, 238700, 239779, 237611, 6596, 235261, 235276, 235276, 235304, 235260, 235283, 19265, 235313, 236791, 208134, 237138, 215441, 236791, 198766, 78949, 235265, 31288, 58510, 237990, 238700, 239779, 237611, 236214, 234541, 85024, 132793, 236791, 56787, 238665, 48060, 227613, 125507, 236840, 236791, 187800, 225022, 94492, 236864, 50316, 238519, 236589, 22803, 143636, 237722, 40284, 32048, 238780, 236511, 46355, 238867, 236137, 211896, 236392, 80289, 239937, 236817, 72159, 93806, 65952, 238002, 238602, 200901, 235269, 209611, 235269, 235248, 240753, 242930, 60709, 28693, 237986, 215441, 220641, 73713, 237433, 236137, 34459, 238036, 61742, 235265, 108, 236039, 236569, 72163, 123472, 91940, 122717, 239753, 236859, 237807, 55154, 238364, 160590, 237135, 215441, 235248, 242870, 32048, 58510, 237990, 238700, 239779, 237611, 236791, 61943, 74860, 237598, 50316, 238519, 236589, 236648, 32048, 238500, 236183, 147801, 58510, 237990, 238700, 239779, 237611, 236840, 32048, 238500, 236039, 235265, 91940, 122717, 239753, 236859, 235248, 241656, 31288, 58510, 237990, 238700, 239779, 237611, 236214, 161882, 236655, 241736, 60709, 58510, 237990, 244179, 239060, 146689, 211896, 236392, 80289, 239937, 236817, 40284, 78821, 237722, 55154, 238364, 235248, 241656, 31288, 58510, 237990, 238700, 239779, 237611, 236214, 143636, 240449, 49061, 238513, 149735, 109976, 139148, 30044, 237495, 238693, 13663, 31288, 55154, 238364, 201619, 236392, 110308, 78949, 235265, 108, 235278, 236554, 238364, 235248, 241656, 41388, 238693, 31288, 55154, 238364, 201619, 26291, 48740, 239109, 224790, 235269, 61943, 236645, 237807, 30743, 239907, 236392, 224790, 235269, 112762, 239571, 131006, 237807, 235248, 242454, 238138, 197054, 73143, 238650, 235832, 69581, 2330, 109, 235313, 189764, 108, 239483, 122717, 239753, 236859, 235248, 241656, 58510, 237990, 238700, 239779, 237611, 236214, 54715, 238740, 236375, 91940, 122717, 239753, 236859, 235248, 241656, 215441, 236791, 227613, 40284, 125507, 236840, 236791, 133057, 241949, 22618, 21167, 237458, 50316, 237807, 237014, 153145, 61943, 74860, 237598, 235269, 93241, 236214, 87997, 215441, 236791, 143636, 240449, 198766, 238080, 22618, 236840, 69581, 235265, 5231, 236417, 238146, 93241, 236361, 63806, 236464, 127149, 238335, 236511, 17309, 78749, 236137, 13566, 236791, 49427, 239227, 236039, 237722, 93241, 236361, 143636, 240449, 198766, 40284, 215441, 236361, 70231, 235119, 238500, 236464, 207092, 237233, 237603, 236666, 22618, 69581, 116742, 108, 235832, 237807, 26801, 237602, 90621, 235269, 93241, 236361, 55154, 238364, 241656, 31288, 122096, 239135, 236432, 239814, 146689, 236137, 235248, 241897, 238199, 245310, 236859, 236791, 5231, 237964, 237990, 238700, 239779, 237611, 56341, 235832, 198766, 40284, 143613, 73523, 236137, 142882, 72159, 53355, 238994, 239254, 29599, 688, 61742, 235265, 591, 27922, 22803, 24493, 55154, 238364, 237807, 132929, 215134, 236511, 201619, 49061, 238513, 236392, 106204, 238036, 124431, 109976, 143613, 53355, 244597, 95091, 95945, 237807, 132929, 21237, 31288, 58510, 237990, 238700, 239779, 237611, 236214, 102708, 46355, 237545, 236511, 50316, 237302, 237807, 135132, 235248, 242579, 236569, 61943, 238080, 22618, 72941, 50316, 237302, 236791, 110308, 78949, 2330, 108], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:42380 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:18 engine.py:275] Added request cmpl-3a1721456ada42a689e10f22057621d7-0.
INFO 02-16 20:30:18 engine.py:275] Added request cmpl-163324ef4d1e4147b21e8911e159968e-0.
INFO 02-16 20:30:18 engine.py:275] Added request cmpl-22c088de38764ef29518a7c772586c42-0.
INFO 02-16 20:30:18 metrics.py:455] Avg prompt throughput: 1114.4 tokens/s, Avg generation throughput: 31.1 tokens/s, Running: 4 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 10.4%, CPU KV cache usage: 0.0%.
INFO 02-16 20:30:23 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 187.5 tokens/s, Running: 4 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 12.3%, CPU KV cache usage: 0.0%.
INFO 02-16 20:30:24 logger.py:39] Received request cmpl-a089db3ad8ff4378a9f3dd80e58cc6dc-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8d ëª¨ë\x93\x88ì\x97\x90ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dì\x97\x90 ë\x8c\x80í\x95´ ëª\x87 ê°\x80ì§\x80 ê·¼ë³¸ì\xa0\x81ì\x9d¸ ì§\x88ë¬¸ì\x9d\x84 í\x95©ë\x8b\x88ë\x8b¤. â\x80\x94 "ê·¸ê²\x8c ë\xad\x90ì\x95¼?", "í\x81´ë\x9d¼ì\x9d´ì\x96¸í\x8a¸ ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dê³¼ ë\xad\x90ê°\x80 ë\x8b¬ë\x9d¼?", "ì\x99\x9c ì\x93¸ë§\x8cí\x95´?". ì\x97¬ê¸°ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x97¬ë\x9f¬ë¶\x84ì\x9d\x98 ì²« ì\x9b¹ì\x82¬ì\x9d´í\x8a¸ë¥¼ ë§\x8cë\x93\x9cë\x8a\x94 ë\x8d°ì\x97\x90 í\x95\x84ì\x9a\x94í\x95\x9c ê°\x80ì\x9e¥ ì\xa0\x81í\x95©í\x95\x9c í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë¥¼ ì\x96´ë\x96»ê²\x8c ì\xa0\x95í\x95\x98ë\x8a\x94 ì§\x80ì\x97\x90 ë\x8c\x80í\x95\x9c ì\xa0\x81ì\xa0\x88í\x95\x9c ì§\x80ë\x8f\x84ì\x99\x80 í\x95¨ê»\x98 ê°\x80ì\x9e¥ ì\x9d¸ê¸°ì\x9e\x88ë\x8a\x94 ì\x84\x9cë²\x84 ì\x82¬ì\x9d´ë\x93\x9c ì\x9b¹ í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë\x93¤ì\x9d\x98 ê°\x9cì\x9a\x94ë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤. ë\x81\x9dì\x9c¼ë¡\x9c ë\x86\x92ì\x9d\x80 ì\x88\x98ì¤\x80ì\x9d\x98 ì\x9b¹ ì\x84\x9cë²\x84 ë³´ì\x95\x88ì\x97\x90 ë\x8c\x80í\x95\x9c ì\x86\x8cê°\x9cë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 235703, 251918, 252469, 235979, 236212, 251918, 235703, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 18198, 251316, 251918, 235979, 236048, 252469, 235442, 235611, 239189, 235979, 254473, 252690, 235979, 235657, 250064, 189966, 237301, 239335, 235979, 251699, 251732, 235703, 249966, 250043, 235703, 251918, 252469, 187197, 253615, 235657, 235979, 239434, 237361, 235979, 252233, 251316, 187197, 251918, 252469, 235979, 236212, 251918, 235703, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 18198, 251316, 251918, 235979, 236048, 252469, 235442, 235611, 239189, 235979, 254473, 252690, 235979, 235657, 250064, 235703, 249966, 250043, 189966, 251336, 249616, 235367, 253114, 236728, 189966, 237301, 253045, 52724, 235657, 249616, 235703, 236067, 249616, 52724, 235611, 238512, 235979, 237429, 239189, 235703, 236338, 247790, 235703, 248215, 239189, 187197, 236067, 251732, 235979, 237361, 239189, 235703, 248215, 251918, 18198, 253114, 236011, 235979, 252151, 251732, 235979, 252151, 238900, 235265, 21221, 249616, 251316, 664, 235442, 235611, 239189, 235442, 236212, 251336, 189966, 236591, 250043, 235703, 253114, 238512, 46062, 664, 235367, 247790, 236728, 235979, 248215, 238512, 235703, 248215, 236728, 235703, 248806, 239189, 235367, 252233, 239189, 187197, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 18198, 251316, 251918, 235979, 236048, 252469, 235442, 235611, 239189, 235979, 254473, 252690, 235979, 235657, 250064, 235442, 237429, 238512, 189966, 236591, 250043, 235442, 235657, 249616, 189966, 252151, 237361, 235979, 248215, 238512, 46062, 664, 235703, 251642, 252469, 187197, 251699, 239189, 235979, 236067, 251336, 235367, 253114, 236728, 100269, 187197, 249966, 237361, 235442, 239189, 235657, 235703, 251918, 252469, 187197, 253615, 235657, 235979, 239434, 237361, 235979, 252233, 251316, 187197, 249966, 237361, 235979, 251845, 237361, 235979, 237478, 251918, 235703, 248215, 252690, 187197, 236212, 235496, 187197, 254276, 236775, 235703, 247204, 237361, 235703, 248215, 236728, 235367, 252233, 239189, 235979, 238103, 238512, 189966, 236067, 251336, 235979, 251699, 252469, 235979, 252233, 251316, 189966, 250064, 235657, 235703, 249966, 250043, 18198, 253114, 251918, 235703, 253615, 251316, 235367, 253114, 252469, 52724, 235657, 249616, 235703, 254473, 238103, 187197, 236338, 247790, 235367, 253114, 236011, 235367, 253114, 252469, 18198, 251316, 251918, 235979, 236338, 251732, 235703, 254473, 251918, 235703, 254276, 251336, 235367, 247790, 237361, 235979, 238103, 238512, 187197, 248806, 236728, 235979, 248806, 235481, 235442, 236212, 251336, 187197, 236338, 253114, 235367, 253114, 252690, 235979, 252233, 251316, 187197, 236067, 249616, 235703, 249966, 250043, 189966, 251336, 249616, 235367, 253114, 252469, 187197, 236338, 247790, 235703, 236338, 251732, 235367, 253114, 252469, 187197, 236067, 249616, 235979, 249583, 251918, 235703, 251642, 249616, 18198, 253114, 239335, 235442, 235481, 252690, 52724, 235657, 249616, 235703, 254473, 238103, 187197, 248215, 239189, 235442, 239189, 235657, 235703, 254473, 251732, 235979, 252233, 251316, 187197, 251918, 252469, 235979, 236212, 251918, 187197, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 187197, 254276, 236775, 18198, 251316, 251918, 235979, 236338, 251732, 235703, 254473, 251918, 235703, 254276, 251336, 235367, 247790, 237361, 235979, 251699, 238900, 235703, 248215, 252690, 52724, 235657, 252469, 235703, 253615, 251316, 235979, 238103, 238512, 187197, 236338, 252469, 235442, 237429, 237612, 235367, 253114, 236011, 235979, 252151, 251732, 235979, 252151, 238900, 235265, 189966, 247790, 248215, 235703, 252469, 238512, 235979, 236048, 252469, 189966, 253913, 250677, 235703, 248215, 249616, 187197, 251732, 252690, 235703, 238900, 249616, 235703, 248215, 252690, 187197, 254276, 236775, 187197, 251918, 252469, 235979, 236212, 251918, 189966, 237429, 236728, 235703, 253114, 251732, 235703, 249966, 250043, 189966, 251336, 249616, 235367, 253114, 252469, 187197, 253913, 251336, 235442, 235657, 252469, 235979, 238103, 238512, 187197, 236338, 252469, 235442, 237429, 237612, 235367, 253114, 236011, 235979, 252151, 251732, 235979, 252151, 238900, 235265], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:42372 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:24 logger.py:39] Received request cmpl-957e5891427745a0861cb7ad6a960234-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        # Objectives\nEvaulate the difference between client and server-side web applications\nRefresh key concepts and technologies for web design\nInstall the web server and test its functionality\nCreate and customize an HTML page with PHP\n# Agenda and content\nHow websites work\nServer-side processing\nWeb servers\nServer-side programming and PHP\nBootstrap recap\n# How websites work\n1. two components of any web application\n• 모든 web site and application에는 two sides가 있음\n• server-side : 정보가 중앙에서 저장, 검색 및 처리되는 위치\n• client-side : user\'s computers\n• 둘 다 중요한 역할을 함\n• server-side에서 정보 및 처리에 집중함 (the engine)\n• client-side 측이란 사용자가 보고 상호 작용하는 것 (the user interface)\n\u200b\n2. client and server\nWeb Client\n• 필요할 때 인터넷에 연결\n• 일반적으로 web browser(client) software(예: Internet Explorer 또는 Firefox 등)를 실행함\n• HTTP(Hypertext Transfer Protocol) 사용\n• server에서 web pages 요청\n• server로부터 web pages and files 수신\nWeb server\n• 인터넷에 지속적으로 연결\n• web server software(예: Apache 또는 Internet Information Server)를 실행함\n• HTTP(Hypertext Transfer Protocol) 사용\n• web page에 대한 요청을 수신함\n• 요청에 응답하고 상태 코드, 웹 페이지 및 관련 파일을 전송함\n\u200b\n3. dialogue between the client and the server\n• Client/Server는 "client"와 "server"라는 두 컴퓨터 프로그램 사이의 관계를 설명할 수 있음\nClient\n• server에서 특정 유형의 서비스(예: file 또는 database access)를 요청\nServer\n• 요청을 수행하고 네트워크를 통해 client에 결과를 전송함\n• client와 server 간의 대화를 볼 수 있음\n• 브라우저 검사 창(browser inspection window)에서 네트워크 탭(network tab) 열기\n4. uniform resource identifier\n• URI – Uniform Resource Identifier\n• 인터넷에서 리소스를 식별\n• URN – Universal Resource Name\n• 고유 문자열 식별자\n• URL – Uniform Resource Locator\n• 웹 페이지 또는 그래픽 파일과 같은 리소스의 네트워크 위치를 나타내는 URI 유형\n\u200b\n5. TLD Top-Level Domain Name\n• A top-level domain(TLD)은 도메인 이름의 맨 오른쪽 부분을 식별함\n• 일반 TLD의 예:\n.com, .dll, .net, .mil, .dll, .dll, .int,\n.volution, .asia, .cat, .volution, .name, .vii,\n.mobi, .dlll, .info, .dlll, .post,\n.pro, .tel, .travel\n6. County Code TLDs\n• 원래 웹사이트의 지리적 위치(국가)를 표시하기 위한 두 개의 문자 코드\n• 실제로 등록자에게 로컬이 아닌 국가 코드 TLD로 도메인 이름을 얻는 것은 상당히 쉬움\n• 예: • .tv, .ws, .au, .dll, .uk\n\u200b\n7. Domain Name\n• 인터넷에서 organization or entity를 찾습니다.\nDomain Name System\n\u200b\n• 인터넷을 logical groups과 understandable names으로 나눔\n• 고유한 컴퓨터 IP 주소를 web browesr에 입력하는 text-based domain names과 연결\n• Bowser :\nhttp://google.com\n• IP 주소 : 173.194.116.72\n8. Domain Name System\n• The Domain Name System (DNS)은 IP address와 domain names를 연관짓는 것\n9. IP Internet Protocol\n• 인터넷에서 시스템 간에 데이터를 전송하는 방법을 제어하는 규칙 집합\n• IP가 패킷(packet)을 올바른 대상 주소로 라우팅(전송)함\n• 패킷이 대상에 도달할 때까지, 다음 가장 가까운 라우터(네트워크 트래픽을 이동하도록 설계된 하드웨어 장치)로 연속적으로 전달됨\n10. IP Address\n• 인터넷에 연결된 각 장치에는 고유한 숫자 IP 주소가 있음\n• 이러한 주소는 octest이라고 불리는 네 개의 숫자 그룹으로 구성됨\n• 216.58.194.46이 구글을 가져다 줄 것\n• IP 주소는 도메인 이름과 일치할 수 있음\n11. Internet Protocols\n• Protocols\n• clients와 servers가 네트워크를 통해 서로 통신하는 데 사용되는 방법을 설명하는 규칙\n• 인터넷과 웹을 작동시키는 단일 프로토콜은 없음\n• 특정 기능을 가진 여러 프로토콜이 필요함\n12. HTTP - Hypertext Transfer Protocol\n• 웹에서 text, graphic images, sound, video, and other multimedia files과 같은 파일을 교환하기 위한 규칙 집합\n• web browser는 웹 페이지 및 관련 파일에 대한 HTTP 요청을 보냄\n• web server는 HTTP 응답을 웹 브라우저로 다시 보냄\n13. FTP File Transfer Protocol\n• 인터넷의 컴퓨터 간에 파일을 교환할 수 있도록 허용하는 규칙 집합\n• 웹 개발자는 일반적으로 FTP를 사용하여 웹 페이지 파일을 컴퓨터에서 웹 서버로 전송함\n• FTP는 또한 다른 서버에서 개별 컴퓨터로 프로그램과 파일을 다운로드하는 데 사용됨\n14. E-Mail Protocols\n• Sending E-mail\n• SMTP Simple Mail Transfer Protocol\n• Receiving E-mail\n• POP (POP3) Post Office Protocol\n• IMAP Internet Mail Access Protocol\n# Server-side processing works\n1. static web page\n2. static web page and client-side scripts\n• 오직, 인터넷을 통한 액세스를 활성화하려면 원격 웹 서버(remote web server)가 필요함\n• Static web pages on local machines는 항상 인터넷 액세스가 필요한 것은 아님\n• 문서로서, static web pages에는 viewer(web browser)만 필요함\n• browser는 콘텐츠 처리만 담당\n• HTML과 Javascript를 해석하기 위한 파서를 통합함\n• The control is local : 사용자가 Javascript를 비활성화할 수 있음\n\u200b\n3. dynamic web page\n4. dynamic page: an example?\n5. dynamic web page and server-side scripts\n• 일반적으로 서버 측 코드는 원격 시스템에서 호스팅됨 (즉, 인터넷이 필요함)\n• Server-side scripts를 통해 보다 강력한 작업 및 요청 가능\n• browser (클라이언트) level에서 실행되지 않음\n• client가 실행 중인 scripts를 제어(확인)하지 않음\n• 요청을 처리하기 위해 정교한 웹 서버(예: Apache)가 필요함\n\u200b\n6. static VS dynamic web pages\nStatic web page\n• 파일 업로드 전에 생성된 콘텐츠\n• 모든 업데이트에 파일 업로드 필요\n• 모든 사용자에게 동일한 컨텐츠 제공\n• 요구 사항\n• 하드 디스크, 웹 브라우저\n• 이점\n• 기본 프로그래밍 기술 필요\n• 어디서나 실행\nDynamic web page\n• 요청 시 콘텐츠가 생성됨\n• 업데이트에 새 파일이 필요하지 않음\n• Custom content\n• 요구사항(추가)\n• 웹 서버, 언어 프로세서\n• 이점\n• 업데이트 및 유지 관리가 용이함\n• 대규모 재사용 가능\n\u200b\n7. server-side programming\n1. web server가 요청을 수신하고 있음\n2. server에 언어 프로세서/서버 측 응용 프로그램이 설치되어 있음\n3. server가 요청을 수신할 때마다 server는 적절한 입력 데이터가 있는 언어 프로세서 또는 서버 측 애플리케이션를 호출함\n4. 언어 프로세서/서버 측 응용 프로그램의 실행 결과를 사용자에게 제시함\n\u200b\n8. advantages of server-side programming\n• 요청에 따라 다른 응답이 수신됨\n• 정보의 중앙 저장소 (데이터베이스)\n• 효율적인 정보 저장 및 전달\n• customized user experience\n• 콘텐츠에 대한 제어된 액세스\n• 세션/상태 정보 저장\n• 통지 및 통신\n• 데이터 분석\n• 전체 프로세스가 사용자에게 투명함\n• 백엔드 관리\n• 타사 서비스와의 상호 작용\n\u200b\n9. technologies for client and server side\n• 클라이언트 측과 서버 측의 역할이 다르기 때문에 서로 다른 기술과 언어에 의존함\n• Client-side : 웹 사이트 구조, 레이아웃, 인터페이스, 콘텐츠 및 상호 작용\n• Server-side : 중앙 집중식 정보 처리(클라이언트), 성능 최적화\n• 그러나 클라이언트측 언어는 서버측에서 처리됨\n• 이 과정에서는 클라이언트 사이드 언어에 초점을 맞출 것\n\u200b\n10. client-side is awesome !\n• 클라이언트 측과 서버 측이 경쟁 상대가 아님\n• 서버측 기능이 동적 컨텐츠로 웹 페이지의 성능을 확장함\n• 클라이언트 측 프로그래밍을 통해 다운로드된 페이지에서 상호 작용 가능\n\u200b\n11. server-side and client-side go together\n\u200b\n12. three-tier model\n• 많은 사람들이 그것을 구식이라고 말함\n• 그러나, 그것은 여전히 많은 웹 애플리케이션들을 대표함\n\u200b\n13. the “stack”\n\u200b\n14. full-stack technologies\n\u200b\n15. two meanings of “back-end”\n\u200b\n“Back end” in software architecture\n• 서버측 기술\n사용자가 보는 것과 비교(front-end)\n"Back-end” in content management systems\n• 일반 대중이 액세스할 수 있는 것과 비교하여 관리자 또는 시스템 운영자가 보는 것\n• 백오피스의 동의어로 사용됨 (used as synonmous of back-office)\n# Web servers\n1. what is a web server\n• HTTP 요청을 처리하고 응답을 반환하는 컴퓨터 프로그램\n• HTTP 요청 수신\n• 요청한 리소스를 찾거나 CGI 프로그램을 실행함\n• 리소스 또는 프로그램 출력을 브라우저로 반환함\n• 가장 일반적인 웹 서버는 Apache, IIS, NodeJS, nginx, ligHttpd 등이 있음\n\u200b\n2. HTTP is OSI layer 7\n\u200b\n\u200b\n3. HTTP web servers\n• 여러 공급업체의 웹 서버가 있음\n• Apache web server\n• Apache Tomcat\n• Microsoft IIS\n• NGINX\n• Lighttpd\n• Google web server\n\u200b\n4. a changing scenario in the world of servers\n\u200b\n5. apache features\n• 서버 측 프로그래밍 언어 지원\n• 아파치는 펄, 파이썬, Tcl, PHP를 포함한 몇 가지 공통 언어 인터페이스를 지원함\n또한 mod_auth, mod_access, mod_digest 등 다양한 대중적인 인증 모듈을 지원함\n• IPv6 지원\n• IPv6가 기본 Apache Portable Runtime 라이브러리에서 지원되는 시스템에서 Apache는 기본적으로 IPv6 수신 소켓을 가져옴\n• 가상 호스팅\n• Apache는 하나의 설치 인스턴스가 여러 웹 사이트를 서비스하도록 허용함\n예를 들어 하나의 Apache 설치는 sse.afnog.org, ws.afnog.org 등을 지원할 수 있음\n• SSL 지원\n• 단순화된 구성\n• 기본 Windows NT 유니코드 지원\n\u200b\n6. apache request phase\n\u200b\n7. Common Gateway Interface\n• 웹 서버와 CGI 프로그램 간의 상호 작용을 위한 통합 규격\n• CGI 프로그램은 웹 서버로부터 데이터를 수신하고 일반적으로 생성된 HTML 콘텐츠를 반환함\n• CGI 프로그램은 XML 파일, 이미지, 비디오 스트림 및 브라우저가 이해할 수 있는 기타 콘텐츠를 생성하는 데 사용됨\n• 일부 웹 서버에는 서버 측 코드가 저장되는 "cgi-bin" 폴더가 있음\n# Server-side programming and PHP\n1. server-side programming languages\n• C# (pronounced C-Sharp) / ASP.net\n• 마이크로소프트에서 개발했으며 일반적으로 기업에서 대규모 데이터베이스를 관리하는 데 사용됨\n• Java / Spring\n• 자바는 가장 오래되고 널리 채택된 프로그래밍 언어 중 하나임\n• Node.js (JavaScript)\n• 자바스크립트의 인기가 웹사이트의 인터페이스에 상호작용성을 더하기 위해 커짐에 따라, 일부 회원들은,\n커뮤니티에서 서버 측 언어로도 사용할 수 있는 방법을 찾았음. 노드에서 동일한 JavaScript 구문을 사용함\n• Python\n• 파이썬은 학생들에게 그들의 첫 번째 프로그래밍 언어를 가르치기 위해 대학에서 인기가 있고, 그것은 널리 사용됨\n• PHP\n• 웹에서 사용하기 위해 조정되어야 했던 다른 언어들과 달리, PHP는 웹 개발로 설계됨\n• Ruby\n• 루비는 우아하고 생산적인 프로그래밍 언어라고 자부함\n\u200b\n2. compiled languages\n\u200b\n3. interpreted language\n• 서버 측에서는 호환성으로 인해 해석된 언어가 널리 채택됨\n\u200b\n4. hybrid language\n\u200b\n5. XAMPP\n• Cross-Platform (X) Apache (A), MySQL (M), PHP (P) and Perl (P)\n• 로컬 웹 서버를 생성하는 경량 Apache 배포\n• 무료 다운로드 및 사용\n\u200b\n6. the PHP language\n• PHP는 "PHP: Hypertext Preprocessor"의 약자\n• 널리 사용되는 오픈 소스 스크립트 언어\n• 스크립트가 서버에서 실행됨\n• 무료 다운로드 및 사용\n• 다양한 플랫폼(Windows, Linux, Unix, Mac OS X 등)에서 uns.\n• PHP는 오늘날 사용되는 거의 모든 서버(Apache, IIS 등)와 호환됨\n• 광범위한 데이터베이스 지원\n• 대규모 사용자 커뮤니티에 의해 지원됨\n\u200b\n7. what can you do with PHP?\n• 동적 페이지 내용 생성\n• 서버에서 파일 만들기, 열기, 읽기, 쓰기, 삭제 및 닫기\n• form 데이터를 수집\n• cookies를 주고받음\n• 데이터베이스의 데이터 추가, 삭제, 수정\n• 사용자 액세스를 제어\n• 데이터를 암호화\n• 이메일을 보내고 처리\n• 그 외 여러 가지…\n\u200b\n8. advantages of PHP\n• 그것은 웹에서 가장 큰 블로그 시스템의 핵심에 있을 만큼 강력함\n• 그것은 가장 큰 소셜 네트워크 (페이스북)를 운영하기에 충분히 깊음\n• 또한 초보자용 서버 사이드 언어가 될 만큼 쉬움\n• PHP를 사용하면 HTML 출력에 제한되지 않음\n• 이미지, PDF 파일 및 플래시 동영상도 출력할 수 있음. XHTML 및 XML과 같은 텍스트를 출력할 수도 있음\n\u200b\n9. PHP files\n• PHP 파일은 텍스트, HTML, CSS, 자바스크립트, PHP 코드를 포함할 수 있음\n• 서버에서 PHP 코드가 실행되며, 결과는 일반 HTML로 브라우저에 반환됨\n• PHP 파일의 확장자는 ".php"임\n\u200b\n10. XAMPP working directory\n• XAMPP 폴더의 tdocs 디렉터리에 파일을 저장하려는 경우\n• 여기에 튜토리얼을 위한 모든 .html, .php 파일이 있음\n\u200b\n11. accessing the web server via web browser\n• XAMPP에 의해 만들어진 로컬 웹 서버 주소창에 http://localhost/을 타이핑해서 접근할 수 있음\n• htdocs 디렉토리에 액세스함\n\u200b', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 235345, 39035, 108, 56106, 7459, 573, 5830, 1865, 5553, 578, 6934, 235290, 2043, 2744, 8557, 108, 20686, 2621, 17482, 578, 14363, 604, 2744, 2480, 108, 18150, 573, 2744, 6934, 578, 2121, 1277, 24492, 108, 4912, 578, 45610, 671, 19319, 2602, 675, 29617, 108, 235345, 54389, 578, 3381, 108, 2299, 21605, 1160, 108, 7538, 235290, 2043, 10310, 108, 3728, 27280, 108, 7538, 235290, 2043, 19991, 578, 29617, 108, 81391, 60758, 108, 235345, 2250, 21605, 1160, 108, 235274, 235265, 1378, 8832, 576, 1089, 2744, 4724, 108, 235431, 87997, 2744, 3440, 578, 4724, 96564, 1378, 10012, 236361, 21167, 238036, 108, 235431, 6934, 235290, 2043, 865, 104569, 236361, 47250, 241717, 22803, 143077, 235269, 203755, 60709, 168788, 156610, 178535, 108, 235431, 5553, 235290, 2043, 865, 2425, 235303, 235256, 25175, 108, 235431, 235248, 242870, 32048, 215134, 236511, 61169, 238080, 236392, 81796, 108, 235431, 6934, 235290, 2043, 22803, 104569, 60709, 168788, 236179, 113832, 237935, 238467, 591, 1175, 4800, 235275, 108, 235431, 5553, 235290, 2043, 235248, 241656, 235832, 240136, 61943, 184819, 206583, 36203, 238033, 63806, 237545, 40284, 29599, 591, 1175, 2425, 7222, 235275, 108, 235421, 108, 235284, 235265, 5553, 578, 6934, 108, 3728, 16338, 108, 235431, 126942, 238080, 54715, 227397, 242319, 236179, 197054, 108, 235431, 234541, 90621, 2744, 13178, 235278, 5251, 235275, 6815, 235278, 238748, 235292, 9047, 37607, 132879, 43690, 73143, 235275, 236791, 191754, 238467, 108, 235431, 24493, 235278, 38954, 1082, 19657, 33209, 235275, 61943, 108, 235431, 6934, 22803, 2744, 7297, 227038, 108, 235431, 6934, 236375, 124431, 2744, 7297, 578, 6630, 22618, 237502, 108, 3728, 6934, 108, 235431, 227397, 242319, 236179, 34805, 238982, 90621, 197054, 108, 235431, 2744, 6934, 6815, 235278, 238748, 235292, 41173, 132879, 9047, 5254, 13506, 235275, 236791, 191754, 238467, 108, 235431, 24493, 235278, 38954, 1082, 19657, 33209, 235275, 61943, 108, 235431, 2744, 2602, 236179, 71100, 227038, 236392, 22618, 237502, 238467, 108, 235431, 227038, 236179, 224047, 241305, 48060, 209975, 215441, 235269, 31288, 106191, 60709, 187003, 145240, 236392, 31087, 239673, 238467, 108, 235421, 108, 235304, 235265, 25085, 1865, 573, 5553, 578, 573, 6934, 108, 235431, 16338, 235283, 7538, 236214, 664, 5251, 235281, 237807, 664, 5720, 235281, 139978, 93828, 235248, 241897, 243032, 237524, 226417, 160590, 236137, 217761, 236791, 220596, 238080, 22618, 21167, 238036, 108, 4609, 108, 235431, 6934, 22803, 94492, 236864, 46355, 238867, 236137, 206586, 235278, 238748, 235292, 2482, 132879, 8746, 3684, 235275, 236791, 227038, 108, 7538, 108, 235431, 227038, 236392, 22618, 238356, 48060, 123722, 236859, 239779, 237611, 236791, 187118, 5553, 236179, 161050, 236791, 31087, 239673, 238467, 108, 235431, 5553, 237807, 6934, 127149, 236137, 26801, 236817, 236791, 181539, 22618, 21167, 238036, 108, 235431, 129669, 236950, 237312, 238721, 102890, 236417, 162337, 235278, 22262, 19840, 5912, 235275, 22803, 123722, 236859, 239779, 237611, 235248, 245434, 235278, 15987, 6684, 235275, 120699, 236386, 108, 235310, 235265, 12876, 6537, 30824, 108, 235431, 40256, 1157, 54071, 17688, 54378, 108, 235431, 227397, 242319, 22803, 63102, 237433, 236354, 236791, 130886, 239793, 108, 235431, 752, 28674, 1157, 25797, 17688, 5649, 108, 235431, 46749, 237766, 45980, 236645, 239375, 130886, 239793, 236645, 108, 235431, 10822, 1157, 54071, 17688, 177926, 108, 235431, 31288, 106191, 132879, 20350, 238608, 242108, 145240, 237233, 132929, 63102, 237433, 236354, 236137, 123722, 236859, 239779, 237611, 178535, 236791, 211491, 238151, 236214, 40256, 46355, 238867, 108, 235421, 108, 235308, 235265, 584, 10426, 6835, 235290, 6982, 33581, 5649, 108, 235431, 586, 2267, 235290, 5584, 11988, 235278, 235279, 10426, 235275, 236648, 50316, 238519, 236589, 145887, 236137, 235248, 241384, 44245, 239296, 240734, 43761, 238304, 236392, 130886, 239793, 238467, 108, 235431, 234541, 584, 10426, 236137, 71277, 235292, 108, 235265, 872, 235269, 954, 37023, 235269, 954, 1936, 235269, 954, 18410, 235269, 954, 37023, 235269, 954, 37023, 235269, 954, 635, 235269, 108, 235265, 33845, 235269, 954, 30425, 235269, 954, 4991, 235269, 954, 33845, 235269, 954, 1067, 235269, 954, 20352, 235269, 108, 235265, 190505, 235269, 954, 235258, 14906, 235269, 954, 3296, 235269, 954, 235258, 14906, 235269, 954, 2729, 235269, 108, 235265, 1010, 235269, 954, 2214, 235269, 954, 30203, 108, 235318, 235265, 4992, 6698, 584, 10426, 235256, 108, 235431, 68586, 238608, 31288, 236417, 78749, 236137, 34805, 236432, 237603, 178535, 235278, 237522, 236361, 235275, 236791, 100280, 236569, 72159, 168947, 93828, 49532, 236137, 45980, 236645, 215441, 108, 235431, 61928, 236939, 236375, 194174, 236645, 70471, 54868, 241725, 235832, 23745, 242567, 228223, 215441, 584, 10426, 236375, 50316, 238519, 236589, 145887, 236392, 210976, 236214, 143613, 36203, 238272, 239055, 235248, 242454, 240520, 108, 235431, 71277, 235292, 2947, 954, 9540, 235269, 954, 4677, 235269, 954, 792, 235269, 954, 37023, 235269, 954, 1458, 108, 235421, 108, 235324, 235265, 33581, 5649, 108, 235431, 227397, 242319, 22803, 8344, 689, 12395, 236791, 134498, 21743, 235265, 108, 16968, 5649, 1479, 108, 235421, 108, 235431, 227397, 242319, 236392, 24742, 5452, 237233, 64827, 4752, 26291, 38585, 248067, 108, 235431, 46749, 237766, 236511, 235248, 241897, 243032, 237524, 9790, 40712, 237433, 236791, 2744, 36780, 484, 235255, 236179, 120618, 40284, 2793, 235290, 6576, 11988, 4752, 237233, 197054, 108, 235431, 174969, 865, 108, 2255, 1336, 5996, 235265, 872, 108, 235431, 9790, 40712, 237433, 865, 235248, 235274, 235324, 235304, 235265, 235274, 235315, 235310, 235265, 235274, 235274, 235318, 235265, 235324, 235284, 108, 235321, 235265, 33581, 5649, 1479, 108, 235431, 714, 33581, 5649, 1479, 591, 61514, 235275, 236648, 9790, 3986, 237807, 11988, 4752, 236791, 50833, 237956, 244190, 236214, 29599, 108, 235315, 235265, 9790, 9047, 33209, 108, 235431, 227397, 242319, 22803, 27941, 202429, 127149, 236179, 112762, 236791, 31087, 239673, 40284, 130059, 236392, 31850, 236770, 40284, 235248, 240753, 242930, 113832, 237961, 108, 235431, 9790, 236361, 98027, 245247, 235278, 28860, 235275, 236392, 133057, 238131, 239296, 26801, 237047, 40712, 237433, 236375, 79871, 237312, 240880, 235278, 237045, 239673, 235275, 238467, 108, 235431, 98027, 245247, 235832, 26801, 237047, 236179, 50316, 239522, 238080, 54715, 109535, 235269, 115049, 126277, 23248, 239303, 238138, 79871, 237312, 237524, 235278, 239156, 236859, 239779, 237611, 106365, 238608, 242108, 236392, 195532, 236345, 153145, 65952, 238002, 238602, 30181, 237135, 241023, 236770, 60318, 237924, 235275, 236375, 50833, 238982, 90621, 31087, 239522, 242912, 108, 235274, 235276, 235265, 9790, 13169, 108, 235431, 227397, 242319, 236179, 197054, 238602, 163558, 60318, 237924, 96564, 46749, 237766, 236511, 235248, 243077, 236645, 9790, 40712, 237433, 236361, 21167, 238036, 108, 235431, 11464, 174287, 40712, 237433, 236214, 21500, 644, 235832, 112778, 83133, 137120, 123722, 49532, 236137, 235248, 243077, 236645, 20350, 242206, 26291, 220641, 242912, 108, 235431, 235248, 235284, 235274, 235318, 235265, 235308, 235321, 235265, 235274, 235315, 235310, 235265, 235310, 235318, 235832, 49061, 239334, 236392, 174538, 236039, 184434, 29599, 108, 235431, 9790, 40712, 237433, 236214, 50316, 238519, 236589, 145887, 237233, 32929, 237924, 238080, 22618, 21167, 238036, 108, 235274, 235274, 235265, 9047, 119741, 108, 235431, 119741, 108, 235431, 9325, 237807, 27280, 236361, 123722, 236859, 239779, 237611, 236791, 187118, 55154, 236375, 83160, 237502, 40284, 65503, 61943, 156610, 130059, 236392, 220596, 40284, 235248, 240753, 242930, 108, 235431, 227397, 242319, 237233, 31288, 236392, 63806, 237358, 236569, 238705, 236214, 80289, 236666, 132880, 238772, 242019, 236648, 56341, 238036, 108, 235431, 94492, 236864, 201619, 236392, 23248, 237589, 197781, 132880, 238772, 242019, 235832, 126942, 238467, 108, 235274, 235284, 235265, 24493, 728, 27808, 1082, 19657, 33209, 108, 235431, 31288, 22803, 2793, 235269, 19176, 5191, 235269, 4835, 235269, 3569, 235269, 578, 1156, 49301, 6630, 237233, 132929, 145240, 236392, 75985, 239457, 72159, 168947, 235248, 240753, 242930, 113832, 237961, 108, 235431, 2744, 13178, 236214, 31288, 106191, 60709, 187003, 59994, 120043, 71100, 24493, 227038, 236392, 29283, 245229, 108, 235431, 2744, 6934, 236214, 24493, 224047, 241305, 236392, 31288, 129669, 236950, 237312, 238721, 236375, 171167, 29283, 245229, 108, 235274, 235304, 235265, 75477, 6925, 19657, 33209, 108, 235431, 227397, 242319, 236137, 235248, 241897, 243032, 237524, 127149, 236179, 145240, 236392, 75985, 239457, 238080, 22618, 21167, 153145, 189305, 237545, 40284, 235248, 240753, 242930, 113832, 237961, 108, 235431, 31288, 227613, 236645, 236214, 234541, 90621, 75477, 236791, 61943, 72494, 31288, 106191, 145240, 236392, 235248, 241897, 243032, 237524, 22803, 31288, 55154, 238364, 236375, 31087, 239673, 238467, 108, 235431, 75477, 236214, 86622, 236511, 102708, 55154, 238364, 22803, 49532, 239793, 235248, 241897, 243032, 237524, 236375, 226417, 237233, 145240, 236392, 32048, 238138, 200576, 40284, 65503, 61943, 242912, 108, 235274, 235310, 235265, 637, 235290, 13617, 119741, 108, 235431, 108778, 637, 235290, 1765, 108, 235431, 118674, 13702, 16220, 19657, 33209, 108, 235431, 116597, 637, 235290, 1765, 108, 235431, 38132, 591, 40852, 235304, 235275, 4791, 7006, 33209, 108, 235431, 209282, 9047, 16220, 11499, 33209, 108, 235345, 13506, 235290, 2043, 10310, 3598, 108, 235274, 235265, 2022, 2744, 2602, 108, 235284, 235265, 2022, 2744, 2602, 578, 5553, 235290, 2043, 37089, 108, 235431, 44245, 239385, 235269, 227397, 242319, 236392, 83160, 236511, 235248, 241377, 237533, 236354, 236791, 147226, 237154, 236817, 227860, 237722, 68586, 239862, 31288, 55154, 238364, 235278, 25888, 2744, 6934, 235275, 236361, 126942, 238467, 108, 235431, 45096, 2744, 7297, 611, 2813, 15051, 236214, 122201, 237047, 227397, 242319, 235248, 241377, 237533, 236354, 236361, 126942, 236511, 143613, 23745, 239957, 108, 235431, 133889, 236375, 236554, 235269, 2022, 2744, 7297, 96564, 36183, 235278, 4405, 13178, 235275, 237598, 126942, 238467, 108, 235431, 13178, 236214, 176427, 168788, 237598, 205799, 238272, 108, 235431, 19319, 237233, 73009, 236791, 56787, 239465, 72159, 168947, 59994, 236554, 236791, 83160, 237961, 238467, 108, 235431, 714, 2582, 603, 2813, 865, 61943, 184819, 73009, 236791, 51732, 240090, 237154, 236817, 238080, 22618, 21167, 238036, 108, 235421, 108, 235304, 235265, 12415, 2744, 2602, 108, 235310, 235265, 12415, 2602, 235292, 671, 3287, 235336, 108, 235308, 235265, 12415, 2744, 2602, 578, 6934, 235290, 2043, 37089, 108, 235431, 234541, 90621, 55154, 238364, 235248, 241656, 215441, 236214, 68586, 239862, 27941, 202429, 22803, 83942, 236354, 240880, 242912, 591, 242579, 235269, 227397, 242319, 235832, 126942, 238467, 235275, 108, 235431, 13506, 235290, 2043, 37089, 236791, 187118, 29283, 236039, 84608, 238365, 236511, 211896, 60709, 227038, 153728, 108, 235431, 13178, 591, 239483, 122717, 239753, 236859, 235275, 2403, 22803, 191754, 234654, 48682, 238036, 108, 235431, 5553, 236361, 191754, 47250, 236589, 37089, 236791, 31850, 236770, 235278, 239131, 236589, 235275, 74860, 48682, 238036, 108, 235431, 227038, 236392, 168788, 72159, 93806, 35467, 237905, 236511, 31288, 55154, 238364, 235278, 238748, 235292, 41173, 235275, 236361, 126942, 238467, 108, 235421, 108, 235318, 235265, 2022, 28404, 12415, 2744, 7297, 108, 22555, 2744, 2602, 108, 235431, 145240, 142995, 200576, 31087, 236179, 116518, 238602, 176427, 108, 235431, 87997, 142995, 238266, 78749, 236179, 145240, 142995, 200576, 126942, 108, 235431, 87997, 61943, 236645, 70471, 49697, 236666, 236511, 235248, 241996, 164594, 110308, 108, 235431, 73713, 237302, 17309, 239383, 108, 235431, 30181, 237135, 82206, 161615, 235269, 31288, 129669, 236950, 237312, 238721, 108, 235431, 11464, 239158, 108, 235431, 28693, 238744, 58510, 93674, 238608, 243903, 213222, 126942, 108, 235431, 53355, 238173, 236554, 236915, 191754, 108, 28500, 2744, 2602, 108, 235431, 227038, 27941, 176427, 236361, 116518, 242912, 108, 235431, 142995, 238266, 78749, 236179, 104606, 145240, 235832, 126942, 74860, 48682, 238036, 108, 235431, 10917, 3381, 108, 235431, 73713, 237302, 236417, 239383, 235278, 239043, 236361, 235275, 108, 235431, 31288, 55154, 238364, 235269, 171754, 236770, 132880, 237533, 236554, 108, 235431, 11464, 239158, 108, 235431, 142995, 238266, 78749, 60709, 46355, 236183, 159838, 236361, 120340, 235832, 238467, 108, 235431, 26801, 240753, 237551, 90869, 236417, 237545, 153728, 108, 235421, 108, 235324, 235265, 6934, 235290, 2043, 19991, 108, 235274, 235265, 2744, 6934, 236361, 227038, 236392, 22618, 237502, 48060, 21167, 238036, 108, 235284, 235265, 6934, 236179, 171754, 236770, 132880, 237533, 236554, 235283, 236554, 238364, 235248, 241656, 224047, 237545, 226417, 235832, 65952, 237924, 141048, 21167, 238036, 108, 235304, 235265, 6934, 236361, 227038, 236392, 22618, 237502, 238080, 54715, 237354, 236039, 6934, 236214, 99797, 240046, 236511, 120618, 112762, 236361, 72941, 171754, 236770, 132880, 237533, 236554, 132879, 55154, 238364, 235248, 241656, 122096, 239135, 236432, 239814, 146689, 236791, 83942, 238483, 238467, 108, 235310, 235265, 171754, 236770, 132880, 237533, 236554, 235283, 236554, 238364, 235248, 241656, 224047, 237545, 226417, 236137, 191754, 161050, 236791, 61943, 236645, 70471, 31850, 236569, 238467, 108, 235421, 108, 235321, 235265, 17927, 576, 6934, 235290, 2043, 19991, 108, 235431, 227038, 236179, 156976, 102708, 224047, 241305, 235832, 22618, 237502, 242912, 108, 235431, 104569, 236137, 47250, 241717, 143077, 237433, 591, 238266, 90081, 239571, 131006, 235275, 108, 235431, 207092, 241938, 85024, 104569, 143077, 60709, 31087, 239522, 108, 235431, 39565, 2425, 3281, 108, 235431, 176427, 236179, 71100, 31850, 236770, 238602, 235248, 241377, 237533, 236354, 108, 235431, 48740, 239109, 235283, 237047, 239190, 104569, 143077, 108, 235431, 83160, 236183, 60709, 83160, 237502, 108, 235431, 112762, 211558, 108, 235431, 216491, 132880, 237533, 236354, 236361, 61943, 236645, 70471, 148188, 238068, 238467, 108, 235431, 124559, 241167, 237135, 159838, 108, 235431, 81071, 236417, 206586, 237807, 236137, 36203, 238033, 63806, 237545, 108, 235421, 108, 235315, 235265, 14363, 604, 5553, 578, 6934, 2857, 108, 235431, 91940, 122717, 239753, 236859, 235248, 241656, 237233, 55154, 238364, 235248, 241656, 236137, 61169, 238080, 235832, 32048, 238500, 236386, 147801, 55154, 236375, 102708, 213222, 237233, 171754, 236770, 236179, 23594, 240127, 238467, 108, 235431, 16338, 235290, 2043, 865, 31288, 17309, 78749, 49061, 237602, 235269, 161882, 236655, 241736, 235269, 227397, 67650, 236354, 235269, 176427, 60709, 36203, 238033, 63806, 237545, 108, 235431, 13506, 235290, 2043, 865, 47250, 241717, 113832, 237935, 238186, 104569, 168788, 235278, 239483, 122717, 239753, 236859, 823, 64301, 239474, 75500, 237603, 236817, 108, 235431, 20350, 122865, 91940, 122717, 239753, 236859, 241656, 171754, 236770, 236214, 55154, 238364, 241656, 22803, 168788, 242912, 108, 235431, 11464, 65084, 236864, 180860, 91940, 122717, 239753, 236859, 160590, 237135, 171754, 236770, 236179, 87634, 239158, 236392, 207221, 238483, 29599, 108, 235421, 108, 235274, 235276, 235265, 5553, 235290, 2043, 603, 10740, 1241, 108, 235431, 91940, 122717, 239753, 236859, 235248, 241656, 237233, 55154, 238364, 235248, 241656, 235832, 43033, 241513, 36203, 236800, 236361, 23745, 239957, 108, 235431, 55154, 238364, 241656, 201619, 235832, 49697, 237603, 235248, 241996, 164594, 236375, 31288, 106191, 236137, 64301, 239474, 236392, 69781, 237199, 238467, 108, 235431, 91940, 122717, 239753, 236859, 235248, 241656, 58510, 93674, 238608, 243903, 236392, 187118, 32048, 238138, 200576, 238602, 106191, 22803, 36203, 238033, 63806, 237545, 153728, 108, 235421, 108, 235274, 235274, 235265, 6934, 235290, 2043, 578, 5553, 235290, 2043, 871, 3584, 108, 235421, 108, 235274, 235284, 235265, 2149, 235290, 8058, 2091, 108, 235431, 139148, 64691, 94525, 213707, 236392, 49061, 238186, 235832, 112778, 72163, 238467, 108, 235431, 20350, 122865, 235269, 20350, 139988, 41896, 232523, 139148, 31288, 122096, 239135, 236432, 239814, 146689, 134660, 26801, 238946, 238467, 108, 235421, 108, 235274, 235304, 235265, 573, 1080, 8388, 235369, 108, 235421, 108, 235274, 235310, 235265, 2247, 235290, 8388, 14363, 108, 235421, 108, 235274, 235308, 235265, 1378, 44304, 576, 1080, 1811, 235290, 615, 235369, 108, 235421, 108, 235366, 3663, 1580, 235369, 575, 6815, 16333, 108, 235431, 55154, 238364, 241656, 213222, 108, 236417, 237545, 184819, 29283, 236214, 29599, 237233, 51732, 237905, 235278, 10573, 235290, 615, 235275, 108, 235281, 3663, 235290, 615, 235369, 575, 3381, 4815, 5188, 108, 235431, 234541, 26801, 237935, 235832, 235248, 241377, 237533, 236354, 238080, 22618, 72941, 29599, 237233, 51732, 237905, 72494, 159838, 236645, 132879, 27941, 202429, 118566, 237759, 184819, 29283, 236214, 29599, 108, 235431, 124559, 237410, 238810, 236354, 236137, 49697, 236137, 236770, 236375, 61943, 242912, 591, 3909, 685, 14904, 477, 142950, 576, 1355, 235290, 26878, 235275, 108, 235345, 4556, 27280, 108, 235274, 235265, 1212, 603, 476, 2744, 6934, 108, 235431, 24493, 227038, 236392, 168788, 48060, 224047, 241305, 236392, 78821, 239457, 40284, 235248, 241897, 243032, 237524, 226417, 108, 235431, 24493, 227038, 22618, 237502, 108, 235431, 227038, 236511, 63102, 237433, 236354, 236791, 134498, 160696, 104852, 226417, 236392, 191754, 238467, 108, 235431, 63102, 237433, 236354, 132879, 226417, 182260, 236392, 129669, 236950, 237312, 238721, 236375, 78821, 239457, 238467, 108, 235431, 126277, 234541, 85024, 31288, 55154, 238364, 236214, 41173, 235269, 126325, 235269, 13116, 16436, 235269, 130278, 235269, 10608, 5118, 235258, 73143, 235832, 21167, 238036, 108, 235421, 108, 235284, 235265, 24493, 603, 188625, 8651, 235248, 235324, 108, 235421, 108, 235421, 108, 235304, 235265, 24493, 2744, 27280, 108, 235431, 197781, 41388, 240115, 238391, 238308, 236137, 31288, 55154, 238364, 236361, 21167, 238036, 108, 235431, 41173, 2744, 6934, 108, 235431, 41173, 200046, 108, 235431, 8057, 126325, 108, 235431, 646, 15870, 235356, 108, 235431, 8186, 15980, 235258, 108, 235431, 6238, 2744, 6934, 108, 235421, 108, 235310, 235265, 476, 11117, 20860, 575, 573, 2134, 576, 27280, 108, 235421, 108, 235308, 235265, 119983, 5119, 108, 235431, 55154, 238364, 235248, 241656, 58510, 93674, 238608, 243903, 171754, 236770, 224790, 108, 235431, 23745, 238183, 237924, 236214, 235248, 247164, 235269, 59994, 235832, 246881, 235269, 584, 786, 235269, 29617, 236791, 157329, 236511, 235248, 242394, 128753, 41388, 238693, 171754, 236770, 227397, 67650, 236354, 236791, 224790, 238467, 108, 239607, 236511, 1958, 235298, 6764, 235269, 1958, 235298, 10956, 235269, 1958, 235298, 53795, 73143, 32048, 238780, 236511, 26801, 237935, 85024, 30743, 239907, 34459, 245526, 236392, 224790, 238467, 108, 235431, 69245, 235318, 224790, 108, 235431, 69245, 235318, 236361, 28693, 238744, 41173, 55327, 29844, 213862, 238997, 237822, 236432, 22803, 224790, 156610, 27941, 202429, 22803, 41173, 236214, 28693, 238744, 90621, 69245, 235318, 22618, 237502, 44997, 241859, 236392, 174538, 244911, 108, 235431, 23248, 237047, 83942, 236354, 240880, 108, 235431, 41173, 236214, 113859, 236137, 65952, 237924, 121935, 241053, 236354, 236361, 197781, 31288, 17309, 78749, 236791, 206586, 236345, 153145, 189305, 237545, 238467, 108, 238748, 236791, 153935, 113859, 236137, 41173, 65952, 237924, 236214, 485, 497, 235265, 2518, 64684, 235265, 2164, 235269, 17804, 235265, 2518, 64684, 235265, 2164, 73143, 236392, 224790, 238080, 22618, 21167, 238036, 108, 235431, 46870, 224790, 108, 235431, 80289, 239937, 236817, 238602, 220641, 108, 235431, 28693, 238744, 7620, 27382, 46355, 236405, 238494, 237135, 224790, 108, 235421, 108, 235318, 235265, 119983, 3853, 8342, 108, 235421, 108, 235324, 235265, 11506, 53785, 31687, 108, 235431, 31288, 55154, 238364, 237807, 104852, 226417, 127149, 236137, 36203, 238033, 63806, 237545, 236392, 168947, 83160, 237961, 235248, 240753, 239862, 108, 235431, 104852, 226417, 236648, 31288, 55154, 238364, 236375, 124431, 112762, 236791, 22618, 237502, 48060, 234541, 90621, 116518, 238602, 19319, 176427, 236791, 78821, 239457, 238467, 108, 235431, 104852, 226417, 236648, 26176, 145240, 235269, 23088, 235269, 51732, 187687, 32275, 236859, 239398, 60709, 129669, 236950, 237312, 238721, 236361, 201194, 238080, 22618, 72941, 28693, 237986, 176427, 236791, 116518, 40284, 65503, 61943, 242912, 108, 235431, 32929, 237092, 31288, 55154, 238364, 96564, 55154, 238364, 235248, 241656, 215441, 236361, 143077, 156610, 664, 59500, 235290, 3049, 235281, 235248, 241592, 238589, 236361, 21167, 238036, 108, 235345, 13506, 235290, 2043, 19991, 578, 29617, 108, 235274, 235265, 6934, 235290, 2043, 19991, 17044, 108, 235431, 585, 235345, 591, 182216, 585, 235290, 37684, 235275, 1148, 48623, 235265, 1936, 108, 235431, 41645, 227195, 236375, 237433, 237964, 236859, 22803, 227613, 238267, 101715, 234541, 90621, 28693, 238391, 22803, 26801, 240753, 237551, 112762, 239571, 131006, 236791, 159838, 40284, 65503, 61943, 242912, 108, 235431, 12071, 1148, 11640, 108, 235431, 34103, 238131, 236214, 126277, 44245, 238608, 238070, 236464, 235248, 241518, 236432, 168426, 240050, 238602, 58510, 93674, 238608, 243903, 171754, 236770, 47250, 113859, 238700, 108, 235431, 13116, 235265, 2833, 591, 44980, 235275, 108, 235431, 34103, 238131, 161615, 239837, 236859, 236137, 30743, 236386, 236361, 31288, 236417, 78749, 236137, 227397, 67650, 236354, 236179, 36203, 238033, 238115, 237545, 237154, 236392, 70231, 72159, 93806, 134512, 243805, 236179, 156976, 235269, 32929, 237092, 228837, 84551, 235269, 108, 239709, 242780, 236405, 238649, 22803, 55154, 238364, 235248, 241656, 171754, 236770, 236375, 236840, 61943, 238080, 22618, 72941, 130059, 236392, 134498, 239985, 238036, 235265, 61138, 237135, 22803, 49697, 236666, 236511, 22978, 49061, 237465, 236392, 61943, 238467, 108, 235431, 21237, 108, 235431, 59994, 235832, 246881, 236648, 126160, 237889, 215895, 20350, 132642, 185111, 170174, 58510, 93674, 238608, 243903, 171754, 236770, 236791, 23248, 238500, 237924, 236386, 93806, 26801, 237834, 22803, 30743, 236386, 236361, 21167, 236464, 235269, 20350, 139988, 235248, 241518, 236432, 61943, 242912, 108, 235431, 29617, 108, 235431, 31288, 22803, 61943, 72159, 93806, 42916, 236864, 141048, 238305, 235248, 238267, 240080, 102708, 171754, 236770, 237290, 237233, 123083, 236432, 235269, 29617, 236214, 31288, 227613, 236375, 65952, 238002, 242912, 108, 235431, 39671, 108, 235431, 200936, 237584, 236214, 54087, 236655, 48060, 50390, 238325, 85024, 58510, 93674, 238608, 243903, 171754, 236770, 112778, 34103, 237092, 238467, 108, 235421, 108, 235284, 235265, 33544, 17044, 108, 235421, 108, 235304, 235265, 34051, 5255, 108, 235431, 55154, 238364, 235248, 241656, 180860, 83942, 239457, 237154, 26291, 30743, 237138, 56787, 239465, 238602, 171754, 236770, 236361, 235248, 241518, 236432, 168426, 240050, 242912, 108, 235421, 108, 235310, 235265, 19504, 5255, 108, 235421, 108, 235308, 235265, 1576, 1306, 11564, 108, 235431, 10006, 235290, 22834, 591, 235356, 235275, 41173, 591, 235280, 823, 52281, 591, 235296, 823, 29617, 591, 235295, 235275, 578, 97306, 591, 235295, 235275, 108, 235431, 54868, 241725, 31288, 55154, 238364, 236791, 116518, 40284, 43033, 240833, 41173, 50548, 238199, 108, 235431, 60331, 239077, 32048, 238138, 200576, 60709, 61943, 108, 235421, 108, 235318, 235265, 573, 29617, 5255, 108, 235431, 29617, 236214, 664, 29697, 235292, 27808, 1082, 2769, 39487, 235281, 236137, 151245, 236645, 108, 235431, 235248, 241518, 236432, 61943, 156610, 44245, 244142, 44997, 236354, 32275, 237611, 239837, 236859, 171754, 236770, 108, 235431, 32275, 237611, 239837, 236859, 236361, 55154, 238364, 22803, 191754, 242912, 108, 235431, 60331, 239077, 32048, 238138, 200576, 60709, 61943, 108, 235431, 32048, 238780, 236511, 117904, 243792, 243751, 235278, 5006, 235269, 21415, 235269, 102599, 235269, 5439, 14837, 1576, 73143, 235275, 22803, 6042, 235265, 108, 235431, 29617, 236214, 44245, 240703, 239805, 61943, 156610, 73523, 236137, 87997, 55154, 238364, 235278, 95375, 235269, 126325, 73143, 235275, 237807, 83942, 239457, 242912, 108, 235431, 154304, 240696, 237601, 236511, 112762, 239571, 131006, 224790, 108, 235431, 26801, 240753, 237551, 61943, 236645, 134512, 242780, 236405, 238649, 236179, 23594, 237138, 224790, 242912, 108, 235421, 108, 235324, 235265, 1212, 798, 692, 749, 675, 29617, 235336, 108, 235431, 49697, 237603, 106191, 196582, 116518, 108, 235431, 55154, 238364, 22803, 145240, 128047, 236386, 235269, 120699, 236386, 235269, 229288, 236386, 235269, 198670, 236386, 235269, 155718, 60709, 235248, 243579, 236386, 108, 235431, 1736, 112762, 236791, 22618, 239346, 108, 235431, 5428, 236791, 40712, 236464, 239824, 238036, 108, 235431, 112762, 239571, 131006, 236137, 112762, 133818, 235269, 155718, 235269, 164079, 108, 235431, 61943, 236645, 235248, 241377, 237533, 236354, 236791, 31850, 236770, 108, 235431, 112762, 236791, 235248, 241560, 238033, 236817, 108, 235431, 11464, 238519, 236666, 236392, 29283, 238151, 236464, 168788, 108, 235431, 20350, 136201, 197781, 128753, 235417, 108, 235421, 108, 235321, 235265, 17927, 576, 29617, 108, 235431, 20350, 139988, 31288, 22803, 126277, 185075, 111276, 93674, 27941, 202429, 236137, 235248, 244073, 239308, 236179, 21167, 236392, 49427, 243977, 84608, 238365, 238467, 108, 235431, 20350, 139988, 126277, 185075, 44997, 244173, 123722, 236859, 239779, 237611, 591, 67650, 236354, 240142, 235275, 236791, 118566, 237759, 72159, 236179, 163964, 238304, 239055, 235248, 243890, 238036, 108, 235431, 86622, 236511, 87634, 237036, 236645, 237545, 55154, 238364, 160590, 237135, 171754, 236770, 236361, 178049, 49427, 243977, 235248, 242454, 240520, 108, 235431, 29617, 236791, 61943, 123472, 19319, 182260, 236179, 31850, 236511, 234654, 48682, 238036, 108, 235431, 23088, 235269, 12143, 145240, 60709, 117904, 238608, 236569, 49697, 237759, 237047, 236840, 182260, 238080, 22618, 21167, 238036, 235265, 230462, 60709, 26176, 237233, 132929, 235248, 242756, 50691, 236791, 182260, 238080, 22618, 236840, 21167, 238036, 108, 235421, 108, 235315, 235265, 29617, 6630, 108, 235431, 29617, 145240, 236648, 235248, 242756, 50691, 235269, 19319, 235269, 26862, 235269, 34103, 238131, 161615, 239837, 236859, 235269, 29617, 215441, 236791, 157329, 238080, 22618, 21167, 238036, 108, 235431, 55154, 238364, 22803, 29617, 215441, 236361, 191754, 238070, 238986, 235269, 161050, 236214, 234541, 19319, 236375, 129669, 236950, 237312, 238721, 236179, 78821, 239457, 242912, 108, 235431, 29617, 145240, 236137, 69781, 237199, 236645, 236214, 16054, 1556, 235281, 238700, 108, 235421, 108, 235274, 235276, 235265, 1576, 1306, 11564, 3434, 15670, 108, 235431, 1576, 1306, 11564, 235248, 241592, 238589, 236137, 474, 19229, 82206, 242341, 237524, 236432, 236179, 145240, 236392, 143077, 227860, 236214, 95917, 108, 235431, 41896, 191232, 235248, 242463, 238772, 236432, 240674, 236392, 168947, 87997, 954, 2527, 235269, 954, 1556, 145240, 235832, 21167, 238036, 108, 235421, 108, 235274, 235274, 235265, 58389, 573, 2744, 6934, 3998, 2744, 13178, 108, 235431, 1576, 1306, 11564, 236179, 23594, 237138, 128047, 236770, 237589, 54868, 241725, 31288, 55154, 238364, 40712, 237433, 240197, 236179, 4494, 1336, 20156, 235283, 236392, 81071, 235832, 241496, 206666, 165866, 239969, 238080, 22618, 21167, 238036, 108, 235431, 531, 2077, 82927, 82206, 242341, 238772, 236432, 236179, 235248, 241377, 237533, 236354, 238467, 108, 235421], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:42378 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:24 engine.py:275] Added request cmpl-a089db3ad8ff4378a9f3dd80e58cc6dc-0.
INFO 02-16 20:30:24 engine.py:275] Added request cmpl-957e5891427745a0861cb7ad6a960234-0.
INFO 02-16 20:30:25 logger.py:39] Received request cmpl-d7db4e17f3f54a7795257d865bbb017f-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        서버사이드스크립트언ㅇ, JSP , ASP, PHP의 차이점은?\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\nJSP, ASP, PHP는 서버사이드스크립트언어의 대표적인 언어들입니다. 스크립트언어란, SW를 직접적으로 개발하는 일반적인 프로그래밍 언어와 달리 이미 만들어진 SW를 제어하는 용도로 사용됩니다.\n\u200b\n\u200b\n예를 들어 일반적인 사용자를 클라이언트라 불르고 서버와 클라이언트는 서로 통신합니다. 클라이언트가 특정 웹사이트에 접속하려고하면 클라이언트에서 보낸 요청이 서버로 가고 서버에서 클라이언트로 응답합니다. 이때 서버측에 있는 프로그램을 서버사이드 프로그램이라고 합니다. 반대의 개념으로는 클라이언트사이드언어와 클라이언트사이드가 있습니다.\n\u200b\n\u200b\n언어별 차이점은?\n\u200b\n\u200b\n\u200b\n현재 우리나라는 JAVA의 점유율이 압도적으로 높은데요. 자바의 점유율을 높인 것이 바로 JSP입니다. JSP는 원래 Java Server Page의 약자였지만 오픈소스이기 때문에 오라클사의 상표권문제로 Jakarta server page로 이름 바꿔 여전히 JSP라 불립니다. JSP는 주로 대규모 기업용 시스템 구축에 사용됩니다. 안정적이고 유지보수가 쉽기 때문입니다.\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\nPHP는 Personal Home Page Tools로 웹 페이지 제작시 기본적으로 웹관련 함수들이 많아 생산성이 높다는 점을 장점으로 많이 사용하고 있습니다. 개발속도가 빠르고 배포가 간편해서 주로 쇼핑몰같은 가볍고 규모가 작은 웹페이지에서 많이 사용됩니다.\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\nASP는 Active Server Pages의 약자이며, 마이크로소프트가 제작한 서버사이드스크립트엔진입니다. 국내에선 사용자가 적은데 이유는 윈도우서버에서 강점을 보이며 리눅스환경에서는 다른 서버사이드언어들의 점유율이 높기 때문입니다. 국내서버환경은 비용문제로 리눅스의 점유율이 높기 때문에 국내에서의 점유율은 높지 않습니다. 다만 윈도우환경에서는 압도적인 강점을 보이며 PHP와 JSP는 제한된 언어에서 구동되지만 ASP는 윈도우에서 지원하는 모든 언어를 웹에서 쓸 수 있도록 하는 장점이 있습니다.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 236554, 238364, 236417, 217534, 161615, 239837, 236859, 239753, 241805, 235269, 196371, 1688, 48623, 235269, 29617, 236137, 91292, 235832, 239158, 236648, 235336, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 187655, 235269, 48623, 235269, 29617, 236214, 55154, 238364, 236417, 217534, 161615, 239837, 236859, 239753, 236770, 236137, 26801, 238946, 85024, 171754, 236770, 237290, 47555, 235265, 32275, 237611, 239837, 236859, 239753, 236770, 240136, 235269, 13179, 236791, 143636, 240449, 90621, 227613, 40284, 234541, 85024, 58510, 93674, 238608, 243903, 171754, 236770, 237807, 123083, 236432, 22573, 128047, 236770, 237589, 13179, 236791, 31850, 236770, 40284, 120340, 236840, 236375, 61943, 129090, 235265, 108, 235421, 108, 235421, 108, 238748, 236791, 153935, 234541, 85024, 61943, 236645, 236791, 91940, 122717, 239753, 236859, 236950, 83133, 238500, 236464, 55154, 238364, 237807, 91940, 122717, 239753, 236859, 236214, 55154, 236375, 83160, 237502, 43395, 235265, 91940, 122717, 239753, 236859, 236361, 94492, 236864, 31288, 236417, 78749, 236179, 165866, 238982, 227860, 236464, 123472, 91940, 122717, 239753, 236859, 22803, 29283, 243927, 227038, 235832, 55154, 238364, 236375, 23248, 236464, 55154, 238364, 22803, 91940, 122717, 239753, 236859, 236375, 224047, 241305, 43395, 235265, 11464, 238740, 55154, 238364, 241656, 236179, 72941, 226417, 236392, 55154, 238364, 236417, 217534, 226417, 235832, 112778, 179694, 235265, 78821, 236800, 236137, 49532, 241631, 26291, 236214, 91940, 122717, 239753, 236859, 236417, 217534, 239753, 236770, 237807, 91940, 122717, 239753, 236859, 236417, 217534, 236361, 55496, 235265, 108, 235421, 108, 235421, 108, 239753, 236770, 239793, 91292, 235832, 239158, 236648, 235336, 108, 235421, 108, 235421, 108, 235421, 108, 238513, 238360, 93241, 236915, 139978, 160705, 236137, 131901, 237766, 241938, 235832, 235248, 242189, 236840, 90621, 187800, 236648, 238266, 237526, 235265, 34103, 238131, 236137, 131901, 237766, 241938, 236392, 187800, 236589, 93205, 55393, 236375, 196371, 47555, 235265, 196371, 236214, 68586, 238608, 12071, 13506, 6974, 236137, 151245, 236645, 239867, 95091, 44245, 244142, 237433, 236354, 235832, 236386, 147801, 44245, 236950, 239483, 236417, 236137, 36203, 238946, 239765, 237465, 236939, 236375, 35285, 6934, 2602, 236375, 145887, 55393, 246974, 41896, 232523, 196371, 236950, 83133, 239837, 12957, 235265, 196371, 236214, 40712, 236375, 26801, 240753, 237551, 28693, 238391, 237545, 27941, 202429, 49061, 240130, 236179, 61943, 129090, 235265, 70685, 236864, 237603, 224907, 46355, 236183, 237036, 236669, 236361, 235248, 243274, 236386, 119518, 47555, 235265, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 29697, 236214, 15103, 4566, 6974, 20506, 236375, 31288, 106191, 31850, 238115, 236569, 28693, 238744, 90621, 31288, 237956, 240429, 200901, 94525, 99805, 236655, 50390, 238325, 237154, 235832, 187800, 161509, 131901, 236392, 60318, 239158, 26291, 99805, 235832, 61943, 48060, 55496, 235265, 227613, 238982, 236840, 236361, 235119, 238500, 236464, 50548, 238199, 236361, 127149, 239813, 206666, 40712, 236375, 235248, 241830, 241496, 242515, 239012, 236648, 23248, 249270, 236464, 235248, 240753, 237551, 236361, 63806, 236648, 31288, 83137, 22803, 99805, 235832, 61943, 129090, 235265, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 47263, 236214, 19380, 13506, 27779, 236137, 151245, 236645, 225022, 235269, 41645, 227195, 236375, 237433, 237964, 236859, 236361, 31850, 238115, 236511, 55154, 238364, 236417, 217534, 161615, 239837, 236859, 241167, 237589, 47555, 235265, 74116, 238151, 236179, 237700, 61943, 184819, 99797, 236648, 238266, 11464, 237766, 236214, 235248, 242984, 236840, 237312, 236554, 238364, 22803, 84608, 239158, 236392, 29283, 225022, 63102, 250412, 236354, 239457, 237392, 180860, 102708, 55154, 238364, 236417, 217534, 239753, 236770, 132642, 131901, 237766, 241938, 235832, 187800, 236386, 119518, 47555, 235265, 74116, 238151, 236554, 238364, 239457, 237392, 236648, 51732, 237545, 237465, 236939, 236375, 63102, 250412, 236354, 236137, 131901, 237766, 241938, 235832, 187800, 236386, 147801, 74116, 238151, 22803, 236137, 131901, 237766, 241938, 236648, 187800, 236183, 187132, 235265, 32048, 237598, 235248, 242984, 236840, 237312, 239457, 237392, 180860, 235248, 242189, 236840, 85024, 84608, 239158, 236392, 29283, 225022, 29617, 237807, 196371, 236214, 31850, 236511, 238602, 171754, 236770, 22803, 49061, 237358, 238070, 95091, 48623, 236214, 235248, 242984, 236840, 237312, 22803, 224790, 40284, 87997, 171754, 236770, 236791, 31288, 22803, 235248, 245471, 22618, 21167, 153145, 109976, 60318, 239158, 235832, 55496, 235265], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:42378 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:25 engine.py:275] Added request cmpl-d7db4e17f3f54a7795257d865bbb017f-0.
INFO 02-16 20:30:25 logger.py:39] Received request cmpl-c44d4022508c48b28ae5f4a906e7b6f6-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        안녕하세요 jju_developer입니다.오늘은제이쿼리 비동기 방식 연동에 대해 설명하다가따로 설명을 드려야 할 것 같은 정보가 있어서!! 글을 정리하여 적어봅니다~책을 읽다보면 서버사이드와 클라이언트 사이드를 많이 접하실텐데요?웹 프로그래밍에서서버 사이드/클라이언트 사이드가 나뉘고,어느 쪽에 중심을 두느냐에 따라 프로젝트의 방향이 달라지게 됩니다.그렇다면 클라이언트 사이드와 서버 사이드는 무엇일까요?1. 클라이언트 사이드(Client-Side)-클라이언트(사용자) 측에서 처리하는 것.클라이언트(사용자)가 입력한 것을 수신해서 HTML로 만들어서 크롬과 같은 애플리케이션에 해석해서 표시합니다.대표적으로 자바스크립트(Javascript)가 있습니다.2. 서버 사이드(Server-Side)-서버(제공자) 측에서 즉시 처리하는 것.서버 사이드는\xa0클라이언트로 보낼\xa0웹 페이지(HTML,\xa0JavaScript 등이 담긴)를\xa0만들며,작업들(사용자 유효성, DB 관련 등)을 수행합니다.대표적인 언어는 Java, PHP, Ruby, Python, Node.js 등이 있습니다.즉,서버와클라이언트는 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.클라이언트 사이드 언어를 다루고 그에 관련된 개발자들을프론트 엔드서버 사이드 언어를 다루고 그에 관련된 개발자를백엔드라 부릅니다.웹사이트를\xa0제작하는데\xa0쓰이는\xa0스크립트는실행되는 위치에 따라 클라이언트 사이드 스크립트와 서버사이드 스크립트로 구분합니다.서버사이드 스크립트는서버에서 해석해서 구동되는 스크립트이고,클라이언트 사이드 스크립트는브라우저에서 해석해서 구동되는 스크립트입니다.서버사이드 스크립트는 DB를 액세스 하는 게 주요 목적이고,클라이언트 사이드 스크립트는 브라우저의 객체를 제어하는데 쓰입니다.서버 사이드와 클라이언트의 데이터 교환은 HTTPS로 하는데요!여기서 HTTP의 한계를 알아보겠습니다.HTTP의 한계HTTP의 뒤 두 글자 Transfer Protocol.HTTP의 대전제는 “URL 및 부가정보를 통해 사용자가 원하는 페이지를 서버에요청한다,그리고 서버는 해당 요청에응답한다”입니다.사용자가 URL을 요청할 때에만!서버에서 해당 페이지를 꺼내주는 식이라는 겁니다.거꾸로\xa0말하자면,\xa0사용자는\xa0서버로부터\xa0새로운\xa0정보를\xa0받아보기\xa0위해서,\xa0반드시,\xa0새로운\xa0URL을\xa0요청해야\xa0한다는\xa0말과\xa0같습니다.예전에 로그인할 때 아이디 중복확인하는 거 해보셨죠?그때 서버에게 중복 검사를 요청하기 위해서 새 페이지를 요청해야만 했었는데,회원 정보 작성 중에는 페이지를 이동할 수 없었기 때문에새로 요청한 페이지를 팝업창으로 띄웠던 것입니다.(요즘 사이트들은 대부분 팝업창 없이 검사가 가능합니다. 이것이 바로\xa0 Ajax를 이용했기 때문이죠!!!)AJAX그 당시에 떠오르기 시작한 구글은 HTTP 규약을 뛰어넘는 방안을 제안합니다.이름하여AJAX입니다.AJAX를 쓰면, 유저는 새로운 HTML을 서버로부터 받는 것이 아닙니다.즉, 유저는 새로운 웹페이지로 이동하는 것이 아닙니다.대신, 동일한 웹페이지 내에서 DOM을 변경하게 됩니다.요청 페이지에서 이름 칸에 ‘쮸’를 쓰고, 내용에 ‘안녕하세요. 쮸입니다’라고 썼다고 해봅시다.사용자의 이벤트로부터 Javascript는 해당 이름과 내용이 쓰인 DOM을 읽습니다.그리고는 XMLHttpRequest 객체를 통해 웹서버에 해당 이름과 내용을 전송합니다.웹서버는 요청을 처리하고 XML, Text 혹은 JSON을 XMLHttpRequest 객체에 전송합니다.그러면, Javascript가 해당 응답 정보를 DOM에 씁니다.그렇게 결과페이지가 만들어집니다.\u200bAJAX를 쓰면 새로운 HTML을 서버로부터 받아야 하는 것이 아닙니다.동일한 페이지의 일부를 수정할 수도 있는 가능성이 생깁니다.결과적으로 사용자 입장에서는페이지 이동이 발생되지 않고 페이지 내부 변화만 일어나게 됩니다.HTML 페이지 전체를 다 바꿔야 하는 것이 아니라 부분만 바꿀 수 있게 되는 것입니다.이렇게 따로 페이지의 이동 없이 페이지 내부에서 검사를 하여 결과를 출력하는 것을 볼 수 있죵?아이디 중복체크하려면 필히 서버 쪽 DB와 통신하기 위해서 웹서버 동작이 필요한데,이때 페이지를 바꾸지 않고 요청 결과만 그대로 가져와서 띄우면 되게 됩니다.그 외에도 비밀번호 강도 확인, 검색어 실시간 추천, 마우스 커서나 스크롤바 위치에 반응하는 그림, 지도 표시 서비스 등등 다양합니다.<정리>Ajax는 웹 페이지 전체를다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있게 해 줍니다.즉 Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분에만 표시할 수 있습니다.이때 서버와는 다음과 같은 다양한 형태의 데이터를 주고받을 수 있습니다.JSONXMLHTML텍스트 파일 등Ajax의 장점Ajax를 이용하면 다음과 같은 장점이 있습니다.\u200b1.웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있습니다.2. 웹 페이지가 로드된 후에 서버로 데이터 요청을 보낼 수 있습니다. (Post를 통해 값을 서버 쪽으로 전달해 처리되고 받아올 수 있음)3. 웹 페이지가 로드된 후에 서버로부터 데이터를 받을 수 있습니다.4. 백그라운드 영역에서 서버로 데이터를 보낼 수 있습니다.Ajax의 단점Ajax를 이용하면 여러 장점을 가지지만, Ajax로도 다음과 같은 일들은 처리할 수 없습니다.\u200b1.Ajax는 클라이언트가 서버에 데이터를 요청하는 클라이언트 풀링 방식(사용자가 직접 요청)을 사용하므로,서버 푸시 방식(푸시알람 같은)의 실시간 서비스는 만들 수 없습니다.2. Ajax로는 바이너리 데이터를 보내거나 받을 수 없습니다.3. Ajax 스크립트가 포함된 서버가 아닌 다른 서버로 Ajax 요청을 보낼 수는 없습니다.4.클라이언트의 PC로 Ajax 요청을 보낼 수는 없습니다.Ajax 구성 요소- 웹 페이지의 표현을 위한HTML과 CSS- 데이터에 접근하거나 화면 구성을 동적으로 조작하기 위해 사용되는DOM 모델- 데이터의 교환을 위한JSON이나 XML- 웹 서버와의 비동기식 통신을 위한XMLHttpRequest 객체- 위에서 언급한 모든 기술을 결합하여 사용자의 작업 흐름을 제어하는 데 사용되는자바스크립트1 : 사용자에 의한 요청 이벤트가 발생합니다. (-> jju240 아이디 생성 요청함)2 : 요청 이벤트가 발생하면 이벤트 핸들러에 의해 자바스크립트가 호출됩니다.3 : 자바스크립트는 XMLHttpRequest 객체를 사용하여 서버로 요청을 보냅니다.이때 웹 브라우저는 요청을 보내고 나서,서버의 응답을 기다릴 필요 없이다른 작업을 처리할 수 있습니다.4 : 서버는 전달받은 XMLHttpRequest 객체를 가지고 Ajax 요청을 처리합니다.5,6 : 서버는 처리한 결과를 HTML, XML 또는 JSON 형태의 데이터로 웹 브라우저에 전달합니다.이때 전달되는 응답은 새 페이지 전부 보내는 것이 아니라 필요한 데이터만을 전달합니다.(->이미사용 중이라는 문구)7 : 서버로부터 전달받은 데이터를 가지고 웹 페이지의 일부분만을 갱신하는 자바스크립트를 호출합니다.8 : 최종으로 웹 페이지의 일부분만이 다시 로딩되어 표시됩니다. (-> 이미 사용 중인 아이디입니다!)XMLHttpRequest 객체Ajax의 가장 핵심적인 구성 요소는 바로 XMLHttpRequest 객체입니다.Ajax에서 XMLHttpRequest 객체는웹 브라우저가 서버와 데이터를 교환할 때 사용됩니다.웹 브라우저가 백그라운드에서 계속해서 서버와 통신할 수 있는 것은 바로 이 객체를 사용하기 때문입니다.let httpRequest = new XMLHttpRequest();이상으로 서버사이드, 클라이언트의 개념과 그 둘이 어떻게 데이터를 교환하는지 알아보았습니다.⭐⭐⭐⭐⭐ 이번 글은 이해하고 적는 것에 초점을 두었기 때문에 시간이 많이 걸렸었는데용\xa0ㅎㅎ😥\\중요한 개념이니 꼭 숙지하시는데 도움이 되었으면 좋겠습니다~!!!그럼 오늘도 수고하셨습니다~참고 웹사이트:http://tcpschool.com/ajax/ajax_intro_works', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 238179, 243415, 204551, 678, 3938, 235298, 64885, 47555, 235265, 237410, 240703, 236648, 236939, 235832, 244489, 236432, 51732, 237358, 236386, 51806, 238186, 50833, 237358, 236179, 142192, 220596, 188898, 236361, 240109, 236375, 220596, 236392, 99028, 238994, 238305, 69225, 29599, 132929, 104569, 236361, 215995, 236554, 2024, 153818, 236392, 35467, 236432, 72494, 99797, 236770, 247181, 12957, 235436, 240460, 236392, 229288, 236039, 237036, 237722, 55154, 238364, 236417, 217534, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236791, 99805, 235832, 165866, 236345, 238146, 240929, 238266, 237526, 235336, 237941, 58510, 93674, 238608, 243903, 22803, 236554, 238364, 160590, 237135, 235283, 239483, 122717, 239753, 236859, 160590, 237135, 236361, 38585, 248354, 236464, 235269, 236770, 241039, 235248, 240734, 236179, 47250, 239308, 236392, 93828, 241039, 243383, 236179, 156976, 132880, 242989, 236859, 236137, 51806, 240112, 235832, 123083, 236950, 236183, 237458, 235248, 129090, 235265, 236671, 241838, 236039, 237722, 91940, 122717, 239753, 236859, 160590, 237135, 237807, 55154, 238364, 160590, 237135, 236214, 60331, 242513, 236666, 239303, 237526, 235336, 235274, 235265, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 7817, 239483, 122717, 239753, 236859, 235278, 236417, 237545, 236645, 235275, 235248, 241656, 22803, 168788, 40284, 29599, 235265, 239483, 122717, 239753, 236859, 235278, 236417, 237545, 236645, 235275, 236361, 120618, 236511, 109241, 22618, 237502, 206666, 19319, 236375, 128047, 236770, 236554, 94177, 244875, 237233, 132929, 122096, 239135, 236432, 239814, 146689, 236179, 56787, 239465, 206666, 100280, 236569, 43395, 235265, 236800, 238946, 90621, 34103, 238131, 161615, 239837, 236859, 235278, 95661, 235275, 236361, 55496, 235265, 235284, 235265, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 7817, 236554, 238364, 235278, 236939, 237495, 236645, 235275, 235248, 241656, 22803, 235248, 242579, 236569, 168788, 40284, 29599, 235265, 236554, 238364, 160590, 237135, 236214, 236338, 239483, 122717, 239753, 236859, 236375, 29283, 245186, 236338, 237941, 106191, 235278, 11271, 235269, 236338, 44980, 73143, 235832, 205799, 241615, 235275, 236791, 236338, 237598, 237290, 238986, 235269, 238115, 238391, 237290, 235278, 236417, 237545, 236645, 46355, 241078, 237154, 235269, 13986, 187003, 73143, 235275, 236392, 22618, 238356, 43395, 235265, 236800, 238946, 85024, 171754, 236770, 236214, 12071, 235269, 29617, 235269, 39671, 235269, 21237, 235269, 13116, 235265, 2833, 73143, 235832, 55496, 235265, 242579, 235269, 236554, 238364, 237807, 239483, 122717, 239753, 236859, 236214, 31288, 106191, 236375, 55154, 236375, 134512, 242780, 236405, 239814, 146689, 236392, 153422, 236464, 181539, 22618, 69581, 235265, 239483, 122717, 239753, 236859, 160590, 237135, 171754, 236770, 236791, 32048, 238949, 236464, 20350, 236179, 187003, 238602, 227613, 236645, 134660, 237964, 240405, 236859, 209560, 237135, 236554, 238364, 160590, 237135, 171754, 236770, 236791, 32048, 238949, 236464, 20350, 236179, 187003, 238602, 227613, 236645, 236791, 239506, 241167, 237135, 236950, 43761, 245257, 12957, 235265, 237941, 236417, 78749, 236791, 236338, 236939, 238115, 40284, 238266, 236338, 241172, 206367, 236338, 161615, 239837, 236859, 236214, 238146, 238356, 156610, 178535, 236179, 156976, 91940, 122717, 239753, 236859, 160590, 237135, 32275, 237611, 239837, 236859, 237807, 55154, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 236375, 49061, 238304, 43395, 235265, 236554, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 236214, 236554, 238364, 22803, 56787, 239465, 206666, 49061, 237358, 156610, 32275, 237611, 239837, 236859, 224907, 235269, 239483, 122717, 239753, 236859, 160590, 237135, 32275, 237611, 239837, 236859, 236214, 238997, 236950, 237312, 238721, 22803, 56787, 239465, 206666, 49061, 237358, 156610, 32275, 237611, 239837, 236859, 47555, 235265, 236554, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 236214, 13986, 236791, 235248, 241377, 237533, 236354, 109976, 85181, 40712, 237526, 86040, 237603, 224907, 235269, 239483, 122717, 239753, 236859, 160590, 237135, 32275, 237611, 239837, 236859, 236214, 129669, 236950, 237312, 238721, 236137, 209611, 236791, 31850, 236770, 40284, 238266, 198670, 47555, 235265, 236554, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 236137, 112762, 75985, 239457, 236648, 116204, 236375, 109976, 238266, 237526, 235341, 237386, 236386, 236554, 24493, 236137, 35191, 238002, 236791, 78183, 236655, 237036, 241716, 21743, 235265, 20672, 236137, 35191, 238002, 20672, 236137, 212174, 93828, 153818, 236645, 19657, 33209, 235265, 20672, 236137, 26801, 237045, 236939, 236214, 1080, 6217, 60709, 43761, 236361, 173499, 236791, 187118, 61943, 184819, 68586, 40284, 106191, 236791, 55154, 238364, 236179, 237526, 239151, 78949, 235269, 186223, 55154, 238364, 236214, 56787, 238272, 227038, 236179, 240981, 241305, 78949, 235369, 47555, 235265, 236417, 237545, 184819, 10822, 236392, 227038, 238080, 54715, 236179, 237598, 235341, 236554, 238364, 22803, 56787, 238272, 106191, 236791, 235248, 244267, 238151, 237014, 236214, 130886, 235832, 139978, 235248, 245193, 12957, 235265, 238154, 242707, 236375, 236338, 238989, 236345, 236645, 237722, 235269, 236338, 236417, 237545, 236645, 236214, 236338, 236554, 238364, 236375, 124431, 236338, 239771, 140543, 236338, 173499, 236791, 236338, 239824, 236655, 237036, 236386, 236338, 237601, 206666, 235269, 236338, 238559, 237135, 236569, 235269, 236338, 239771, 140543, 236338, 6217, 236392, 236338, 237526, 239151, 149735, 236338, 78949, 236214, 236338, 238989, 237233, 236338, 239012, 21743, 235265, 238748, 237045, 236179, 202886, 236589, 238080, 54715, 72797, 238173, 47250, 239205, 239131, 236589, 40284, 73523, 56787, 237036, 243707, 244572, 235336, 236671, 238740, 55154, 238364, 70471, 47250, 239205, 102890, 236417, 236791, 227038, 72159, 93806, 236554, 104606, 106191, 236791, 227038, 149735, 237598, 235248, 238267, 238220, 221277, 235269, 237880, 237399, 104569, 198766, 47250, 96564, 106191, 236791, 195532, 238080, 22618, 56341, 238220, 236386, 147801, 239771, 236375, 227038, 236511, 106191, 236791, 235248, 243590, 238391, 240197, 26291, 235248, 245622, 244614, 240080, 121393, 17188, 237526, 243728, 17309, 78749, 84551, 26801, 237092, 238304, 235248, 243590, 238391, 240197, 56341, 235832, 102890, 236417, 236361, 153728, 43395, 235265, 11464, 237506, 235832, 55393, 236375, 236338, 61632, 236791, 208134, 238267, 236386, 119518, 235832, 244572, 188351, 176385, 236671, 84815, 236569, 236179, 235248, 242664, 237410, 238500, 236386, 106793, 236511, 49061, 239334, 236648, 24493, 235248, 240753, 239618, 236392, 235248, 244258, 236770, 242429, 236214, 51806, 238179, 236392, 31850, 238179, 43395, 235265, 235832, 239295, 72494, 176385, 47555, 235265, 176385, 236791, 198670, 237722, 235269, 46355, 238721, 236214, 201009, 19319, 236392, 55154, 238364, 236375, 124431, 101260, 236214, 93205, 23745, 243988, 12957, 235265, 242579, 235269, 46355, 238721, 236214, 201009, 31288, 83137, 236375, 195532, 40284, 93205, 23745, 243988, 12957, 235265, 236800, 237502, 235269, 49697, 236666, 236511, 31288, 83137, 58272, 22803, 30456, 236392, 170116, 101969, 235248, 129090, 235265, 237526, 239151, 106191, 22803, 145887, 235248, 243157, 236179, 3031, 453, 391, 401, 235349, 236791, 198670, 236464, 235269, 196582, 236179, 3031, 238179, 243415, 204551, 235265, 235248, 453, 391, 401, 47555, 235349, 112778, 235248, 246333, 214931, 56787, 247181, 236569, 236039, 235265, 236417, 237545, 236645, 236137, 11464, 231415, 236375, 124431, 73009, 236214, 56787, 238272, 145887, 237233, 196582, 235832, 198670, 236589, 30456, 236392, 229288, 21743, 235265, 186223, 236214, 114911, 209611, 236791, 187118, 31288, 236554, 238364, 236179, 56787, 238272, 145887, 237233, 196582, 236392, 31087, 239673, 43395, 235265, 237941, 236554, 238364, 236214, 227038, 236392, 168788, 48060, 26176, 235269, 4820, 235248, 243320, 236648, 11384, 236392, 114911, 209611, 236179, 31087, 239673, 43395, 235265, 236671, 237822, 237722, 235269, 73009, 236361, 56787, 238272, 224047, 241305, 104569, 236791, 30456, 236179, 235248, 251556, 12957, 235265, 236671, 241838, 237458, 161050, 83137, 236361, 128047, 236770, 239346, 12957, 38392, 176385, 236791, 198670, 237722, 201009, 19319, 236392, 55154, 238364, 236375, 124431, 101260, 236655, 238305, 109976, 93205, 23745, 243988, 12957, 235265, 237358, 236666, 236511, 106191, 236137, 32929, 237092, 236791, 164079, 238080, 22618, 236840, 72941, 153728, 237154, 235832, 50390, 248274, 12957, 235265, 238665, 237233, 90621, 61943, 236645, 74209, 237199, 180860, 83137, 195532, 235832, 205209, 234654, 48682, 236464, 106191, 58272, 237092, 75980, 236817, 237598, 32929, 236770, 236915, 237458, 235248, 129090, 235265, 11271, 106191, 216491, 236791, 32048, 55393, 246974, 238305, 109976, 93205, 206682, 43761, 238304, 237598, 55393, 245512, 22618, 21167, 237458, 116508, 236214, 121393, 235265, 235832, 241838, 237458, 103293, 236375, 106191, 236137, 195532, 56341, 235832, 106191, 58272, 237092, 22803, 102890, 236417, 236791, 30181, 237386, 161050, 236791, 182260, 40284, 109241, 181539, 22618, 21167, 453, 380, 398, 235336, 152384, 238173, 47250, 239205, 238308, 237611, 227860, 237722, 88036, 239055, 55154, 238364, 235248, 240734, 13986, 237807, 83160, 237502, 72159, 93806, 236554, 31288, 236554, 238364, 49697, 238115, 235832, 126942, 236511, 238266, 235269, 235832, 238740, 106191, 236791, 55393, 242707, 236183, 48682, 236464, 227038, 161050, 237598, 20350, 204588, 174538, 237807, 236554, 235248, 245622, 237312, 237722, 116508, 237458, 235248, 129090, 235265, 236671, 136201, 209929, 51732, 240533, 140275, 84608, 236840, 88936, 235269, 203755, 236770, 61928, 210450, 75943, 239250, 235269, 41645, 208986, 134512, 236554, 236915, 32275, 237611, 242237, 238131, 178535, 236179, 78821, 240981, 40284, 142479, 235269, 34805, 236840, 100280, 236569, 206586, 73143, 238650, 32048, 238780, 43395, 35606, 236864, 236432, 235313, 48319, 236214, 31288, 106191, 216491, 236791, 236039, 236569, 54868, 241103, 74860, 48682, 236464, 236840, 235269, 31288, 106191, 236137, 32929, 237092, 238304, 237598, 236392, 235248, 245509, 237502, 238080, 22618, 21167, 237458, 56787, 235248, 244557, 12957, 235265, 242579, 61632, 236791, 208134, 123472, 124559, 236671, 236950, 238138, 237135, 52604, 238071, 22803, 55154, 238364, 237807, 83160, 237502, 72494, 235269, 20350, 161050, 236791, 31288, 106191, 236137, 32929, 237092, 238304, 236179, 237598, 100280, 236569, 238080, 22618, 55496, 235265, 235832, 238740, 55154, 238364, 237807, 236214, 115049, 237233, 132929, 32048, 238780, 236511, 112507, 239190, 236137, 112762, 236791, 40712, 236464, 239824, 236392, 22618, 55496, 235265, 8052, 10114, 11271, 242756, 50691, 145240, 73143, 48319, 236137, 60318, 239158, 48319, 236791, 208134, 123472, 115049, 237233, 132929, 60318, 239158, 235832, 55496, 38392, 235274, 235265, 237941, 106191, 216491, 236791, 171167, 54868, 241103, 74860, 48682, 236464, 236840, 235269, 31288, 106191, 236137, 32929, 237092, 238304, 237598, 236392, 235248, 245509, 237502, 238080, 22618, 55496, 235265, 235284, 235265, 31288, 106191, 236361, 54868, 237135, 238602, 70957, 236179, 55154, 238364, 236375, 112762, 227038, 236392, 29283, 245186, 22618, 55496, 235265, 591, 4738, 236791, 187118, 147342, 236392, 55154, 238364, 235248, 240734, 26291, 31087, 239522, 237138, 168788, 238070, 236464, 101260, 236655, 240256, 22618, 21167, 238036, 235275, 235304, 235265, 31288, 106191, 236361, 54868, 237135, 238602, 70957, 236179, 55154, 238364, 236375, 124431, 112762, 236791, 101260, 236392, 22618, 55496, 235265, 235310, 235265, 124559, 236671, 236950, 238138, 237135, 52604, 238071, 22803, 55154, 238364, 236375, 112762, 236791, 29283, 245186, 22618, 55496, 235265, 48319, 236137, 80289, 239158, 48319, 236791, 208134, 123472, 197781, 60318, 239158, 236392, 128753, 95091, 235269, 61632, 236375, 236840, 115049, 237233, 132929, 32929, 84551, 168788, 238080, 22618, 176124, 38392, 235274, 235265, 48319, 236214, 91940, 122717, 239753, 236859, 236361, 55154, 238364, 236179, 112762, 236791, 227038, 40284, 91940, 122717, 239753, 236859, 235248, 242003, 239074, 51806, 238186, 235278, 236417, 237545, 184819, 143636, 240449, 227038, 235275, 236392, 61943, 236345, 212026, 235269, 236554, 238364, 235248, 241935, 236569, 51806, 238186, 235278, 241935, 236569, 239414, 238912, 132929, 235275, 236137, 61928, 210450, 206586, 236214, 128047, 22618, 176124, 235265, 235284, 235265, 61632, 236375, 236214, 55393, 235832, 239632, 236432, 112762, 236791, 29283, 238151, 160696, 101260, 236392, 22618, 176124, 235265, 235304, 235265, 61632, 32275, 237611, 239837, 236859, 236361, 157329, 238602, 55154, 238364, 236361, 23745, 242567, 102708, 55154, 238364, 236375, 61632, 227038, 236392, 29283, 245186, 22618, 236214, 176124, 235265, 235310, 235265, 239483, 122717, 239753, 236859, 236137, 7533, 236375, 61632, 227038, 236392, 29283, 245186, 22618, 236214, 176124, 235265, 48319, 220641, 73713, 237433, 235290, 31288, 106191, 236137, 100280, 238513, 236392, 168947, 11271, 237233, 26862, 235290, 112762, 236179, 165866, 239969, 236345, 160696, 168590, 220641, 236392, 49697, 90621, 42916, 238115, 72159, 93806, 61943, 156610, 19865, 162570, 235290, 112762, 236137, 75985, 239457, 236392, 168947, 8052, 180521, 26176, 235290, 31288, 55154, 238364, 237807, 236137, 51732, 237358, 236386, 238186, 83160, 237502, 236392, 168947, 203398, 209611, 235290, 41423, 22803, 171754, 240115, 236511, 87997, 213222, 236392, 72510, 237961, 72494, 61943, 236645, 236137, 211896, 235248, 243139, 239295, 236392, 31850, 236770, 40284, 65503, 61943, 156610, 236645, 238131, 161615, 239837, 236859, 235274, 865, 61943, 236645, 236179, 23594, 236511, 227038, 11464, 231415, 236361, 205209, 43395, 235265, 591, 949, 678, 3938, 235284, 235310, 235276, 72797, 238173, 116518, 227038, 238467, 235275, 235284, 865, 227038, 11464, 231415, 236361, 205209, 123472, 11464, 231415, 235248, 244079, 237290, 237822, 236179, 23594, 237138, 34103, 238131, 161615, 239837, 236859, 236361, 83942, 238483, 129090, 235265, 235304, 865, 34103, 238131, 161615, 239837, 236859, 236214, 114911, 209611, 236791, 61943, 72494, 55154, 238364, 236375, 227038, 236392, 29283, 245309, 12957, 235265, 235832, 238740, 31288, 129669, 236950, 237312, 238721, 236214, 227038, 236392, 29283, 238151, 236464, 38585, 236554, 235269, 236554, 238364, 236137, 224047, 241305, 236392, 28693, 236039, 241949, 126942, 56341, 61742, 239296, 211896, 236392, 168788, 238080, 22618, 55496, 235265, 235310, 865, 55154, 238364, 236214, 31087, 239522, 239824, 236648, 114911, 209611, 236791, 128753, 236464, 61632, 227038, 236392, 168788, 43395, 235265, 235308, 235269, 235318, 865, 55154, 238364, 236214, 168788, 236511, 161050, 236791, 19319, 235269, 26176, 132879, 11384, 112507, 239190, 236137, 112762, 236375, 31288, 129669, 236950, 237312, 238721, 236179, 31087, 239522, 43395, 235265, 235832, 238740, 31087, 239522, 156610, 224047, 241305, 236648, 104606, 106191, 31087, 237092, 29283, 238151, 236214, 93205, 206682, 126942, 236511, 112762, 237598, 236392, 31087, 239522, 43395, 17188, 949, 235832, 236725, 236417, 237545, 47250, 235832, 139978, 45980, 237302, 235275, 235324, 865, 55154, 238364, 236375, 124431, 31087, 239522, 239824, 236648, 112762, 236791, 128753, 236464, 31288, 106191, 236137, 32929, 237092, 238304, 237598, 236392, 235248, 245509, 237502, 40284, 34103, 238131, 161615, 239837, 236859, 236791, 83942, 238483, 43395, 235265, 235321, 865, 75500, 238777, 26291, 31288, 106191, 236137, 32929, 237092, 238304, 237598, 235832, 171167, 54868, 241103, 141048, 100280, 236569, 129090, 235265, 591, 949, 22573, 61943, 47250, 236589, 72797, 238173, 47555, 13420, 203398, 209611, 48319, 236137, 126277, 235248, 244073, 239308, 85024, 220641, 73713, 237433, 236214, 55393, 236375, 114911, 209611, 47555, 235265, 48319, 22803, 114911, 209611, 236214, 237941, 129669, 236950, 237312, 238721, 236361, 55154, 238364, 237807, 112762, 236791, 75985, 239457, 238080, 54715, 61943, 129090, 235265, 237941, 129669, 236950, 237312, 238721, 236361, 124559, 236671, 236950, 238138, 237135, 22803, 74715, 238982, 206666, 55154, 238364, 237807, 83160, 237502, 238080, 22618, 72941, 143613, 55393, 236375, 11464, 209611, 236791, 61943, 72159, 119518, 47555, 235265, 1243, 4494, 3305, 589, 888, 114911, 821, 235832, 237047, 26291, 55154, 238364, 236417, 217534, 235269, 91940, 122717, 239753, 236859, 236137, 49532, 241631, 237233, 20350, 235248, 242870, 235832, 53355, 242950, 237458, 112762, 236791, 75985, 239457, 40284, 236183, 78183, 236655, 237036, 239985, 21743, 235265, 206275, 237793, 11464, 238628, 153818, 236648, 201194, 48060, 99797, 236214, 29599, 236179, 87634, 239158, 236392, 93828, 238220, 236386, 147801, 118058, 235832, 99805, 235832, 180850, 242545, 238220, 221277, 237545, 236338, 242327, 242327, 242326, 235286, 237935, 237526, 236511, 49532, 241631, 235832, 236405, 235248, 245267, 235248, 241594, 236183, 236345, 236569, 221277, 50316, 240520, 235832, 235248, 75084, 170230, 106509, 241716, 21743, 235436, 4762, 236671, 240943, 44245, 240703, 236840, 22618, 236464, 236345, 243707, 21743, 235436, 189764, 31288, 236417, 78749, 235292, 2255, 1336, 16812, 833, 1787, 235265, 872, 235283, 11467, 235283, 11467, 235298, 40625, 235298, 7171], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:42368 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:25 engine.py:275] Added request cmpl-c44d4022508c48b28ae5f4a906e7b6f6-0.
INFO 02-16 20:30:27 logger.py:39] Received request cmpl-c6f2a2f89f714d4aa1b1e3579ba101c1-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        웹/앱 외주 개발 시 꼭 알아야 하는 IT용어 - 웹\n이 작업을 위해 서버에서 사용하는 개발 언어들이 있는데요. 대표적인 개발 언어(서버사이드 스크립트 언어)로는 PHP, 파이썬(Python), 노드(Node.js), 루비(Ruby) 등이 있습니다. 앱/웹 서비스의 모든 비즈니스 로직은 서버 쪽 언어를 통해 구현되고 있지', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 237941, 235283, 243582, 136201, 237014, 227613, 27941, 235248, 245267, 78183, 236655, 238305, 109976, 6349, 237545, 236770, 728, 31288, 108, 235832, 211896, 236392, 93806, 55154, 238364, 22803, 61943, 40284, 227613, 171754, 236770, 94525, 72941, 238266, 237526, 235265, 26801, 238946, 85024, 227613, 171754, 236770, 235278, 236554, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 171754, 236770, 235275, 236375, 236214, 29617, 235269, 59994, 235832, 246881, 235278, 27922, 823, 61138, 237135, 235278, 3432, 235265, 2833, 823, 200936, 237584, 235278, 53481, 235275, 73143, 235832, 55496, 235265, 235248, 243582, 235283, 237941, 206586, 236137, 87997, 51732, 238894, 236405, 236354, 54868, 239385, 236648, 55154, 238364, 235248, 240734, 171754, 236770, 236791, 187118, 49061, 238513, 238070, 236464, 21167, 236183], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:42380 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:27 engine.py:275] Added request cmpl-c6f2a2f89f714d4aa1b1e3579ba101c1-0.
INFO 02-16 20:30:28 metrics.py:455] Avg prompt throughput: 1586.5 tokens/s, Avg generation throughput: 157.3 tokens/s, Running: 4 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 9.2%, CPU KV cache usage: 0.0%.
INFO 02-16 20:30:33 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 155.1 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 6.7%, CPU KV cache usage: 0.0%.
INFO 02-16 20:30:37 logger.py:39] Received request cmpl-c50713b01e424809ba9c94152b5d65a1-0: prompt: '아래 정보에 기반하여, 사용자의 질문에 답하세요.\n        \n\n    \n\n \n\n\n## 웹 프로그래밍에서 서버 사이드/클라이언트 사이드의 중요성\n\n본 텍스트는 웹 프로그래밍에서 서버 사이드와 클라이언트 사이드의 개념을 설명하고 그 중요성을 강조합니다. \n\n**핵심 내용:**\n\n* **클라이언트 사이드**: 사용자 측에서 실행되는 코드로, 사용자 입력을 받아 HTML로 변환하여 브라우저에 표시합니다. 자바스크립트가 대표적인 언어입니다.\n* **서버 사이드**: 서버 측에서 실행되는 코드로, 웹 페이지를 생성하고, 사용자 인증, 데이터베이스 연동 등 중요한 작업을 수행합니다. Java, PHP, Ruby, Python, Node.js 등이 대표적인 언어입니다.\n\n서버와 클라이언트는 웹 페이지를 통해 상호작용하며, 클라이언트 사이드 개발자를 "프론트 엔드", 서버 사이드 개발자를 "백엔드"라고 부릅니다.\n\n**전달하고자 하는 메시지:**\n\n웹 프로그래밍은 서버 사이드와 클라이언트 사이드의 균형을 통해 효과적인 웹 애플리케이션을 구축할 수 있습니다. 각각의 역할과 중요성을 이해하는 것이 웹 개발의 기본입니다. \n\n\n\n\n\n## 서버 사이드 vs 클라이언트 사이드: 웹 개발에서 중요한 선택\n\n본 문서는 웹 개발에서 서버 사이드와 클라이언트 사이드 프로그래밍의 차이점, 장단점, 적용 시점을 설명합니다. \n\n**서버 사이드 프로그래밍**은 웹 서버에서 실행되며 데이터베이스 접근, 데이터 처리, HTML 페이지 생성 등을 담당합니다. 보안과 데이터베이스 접근성이 중요하며, PHP, Python, Ruby 등의 언어를 사용합니다. 하지만 서버 부하 증가와 응답 시간 지연이 단점입니다.\n\n**클라이언트 사이드 프로그래밍**은 사용자의 브라우저에서 실행되며 HTML, CSS, JavaScript를 사용하여 사용자 인터페이스를 조작하고 상호작용합니다. 빠른 응답 속도와 서버 부하 감소를 제공하지만, 보안 문제와 브라우저 호환성 문제가 발생할 수 있습니다.\n\n**결론적으로,** 보안과 데이터베이스 작업이 중요한 경우 서버 사이드, 실시간 상호작용과 사용자 인터페이스 동적 처리가 필요한 경우 클라이언트 사이드를 선택하는 것이 좋습니다. \n\n\n\n\n\n\n\n\n## 서버 사이드와 클라이언트 사이드: 처리 위치에 따른 장단점\n\n본 텍스트는 웹에서 데이터 처리를 담당하는 서버 사이드와 클라이언트 사이드의 개념을 설명하고, 각각의 장단점을 비교 분석한다. \n\n**서버 사이드**는 웹 서버에서 데이터를 처리하며, 데이터 위조 가능성을 줄이고 클라이언트 컴퓨터의 처리 부담을 덜어주는 장점이 있다. 하지만 서버 처리 부담이 증가하여 서버 비용이 증가하는 단점이 있다. \n\n**클라이언트 사이드**는 사용자의 컴퓨터에서 데이터를 처리하며, 서버 처리 부담을 줄이고 서버 비용을 절감하는 장점이 있다. 그러나 클라이언트 컴퓨터의 처리 부담이 증가하고, 데이터 위조 가능성이 높아지는 단점이 있다. \n\n결론적으로, 서버 사이드와 클라이언트 사이드는 각각의 장단점을 가지고 있으며, 처리해야 하는 데이터의 특성, 보안 요구 사항, 시스템 성능 등을 고려하여 적절한 위치를 선택해야 한다. \n\n\n\n\n\n## 서버 사이드 프로그래밍: 웹 개발의 필수 요소\n\n본 기사는 서버 사이드 프로그래밍의 개념, 중요성, 그리고 클라이언트 사이드 프로그래밍과의 차이점을 설명합니다.\n\n**서버 사이드 프로그래밍은 웹 서버에서 실행되는 코드로, 사용자에게 동적으로 생성된 웹 페이지 컨텐츠를 제공하는 데 사용됩니다.** \n\n* 서버는 사용자 요청에 따라 데이터베이스에서 정보를 가져와, HTML 템플릿과 결합하여 개인화된 웹 페이지를 생성합니다. \n* 이러한 기술은 사용자에게 맞춤형 경험을 제공하고, 웹 사이트를 더욱 역동적이고 매력적으로 만들 수 있습니다.\n\n**서버 사이드 프로그래밍은 클라이언트 사이드 프로그래밍과는 구별됩니다.** \n\n* 클라이언트 사이드 프로그래밍은 웹 브라우저에서 실행되며, 웹 페이지의 인터페이스와 동작을 관리합니다. \n* 서버 사이드 프로그래밍은 데이터 처리, 로그인, 세션 관리 등 웹 사이트의 백엔드 기능을 담당합니다.\n\n**서버 사이드 프로그래밍은 다양한 프로그래밍 언어로 구현될 수 있으며, 웹 프레임워크를 사용하여 개발 효율성을 높일 수 있습니다.**\n\n**결론적으로, 서버 사이드 프로그래밍은 현대 웹 개발에서 필수적인 기술이며, 사용자에게 풍부하고 개인화된 웹 경험을 제공하는 데 중요한 역할을 합니다.**\n\n\n\n\n\n\n## 요약문\n\n본 텍스트는  \'ê·¸ê²\x8c ë\xad\x90ì\x95¼?\'라는 주제로,  **사람들이 흔히 겪는 삶의 괴로움과 불안감에 대해 이야기하고 있습니다.** \n\n핵심 내용으로는 다음과 같은 질문들이 제기되며, 이를 통해 삶의 어려움에 대한 깊은 성찰을 이끌어냅니다. \n\n* **\'ê·¸ê²\x8c ë\xad\x90ì\x95¼?\'**: 삶의 목적과 의미를 탐구하며, 끊임없이 찾아가는 인간의 본성을 드러냅니다.\n* **\'í\x81´ë\x9d¼ì\x9d´ì\x96¸í\x8a¸ ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dê³¼ ë\xad\x90ê°\x80 ë\x8b¬ë\x9d¼?\'**: 겉으로 드러나는 성공과 행복의 기준에 대한 의문을 제기하며, 진정한 행복을 찾는 데 어려움을 겪는 현실을 보여줍니다.\n* **\'ì\x99\x9c ì\x93¸ë§\x8cí\x95´?\'**:  인간관계의 복잡성과 갈등 속에서 겪는 고통과 좌절을 드러내며, 진정한 관계의 가치를 탐구합니다.\n\n결론적으로, 텍스트는 삶의 괴로움과 불안감을 인정하면서도, 이를 극복하고 진정한 의미를 찾아가려는 인간의 노력을 강조합니다. \n\n\n\n\n\n\n\n\n\n\n## 요약문\n\n본문은 서버사이드 스크립트 언어인 JSP, ASP, PHP의 차이점을 설명합니다. \n\n**JSP(Jakarta Server Page)**는 Java 기반이며, 대규모 기업용 시스템 구축에 적합합니다. 안정적이고 유지보수가 용이한 장점이 있습니다. \n\n**PHP(Personal Home Page Tools)**는 웹 페이지 제작에 용이한 웹 관련 함수가 많아 생산성이 높습니다. 개발 속도가 빠르고 배포가 간편하여 쇼핑몰 등 규모가 작은 웹 페이지에 주로 사용됩니다.\n\n**ASP(Active Server Pages)**는 Microsoft에서 개발한 서버사이드 스크립트 엔진으로, Windows 서버 환경에서 강점을 보입니다. 리눅스 환경에서는 점유율이 낮지만, Windows 환경에서는 모든 언어를 웹에서 사용할 수 있도록 지원하는 장점이 있습니다.\n\n\n\n\n.html\n\n\n\n##  웹 프로그래밍에서 클라이언트와 서버의 역할 및 AJAX\n\n**주제:** 웹 프로그래밍에서 클라이언트와 서버 사이의 상호작용, 특히 AJAX를 통한 비동기 통신\n\n**핵심 내용:**\n\n* **클라이언트 사이드:** 사용자 측에서 실행되는 코드(예: 자바스크립트)로, 사용자 입력을 받아 처리하고 웹 페이지를 표시합니다.\n* **서버 사이드:** 서버 측에서 실행되는 코드(예: Java, PHP)로, 데이터베이스를 관리하고 클라이언트 요청에 응답하여 웹 페이지를 생성합니다.\n* **HTTP의 한계:** 사용자는 서버로부터 새로운 정보를 받으려면 새로운 URL을 요청해야 합니다.\n* **AJAX (Asynchronous JavaScript and XML):** HTTP 규약을 뛰어넘어 웹 페이지 전체를 다시 로딩하지 않고도, 필요한 부분만 업데이트하는 기술.\n* **AJAX의 장점:**\n    * 페이지 전체를 다시 로딩하지 않아 빠르고 효율적.\n    * 서버와 백그라운드에서 비동기적으로 통신 가능.\n    * 실시간 업데이트, 아이디 중복 검사, 검색어 추천 등 다양한 기능 구현 가능.\n* **AJAX의 단점:**\n    * 실시간 서비스 (푸시 알림) 구현 어려움.\n    * 바이너리 데이터 전송 제한.\n    * 다른 서버로의 요청 제한.\n    * 클라이언트 PC로의 요청 제한.\n\n**결론:** AJAX는 웹 페이지의 동적인 업데이트와 실시간 기능 구현을 가능하게 하는 중요한 기술입니다.\n\n\n\n\n요.\n\n서버사이드 스크립트 언어는 웹 서버에서 실행되며, 클라이언트(브라우저)에서 요청이 오면 해당 요청에 대한 응답을 생성하고 전송하는 역할을 합니다. \n\n웹 개발 시 사용되는 주요 기술 중 하나인 프레임워크는 개발자들이 코드를 작성하고 관리하기 쉽도록 도와주는 도구입니다. 프레임워크는 특정 언어나 플랫폼에 맞춰 개발되며, 웹 개발에서 널리 사용되는 프레임워크로는 Laravel(PHP), Django(파이썬), Express.js(Node.js), Ruby on Rails(루비) 등이 있습니다.\n\n프레임워크는 웹 개발 속도를 높이고, 코드 유지보수 및 확장성을 향상시키는 데 효과적입니다.\n\n\n## 요약문\n\n본 문서는 웹/앱 외주 개발 시 꼭 알아야 하는 IT용어 중 웹 개발 관련 용어들을 소개하고 있습니다. \n\n주요 내용은 서버사이드 스크립트 언어와 프레임워크에 대한 설명입니다. 서버사이드 스크립트 언어는 웹 서버에서 실행되며 클라이언트의 요청에 대한 응답을 생성하고 전송하는 역할을 합니다. PHP, 파이썬, 노드, 루비 등이 대표적인 서버사이드 스크립트 언어입니다. 프레임워크는 개발자들이 코드를 작성하고 관리하기 쉽도록 도와주는 도구로, Laravel, Django, Express.js, Ruby on Rails 등이 웹 개발에서 널리 사용됩니다. 프레임워크는 웹 개발 속도를 높이고 코드 유지보수 및 확장성을 향상시키는 데 효과적입니다. \n\n결론적으로, 웹/앱 외주 개발을 이해하기 위해서는 서버사이드 스크립트 언어와 프레임워크에 대한 기본적인 이해가 필요하며, 이러한 용어들을 숙지하면 개발 과정을 더욱 효율적으로 이해하고 참여할 수 있습니다. \n\n\n\n        사용자 질문: 서버사이드 프로그래밍에 대해 알려줘 ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236655, 238608, 104569, 236179, 28693, 238559, 72494, 235269, 61943, 236645, 236137, 160587, 237465, 236179, 235248, 241305, 204551, 235265, 108, 145, 109, 141, 109, 235248, 110, 1620, 31288, 58510, 93674, 238608, 243903, 22803, 55154, 238364, 160590, 237135, 235283, 239483, 122717, 239753, 236859, 160590, 237135, 236137, 215134, 237154, 109, 238744, 235248, 242756, 50691, 236214, 31288, 58510, 93674, 238608, 243903, 22803, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 49532, 241631, 236392, 220596, 48060, 20350, 215134, 237154, 236392, 84608, 237602, 43395, 235265, 235248, 109, 688, 244073, 239308, 196582, 66058, 109, 235287, 5231, 239483, 122717, 239753, 236859, 160590, 237135, 95573, 61943, 236645, 235248, 241656, 22803, 191754, 156610, 215441, 236375, 235269, 61943, 236645, 120618, 236392, 101260, 236655, 19319, 236375, 75980, 239457, 72494, 129669, 236950, 237312, 238721, 236179, 100280, 236569, 43395, 235265, 34103, 238131, 161615, 239837, 236859, 236361, 26801, 238946, 85024, 171754, 236770, 47555, 235265, 108, 235287, 5231, 236554, 238364, 160590, 237135, 95573, 55154, 238364, 235248, 241656, 22803, 191754, 156610, 215441, 236375, 235269, 31288, 106191, 236791, 116518, 48060, 235269, 61943, 236645, 30743, 239907, 235269, 112762, 239571, 131006, 50833, 237358, 73143, 215134, 236511, 211896, 236392, 22618, 238356, 43395, 235265, 12071, 235269, 29617, 235269, 39671, 235269, 21237, 235269, 13116, 235265, 2833, 73143, 235832, 26801, 238946, 85024, 171754, 236770, 47555, 235265, 109, 236554, 238364, 237807, 91940, 122717, 239753, 236859, 236214, 31288, 106191, 236791, 187118, 36203, 238033, 238115, 237545, 206716, 235269, 91940, 122717, 239753, 236859, 160590, 237135, 227613, 236645, 236791, 664, 237964, 240405, 236859, 209560, 237135, 824, 55154, 238364, 160590, 237135, 227613, 236645, 236791, 664, 239506, 241167, 237135, 235281, 112778, 43761, 245257, 12957, 235265, 109, 688, 237045, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 66058, 109, 237941, 58510, 93674, 238608, 243903, 236648, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 235248, 242018, 238867, 236392, 187118, 207092, 237233, 85024, 31288, 122096, 239135, 236432, 239814, 146689, 236392, 49061, 240130, 238080, 22618, 55496, 235265, 163558, 238316, 236137, 61169, 238080, 237233, 215134, 237154, 236392, 201194, 40284, 93205, 31288, 227613, 236137, 28693, 238744, 47555, 235265, 235248, 113, 1620, 55154, 238364, 160590, 237135, 5135, 91940, 122717, 239753, 236859, 160590, 237135, 235292, 31288, 227613, 22803, 215134, 236511, 134472, 109, 238744, 133889, 236214, 31288, 227613, 22803, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 58510, 93674, 238608, 243903, 236137, 91292, 235832, 239158, 235269, 60318, 238335, 239158, 235269, 99797, 237545, 27941, 239158, 236392, 220596, 43395, 235265, 235248, 109, 688, 236554, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 688, 236648, 31288, 55154, 238364, 22803, 191754, 238070, 238986, 112762, 239571, 131006, 165866, 239969, 235269, 112762, 168788, 235269, 19319, 106191, 116518, 73143, 236392, 205799, 238272, 43395, 235265, 29283, 238179, 237233, 112762, 239571, 131006, 165866, 239969, 237154, 235832, 215134, 206716, 235269, 29617, 235269, 21237, 235269, 39671, 73143, 236137, 171754, 236770, 236791, 61943, 43395, 235265, 30181, 95091, 55154, 238364, 43761, 236345, 160284, 236361, 237807, 224047, 241305, 118058, 34805, 237794, 235832, 80289, 239158, 47555, 235265, 109, 688, 239483, 122717, 239753, 236859, 160590, 237135, 58510, 93674, 238608, 243903, 688, 236648, 61943, 236645, 236137, 129669, 236950, 237312, 238721, 22803, 191754, 238070, 238986, 19319, 235269, 26862, 235269, 22978, 236791, 61943, 72494, 61943, 236645, 227397, 67650, 236354, 236791, 42916, 238115, 48060, 36203, 238033, 238115, 237545, 43395, 235265, 235119, 239296, 224047, 241305, 125507, 236840, 237807, 55154, 238364, 43761, 236345, 99091, 237433, 236791, 110308, 74860, 237598, 235269, 29283, 238179, 132793, 237807, 129669, 236950, 237312, 238721, 83942, 239457, 237154, 132793, 236361, 205209, 238080, 22618, 55496, 235265, 109, 688, 238665, 240405, 90621, 218215, 29283, 238179, 237233, 112762, 239571, 131006, 211896, 235832, 215134, 236511, 95917, 55154, 238364, 160590, 237135, 235269, 61928, 210450, 36203, 238033, 238115, 237545, 237233, 61943, 236645, 227397, 67650, 236354, 49697, 237603, 168788, 236361, 126942, 236511, 95917, 91940, 122717, 239753, 236859, 160590, 237135, 236791, 134472, 40284, 93205, 106509, 21743, 235265, 235248, 116, 1620, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 235292, 168788, 178535, 236179, 103293, 239296, 60318, 238335, 239158, 109, 238744, 235248, 242756, 50691, 236214, 31288, 22803, 112762, 168788, 236791, 205799, 238272, 40284, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 49532, 241631, 236392, 220596, 48060, 235269, 163558, 238316, 236137, 60318, 238335, 239158, 236392, 51732, 237905, 211558, 78949, 235265, 235248, 109, 688, 236554, 238364, 160590, 237135, 688, 236214, 31288, 55154, 238364, 22803, 112762, 236791, 168788, 206716, 235269, 112762, 41423, 237602, 153728, 237154, 236392, 184434, 224907, 91940, 122717, 239753, 236859, 235248, 241897, 243032, 237524, 236137, 168788, 43761, 240599, 236392, 235248, 245057, 236770, 237014, 236214, 60318, 239158, 235832, 69581, 235265, 30181, 95091, 55154, 238364, 168788, 43761, 240599, 235832, 160284, 236361, 72494, 55154, 238364, 51732, 237545, 235832, 160284, 236361, 40284, 80289, 239158, 235832, 69581, 235265, 235248, 109, 688, 239483, 122717, 239753, 236859, 160590, 237135, 688, 236214, 61943, 236645, 236137, 235248, 241897, 243032, 237524, 22803, 112762, 236791, 168788, 206716, 235269, 55154, 238364, 168788, 43761, 240599, 236392, 184434, 224907, 55154, 238364, 51732, 237545, 236392, 191532, 239199, 40284, 60318, 239158, 235832, 69581, 235265, 20350, 122865, 91940, 122717, 239753, 236859, 235248, 241897, 243032, 237524, 236137, 168788, 43761, 240599, 235832, 160284, 236361, 48060, 235269, 112762, 41423, 237602, 153728, 237154, 235832, 187800, 236655, 194255, 80289, 239158, 235832, 69581, 235265, 235248, 109, 238665, 240405, 90621, 235269, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236214, 163558, 238316, 236137, 60318, 238335, 239158, 236392, 128753, 236464, 218631, 235269, 168788, 149735, 109976, 112762, 236137, 94492, 237154, 235269, 29283, 238179, 73713, 237302, 17309, 239383, 235269, 27941, 202429, 64301, 239474, 73143, 236392, 46749, 238994, 72494, 99797, 240046, 236511, 178535, 236791, 134472, 149735, 153422, 235265, 235248, 113, 1620, 55154, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 235292, 31288, 227613, 236137, 88036, 236669, 73713, 237433, 109, 238744, 28693, 236417, 236214, 55154, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236137, 49532, 241631, 235269, 215134, 237154, 235269, 213512, 91940, 122717, 239753, 236859, 160590, 237135, 58510, 93674, 238608, 243903, 237233, 236137, 91292, 235832, 239158, 236392, 220596, 43395, 235265, 109, 688, 236554, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 31288, 55154, 238364, 22803, 191754, 156610, 215441, 236375, 235269, 61943, 236645, 70471, 49697, 90621, 116518, 238602, 31288, 106191, 235248, 241996, 164594, 236791, 110308, 40284, 65503, 61943, 129090, 116742, 235248, 109, 235287, 55154, 238364, 236214, 61943, 236645, 227038, 236179, 156976, 112762, 239571, 131006, 22803, 104569, 236791, 174538, 237807, 235269, 19319, 235248, 240940, 239135, 241982, 237233, 72510, 237961, 72494, 49532, 236589, 236817, 238602, 31288, 106191, 236791, 116518, 43395, 235265, 235248, 108, 235287, 11464, 174287, 213222, 236648, 61943, 236645, 70471, 207221, 244417, 238867, 43033, 240521, 236392, 110308, 48060, 235269, 31288, 17309, 78749, 236791, 70231, 243093, 61169, 237358, 237603, 224907, 80431, 238365, 90621, 128047, 22618, 55496, 235265, 109, 688, 236554, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 91940, 122717, 239753, 236859, 160590, 237135, 58510, 93674, 238608, 243903, 237233, 236214, 49061, 239793, 129090, 116742, 235248, 109, 235287, 91940, 122717, 239753, 236859, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 31288, 129669, 236950, 237312, 238721, 22803, 191754, 238070, 238986, 235269, 31288, 106191, 236137, 227397, 67650, 236354, 237807, 49697, 238115, 236392, 159838, 43395, 235265, 235248, 108, 235287, 55154, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 112762, 168788, 235269, 202886, 236589, 235269, 48740, 239109, 159838, 73143, 31288, 17309, 78749, 236137, 124559, 241167, 237135, 201619, 236392, 205799, 238272, 43395, 235265, 109, 688, 236554, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 32048, 238780, 236511, 58510, 93674, 238608, 243903, 171754, 236770, 236375, 49061, 238513, 241093, 22618, 218631, 235269, 31288, 58510, 237990, 238700, 239779, 237611, 236791, 61943, 72494, 227613, 207092, 241938, 237154, 236392, 187800, 236666, 22618, 55496, 116742, 109, 688, 238665, 240405, 90621, 235269, 55154, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 81386, 236800, 31288, 227613, 22803, 88036, 236669, 85024, 213222, 225022, 235269, 61943, 236645, 70471, 209727, 237092, 48060, 49532, 236589, 236817, 238602, 31288, 43033, 240521, 236392, 110308, 40284, 65503, 215134, 236511, 61169, 238080, 236392, 179694, 116742, 114, 1620, 73713, 239618, 237465, 109, 238744, 235248, 242756, 50691, 236214, 139, 235303, 235442, 235611, 239189, 235442, 236212, 251336, 189966, 236591, 250043, 235703, 253114, 238512, 18016, 139978, 40712, 236939, 236375, 235269, 139, 688, 236417, 238912, 94525, 235248, 244088, 239055, 235248, 246393, 236214, 235248, 242928, 236137, 235248, 242453, 236375, 240520, 237233, 83133, 238179, 239199, 236179, 142192, 202926, 236386, 48060, 55496, 116742, 235248, 109, 244073, 239308, 196582, 26291, 236214, 115049, 237233, 132929, 160587, 237465, 94525, 31850, 236386, 238070, 238986, 235269, 11464, 236791, 187118, 235248, 242928, 236137, 53355, 238994, 240520, 236179, 71100, 235248, 243890, 236648, 64301, 241831, 236392, 11464, 243898, 236770, 245309, 12957, 235265, 235248, 109, 235287, 5231, 235303, 235442, 235611, 239189, 235442, 236212, 251336, 189966, 236591, 250043, 235703, 253114, 238512, 18016, 95573, 235248, 242928, 236137, 86040, 237603, 237233, 223616, 236791, 235248, 242850, 237302, 206716, 235269, 235248, 245202, 238700, 238739, 235832, 134498, 236655, 236361, 236214, 30743, 238264, 236137, 138720, 237154, 236392, 99028, 237822, 245309, 12957, 235265, 108, 235287, 5231, 235303, 235367, 247790, 236728, 235979, 248215, 238512, 235703, 248215, 236728, 235703, 248806, 239189, 235367, 252233, 239189, 187197, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 18198, 251316, 251918, 235979, 236048, 252469, 235442, 235611, 239189, 235979, 254473, 252690, 235979, 235657, 250064, 235442, 237429, 238512, 189966, 236591, 250043, 235442, 235657, 249616, 189966, 252151, 237361, 235979, 248215, 238512, 18016, 95573, 235248, 249561, 26291, 99028, 122865, 236214, 192111, 237233, 105560, 239205, 236137, 28693, 239558, 236179, 71100, 23594, 237465, 236392, 31850, 236386, 206716, 235269, 83453, 236864, 236511, 105560, 239205, 236392, 134498, 236214, 65503, 53355, 238994, 240520, 236392, 235248, 246393, 236214, 81386, 238146, 236392, 29283, 237386, 244557, 12957, 235265, 108, 235287, 5231, 235303, 235703, 251642, 252469, 187197, 251699, 239189, 235979, 236067, 251336, 235367, 253114, 236728, 18016, 95573, 139, 236589, 238264, 237956, 238002, 236137, 122447, 241533, 237154, 237233, 225430, 238650, 125507, 22803, 235248, 246393, 236214, 46749, 238693, 237233, 235248, 241876, 240046, 236392, 99028, 237822, 238151, 238986, 235269, 83453, 236864, 236511, 217761, 236137, 23248, 237924, 236791, 235248, 242850, 237302, 43395, 235265, 109, 238665, 240405, 90621, 235269, 235248, 242756, 50691, 236214, 235248, 242928, 236137, 235248, 242453, 236375, 240520, 237233, 83133, 238179, 239199, 236392, 30743, 236864, 123472, 236554, 236840, 235269, 11464, 236791, 235248, 241073, 239205, 48060, 83453, 236864, 236511, 223616, 236791, 134498, 236655, 236361, 238994, 236214, 30743, 238264, 236137, 61138, 238365, 236392, 84608, 237602, 43395, 235265, 235248, 118, 1620, 73713, 239618, 237465, 109, 238744, 237465, 236648, 55154, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 171754, 236770, 236589, 196371, 235269, 48623, 235269, 29617, 236137, 91292, 235832, 239158, 236392, 220596, 43395, 235265, 235248, 109, 688, 187655, 235278, 96756, 13506, 6974, 77056, 236214, 12071, 28693, 238559, 225022, 235269, 26801, 240753, 237551, 28693, 238391, 237545, 27941, 202429, 49061, 240130, 236179, 99797, 237961, 43395, 235265, 70685, 236864, 237603, 224907, 46355, 236183, 237036, 236669, 236361, 120340, 235832, 236511, 60318, 239158, 235832, 55496, 235265, 235248, 109, 688, 29697, 235278, 16557, 4566, 6974, 20506, 77056, 236214, 31288, 106191, 31850, 238115, 236179, 120340, 235832, 236511, 31288, 187003, 200901, 236361, 99805, 236655, 50390, 238325, 237154, 235832, 187800, 21743, 235265, 227613, 125507, 236840, 236361, 235119, 238500, 236464, 50548, 238199, 236361, 127149, 239813, 72494, 235248, 241830, 241496, 242515, 73143, 235248, 240753, 237551, 236361, 63806, 236648, 31288, 106191, 236179, 40712, 236375, 61943, 129090, 235265, 109, 688, 47263, 235278, 9440, 13506, 27779, 77056, 236214, 8057, 22803, 227613, 236511, 55154, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 209560, 237589, 26291, 235269, 7620, 55154, 238364, 161409, 237392, 22803, 84608, 239158, 236392, 29283, 47555, 235265, 63102, 250412, 236354, 161409, 237392, 180860, 131901, 237766, 241938, 235832, 235248, 243937, 95091, 235269, 7620, 161409, 237392, 180860, 87997, 171754, 236770, 236791, 31288, 22803, 61943, 238080, 22618, 21167, 153145, 224790, 40284, 60318, 239158, 235832, 55496, 235265, 112, 235265, 2527, 111, 1620, 139, 237941, 58510, 93674, 238608, 243903, 22803, 91940, 122717, 239753, 236859, 237807, 55154, 238364, 236137, 61169, 238080, 60709, 143383, 109, 688, 237014, 236939, 66058, 31288, 58510, 93674, 238608, 243903, 22803, 91940, 122717, 239753, 236859, 237807, 55154, 238364, 160590, 236137, 36203, 238033, 238115, 237545, 235269, 94492, 239055, 143383, 236791, 83160, 236511, 51732, 237358, 236386, 83160, 237502, 109, 688, 244073, 239308, 196582, 66058, 109, 235287, 5231, 239483, 122717, 239753, 236859, 160590, 237135, 66058, 61943, 236645, 235248, 241656, 22803, 191754, 156610, 215441, 235278, 238748, 235292, 34103, 238131, 161615, 239837, 236859, 235275, 236375, 235269, 61943, 236645, 120618, 236392, 101260, 236655, 168788, 48060, 31288, 106191, 236791, 100280, 236569, 43395, 235265, 108, 235287, 5231, 236554, 238364, 160590, 237135, 66058, 55154, 238364, 235248, 241656, 22803, 191754, 156610, 215441, 235278, 238748, 235292, 12071, 235269, 29617, 235275, 236375, 235269, 112762, 239571, 131006, 236791, 159838, 48060, 91940, 122717, 239753, 236859, 227038, 236179, 224047, 241305, 72494, 31288, 106191, 236791, 116518, 43395, 235265, 108, 235287, 5231, 20672, 236137, 35191, 238002, 66058, 61943, 236645, 236214, 55154, 238364, 236375, 124431, 201009, 104569, 236791, 101260, 237214, 238994, 237722, 201009, 10822, 236392, 227038, 149735, 179694, 235265, 108, 235287, 5231, 176385, 591, 2169, 52929, 22978, 578, 26176, 1245, 688, 24493, 235248, 240753, 239618, 236392, 235248, 244258, 236770, 242429, 236770, 31288, 106191, 216491, 236791, 171167, 54868, 241103, 74860, 48682, 236464, 236840, 235269, 126942, 236511, 43761, 238304, 237598, 142995, 238266, 78749, 40284, 213222, 235265, 108, 235287, 5231, 176385, 236137, 60318, 239158, 66058, 108, 141, 235287, 106191, 216491, 236791, 171167, 54868, 241103, 74860, 48682, 236655, 235119, 238500, 236464, 207092, 241938, 237603, 235265, 108, 141, 235287, 55154, 238364, 237807, 124559, 236671, 236950, 238138, 237135, 22803, 51732, 237358, 236386, 90621, 83160, 237502, 153728, 235265, 108, 141, 235287, 61928, 210450, 142995, 238266, 78749, 235269, 72797, 238173, 47250, 239205, 102890, 236417, 235269, 203755, 236770, 75943, 239250, 73143, 32048, 238780, 236511, 201619, 49061, 238513, 153728, 235265, 108, 235287, 5231, 176385, 236137, 80289, 239158, 66058, 108, 141, 235287, 61928, 210450, 206586, 591, 241935, 236569, 78183, 239398, 235275, 49061, 238513, 53355, 238994, 240520, 235265, 108, 141, 235287, 55393, 235832, 239632, 236432, 112762, 31087, 239673, 31850, 236511, 235265, 108, 141, 235287, 102708, 55154, 238364, 236375, 236137, 227038, 31850, 236511, 235265, 108, 141, 235287, 91940, 122717, 239753, 236859, 7533, 236375, 236137, 227038, 31850, 236511, 235265, 109, 688, 238665, 240405, 66058, 143383, 236214, 31288, 106191, 236137, 49697, 85024, 142995, 238266, 78749, 237807, 61928, 210450, 201619, 49061, 238513, 236392, 153728, 101969, 109976, 215134, 236511, 213222, 47555, 235265, 112, 237526, 235265, 109, 236554, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 171754, 236770, 236214, 31288, 55154, 238364, 22803, 191754, 238070, 238986, 235269, 91940, 122717, 239753, 236859, 235278, 238997, 236950, 237312, 238721, 235275, 22803, 227038, 235832, 44245, 237722, 56787, 238272, 227038, 236179, 71100, 224047, 241305, 236392, 116518, 48060, 31087, 239673, 40284, 61169, 238080, 236392, 179694, 235265, 235248, 109, 237941, 227613, 27941, 61943, 156610, 40712, 237526, 213222, 47250, 113859, 236589, 58510, 237990, 238700, 239779, 237611, 236214, 227613, 236645, 94525, 215441, 236791, 198766, 48060, 159838, 72159, 235248, 243274, 153145, 50316, 237807, 237014, 236214, 50316, 237302, 47555, 235265, 58510, 237990, 238700, 239779, 237611, 236214, 94492, 236864, 171754, 236770, 236915, 117904, 243792, 243751, 236179, 207221, 247270, 227613, 238070, 238986, 235269, 31288, 227613, 22803, 235248, 241518, 236432, 61943, 156610, 58510, 237990, 238700, 239779, 237611, 236375, 236214, 136502, 235278, 29697, 823, 95945, 235278, 238183, 235832, 246881, 823, 17852, 235265, 2833, 235278, 3432, 235265, 2833, 823, 39671, 611, 88887, 235278, 238949, 237584, 235275, 73143, 235832, 55496, 235265, 109, 237964, 237990, 238700, 239779, 237611, 236214, 31288, 227613, 125507, 236840, 236791, 187800, 224907, 235269, 215441, 46355, 236183, 237036, 236669, 60709, 69781, 237199, 237154, 236392, 220234, 237047, 236569, 238705, 236214, 65503, 207092, 237233, 237603, 47555, 235265, 110, 1620, 73713, 239618, 237465, 109, 238744, 133889, 236214, 31288, 235283, 243582, 136201, 237014, 227613, 27941, 235248, 245267, 78183, 236655, 238305, 109976, 6349, 237545, 236770, 47250, 31288, 227613, 187003, 120340, 236770, 134660, 44997, 237936, 48060, 55496, 235265, 235248, 109, 237014, 237526, 196582, 236648, 55154, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 171754, 236770, 237807, 58510, 237990, 238700, 239779, 237611, 236179, 71100, 220596, 47555, 235265, 55154, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 171754, 236770, 236214, 31288, 55154, 238364, 22803, 191754, 238070, 238986, 91940, 122717, 239753, 236859, 236137, 227038, 236179, 71100, 224047, 241305, 236392, 116518, 48060, 31087, 239673, 40284, 61169, 238080, 236392, 179694, 235265, 29617, 235269, 59994, 235832, 246881, 235269, 61138, 237135, 235269, 200936, 237584, 73143, 235832, 26801, 238946, 85024, 55154, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 171754, 236770, 47555, 235265, 58510, 237990, 238700, 239779, 237611, 236214, 227613, 236645, 94525, 215441, 236791, 198766, 48060, 159838, 72159, 235248, 243274, 153145, 50316, 237807, 237014, 236214, 50316, 237302, 236375, 235269, 136502, 235269, 95945, 235269, 17852, 235265, 2833, 235269, 39671, 611, 88887, 73143, 235832, 31288, 227613, 22803, 235248, 241518, 236432, 61943, 129090, 235265, 58510, 237990, 238700, 239779, 237611, 236214, 31288, 227613, 125507, 236840, 236791, 187800, 224907, 215441, 46355, 236183, 237036, 236669, 60709, 69781, 237199, 237154, 236392, 220234, 237047, 236569, 238705, 236214, 65503, 207092, 237233, 237603, 47555, 235265, 235248, 109, 238665, 240405, 90621, 235269, 31288, 235283, 243582, 136201, 237014, 227613, 236392, 201194, 72159, 93806, 234631, 55154, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 171754, 236770, 237807, 58510, 237990, 238700, 239779, 237611, 236179, 71100, 28693, 238744, 85024, 201194, 236361, 126942, 206716, 235269, 11464, 174287, 120340, 236770, 134660, 235248, 241594, 236183, 123472, 227613, 65084, 236864, 236392, 70231, 243093, 207092, 241938, 90621, 201194, 48060, 120816, 237386, 238080, 22618, 55496, 235265, 235248, 111, 145, 236417, 237545, 236645, 160587, 237465, 235292, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236179, 142192, 78183, 238994, 244669, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:32956 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:30:37 engine.py:275] Added request cmpl-c50713b01e424809ba9c94152b5d65a1-0.
INFO 02-16 20:30:47 metrics.py:455] Avg prompt throughput: 204.3 tokens/s, Avg generation throughput: 14.7 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:30:57 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:33:44 logger.py:39] Received request cmpl-25121576753d4256953d1b277d7bdadf-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 크롤링 라이브러리를 알아봐주고, 공통점과 차이점을 비교해줘 <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 94177, 242237, 239074, 213862, 238997, 237822, 176947, 78183, 236655, 244950, 237014, 236464, 235269, 41388, 238693, 239158, 237233, 91292, 235832, 239158, 236392, 51732, 237905, 237138, 244669, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:40592 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:33:44 engine.py:275] Added request cmpl-25121576753d4256953d1b277d7bdadf-0.
INFO 02-16 20:33:44 metrics.py:455] Avg prompt throughput: 168.9 tokens/s, Avg generation throughput: 0.1 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 2.5%, CPU KV cache usage: 0.0%.
INFO 02-16 20:33:46 logger.py:39] Received request cmpl-455dd5e390cb472a86091e421cbc96dc-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:33:46 <end_of_turn>\n\n    <start_of_turn>user 크롤링 라이브러리 종류 목록 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235304, 235304, 235292, 235310, 235318, 235248, 107, 109, 141, 106, 1645, 94177, 242237, 239074, 213862, 238997, 237822, 236432, 86126, 239758, 154124, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:40592 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:33:46 engine.py:275] Added request cmpl-455dd5e390cb472a86091e421cbc96dc-0.
INFO 02-16 20:33:47 logger.py:39] Received request cmpl-a4ebf393fee54d97b404322101effd84-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:33:47 <end_of_turn>\n\n    <start_of_turn>user 파이썬 크롤링 라이브러리 공통점 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235304, 235304, 235292, 235310, 235324, 235248, 107, 109, 141, 106, 1645, 59994, 235832, 246881, 94177, 242237, 239074, 213862, 238997, 237822, 236432, 41388, 238693, 239158, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:40592 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:33:47 engine.py:275] Added request cmpl-a4ebf393fee54d97b404322101effd84-0.
INFO 02-16 20:33:49 logger.py:39] Received request cmpl-657299af79a54f978bf05d637761de9a-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 20:33:49 <end_of_turn>\n\n    <start_of_turn>user 파이썬 크롤링 라이브러리 차이점 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235276, 235292, 235304, 235304, 235292, 235310, 235315, 235248, 107, 109, 141, 106, 1645, 59994, 235832, 246881, 94177, 242237, 239074, 213862, 238997, 237822, 236432, 91292, 235832, 239158, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:40592 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:33:49 engine.py:275] Added request cmpl-657299af79a54f978bf05d637761de9a-0.
INFO 02-16 20:33:49 metrics.py:455] Avg prompt throughput: 307.6 tokens/s, Avg generation throughput: 52.3 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.2%, CPU KV cache usage: 0.0%.
INFO 02-16 20:33:52 logger.py:39] Received request cmpl-45b4e7ad690f4adab390cf39e7f2bd80-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        03) 웹 스크래핑을 위한 Python 라이브러리 소개\nPython은 웹 사이트에서 데이터를 추출하는 데 도움을 주는 라이브러리들이 개발되어있어 웹 스크래핑에 큰 힘을 발휘합니다. BeautifulSoup, Scrapy, Selenium이라는 세 가지 일반적으로 사용되는 라이브러리가 그 예입니다. 이 세 가지 라이브러리는 각각 독특한 기능을 제공하며, 사용 방법은 스크래핑 프로젝트의 복잡성과 요구 사항에 따라 달라집니다.\nBeautifulSoup, Scrapy, Selenium 개요\nBeautifulSoup\n: 이 파이썬 라이브러리는 HTML 및 XML 문서를 파싱하는 데 사용되며, HTML 및 XML 파일에서 데이터를 추출하기에 좋습니다. BeautifulSoup은 웹페이지 소스 코드에서 구문 분석 트리(parse tree)를 생성하며, 이를 통해 웹페이지를 탐색하고 검색하며 수정하기 쉽습니다. BeautifulSoup은 복잡한 HTML 문서를 태그, 탐색 가능한 문자열 또는 주석 등의 파이썬 객체 트리로 변환합니다.\nfrom bs4 import BeautifulSoup\nimport requests\n\nURL = "https://www.example.com"\npage = requests.get(URL)\nsoup = BeautifulSoup(page.content, "html.parser")\n\n# 페이지에서 첫 번째 h1 태그 찾기\nh1_tag = soup.find("h1")  \nprint(h1_tag.text)  # h1 태그 내부의 텍스트 출력\nScrapy\n: 더 복잡한 스크래핑 작업을 처리할 수 있는 포괄적인 웹 크롤링 프레임워크입니다. Scrapy는 여러 요청을 동시에 처리할 수 있는 비동기 처리 프레임워크로, 대규모 스크래핑 작업에서 효율적으로 작동합니다. 웹 사이트에서 데이터를 추출하고 처리하여 원하는 형식으로 저장하는 데 필요한 모든 도구를 제공합니다.\nimport scrapy\n\nclass QuotesSpider(scrapy.Spider):\n    name = "quotes"\n    start_urls = [\'http://quotes.toscrape.com/tag/humor/\']\n\n    def parse(self, response):\n        for quote in response.css(\'div.quote\'):\n            yield {\n                \'text\': quote.css(\'span.text::text\').get(),\n                \'author\': quote.xpath(\'span/small/text()\').get(),\n            }\nSelenium\n: 웹 애플리케이션 테스트를 위해 개발된 라이브러리이지만, 웹 스크래핑에도 널리 사용됩니다. Selenium의 강점은 웹페이지와 상호작용을 자동화할 수 있는 능력에 있습니다. Selenium은 버튼 클릭이나 페이지 스크롤링과 같은 인간과 유사한 동작을 시뮬레이션할 수 있어, 비동기로 콘텐츠가 로드되거나 사용자 상호작용에 응답하는 동적 웹사이트에 적합합니다.\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\n\ndriver = webdriver.Firefox()\ndriver.get("http://www.python.org")\nassert "Python" in driver.title\nelem = driver.find_element_by_name("q")\nelem.clear()\nelem.send_keys("pycon")\nelem.send_keys(Keys.RETURN)\nassert "No results found." not in driver.page_source\ndriver.close()\n각 라이브러리의 사용 시점\nBeautifulSoup\n: 웹페이지의 HTML에서 데이터를 추출해야하는 소규모 또는 중간 규모의 스크래핑 작업에 적합합니다. 사용이 간편하며, 속도가 큰 문제가 되지 않는 프로젝트에 이상적입니다.\nScrapy\n: 대규모이고 복잡한 웹 스크래핑 작업에 가장 적합하며, 여러 요청을 처리하고 데이터를 체계적으로 처리해야 할 때 유용합니다. Scrapy는 라이브러리보다는 웹 크롤링 프레임워크에 가깝기 때문에 기능이 더 많고 학습 곡선이 더 가파릅니다.\nSelenium\n: 웹사이트가 콘텐츠를 비동기적으로 로드하거나 사용자 상호작용에 응답하는 경우에 적합합니다. 버튼 클릭이나 양식 작성과 같은 사용자 상호작용이 필요한 스크래핑 작업에 유용합니다.\n기억하세요, 라이브러리의 선택은 웹 스크래핑 프로젝트의 구체적인 요구 사항에 크게 의존합니다. 일부 경우에는 이러한 라이브러리를 조합하여 목표를 달성해야 할 수도 있습니다. 다음 섹션에서는 이러한 라이브러리 각각에 대해 자세히 알아보고 실용적인 예제를 통해 기능을 소개할 것입니다.\n마지막 편집일시 : 2023년 6월 2일 11:33 오전', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 235276, 235304, 235275, 31288, 32275, 237611, 238608, 241496, 236392, 168947, 21237, 213862, 238997, 237822, 236432, 44997, 237936, 108, 27922, 236648, 31288, 17309, 78749, 22803, 112762, 236791, 75943, 238483, 40284, 65503, 50316, 240520, 236392, 40712, 236214, 213862, 238997, 237822, 236432, 94525, 227613, 141048, 237056, 236770, 31288, 32275, 237611, 238608, 241496, 236179, 185075, 235248, 242433, 236392, 66144, 243500, 43395, 235265, 92793, 235269, 94078, 2158, 235269, 130817, 235832, 139978, 48740, 128753, 234541, 90621, 61943, 156610, 213862, 238997, 237822, 228773, 20350, 71277, 47555, 235265, 11464, 48740, 128753, 213862, 238997, 237822, 137120, 163558, 238316, 149598, 239609, 236511, 201619, 236392, 110308, 206716, 235269, 61943, 130059, 236648, 32275, 237611, 238608, 241496, 132880, 242989, 236859, 236137, 122447, 241533, 237154, 237233, 73713, 237302, 17309, 239383, 236179, 156976, 123083, 236950, 239346, 12957, 235265, 108, 22106, 59078, 235269, 94078, 2158, 235269, 130817, 49532, 237526, 108, 22106, 59078, 108, 235292, 11464, 59994, 235832, 246881, 213862, 238997, 237822, 137120, 19319, 60709, 26176, 133889, 236791, 59994, 241870, 40284, 65503, 61943, 238070, 238986, 235269, 19319, 60709, 26176, 145240, 22803, 112762, 236791, 75943, 238483, 72159, 236179, 106509, 21743, 235265, 92793, 236648, 31288, 83137, 44997, 236354, 215441, 22803, 49061, 237465, 211558, 106365, 236432, 235278, 6048, 5421, 235275, 236791, 116518, 206716, 235269, 11464, 236791, 187118, 31288, 83137, 236791, 235248, 242850, 238931, 48060, 203755, 206716, 164079, 72159, 235248, 243274, 21743, 235265, 92793, 236648, 122447, 241533, 236511, 19319, 133889, 236791, 143401, 236671, 235269, 235248, 242850, 238931, 153728, 236511, 45980, 236645, 239375, 132879, 40712, 239465, 73143, 236137, 59994, 235832, 246881, 209611, 106365, 236432, 236375, 75980, 239457, 43395, 235265, 108, 2273, 33138, 235310, 1635, 92793, 108, 809, 12557, 109, 6217, 589, 664, 2468, 1336, 1920, 235265, 7310, 235265, 872, 235281, 108, 3323, 589, 12557, 235265, 818, 235278, 6217, 235275, 108, 68543, 589, 92793, 235278, 3323, 235265, 3312, 235269, 664, 2527, 235265, 12594, 1388, 109, 235345, 106191, 22803, 185111, 170174, 531, 235274, 143401, 236671, 134498, 236386, 108, 235259, 235274, 235298, 3123, 589, 21078, 235265, 3655, 885, 235259, 235274, 1388, 139, 108, 1431, 235278, 235259, 235274, 235298, 3123, 235265, 1082, 235275, 139, 235345, 531, 235274, 143401, 236671, 58272, 237092, 236137, 235248, 242756, 50691, 182260, 108, 108306, 2158, 108, 235292, 70231, 122447, 241533, 236511, 32275, 237611, 238608, 241496, 211896, 236392, 168788, 238080, 22618, 72941, 58888, 245414, 85024, 31288, 94177, 242237, 239074, 58510, 237990, 238700, 239779, 237611, 47555, 235265, 94078, 2158, 236214, 197781, 227038, 236392, 49697, 236569, 236179, 168788, 238080, 22618, 72941, 51732, 237358, 236386, 168788, 58510, 237990, 238700, 239779, 237611, 236375, 235269, 26801, 240753, 237551, 32275, 237611, 238608, 241496, 211896, 22803, 207092, 241938, 90621, 63806, 237358, 43395, 235265, 31288, 17309, 78749, 22803, 112762, 236791, 75943, 238483, 48060, 168788, 72494, 68586, 40284, 112507, 238186, 26291, 143077, 40284, 65503, 126942, 236511, 87997, 50316, 237302, 236791, 110308, 43395, 235265, 108, 809, 102083, 109, 1638, 34058, 48617, 235278, 224725, 235265, 48617, 1245, 108, 141, 1067, 589, 664, 52088, 235281, 108, 141, 2997, 235298, 18092, 589, 7999, 2255, 1336, 52088, 235265, 1463, 12647, 554, 235265, 872, 235283, 3123, 235283, 146432, 235283, 2074, 109, 141, 1293, 11298, 235278, 1053, 235269, 3590, 1245, 108, 145, 746, 14232, 575, 3590, 235265, 5673, 1101, 913, 235265, 945, 27704, 108, 149, 17061, 612, 108, 153, 235303, 1082, 2130, 14232, 235265, 5673, 1101, 1432, 235265, 1082, 1220, 1082, 4898, 818, 3134, 108, 153, 235303, 3849, 2130, 14232, 235265, 35048, 1101, 1432, 235283, 10498, 235283, 1082, 645, 4898, 818, 3134, 108, 149, 235270, 108, 97647, 108, 235292, 31288, 122096, 239135, 236432, 239814, 146689, 108214, 50691, 236791, 93806, 227613, 238602, 213862, 238997, 237822, 236432, 235832, 95091, 235269, 31288, 32275, 237611, 238608, 241496, 209929, 235248, 241518, 236432, 61943, 129090, 235265, 130817, 236137, 84608, 239158, 236648, 31288, 83137, 237807, 36203, 238033, 238115, 237545, 236392, 205006, 236817, 238080, 22618, 72941, 235248, 239474, 238365, 236179, 55496, 235265, 130817, 236648, 213896, 91940, 240356, 180521, 106191, 32275, 237611, 242237, 239074, 237233, 132929, 30743, 238264, 237233, 46355, 236417, 236511, 49697, 238115, 236392, 27941, 246989, 70227, 239109, 238080, 22618, 215995, 235269, 51732, 237358, 236386, 236375, 176427, 236361, 54868, 237135, 238070, 160696, 61943, 236645, 36203, 238033, 238115, 237545, 236179, 224047, 241305, 40284, 49697, 237603, 31288, 236417, 78749, 236179, 99797, 237961, 43395, 235265, 108, 2273, 67519, 1635, 112907, 108, 2273, 67519, 235265, 109639, 235265, 7172, 235265, 9521, 1635, 37080, 109, 11686, 589, 112907, 235265, 97860, 645, 108, 11686, 235265, 818, 885, 2255, 1336, 1920, 235265, 7774, 235265, 2164, 1388, 108, 2994, 664, 27922, 235281, 575, 8569, 235265, 2563, 108, 20062, 589, 8569, 235265, 3655, 235298, 7672, 235298, 1547, 235298, 1067, 885, 235317, 1388, 108, 20062, 235265, 5589, 645, 108, 20062, 235265, 5450, 235298, 9521, 885, 2158, 759, 1388, 108, 20062, 235265, 5450, 235298, 9521, 235278, 16145, 235265, 32530, 235275, 108, 2994, 664, 1294, 3190, 1942, 1464, 780, 575, 8569, 235265, 3323, 235298, 2757, 108, 11686, 235265, 3446, 645, 108, 238316, 213862, 238997, 237822, 236432, 236137, 61943, 27941, 239158, 108, 22106, 59078, 108, 235292, 31288, 83137, 236137, 19319, 22803, 112762, 236791, 75943, 238483, 149735, 40284, 44997, 240753, 237551, 132879, 47250, 238264, 235248, 240753, 237551, 236137, 32275, 237611, 238608, 241496, 211896, 236179, 99797, 237961, 43395, 235265, 61943, 235832, 127149, 239813, 206716, 235269, 125507, 236840, 236361, 185075, 132793, 236361, 116508, 236183, 186830, 132880, 242989, 236859, 236179, 159798, 237603, 47555, 235265, 108, 108306, 2158, 108, 235292, 26801, 240753, 237551, 224907, 122447, 241533, 236511, 31288, 32275, 237611, 238608, 241496, 211896, 236179, 126277, 99797, 237961, 206716, 235269, 197781, 227038, 236392, 168788, 48060, 112762, 236791, 109962, 238002, 90621, 168788, 149735, 69225, 54715, 46355, 237545, 43395, 235265, 94078, 2158, 236214, 213862, 238997, 237822, 236432, 237036, 161509, 31288, 94177, 242237, 239074, 58510, 237990, 238700, 239779, 237611, 236179, 23248, 247872, 236386, 147801, 201619, 235832, 70231, 99805, 236464, 126160, 237152, 235248, 241017, 237700, 235832, 70231, 23248, 238183, 245257, 12957, 235265, 108, 97647, 108, 235292, 31288, 236417, 78749, 236361, 176427, 236791, 51732, 237358, 236386, 90621, 54868, 237135, 236345, 160696, 61943, 236645, 36203, 238033, 238115, 237545, 236179, 224047, 241305, 40284, 95917, 236179, 99797, 237961, 43395, 235265, 213896, 91940, 240356, 180521, 119452, 238186, 198766, 237233, 132929, 61943, 236645, 36203, 238033, 238115, 237545, 235832, 126942, 236511, 32275, 237611, 238608, 241496, 211896, 236179, 46355, 237545, 43395, 235265, 108, 236386, 242086, 204551, 235269, 213862, 238997, 237822, 236432, 236137, 134472, 236648, 31288, 32275, 237611, 238608, 241496, 132880, 242989, 236859, 236137, 49061, 238308, 85024, 73713, 237302, 17309, 239383, 236179, 94177, 237458, 23594, 240127, 43395, 235265, 32929, 237092, 95917, 96564, 11464, 174287, 213862, 238997, 237822, 176947, 42916, 237961, 72494, 86040, 238946, 236791, 123083, 237154, 149735, 69225, 22618, 236840, 55496, 235265, 115049, 235248, 243832, 239109, 180860, 11464, 174287, 213862, 238997, 237822, 236432, 163558, 238316, 236179, 142192, 34103, 237533, 239055, 78183, 236655, 237036, 236464, 61928, 237545, 85024, 71277, 236939, 236791, 187118, 201619, 236392, 44997, 237936, 238080, 121393, 235265, 108, 237354, 236183, 240750, 136188, 239346, 236666, 236569, 865, 235248, 235284, 235276, 235284, 235304, 237029, 235248, 235318, 237699, 235248, 235284, 236666, 235248, 235274, 235274, 235292, 235304, 235304, 44245, 237045], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:52612 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:33:52 logger.py:39] Received request cmpl-6542a8966eff4696a08bcc7ba7c500cf-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ![](https://velog.velcdn.com/images/dmsgur7112/post/2ea68698-43c0-4d01-9ceb-b41f900f596b/image.png)\n\n## 웹 크롤링(Web Crawling)?\n\n- 웹 상에 존재하는 컨텐츠를 수집하는 작업을 의미\n- 크롤링하는 소프트웨어를 크롤러(Crawler)라고 부름\n\n## 크롤링 vs 파싱 vs 스크래핑\n\n- 크롤링 : 여러 인터넷 사이트의 페이지를 수집해서 분류하고, 저장한 후 인덱싱하는 것\n- 파싱 : 어떤 페이지에서 내가 원하는 데이터를 특정 패턴이나 순서로 추출하여 정보를 가공하는 것\n- 스크래핑 : HTTP를 통해 웹 사이트의 내용을 긁어다 원하는 형태로 가공하는 모든 과정(크롤링도 스크래핑 방법 중 하나)\n\n---\n## 파이썬 크롤링 관련 패키지\n\n1. **urllib**\n    - 파이썬에서 기본적으로 제공해주는 라이브러리로, 설치가 따로 필요 없음\n2. **requests**\n    - html 문서를 가져올 때 사용하는 패키지\n    - 파이썬 기본 라이브러리에 포함된 urllib 패키지보다 편리\n3. **beautifulSoup**\n    - html의 태그 정보를 이용해서 필요한 정보만 추출할 때 유용한 패키지\n    - css selector를 이용하여 특정 요소에 접근, 추출할 수 있음\n4. **selenium**\n    - 무언가를 입력하거나 클릭하는 웹페이지 내 비동기적 컨텐츠를 추출할 때 사용되는 패키지\n    - 구글 크롬, 파이어폭스 등의 웹드라이버를 이용\n    - 속도가 다소 느리므로, 코드 구현시 셀레니움 사용을 최소화하는 것이 중요', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 235258, 5129, 525, 235324, 235274, 235274, 235284, 235283, 2729, 235283, 235284, 535, 235318, 235321, 235318, 235315, 235321, 235290, 235310, 235304, 235260, 235276, 235290, 235310, 235258, 235276, 235274, 235290, 235315, 206911, 235290, 235268, 235310, 235274, 235266, 235315, 235276, 235276, 235266, 235308, 235315, 235318, 235268, 235283, 2502, 235265, 7424, 235275, 109, 1620, 31288, 94177, 242237, 239074, 235278, 3728, 37155, 2117, 15939, 109, 235290, 31288, 36203, 236179, 156683, 238360, 40284, 235248, 241996, 164594, 236791, 22618, 239346, 40284, 211896, 236392, 223616, 108, 235290, 94177, 242237, 239074, 40284, 44997, 237964, 236859, 241023, 236770, 236791, 94177, 242237, 237822, 235278, 168308, 235275, 112778, 43761, 239295, 109, 1620, 94177, 242237, 239074, 5135, 59994, 241870, 5135, 32275, 237611, 238608, 241496, 109, 235290, 94177, 242237, 239074, 865, 197781, 227397, 242319, 17309, 78749, 236137, 106191, 236791, 22618, 239346, 206666, 70754, 239758, 48060, 235269, 143077, 236511, 70957, 30743, 245053, 241870, 40284, 29599, 108, 235290, 59994, 241870, 865, 53355, 242251, 106191, 22803, 58272, 236361, 68586, 40284, 112762, 236791, 94492, 236864, 98027, 241053, 180521, 142925, 236554, 236375, 75943, 238483, 72494, 104569, 236791, 23248, 237495, 40284, 29599, 108, 235290, 32275, 237611, 238608, 241496, 865, 24493, 236791, 187118, 31288, 17309, 78749, 236137, 196582, 236392, 235248, 250274, 236770, 236039, 68586, 40284, 112507, 239190, 236375, 23248, 237495, 40284, 87997, 65084, 236864, 235278, 237611, 242237, 239074, 236840, 32275, 237611, 238608, 241496, 130059, 47250, 113859, 235275, 109, 3976, 108, 1620, 59994, 235832, 246881, 94177, 242237, 239074, 187003, 98027, 238705, 236183, 109, 235274, 235265, 5231, 222740, 688, 108, 141, 235290, 59994, 235832, 246881, 22803, 28693, 238744, 90621, 110308, 237138, 237014, 236214, 213862, 238997, 237822, 236432, 236375, 235269, 65952, 237924, 236361, 103293, 236375, 126942, 56341, 238036, 108, 235284, 235265, 5231, 43313, 688, 108, 141, 235290, 11060, 133889, 236791, 174538, 240256, 54715, 61943, 40284, 98027, 238705, 236183, 108, 141, 235290, 59994, 235832, 246881, 28693, 238744, 213862, 238997, 237822, 236432, 236179, 157329, 238602, 57188, 98027, 238705, 236183, 180677, 136188, 236432, 108, 235304, 235265, 5231, 20909, 59078, 688, 108, 141, 235290, 11060, 236137, 143401, 236671, 104569, 236791, 208134, 206666, 126942, 236511, 104569, 237598, 75943, 238483, 238080, 54715, 46355, 237545, 236511, 98027, 238705, 236183, 108, 141, 235290, 39225, 44736, 236791, 208134, 72494, 94492, 236864, 73713, 237433, 236179, 165866, 239969, 235269, 75943, 238483, 238080, 22618, 21167, 238036, 108, 235310, 235265, 5231, 32891, 688, 108, 141, 235290, 60331, 239753, 236361, 236791, 120618, 236345, 160696, 91940, 240356, 40284, 31288, 83137, 58272, 51732, 237358, 236386, 237603, 235248, 241996, 164594, 236791, 75943, 238483, 238080, 54715, 61943, 156610, 98027, 238705, 236183, 108, 141, 235290, 49061, 239334, 94177, 244875, 235269, 59994, 235832, 236770, 241816, 236354, 73143, 236137, 31288, 237135, 122717, 238364, 236791, 208134, 108, 141, 235290, 125507, 236840, 236361, 32048, 237433, 216702, 236432, 212026, 235269, 215441, 49061, 238513, 236569, 235248, 242511, 237990, 236405, 240520, 61943, 236392, 75500, 237433, 236817, 40284, 93205, 215134], lora_request: None, prompt_adapter_request: None.
INFO 02-16 20:33:52 engine.py:275] Added request cmpl-45b4e7ad690f4adab390cf39e7f2bd80-0.
INFO:     127.0.0.1:52628 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:33:52 logger.py:39] Received request cmpl-f5a82fe08812481ea8f3b22fab49954f-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        요즘 파이썬에 관심을 깊게 갖게 되었다.예전에는 뭔가 너무나 짧은 코드로 인해, 모든 것들이 라이브러리로 구현되어 있다는 것에서뭔가 꼰대같은 쓸데없는 마인드가 발동했었던 것 같다.근본 언어들에 대해서 공부하는 것이 필요하다고 생각해서, 파이썬 같은 언어에 대해서 스스로 피했었는데이런 자의식이 나를 더욱 망쳤고, 스스로의 발전 가능성을 막고 한계를 생성했던 것 같다.결과적으로 나는 다른 사람들보다 발전할 수 없었던 것 같다.그렇게 예전에 스스로 생성한 편견으로, 자연스럽게 그 이후에 파이썬을 깊게 터치하지 않고, 탐구하지도 않게 된 것 같은데최근 같은 팀원분을 통해 파이썬의 강력함을 느끼게 되어서, 정말 더 이상의 어리석은 생각은 하지 않도록이번 기회에 탈피하는 한 걸음이 되고자, 파이썬의 장점들을 활용하기로 결심했다.파이썬으로 가장 먼저 해보고 싶었던 것은, 데이터 크롤링이었다.자바 언어로도 해봤지만, 파이썬으로 작업하는 팀원분을 보면서, 정말 해보고 싶다는 생각을 해보게 되었다.서론이 길었다.파이썬의 정말 큰 장점은, Library가 정말 많다는 것이다.그래서 코드도 간결하다.그리고 배열에서 각 자료형이 다를 수도 있고, 판다스나 넘파이 같은 강력한 라이브러리들로 데이터 관리에 매우 유용하다.이번에, 파이썬을 이용한 아래 라이브러리들을 통해 크롤링을 공부하고 실습해 볼 것이다.1. Pandas - 데이터 처리2. Selenium - 데이터 크롤링3. Urllib - 이미지 데이터 위주 다루기저는 실습환경으로 Google Colab을 사용할 것인데이곳에서 Selenium을 사용하기 위해서는 라이브러리 다운로드가 필요합니다.Colab 스크립트 창에 딱 한 번만!pip install selenium\n!apt-get update\n!apt install chromium-chromedriver이것을 입력하여 다운로드해주면 됩니다.참고 :https://ai-run.tistory.com/47셀레니움은\xa0웹\xa0테스트\xa0자동화\xa0프레임워크로써,\xa0selenium\xa0webdriver를\xa0이용하여\xa0다양한\xa0브라우저를\xa0컨트롤\xa0할\xa0수\xa0있다.더 자세히그리고 용어를 잠깐 소개하자면크롤링 : 웹 상의 데이터를 수집하고 분류 저장하는 일종의 작업데이터를 수집해서 꺼내보기 쉽게 정리해놓는 작업을 말한다.스크래핑 : 데이터를 수집하는 모든 작업파싱 : 데이터를 가공하여 원하는 포맷으로.용어가 다 비슷비슷한데,데이터를 긁어서 파싱해서 분석하는 모든 일련의 작업을 보통 "크롤링한다"고 대중적으로 표현합니다.용어 설명 :https://aftersiesta.tistory.com/8시작이 반이다!', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 237526, 243728, 59994, 235832, 246881, 236179, 55526, 239308, 236392, 235248, 243890, 237458, 235248, 243165, 237458, 235248, 174647, 235265, 238748, 237045, 96564, 235248, 247291, 236361, 162056, 237908, 236915, 235248, 245115, 236648, 215441, 236375, 30743, 237138, 235269, 87997, 29599, 94525, 213862, 238997, 237822, 236432, 236375, 49061, 238513, 141048, 69581, 236214, 29599, 22803, 247291, 236361, 235248, 254779, 236800, 239012, 236648, 235248, 245471, 238266, 238739, 236214, 41645, 236589, 237135, 236361, 66144, 237358, 238267, 238220, 240080, 29599, 81673, 236039, 235265, 239969, 238744, 171754, 236770, 237290, 236179, 142192, 236554, 41388, 237092, 40284, 93205, 126942, 188898, 236464, 142882, 206666, 235269, 59994, 235832, 246881, 132929, 171754, 236770, 236179, 142192, 236554, 32275, 236354, 236375, 99742, 238267, 238220, 221277, 235832, 240499, 34103, 236137, 238186, 235832, 38585, 236791, 70231, 243093, 235248, 240547, 244770, 236464, 235269, 32275, 236354, 236375, 236137, 66144, 237045, 153728, 237154, 236392, 235248, 240750, 236464, 35191, 238002, 236791, 116518, 238267, 240080, 29599, 81673, 236039, 235265, 238665, 237233, 90621, 203981, 102708, 64691, 237290, 180677, 66144, 237045, 238080, 22618, 56341, 238220, 240080, 29599, 81673, 236039, 235265, 236671, 241838, 237458, 71277, 237045, 236179, 32275, 236354, 236375, 116518, 236511, 136188, 241253, 26291, 235269, 34103, 237794, 236354, 241460, 237458, 20350, 11464, 238612, 236179, 59994, 235832, 246881, 236392, 235248, 243890, 237458, 235248, 237524, 237924, 74860, 48682, 236464, 235269, 235248, 242850, 237302, 74860, 236840, 48682, 237458, 95622, 29599, 132929, 238266, 239185, 239969, 132929, 235248, 241452, 237399, 238304, 236392, 187118, 59994, 235832, 246881, 236137, 84608, 238365, 238467, 236392, 216702, 241892, 237458, 116508, 236770, 236554, 235269, 35467, 238989, 70231, 159798, 236137, 53355, 236432, 239465, 236648, 142882, 236648, 30181, 236183, 48682, 153145, 235832, 238628, 28693, 237880, 236179, 235248, 241205, 238810, 40284, 35191, 180850, 238036, 235832, 116508, 236464, 236645, 235269, 59994, 235832, 246881, 236137, 60318, 239158, 134660, 147226, 237545, 72159, 236375, 72510, 239308, 88513, 235265, 238183, 235832, 246881, 26291, 126277, 235248, 241364, 238721, 56787, 237036, 236464, 206260, 238220, 240080, 143613, 235269, 112762, 94177, 242237, 239074, 235832, 109493, 235265, 236645, 238131, 171754, 236770, 236375, 236840, 56787, 247269, 95091, 235269, 59994, 235832, 246881, 26291, 211896, 40284, 235248, 241452, 237399, 238304, 236392, 29283, 237722, 236554, 235269, 35467, 238989, 56787, 237036, 236464, 206260, 161509, 142882, 236392, 56787, 237036, 237458, 235248, 174647, 235265, 236554, 240405, 235832, 159897, 109493, 235265, 238183, 235832, 246881, 236137, 35467, 238989, 185075, 60318, 239158, 236648, 235269, 9094, 236361, 35467, 238989, 99805, 161509, 170613, 235265, 236671, 238608, 236554, 215441, 236840, 127149, 238665, 188898, 235265, 186223, 50548, 239375, 22803, 163558, 203177, 238867, 235832, 32048, 236791, 22618, 236840, 21167, 236464, 235269, 135101, 236039, 236354, 236915, 235248, 242429, 238183, 235832, 132929, 84608, 238365, 236511, 213862, 238997, 237822, 236432, 237290, 236375, 112762, 159838, 236179, 195531, 46355, 237545, 188898, 235265, 235832, 238628, 236179, 235269, 59994, 235832, 246881, 236392, 208134, 236511, 23745, 238608, 213862, 238997, 237822, 236432, 134660, 187118, 94177, 242237, 239074, 236392, 41388, 237092, 48060, 61928, 237152, 237138, 181539, 170613, 235265, 235274, 235265, 192601, 728, 112762, 168788, 235284, 235265, 130817, 728, 112762, 94177, 242237, 239074, 235304, 235265, 59734, 4613, 728, 23088, 112762, 41423, 237014, 32048, 238949, 236386, 238721, 236214, 61928, 237152, 239457, 237392, 26291, 6238, 1911, 9236, 236392, 61943, 238080, 29599, 236589, 238266, 235832, 241732, 22803, 130817, 236392, 61943, 72159, 93806, 234631, 213862, 238997, 237822, 236432, 32048, 238138, 200576, 236361, 126942, 43395, 235265, 3078, 9236, 32275, 237611, 239837, 236859, 162337, 236179, 235248, 246506, 35191, 84389, 237598, 235341, 39553, 4877, 67519, 108, 235341, 6323, 235290, 818, 4601, 108, 235341, 6323, 4877, 102450, 235290, 199908, 235832, 237506, 236392, 120618, 72494, 32048, 238138, 200576, 237138, 237014, 237722, 235248, 129090, 235265, 189764, 865, 2468, 1336, 1515, 235290, 3153, 235265, 10787, 929, 235265, 872, 235283, 235310, 235324, 242511, 237990, 236405, 240520, 236648, 236338, 237941, 236338, 239060, 50691, 236338, 236645, 237358, 236817, 236338, 237964, 237990, 238700, 239779, 237611, 236375, 242974, 235269, 236338, 32891, 236338, 109639, 236791, 236338, 235832, 237545, 72494, 236338, 236039, 238780, 236511, 236338, 238997, 236950, 237312, 238721, 236791, 236338, 241996, 236859, 242237, 236338, 238080, 236338, 236669, 236338, 237056, 236039, 235265, 238589, 34103, 237533, 239055, 186223, 120340, 236770, 236791, 235248, 242163, 248407, 44997, 237936, 236345, 236645, 237722, 237611, 242237, 239074, 865, 31288, 36203, 236137, 112762, 236791, 22618, 239346, 48060, 70754, 239758, 143077, 40284, 32929, 238777, 236137, 211896, 238266, 90081, 236791, 22618, 239346, 206666, 235248, 244267, 238151, 237036, 236386, 235248, 243274, 237458, 35467, 236432, 237138, 242891, 236214, 211896, 236392, 72163, 78949, 235265, 161615, 238608, 241496, 865, 112762, 236791, 22618, 239346, 40284, 87997, 211896, 238183, 241870, 865, 112762, 236791, 23248, 237495, 72494, 68586, 40284, 58888, 246481, 26291, 235265, 237545, 236770, 236361, 32048, 51732, 245547, 237584, 245547, 236511, 238266, 235269, 238266, 90081, 236791, 235248, 250274, 236770, 236554, 59994, 241870, 206666, 211558, 40284, 87997, 32929, 240429, 236137, 211896, 236392, 29283, 238693, 664, 237611, 242237, 239074, 78949, 235281, 236464, 26801, 237935, 90621, 100280, 238513, 43395, 235265, 237545, 236770, 220596, 865, 2468, 1336, 10808, 542, 5666, 235265, 10787, 929, 235265, 872, 235283, 235321, 236569, 238115, 235832, 78821, 61742, 235341], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:52642 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:33:52 engine.py:275] Added request cmpl-6542a8966eff4696a08bcc7ba7c500cf-0.
INFO 02-16 20:33:52 engine.py:275] Added request cmpl-f5a82fe08812481ea8f3b22fab49954f-0.
INFO 02-16 20:33:53 logger.py:39] Received request cmpl-eebaed11aa184e58a71f89546502261a-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        Python 웹스크래핑 관련 라이브러리 종류오랜만에 Python과 관련된 포스트를 작성하는 듯 하다.이번 포스트에서는 Python에서웹스크래핑 작업을 할 때 사용하는 라이브러리 종류에 대해서 알아보고자 한다.필자의 경우 주식 분석 글을 작성할 때 기업의 재무제표를 블로그에 내 스타일대로 작성하기 위해 파이썬으로 웹스크래핑 코드를 만들었었다.웹스크래핑을 공부할 때 Beautiful Soup, Requests, Selenium만 배웠었는데, 이 라이브러리말고 어떤 것이 있는지 간단하게 알아보자.목차Beautiful SoupRequestsSeleniumScrapyMechanicalSoupPlaywrightBeautiful SoupBeautiful Soup는 HTML과 XML 파일로부터 데이터를 추출하기 위해 사용된다.웹 페이지의 구조를 파악하고, 특정 태그를 쉽게 찾아내거나, 웹 페이지의 내용을 필요에 따라 추출하거나 조작할 수 있다.예를 들어, 웹 사이트의 특정 부분만을 가져오거나, 링크가 담긴 모든 태그를 찾아내고 싶을 때 Beautiful Soup을 사용할 수 있다.이 라이브러리의 장점은 사용하기 쉽고 직관적인 API를 제공한다는 것이다.Beautiful Soup는 태그의 이름과 속성을 이용하여 쉽게 접근하고, CSS 선택자를 통해 태그를 선택하는 기능도 제공한다.또한, 문서 내에서 문자열을 검색하고, 태그의 내용을 수정하거나 추가하는 기능도 포함하고 있다.Beautiful Soup는 정적인HTML을 파싱하는 데는 효과적이지만,자바스크립트로 동적으로 생성되는 내용을 직접적으로 다루지는 못한다.웹 페이지에 동적 콘텐츠가 많은 경우, Beautiful Soup만으로는 충분하지 않을 수 있다.✅ Installpip install beautifulsoup4✅ Examplefrom bs4 import BeautifulSoup\nimport requests\n\n# 웹 페이지를 불러온다 (Requests)\nurl = \'http://example.com/\'\nresponse = requests.get(url)\n\n# response.content로 웹 페이지의 내용을 받아온다.\nsoup = BeautifulSoup(response.content, \'html.parser\')\n\n# find() 메서드를 사용하여 웹 페이지에서 첫 번째 <h1> 태그를 찾는다.\nfirst_h1 = soup.find(\'h1\')\n\n# find_all() 메서드를 사용하여 모든 <a> 태그를 찾는다.\nall_links = soup.find_all(\'a\')RequestsRequests 라이브러리는 파이썬에서HTTP 요청을 쉽게 발송할 수 있도록 해주는 라이브러리이다.HTTP를 이용한 네트워크 통신을 구현할 때 필요한 기능들을 직관적이고 사용하기 쉬운 인터페이스로 제공한다.간단한 API를 통해 GET, POST, PUT, DELETE 등의 HTTP 메소드를 사용할 수 있게 해주며, 쿠키를 이용한 세션 관리를 자동으로 처리하여, 로그인이 필요한 웹 서비스에 대한 지속적인 요청을 보낼 수도 있다.URL 파라미터를 딕셔너리 형태로 전달할 수 있으며, 자동으로 적절한 형태로 인코딩해준다.또한JSON 응답은 자동으로 파이썬 딕셔너리로 변환할 수 있고, 바이너리 응답도 쉽게 처리할 수 있다.요청의 최대 대기 시간을 설정해서 서버의 응답이 늦어질 때의 타임아웃을 관리할 수도 있다.✅ Installpip install requests✅ Exampleimport requests\n\n# GET 요청\nresponse = requests.get(\'https://api.example.com/data\')\n# POST 요청\nresponse = requests.post(\'https://api.example.com/data\', data={\'key\': \'value\'})SeleniumSelenium은 주로웹 애플리케이션의 테스트 자동화를 위해 개발된 오픈 소스 소프트웨어이다.웹 애플리케이션의 테스팅을 자동화하기 위해 개발되었으며, 여러 브라우저 환경에서 애플리케이션을 테스트하는 데 주로 사용된다.테스팅 외에도, 웹 스크래핑이나 웹 UI 자동화 작업에도 널리 활용된다.실제 브라우저를 제어하여 웹 페이지를 열고, 클릭, 스크롤, 자바스크립트 실행 등의 작업을 수행할 수 있다.Chrome, Firefox, Safari, Edge 등 다양한 브라우저를 지원한다.Selenium은 Python 외에도 Java, C#, Ruby 등 다양한 프로그래밍 언어로 Selenium 코드를 작성할 수 있다.Selenium WebDriver: 실제 브라우저를 제어하는 인터페이스를 제공한다.WebDriver는 각 브라우저에 맞는 드라이버를 통해 브라우저와 상호작용한다.Selenium Grid: 여러 시스템에서 동시에 테스트를 실행할 수 있게 해주는 서버이다.이를 통해 다양한 브라우저와 운영 체제에서 테스트를 분산시켜 실행할 수 있다.Selenium IDE: 브라우저 확장 기능으로, 사용자의 웹 상호작용을 기록하고,이를 자동화 스크립트로 변환하여 재생할 수 있는 도구이다.✅ Installpip install seleniumSelenium을 사용할 때는, 사용할 브라우저에 맞는드라이버를 설치해야 한다.예를 들어, 크롬 브라우저를 자동화하려면 크롬 드라이버(ChromeDriver)가 필요하다.ChromeDriver: Google Chrome 브라우저GeckoDriver: Mozilla Firefox 브라우저EdgeDriver: Microsoft Edge 브라우저SafariDriver: Apple Safari 브라우저각 드라이버는 해당 브라우저의 공식 웹사이트나 드라이버 관리 페이지에서 다운로드 받을 수 있다.✅ Example (ChromeDriver)from selenium import webdriver\n\n# ChromeDriver의 경로를 지정\n# 만약 PATH에 ChromeDriver가 추가되어 있다면 경로 지정은 생략 가능하다.\ndriver_path = \'/path/to/chromedriver\'\ndriver = webdriver.Chrome(driver_path)\n\n# ChromeDriver로 웹사이트 실행.\ndriver.get(\'https://www.google.com\')\n\n# 페이지의 제목을 출력\nprint(driver.title)\n\n# 웹 드라이버를 종료\ndriver.quit()ScrapyScrapy는 파이썬으로 작성된고성능의 웹 크롤링 및 스크레이핑 프레임워크이다.비동기 처리를 기반으로 하여 빠른 데이터 추출이 가능하고, 데이터 수집을 위한 강력한 기능들을 제공한다.Scrapy는 웹사이트를 순회하며 특정 정보를 추출하고, 추출된 데이터를 다양한 형식으로 저장하는 데 사용된다.XPath 및 CSS를 이용한 선택자를 사용하여 웹 페이지에서 데이터를 추출할 수 있게 지원한다.또한 정규 표현식을 사용하여 데이터를 더 정밀하게 처리할 수 있다.사용자가 필요에 따라 추가 컴포넌트를 쉽게 추가할 수 있도록 설계되었으며, 미들웨어, 플러그인 등을 통해 기능을 확장할 수 있다.robots.txt 파일을 자동으로 인식하고 준수하여, 웹사이트의 크롤링 정책을 따른다.크롤링 과정에서 발생하는 다양한 이벤트를 로깅하여, 크롤링 과정의 모니터링 및 디버깅을 용이하게 한다.세션 관리를 위한 내장 메커니즘이 있어, 쿠키를 통한 로그인이 필요한 사이트도 크롤링할 수 있다.✅ Installpip install scrapyScrapy 프로젝트를 시작하기 전에 scrapy startproject 명령어를 통해 새 프로젝트를 생성해야 한다.scrapy startproject myproject이 명령어를 실행하면 myproject라는 이름의 프로젝트 폴더가 생성되며, 그 안에는 프로젝트를 구성하는 다양한 파일들이 포함된다.✅ Exampleimport scrapy\n\nclass QuotesSpider(scrapy.Spider):\n    name = "quotes"\n    start_urls = [\n        \'http://quotes.toscrape.com/\'\n    ]\n\n    def parse(self, response):\n        for quote in response.css(\'div.quote\'):\n            yield {\n                \'text\': quote.css(\'span.text::text\').get(),\n                \'author\': quote.css(\'span small::text\').get(),\n                \'tags\': quote.css(\'div.tags a.tag::text\').getall(),\n            }\n\n        next_page = response.css(\'li.next a::attr(href)\').get()\n        if next_page is not None:\n            yield response.follow(next_page, self.parse)이 코드를 quotes_spider.py와 같은 이름으로 myproject/myproject/spiders 폴더 안에 저장하고서 아래 코드로 실행할 수 있다.여기서 스파이더의 이름은 quotes이다. (myproject 경로에서 실행한다.)scrapy crawl quotes이 스파이더는 quotes.toscrape.com 웹사이트를 방문하여 각 인용구의 텍스트, 저자, 태그를 추출하고, 페이지에 다음 페이지 링크가 있으면 그 페이지로 이동하여 계속해서 인용구를 추출한다.아래는 결과를 json으로 저장하게 하는 코드이다.scrapy crawl quotes -o results.json코드를 실행하면 아래처럼 results.json이 생성된다.MechanicalSoupMechanicalSoup은웹 브라우징을 자동화하기 위한 간단한 API를 제공한다.Requests 라이브러리를 기반으로 하여 웹 사이트와의 상호 작용을 단순화시키며, BeautifulSoup을 통해 HTML 문서를 파싱할 수 있다.MechanicalSoup은 브라우저 객체를 생성하여 세션 관리, 쿠키를 다루고, HTML 폼을 채우고 제출하는 등의 기능을 수행할 수 있다.자동 리다이렉션을 처리하는데, 웹 페이지 간의 이동이 사용자의 추가 개입 없이도 원활하게 이루어지게 한다.HTTP 오류가 발생하였을 때 이를 감지하고 적절한 예외를 발생시켜 사용자가 문제를 해결할 수 있도록 도와준다.\n 또한 웹 페이지에 포함된 이미지나 CSS, JavaScript 파일과 같은 자원에도 접근할 수 있다.✅ Installpip install MechanicalSoup아래 코드는 구글 검색창에 Hello, world를 검색하고 검색 결과 페이지에서 모든 a tag를 찾은 뒤, 해당 a 태그의 text를 출력하는 코드이다.✅ Exampleimport mechanicalsoup\n\n# MechanicalSoup 브라우저 인스턴스를 생성\nbrowser = mechanicalsoup.Browser()\n\n# Google 홈페이지로 이동\ngoogle = browser.get("http://www.google.com")\n\n# 검색창 폼을 찾는다. (Google 홈페이지의 검색 폼 name은 "f")\nsearch_form = google.soup.find(\'form\')\n\n# 검색창 input name=f를 찾아 "Hello, world"를 입력\nsearch_form.find(\'input\', {\'name\': \'q\'})[\'value\'] = \'Hello, world\'\n\n# 폼을 제출하고 결과 페이지로 이동\nsearch_results = browser.submit(search_form, google.url)\n\n# 결과 페이지에서 모든 검색 결과 링크를 찾는다.\nlinks = search_results.soup.find_all(\'a\')\n\nfor link in links :\n    print(link.text)위 코드를 실행하면 아래와 같은 결과를 출력한다.PlaywrightPlaywright는 Microsoft에 의해 개발된 오픈 소스 자동화 라이브러리로, 주로브라우저 기반의 웹 애플리케이션 테스팅을 위해 사용된다.이는 웹사이트의 자동화된 테스트를 가능하게 하며, Chromium, Firefox, 및 WebKit을 통해 크로스 브라우저 테스팅을 지원한다.Playwright는 다양한 언어로 API를 제공하고 있으며, 여기에는 Node.js, Python, C# 및 Java가 포함된다.GUI 없이 백그라운드에서 브라우저를 실행할 수 있으며,CSS, XPath, 텍스트 콘텐츠를 사용하여 요소를 선택할 수 있다.키보드 입력, 마우스 클릭 등 사용자 인터랙션을 시뮬레이션 할 수 있다.여러 페이지 및 iframe 내부의 요소와 상호 작용할 수 있으며,모바일 환경을 에뮬레이션하여 테스팅할 수 있다.✅ Installpip install playwright\nplaywright install✅ Examplefrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    # Chromium 브라우저 인스턴스를 생성\n    browser = p.chromium.launch(headless=False)  # headless=False는 브라우저 UI가 보이게 한다.\n    \n    # 새 페이지 오픈\n    page = browser.new_page()\n    \n    # 원하는 웹사이트로 이동\n    page.goto(\'http://www.naver.com/\')\n    \n    # 페이지 타이틀을 출력\n    print(page.title())\n    \n    # 브라우저 종료\n    browser.close()위 코드를 실행하면 크롬으로 Naver가 열린 후 해당 페이지의 타이틀을 출력해준다.이번 포스트에서는 파이썬으로 웹스크래핑을 하기 위해 필요한 라이브러리 종류에 대해서 알아보았다.이 글을 작성하면서 관심이 가는 것은 Playwright인데, 나중에 시간내서 스터디를 해봐야겠다.커피 한 잔으로저를 응원해주세요!', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 27922, 31288, 161615, 238608, 241496, 187003, 213862, 238997, 237822, 236432, 86126, 239758, 237410, 240699, 237598, 236179, 21237, 237233, 187003, 238602, 58888, 50691, 236791, 198766, 40284, 235248, 243483, 30181, 236039, 235265, 235832, 238628, 58888, 50691, 180860, 21237, 22803, 237941, 161615, 238608, 241496, 211896, 236392, 69225, 54715, 61943, 40284, 213862, 238997, 237822, 236432, 86126, 239758, 236179, 142192, 236554, 78183, 236655, 237036, 236464, 236645, 153422, 235265, 239498, 236645, 236137, 95917, 40712, 238186, 211558, 153818, 236392, 198766, 238080, 54715, 28693, 238391, 236137, 90869, 237908, 236939, 238946, 236791, 111276, 93674, 236179, 58272, 233186, 204588, 198766, 72159, 93806, 59994, 235832, 246881, 26291, 31288, 161615, 238608, 241496, 215441, 236791, 128047, 238220, 109493, 235265, 237941, 161615, 238608, 241496, 236392, 41388, 237092, 238080, 54715, 25111, 57579, 235269, 72532, 235269, 130817, 237598, 50548, 244614, 238220, 221277, 235269, 11464, 213862, 238997, 237822, 236432, 238989, 236464, 53355, 242251, 93205, 72941, 236183, 127149, 238335, 101969, 78183, 236655, 237036, 236645, 235265, 238743, 238597, 22106, 57579, 37124, 97647, 108306, 2158, 68707, 59078, 3748, 49269, 22106, 57579, 22106, 57579, 236214, 19319, 237233, 26176, 145240, 236375, 124431, 112762, 236791, 75943, 238483, 72159, 93806, 61943, 238602, 236039, 235265, 237941, 106191, 236137, 49061, 237602, 236791, 59994, 240146, 48060, 235269, 94492, 236864, 143401, 236671, 236791, 235248, 243274, 237458, 134498, 236655, 238151, 160696, 235269, 31288, 106191, 236137, 196582, 236392, 126942, 236179, 156976, 75943, 238483, 236345, 160696, 42916, 238115, 238080, 22618, 69581, 235265, 238748, 236791, 153935, 235269, 31288, 17309, 78749, 236137, 94492, 236864, 43761, 238304, 237598, 236392, 174538, 237410, 160696, 235269, 76326, 236361, 205799, 241615, 87997, 143401, 236671, 236791, 134498, 236655, 238151, 236464, 206260, 236392, 54715, 25111, 57579, 236392, 61943, 238080, 22618, 69581, 235265, 235832, 213862, 238997, 237822, 236432, 236137, 60318, 239158, 236648, 61943, 72159, 235248, 243274, 236464, 143636, 237956, 85024, 10665, 236791, 110308, 78949, 236214, 170613, 235265, 22106, 57579, 236214, 143401, 236671, 236137, 145887, 237233, 125507, 237154, 236392, 208134, 72494, 235248, 243274, 237458, 165866, 239969, 48060, 235269, 26862, 134472, 236645, 236791, 187118, 143401, 236671, 236791, 134472, 40284, 201619, 236840, 110308, 78949, 235265, 239607, 236511, 235269, 133889, 58272, 22803, 45980, 236645, 239375, 236392, 203755, 48060, 235269, 143401, 236671, 236137, 196582, 236392, 164079, 236345, 160696, 133818, 40284, 201619, 236840, 157329, 48060, 69581, 235265, 22106, 57579, 236214, 35467, 85024, 11271, 236392, 59994, 241870, 40284, 65503, 236214, 207092, 237233, 237603, 235832, 95091, 235269, 236645, 238131, 161615, 239837, 236859, 236375, 49697, 90621, 116518, 156610, 196582, 236392, 143636, 240449, 90621, 32048, 238949, 194255, 145971, 78949, 235265, 237941, 106191, 236179, 49697, 237603, 176427, 236361, 139148, 95917, 235269, 25111, 57579, 237598, 26291, 236214, 163964, 238304, 74860, 48682, 236392, 22618, 69581, 235265, 237752, 15446, 39553, 4877, 4964, 68543, 235310, 237752, 13686, 2273, 33138, 235310, 1635, 92793, 108, 809, 12557, 109, 235345, 31288, 106191, 236791, 83133, 237822, 239956, 236039, 591, 37124, 235275, 108, 2457, 589, 777, 2255, 1336, 7310, 235265, 872, 29487, 108, 4250, 589, 12557, 235265, 818, 235278, 2457, 235275, 109, 235345, 3590, 235265, 3312, 236375, 31288, 106191, 236137, 196582, 236392, 101260, 236655, 239956, 236039, 235265, 108, 68543, 589, 92793, 235278, 4250, 235265, 3312, 235269, 777, 2527, 235265, 12594, 1685, 109, 235345, 1717, 645, 75630, 236554, 237135, 236791, 61943, 72494, 31288, 106191, 22803, 185111, 170174, 235248, 185, 143401, 236671, 236791, 134498, 236214, 236039, 235265, 108, 4878, 235298, 235259, 235274, 589, 21078, 235265, 3655, 1101, 235259, 235274, 1685, 109, 235345, 1717, 235298, 668, 645, 75630, 236554, 237135, 236791, 61943, 72494, 87997, 968, 235250, 235313, 143401, 236671, 236791, 134498, 236214, 236039, 235265, 108, 668, 235298, 10008, 589, 21078, 235265, 3655, 235298, 668, 1101, 235250, 1685, 37124, 37124, 213862, 238997, 237822, 137120, 59994, 235832, 246881, 22803, 20672, 227038, 236392, 235248, 243274, 237458, 66144, 239673, 238080, 22618, 21167, 153145, 56787, 237014, 236214, 213862, 238997, 237822, 236432, 61742, 235265, 20672, 236791, 208134, 236511, 123722, 236859, 239779, 237611, 83160, 237502, 236392, 49061, 238513, 238080, 54715, 126942, 236511, 201619, 134660, 143636, 237956, 237603, 224907, 61943, 72159, 235248, 242454, 238138, 227397, 67650, 236354, 236375, 110308, 78949, 235265, 238264, 238335, 236511, 10665, 236791, 187118, 14104, 235269, 19124, 235269, 57678, 235269, 54304, 73143, 236137, 24493, 75630, 237433, 237135, 236791, 61943, 238080, 22618, 21167, 237458, 56787, 237014, 238986, 235269, 222330, 238705, 236791, 208134, 236511, 48740, 239109, 159838, 236791, 205006, 26291, 168788, 72494, 235269, 202886, 236589, 235832, 126942, 236511, 31288, 206586, 236179, 71100, 34805, 238982, 85024, 227038, 236392, 29283, 245186, 22618, 236840, 69581, 235265, 6217, 59994, 236950, 236725, 237524, 236791, 235248, 245696, 241827, 239632, 236432, 112507, 239190, 236375, 31087, 239522, 238080, 22618, 218631, 235269, 205006, 26291, 99797, 240046, 236511, 112507, 239190, 236375, 30743, 238494, 241103, 237138, 239558, 236039, 235265, 239607, 236511, 8052, 224047, 241305, 236648, 205006, 26291, 59994, 235832, 246881, 235248, 245696, 241827, 239632, 236432, 236375, 75980, 239457, 238080, 22618, 21167, 236464, 235269, 55393, 235832, 239632, 236432, 224047, 241305, 236840, 235248, 243274, 237458, 168788, 238080, 22618, 69581, 235265, 237526, 239151, 236137, 75500, 236800, 26801, 236386, 118058, 236392, 127479, 206666, 55154, 238364, 236137, 224047, 241305, 235832, 235248, 246759, 236770, 239574, 54715, 236137, 81071, 238700, 236655, 241736, 236392, 159838, 238080, 22618, 236840, 69581, 235265, 237752, 15446, 39553, 4877, 12557, 237752, 13686, 809, 12557, 109, 235345, 14104, 227038, 108, 4250, 589, 12557, 235265, 818, 1101, 2468, 1336, 3564, 235265, 7310, 235265, 872, 235283, 1259, 1685, 108, 235345, 19124, 227038, 108, 4250, 589, 12557, 235265, 2729, 1101, 2468, 1336, 3564, 235265, 7310, 235265, 872, 235283, 1259, 920, 1423, 43676, 2033, 2130, 777, 1869, 70101, 97647, 97647, 236648, 40712, 236375, 237941, 122096, 239135, 236432, 239814, 146689, 236137, 108214, 50691, 205006, 236817, 236791, 93806, 227613, 238602, 44245, 244142, 44997, 236354, 44997, 237964, 236859, 241023, 236770, 61742, 235265, 237941, 122096, 239135, 236432, 239814, 146689, 236137, 108214, 236354, 240880, 236392, 205006, 236817, 72159, 93806, 227613, 75084, 101715, 235269, 197781, 129669, 236950, 237312, 238721, 161409, 237392, 22803, 122096, 239135, 236432, 239814, 146689, 236392, 108214, 50691, 40284, 65503, 40712, 236375, 61943, 238602, 236039, 235265, 239060, 236354, 240880, 136201, 209929, 235269, 31288, 32275, 237611, 238608, 241496, 180521, 31288, 13566, 205006, 236817, 211896, 209929, 235248, 241518, 236432, 147226, 237545, 238602, 236039, 235265, 238146, 236939, 129669, 236950, 237312, 238721, 236791, 31850, 236770, 72494, 31288, 106191, 236791, 120699, 236464, 235269, 91940, 240356, 235269, 32275, 237611, 242237, 235269, 34103, 238131, 161615, 239837, 236859, 191754, 73143, 236137, 211896, 236392, 22618, 238356, 238080, 22618, 69581, 235265, 45868, 235269, 43690, 235269, 44805, 235269, 15231, 73143, 32048, 238780, 236511, 129669, 236950, 237312, 238721, 236791, 224790, 78949, 235265, 97647, 236648, 21237, 136201, 209929, 12071, 235269, 585, 96657, 39671, 73143, 32048, 238780, 236511, 58510, 93674, 238608, 243903, 171754, 236770, 236375, 130817, 215441, 236791, 198766, 238080, 22618, 69581, 235265, 97647, 101878, 235292, 61928, 236939, 129669, 236950, 237312, 238721, 236791, 31850, 236770, 40284, 227397, 67650, 236354, 236791, 110308, 78949, 235265, 49369, 236214, 163558, 129669, 236950, 237312, 238721, 236179, 207221, 236214, 99028, 122717, 238364, 236791, 187118, 129669, 236950, 237312, 238721, 237807, 36203, 238033, 238115, 237545, 78949, 235265, 97647, 21380, 235292, 197781, 27941, 202429, 22803, 49697, 236569, 236179, 108214, 50691, 236791, 191754, 238080, 22618, 21167, 237458, 56787, 237014, 236214, 55154, 238364, 61742, 235265, 235832, 236791, 187118, 32048, 238780, 236511, 129669, 236950, 237312, 238721, 237807, 118566, 237759, 109962, 236939, 22803, 108214, 50691, 236791, 70754, 238325, 236569, 243423, 191754, 238080, 22618, 69581, 235265, 97647, 33651, 235292, 129669, 236950, 237312, 238721, 69781, 237199, 201619, 26291, 235269, 61943, 236645, 236137, 31288, 36203, 238033, 238115, 237545, 236392, 28693, 238779, 48060, 235269, 235832, 236791, 205006, 236817, 32275, 237611, 239837, 236859, 236375, 75980, 239457, 72494, 90869, 237889, 238080, 22618, 72941, 50316, 237302, 61742, 235265, 237752, 15446, 39553, 4877, 67519, 97647, 236392, 61943, 238080, 54715, 236214, 235269, 61943, 238080, 129669, 236950, 237312, 238721, 236179, 207221, 236214, 237135, 122717, 238364, 236791, 65952, 237924, 149735, 153422, 235265, 238748, 236791, 153935, 235269, 94177, 244875, 129669, 236950, 237312, 238721, 236791, 205006, 236817, 227860, 237722, 94177, 244875, 99028, 122717, 238364, 235278, 189067, 235275, 236361, 126942, 188898, 235265, 189067, 235292, 6238, 23133, 129669, 236950, 237312, 238721, 197338, 14472, 235292, 111516, 43690, 129669, 236950, 237312, 238721, 17520, 14472, 235292, 8057, 15231, 129669, 236950, 237312, 238721, 107623, 14472, 235292, 9865, 44805, 129669, 236950, 237312, 238721, 238316, 99028, 122717, 238364, 236214, 56787, 238272, 129669, 236950, 237312, 238721, 236137, 194301, 31288, 236417, 78749, 236915, 99028, 122717, 238364, 159838, 106191, 22803, 32048, 238138, 200576, 101260, 236392, 22618, 69581, 235265, 237752, 13686, 591, 189067, 235275, 2273, 67519, 1635, 112907, 109, 235345, 165957, 236137, 43033, 236375, 236791, 34805, 236864, 108, 235345, 49427, 239618, 55383, 236179, 165957, 236361, 133818, 141048, 69581, 237722, 43033, 236375, 34805, 236864, 236648, 50390, 242296, 153728, 188898, 235265, 108, 11686, 235298, 2222, 589, 10048, 2222, 235283, 511, 235283, 199908, 235303, 108, 11686, 589, 112907, 235265, 45868, 235278, 11686, 235298, 2222, 235275, 109, 235345, 165957, 236375, 31288, 236417, 78749, 191754, 235265, 108, 11686, 235265, 818, 1101, 2468, 1336, 1920, 235265, 5996, 235265, 872, 1685, 109, 235345, 106191, 236137, 31850, 238743, 236392, 182260, 108, 1431, 235278, 11686, 235265, 2563, 235275, 109, 235345, 31288, 99028, 122717, 238364, 236791, 86126, 239077, 108, 11686, 235265, 21553, 645, 108306, 2158, 108306, 2158, 236214, 59994, 235832, 246881, 26291, 198766, 238602, 236464, 237154, 239474, 236137, 31288, 94177, 242237, 239074, 60709, 32275, 237611, 70227, 241496, 58510, 237990, 238700, 239779, 237611, 61742, 235265, 237584, 237358, 236386, 168788, 236791, 28693, 238559, 26291, 30181, 237386, 235119, 239296, 112762, 75943, 238483, 235832, 153728, 48060, 235269, 112762, 22618, 239346, 236392, 168947, 84608, 238365, 236511, 201619, 134660, 110308, 78949, 235265, 108306, 2158, 236214, 31288, 236417, 78749, 236791, 142925, 237880, 206716, 94492, 236864, 104569, 236791, 75943, 238483, 48060, 235269, 75943, 238483, 238602, 112762, 236791, 32048, 238780, 236511, 112507, 238186, 26291, 143077, 40284, 65503, 61943, 238602, 236039, 235265, 113969, 60709, 26862, 236791, 208134, 236511, 134472, 236645, 236791, 61943, 72494, 31288, 106191, 22803, 112762, 236791, 75943, 238483, 238080, 22618, 21167, 237458, 224790, 78949, 235265, 239607, 236511, 35467, 240753, 100280, 238513, 238186, 236392, 61943, 72494, 112762, 236791, 70231, 35467, 240533, 101969, 168788, 238080, 22618, 69581, 235265, 236417, 237545, 184819, 126942, 236179, 156976, 133818, 235248, 241897, 238199, 245310, 236859, 236791, 235248, 243274, 237458, 133818, 238080, 22618, 21167, 153145, 65952, 238002, 75084, 101715, 235269, 48835, 237290, 241023, 236770, 235269, 117904, 237822, 236671, 236589, 73143, 236392, 187118, 201619, 236392, 69781, 237199, 238080, 22618, 69581, 235265, 120983, 235265, 5592, 145240, 236392, 205006, 26291, 30743, 238186, 48060, 166422, 236669, 72494, 235269, 31288, 236417, 78749, 236137, 94177, 242237, 239074, 35467, 240460, 236392, 103293, 239296, 236039, 235265, 237611, 242237, 239074, 65084, 236864, 22803, 205209, 40284, 32048, 238780, 236511, 11464, 231415, 236791, 54868, 246765, 72494, 235269, 94177, 242237, 239074, 65084, 236864, 236137, 34459, 236405, 237524, 239074, 60709, 82206, 238364, 246765, 236392, 120340, 235832, 101969, 153422, 235265, 237533, 239109, 159838, 236791, 168947, 58272, 237199, 75630, 239709, 236405, 243728, 235832, 215995, 235269, 222330, 238705, 236791, 83160, 236511, 202886, 236589, 235832, 126942, 236511, 17309, 78749, 236840, 94177, 242237, 239074, 238080, 22618, 69581, 235265, 237752, 15446, 39553, 4877, 102083, 108306, 2158, 132880, 242989, 236859, 236791, 106793, 72159, 31087, 236179, 102083, 2238, 8858, 95165, 240446, 236770, 236791, 187118, 104606, 132880, 242989, 236859, 236791, 116518, 149735, 153422, 235265, 224725, 2238, 8858, 970, 8858, 235832, 95165, 240446, 236770, 236791, 191754, 123472, 970, 8858, 139978, 145887, 236137, 132880, 242989, 236859, 235248, 241592, 238589, 236361, 116518, 238070, 238986, 235269, 20350, 70685, 96564, 132880, 242989, 236859, 236791, 220641, 40284, 32048, 238780, 236511, 145240, 94525, 157329, 238602, 236039, 235265, 237752, 13686, 809, 102083, 109, 1638, 34058, 48617, 235278, 224725, 235265, 48617, 1245, 108, 141, 1067, 589, 664, 52088, 235281, 108, 141, 2997, 235298, 18092, 589, 892, 108, 145, 235303, 2255, 1336, 52088, 235265, 1463, 12647, 554, 235265, 872, 29487, 108, 141, 235307, 109, 141, 1293, 11298, 235278, 1053, 235269, 3590, 1245, 108, 145, 746, 14232, 575, 3590, 235265, 5673, 1101, 913, 235265, 945, 27704, 108, 149, 17061, 612, 108, 153, 235303, 1082, 2130, 14232, 235265, 5673, 1101, 1432, 235265, 1082, 1220, 1082, 4898, 818, 3134, 108, 153, 235303, 3849, 2130, 14232, 235265, 5673, 1101, 1432, 2301, 1220, 1082, 4898, 818, 3134, 108, 153, 235303, 10943, 2130, 14232, 235265, 5673, 1101, 913, 235265, 10943, 476, 235265, 3123, 1220, 1082, 4898, 818, 668, 3134, 108, 149, 235270, 109, 145, 3310, 235298, 3323, 589, 3590, 235265, 5673, 1101, 515, 235265, 3310, 476, 1220, 5731, 235278, 7237, 235275, 4898, 818, 645, 108, 145, 648, 2351, 235298, 3323, 603, 780, 4090, 235292, 108, 149, 17061, 3590, 235265, 16017, 235278, 3310, 235298, 3323, 235269, 2011, 235265, 6048, 235275, 235832, 215441, 236791, 11442, 235298, 57893, 235265, 2158, 237807, 132929, 145887, 26291, 970, 8858, 235283, 1723, 8858, 235283, 801, 12645, 235248, 241592, 238589, 70685, 236179, 143077, 48060, 236554, 23745, 238608, 215441, 236375, 191754, 238080, 22618, 69581, 235265, 237386, 236386, 236554, 32275, 238183, 235832, 238589, 236137, 145887, 236648, 11442, 61742, 235265, 591, 1723, 8858, 43033, 236375, 22803, 191754, 78949, 2330, 224725, 66714, 11442, 235832, 32275, 238183, 235832, 238589, 236214, 11442, 235265, 1463, 12647, 554, 235265, 872, 31288, 236417, 78749, 236791, 51806, 237465, 72494, 163558, 30743, 237545, 237302, 236137, 235248, 242756, 50691, 235269, 80404, 236645, 235269, 143401, 236671, 236791, 75943, 238483, 48060, 235269, 106191, 236179, 115049, 106191, 76326, 236361, 21167, 170230, 20350, 106191, 236375, 195532, 72494, 74715, 238982, 206666, 30743, 237545, 237302, 236791, 75943, 238483, 78949, 235265, 236655, 238608, 236214, 161050, 236791, 6772, 26291, 143077, 101969, 109976, 215441, 61742, 235265, 224725, 66714, 11442, 728, 235253, 3190, 235265, 3327, 238494, 237135, 236791, 191754, 123472, 23745, 238608, 193219, 3190, 235265, 3327, 235832, 116518, 238602, 236039, 235265, 68707, 59078, 68707, 59078, 236648, 237941, 129669, 236950, 237312, 241330, 236392, 205006, 236817, 72159, 168947, 127149, 238335, 236511, 10665, 236791, 110308, 78949, 235265, 37124, 213862, 238997, 237822, 176947, 28693, 238559, 26291, 30181, 237386, 31288, 17309, 78749, 237807, 236137, 36203, 238033, 63806, 237545, 236392, 80289, 239937, 236817, 236569, 238705, 238986, 235269, 92793, 236392, 187118, 19319, 133889, 236791, 59994, 241870, 238080, 22618, 69581, 235265, 68707, 59078, 236648, 129669, 236950, 237312, 238721, 209611, 236791, 116518, 72494, 48740, 239109, 159838, 235269, 222330, 238705, 236791, 32048, 238949, 236464, 235269, 19319, 235248, 243751, 236392, 168426, 237312, 236464, 31850, 238483, 40284, 73143, 236137, 201619, 236392, 22618, 238356, 238080, 22618, 69581, 235265, 236645, 237358, 63102, 236039, 235832, 242341, 239109, 236392, 168788, 40284, 238266, 235269, 31288, 106191, 127149, 236137, 195532, 235832, 61943, 236645, 236137, 133818, 49532, 237707, 56341, 235832, 236840, 68586, 240090, 101969, 11464, 238949, 236770, 236183, 237458, 153422, 235265, 20672, 44245, 239758, 236361, 205209, 236345, 239867, 236392, 54715, 11464, 236791, 99091, 236183, 48060, 99797, 240046, 236511, 71277, 238643, 236791, 205209, 236569, 243423, 61943, 184819, 132793, 236791, 56787, 238665, 238080, 22618, 21167, 153145, 50316, 237807, 239558, 236039, 235265, 108, 86622, 236511, 31288, 106191, 236179, 157329, 238602, 23088, 236915, 26862, 235269, 22978, 145240, 237233, 132929, 34103, 237399, 209929, 165866, 239969, 238080, 22618, 69581, 235265, 237752, 15446, 39553, 4877, 36728, 59078, 236655, 238608, 215441, 236214, 49061, 239334, 203755, 240197, 236179, 25957, 235269, 2134, 236791, 203755, 48060, 203755, 161050, 106191, 22803, 87997, 476, 5886, 236791, 134498, 236648, 212174, 235269, 56787, 238272, 476, 143401, 236671, 236137, 2793, 236791, 182260, 40284, 215441, 61742, 235265, 237752, 13686, 809, 16801, 68543, 109, 235345, 36728, 59078, 129669, 236950, 237312, 238721, 121935, 241053, 236354, 236791, 116518, 108, 22262, 589, 16801, 68543, 235265, 22551, 645, 109, 235345, 6238, 214776, 83137, 236375, 195532, 108, 5996, 589, 13178, 235265, 818, 885, 2255, 1336, 1920, 235265, 5996, 235265, 872, 1388, 109, 235345, 203755, 240197, 235248, 243751, 236392, 134498, 236214, 236039, 235265, 591, 12583, 214776, 83137, 236137, 203755, 235248, 243751, 1503, 236648, 664, 235266, 1388, 108, 2631, 235298, 961, 589, 15711, 235265, 68543, 235265, 3655, 1101, 961, 1685, 109, 235345, 203755, 240197, 3772, 1503, 235293, 235266, 236791, 134498, 236655, 664, 4521, 235269, 2134, 235281, 236791, 120618, 108, 2631, 235298, 961, 235265, 3655, 1101, 2675, 920, 19276, 1067, 2130, 777, 235317, 70101, 1829, 1869, 2074, 589, 777, 4521, 235269, 2134, 235303, 109, 235345, 235248, 243751, 236392, 31850, 238483, 48060, 161050, 106191, 236375, 195532, 108, 2631, 235298, 10915, 589, 13178, 235265, 12480, 235278, 2631, 235298, 961, 235269, 15711, 235265, 2457, 235275, 109, 235345, 161050, 106191, 22803, 87997, 203755, 161050, 76326, 236791, 134498, 236214, 236039, 235265, 108, 10008, 589, 4544, 235298, 10915, 235265, 68543, 235265, 3655, 235298, 668, 1101, 235250, 1685, 109, 746, 3615, 575, 8556, 865, 108, 141, 1431, 235278, 3239, 235265, 1082, 235275, 237601, 215441, 236791, 191754, 123472, 23745, 238608, 237807, 132929, 161050, 236791, 182260, 78949, 235265, 3748, 49269, 3748, 49269, 236214, 8057, 236179, 23594, 237138, 227613, 238602, 44245, 244142, 44997, 236354, 205006, 236817, 213862, 238997, 237822, 236432, 236375, 235269, 40712, 236375, 238997, 236950, 237312, 238721, 28693, 238559, 236137, 31288, 122096, 239135, 236432, 239814, 146689, 108214, 236354, 240880, 236392, 93806, 61943, 238602, 236039, 235265, 206367, 31288, 236417, 78749, 236137, 205006, 236817, 238602, 108214, 50691, 236791, 153728, 101969, 30181, 238986, 235269, 136143, 235269, 43690, 235269, 60709, 4556, 15647, 236392, 187118, 94177, 236375, 236354, 129669, 236950, 237312, 238721, 108214, 236354, 240880, 236392, 224790, 78949, 235265, 3748, 49269, 236214, 32048, 238780, 236511, 171754, 236770, 236375, 10665, 236791, 110308, 48060, 218631, 235269, 41896, 236386, 96564, 13116, 235265, 2833, 235269, 21237, 235269, 585, 235345, 60709, 12071, 236361, 157329, 238602, 236039, 235265, 29419, 56341, 235832, 124559, 236671, 236950, 238138, 237135, 22803, 129669, 236950, 237312, 238721, 236791, 191754, 238080, 22618, 218631, 235269, 33354, 235269, 192844, 235269, 235248, 242756, 50691, 176427, 236791, 61943, 72494, 73713, 237433, 236791, 134472, 238080, 22618, 69581, 235265, 238705, 237036, 237135, 120618, 235269, 41645, 208986, 91940, 240356, 73143, 61943, 236645, 227397, 241727, 239109, 236392, 27941, 246989, 70227, 239109, 69225, 22618, 69581, 235265, 237386, 237822, 106191, 60709, 147482, 58272, 237092, 236137, 73713, 237433, 237807, 36203, 238033, 63806, 237545, 238080, 22618, 218631, 235269, 237551, 238131, 236666, 161409, 237392, 236392, 44705, 246989, 70227, 239109, 72494, 108214, 236354, 240880, 238080, 22618, 69581, 235265, 237752, 15446, 39553, 4877, 128044, 108, 1752, 49269, 4877, 237752, 13686, 2273, 128044, 235265, 16400, 235298, 3564, 1635, 29067, 235298, 1752, 49269, 109, 3041, 29067, 235298, 1752, 49269, 645, 685, 503, 235292, 108, 141, 235345, 136143, 129669, 236950, 237312, 238721, 121935, 241053, 236354, 236791, 116518, 108, 141, 22262, 589, 503, 235265, 115567, 235265, 33982, 235278, 208595, 235293, 8393, 235275, 139, 235345, 181724, 235293, 8393, 236214, 129669, 236950, 237312, 238721, 13566, 236361, 29283, 235832, 237458, 153422, 235265, 108, 141, 108, 141, 235345, 104606, 106191, 44245, 244142, 108, 141, 3323, 589, 13178, 235265, 1404, 235298, 3323, 645, 108, 141, 108, 141, 235345, 68586, 40284, 31288, 236417, 78749, 236375, 195532, 108, 141, 3323, 235265, 7414, 1101, 2255, 1336, 1920, 235265, 183618, 235265, 872, 107023, 108, 141, 108, 141, 235345, 106191, 81071, 235832, 241848, 236392, 182260, 108, 141, 1431, 235278, 3323, 235265, 2563, 2604, 108, 141, 108, 141, 235345, 129669, 236950, 237312, 238721, 86126, 239077, 108, 141, 22262, 235265, 3446, 645, 237601, 215441, 236791, 191754, 123472, 94177, 244875, 26291, 6526, 598, 236361, 120699, 239263, 70957, 56787, 238272, 106191, 236137, 81071, 235832, 241848, 236392, 182260, 237138, 239558, 236039, 235265, 235832, 238628, 58888, 50691, 180860, 59994, 235832, 246881, 26291, 31288, 161615, 238608, 241496, 236392, 30181, 236386, 93806, 126942, 236511, 213862, 238997, 237822, 236432, 86126, 239758, 236179, 142192, 236554, 78183, 236655, 237036, 239985, 236039, 235265, 235832, 153818, 236392, 198766, 123472, 236554, 55526, 239308, 235832, 23248, 236214, 143613, 5552, 49269, 236589, 238266, 235269, 38585, 237935, 236179, 118058, 238151, 236554, 32275, 237524, 238173, 236791, 56787, 244950, 238305, 241716, 236039, 235265, 239709, 238810, 35191, 235248, 242457, 26291, 238721, 236791, 224047, 237399, 237138, 237014, 96673, 235341], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:52648 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:33:53 engine.py:275] Added request cmpl-eebaed11aa184e58a71f89546502261a-0.
INFO 02-16 20:33:53 logger.py:39] Received request cmpl-1801423d4294406ea6eb5255a0e64aa2-0: prompt: "다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        파이썬 크롤링 라이브러리로 크게 BeautifulSoup4, requests, , selenium, scrapy 등이 있다.[ BeautifulSoup4 ]BeautifulSoup4는 파이썬 내장 모듈인 requests, urllib를 이용해 HTML 을 받아오고 beautifulSoup로 추출한다.장점쉽고, 빠르고(병렬 처리시), 간단하다.단점HTML을 받아오기 때문에 SPA (ex. vue.js에서 라우팅 기능을 사용하여 페이지를 하나만 유지시키는 것)이나 js가 적용된 페이지를 크롤링하기엔 어렵다.[ lxml ]기본적으로 BeautifulSoup에서는 BeautifulSoup(html, 'html.parser') 와 같이 html parser 를 사용할수도 있지만 lxml 모듈을 설치하여 속도를 빠르게 할 수 있다.\xa0사용방법으로 BeautifulSoup(html, 'lxml') 과 같다.pip install lxml[ selenium ]웹 자동화 테스트에 사용되는 프레임워크로 웹 브라우저를 실제로 실행시켜 클릭을 하고 스크롤을 올리고 내리기에 속도가 많이 느리고 메모리도 많이 차지하게 된다.장점JavaScript도 렌더링하여 데이터를 추출 할 수 있다.단점웹브라우저를 실제로 실행하기에 (우리가 보는 정보를 모두 가져올 수 있다는 장점도 될 것 같다. ) 속도가 느리고, 메모리 사용이 상대적으로 크다.[ scrapy ]유료이며 크롤링을 위해 개발된 프레임워크이다.장점Django 처럼 벡엔드 서비스와 연동하기 편리하고 플러그인이 다양하다.문서화가 잘되며 기능구현이 잘 되어있다.단점플러그인간의 호환이 안되는 경우가 있다.[ 참고 자료 ]https://keyhyuk-kim.medium.com/python-%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%9F%AC-%EB%8F%84%EA%B5%AC-%EB%B9%84%EA%B5%90-%EB%B0%8F-%EC%82%AC%EC%9A%A9-%ED%9B%84%EA%B8%B0-scrapy-vs-selenium-vs-requests-urllib-6483041ca1baPython 웹 크롤러 도구 비교 및 사용 후기(Scrapy vs selenium vs Requests, urllib)웹 크롤러 개발 언어로 Python을 선택했다면, 개발 효율성을 높혀줄 여러가지 라이브러리와 프레임워크가 있습니다.keyhyuk-kim.medium.comhttps://www.baragi.net/bbs/board.php?bo_table=dev&wr_id=8858", params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 238183, 235832, 246881, 94177, 242237, 239074, 213862, 238997, 237822, 236432, 236375, 94177, 237458, 92793, 235310, 235269, 12557, 235269, 1688, 67519, 235269, 102083, 73143, 235832, 69581, 19047, 92793, 235310, 5896, 22106, 59078, 235310, 236214, 59994, 235832, 246881, 58272, 237199, 34459, 245526, 236589, 12557, 235269, 57188, 236791, 208134, 237138, 19319, 82816, 101260, 236655, 237410, 236464, 4964, 59078, 236375, 75943, 238483, 78949, 235265, 237199, 239158, 243274, 236464, 235269, 235119, 238500, 236464, 235278, 240204, 242507, 168788, 236569, 823, 127149, 238335, 188898, 235265, 238335, 239158, 11271, 236392, 101260, 236655, 237410, 236386, 147801, 57658, 591, 770, 235265, 24113, 235265, 2833, 22803, 79871, 237312, 240880, 201619, 236392, 61943, 72494, 106191, 236791, 113859, 237598, 46355, 236183, 236569, 238705, 236214, 29599, 235275, 180521, 13680, 236361, 99797, 237545, 238602, 106191, 236791, 94177, 242237, 239074, 72159, 241167, 53355, 244597, 236039, 19047, 533, 7944, 5896, 236386, 238744, 90621, 92793, 180860, 92793, 235278, 2527, 235269, 777, 2527, 235265, 12594, 1685, 80564, 81673, 235832, 11060, 27452, 104957, 61943, 238080, 236669, 236840, 21167, 95091, 533, 7944, 34459, 245526, 236392, 65952, 237924, 72494, 125507, 236840, 236791, 235119, 238500, 237458, 69225, 22618, 69581, 235265, 236338, 236417, 237545, 238037, 239085, 26291, 92793, 235278, 2527, 235269, 777, 235257, 7944, 1685, 65084, 81673, 236039, 235265, 39553, 4877, 533, 7944, 235309, 67519, 5896, 237941, 205006, 236817, 108214, 50691, 236179, 61943, 156610, 58510, 237990, 238700, 239779, 237611, 236375, 31288, 129669, 236950, 237312, 238721, 236791, 61928, 236939, 236375, 191754, 236569, 243423, 91940, 240356, 236392, 197022, 32275, 237611, 242237, 236392, 133057, 102536, 58272, 236432, 191232, 125507, 236840, 236361, 99805, 235832, 216702, 102536, 75630, 237551, 236432, 236840, 99805, 235832, 91292, 236183, 101969, 95622, 236039, 235265, 237199, 239158, 44980, 236840, 235248, 241486, 238589, 239074, 72494, 112762, 236791, 75943, 238483, 69225, 22618, 69581, 235265, 238335, 239158, 237941, 238997, 236950, 237312, 238721, 236791, 61928, 236939, 236375, 191754, 72159, 236179, 591, 237312, 228773, 29283, 236214, 104569, 236791, 189364, 174538, 240256, 22618, 69581, 236214, 60318, 239158, 236840, 178049, 29599, 81673, 236039, 235265, 1968, 125507, 236840, 236361, 216702, 102536, 235269, 75630, 237551, 236432, 61943, 235832, 36203, 236800, 90621, 94177, 236039, 19047, 102083, 5896, 237766, 239077, 225022, 94177, 242237, 239074, 236392, 93806, 227613, 238602, 58510, 237990, 238700, 239779, 237611, 61742, 235265, 237199, 239158, 125068, 106204, 240943, 235248, 240669, 241167, 237135, 206586, 237807, 50833, 237358, 72159, 136188, 236432, 48060, 117904, 237822, 236671, 236589, 235832, 32048, 238780, 188898, 235265, 237465, 236554, 236817, 236361, 150759, 238070, 238986, 201619, 237302, 238513, 235832, 150759, 116508, 236770, 237056, 236039, 235265, 238335, 239158, 239135, 237822, 236671, 236589, 238264, 236137, 83942, 239457, 235832, 70685, 156610, 95917, 236361, 69581, 19047, 120816, 236464, 203177, 5896, 2468, 1336, 2033, 1891, 1458, 235290, 19018, 235265, 24461, 235265, 872, 235283, 7774, 37549, 2584, 235358, 235315, 235305, 235358, 235305, 235315, 37549, 1613, 235358, 235321, 235274, 235358, 1462, 235358, 30874, 235358, 235280, 235274, 235358, 235280, 235310, 235358, 30874, 235358, 235315, 235311, 235358, 1462, 37549, 30874, 235358, 235321, 235311, 235358, 235321, 235310, 235358, 23350, 235358, 235305, 235308, 235358, 1462, 37549, 30874, 235358, 235305, 235315, 235358, 235321, 235310, 235358, 23350, 235358, 235305, 235308, 235358, 235315, 235276, 37549, 30874, 235358, 235305, 235276, 235358, 235321, 235311, 37549, 2584, 235358, 235321, 235284, 235358, 1462, 235358, 2584, 235358, 235315, 235280, 235358, 235280, 235315, 37549, 1613, 235358, 235315, 235305, 235358, 235321, 235310, 235358, 23350, 235358, 235305, 235321, 235358, 235305, 235276, 235290, 224725, 235290, 7255, 235290, 32891, 235290, 7255, 235290, 43313, 235290, 222740, 235290, 235318, 235310, 235321, 235304, 235276, 235310, 235274, 557, 235274, 2070, 27922, 31288, 94177, 242237, 237822, 50316, 237302, 51732, 237905, 60709, 61943, 70957, 236386, 235278, 108306, 2158, 5135, 67519, 5135, 72532, 235269, 57188, 235275, 237941, 94177, 242237, 237822, 227613, 171754, 236770, 236375, 21237, 236392, 134472, 88513, 237722, 235269, 227613, 207092, 241938, 237154, 236392, 187800, 242975, 240957, 197781, 236361, 236183, 213862, 238997, 237822, 236432, 237807, 58510, 237990, 238700, 239779, 237611, 236361, 55496, 235265, 2033, 1891, 1458, 235290, 19018, 235265, 24461, 235265, 872, 2468, 1336, 1920, 235265, 2191, 19281, 235265, 1936, 235283, 64683, 235283, 3334, 235265, 1556, 235336, 1055, 235298, 1785, 235293, 4903, 235343, 21057, 235298, 539, 235293, 235321, 235321, 235308, 235321], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:52648 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:33:53 engine.py:275] Added request cmpl-1801423d4294406ea6eb5255a0e64aa2-0.
INFO 02-16 20:33:54 metrics.py:455] Avg prompt throughput: 1336.4 tokens/s, Avg generation throughput: 65.9 tokens/s, Running: 4 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 7.8%, CPU KV cache usage: 0.0%.
INFO 02-16 20:33:57 logger.py:39] Received request cmpl-59e9ae7627174b59b2ecd8ce097c789f-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        들어가며\n도저히 개인적으로 포트폴리오 만들 시간을 내기 어려워, 회사에서 업무에 관련된 내용을 웹크롤링/분석하는 방법을 시도해보기로 했다. 점심시간과 자투리 시간을 떳떳하게 사용하는 것이다.\n개인이 취미로 코딩할 때와 실제 업무에서 할 때의 가장 큰 차이는, 시간 효율이 중요해지고 업무량과 소요시간을 예측할 수 있게 된다는(할 수 있어야 한다는) 점일 것이다. 내 경우는 R을 이용해 크롤링해본 적은 있지만 python은 처음이라 어떤 라이브러리를 써야 할 지 고민이 되었다. 학습비용을 최소화하기 위해서다.\n귀동냥으로 들어온\nbeautifulsoup\n.\n어떤 브런치 글에서 여러 페이지를 크롤링하느라 썼다는\nselenium\n.\n이도저도 모르겠어서 DataCamp 강의를 찾아봤더니 주력으로 가르치는\nscrapy\n.\n시행착오를 줄이기 위해 출퇴근시간을 이용해 간단히 사전조사를 해보기로 했다. 아래는 그 결과를 정리한 내용이다. (처음 공부하는 입장이라 잘못 이해하거나 번역한 내용이 있을 수 있으니 오류를 발견하시면 거침없이 피드백 부탁드립니다!)\n웹 크롤링 vs. 웹 스크래핑\n웹 스크래핑\n웹사이트의 내용을 긁어오는 것\n긁어온 HTML 소스로부터 원하는 데이터를 추출하기 위해\n파싱\n을 하게 된다.\n웹 크롤링\n사전적으로만 말하면 ‘웹 크롤러가 하는 일’에 해당된다. 크롤링 봇, 구글봇 등을 생각하면 개념 이해가 쉽다.\n검색엔진 등은 데이터의 최신 상태를 유지하기 위해, 크롤러를 만들어 링크를 통해 웹페이지들을 자동으로 탐색하게 한다.\n텍스트 분석의 관점에서 보면 좀 더 조직적이고 자동화된 방법으로 여러 문서들을 수집하는 것이며, 스크래핑을 포괄하는 개념이다.\n주로 쓰이는 라이브러리에는 beautifulsoup, selenium이 있고, 크롤링 프레임워크로 scrapy가 있다.\n참고 :\nhttps://blog.michaelyin.info/web-scraping-framework-review-scrapy-vs-selenium/\n1. Beautifulsoup\n웹스크래핑에 가장 널리 쓰이는 python 라이브러리\nHTML/XML 파일을 파싱 / 데이터 추출\nparser는 원하는 것을 사용한 뒤 beautifulsoup을 이용해 parser tree로부터 필요한 데이터를 추출할 수 있음\n웹페이지를 다운로드할 때\nurlib2\n나\nrequests\n를 사용해야 함\n배우기가 매우 쉽다. 낮은 러닝커브.\n생태계는 잘 발달되어 있지 않음. 관련 프로젝트나 플러그인 적음.\n속도를 향상시키려면\nmultiprocessing\nimport 필요\n참고 :\nScrapy Tutorial #1: Scrapy VS Beautiful Soup\n2. Selenium\n웹 애플리케이션의 테스팅을 자동화하기 위해 만들어진 툴이다.\n(“Selenium automates browsers” : https://www.seleniumhq.org/)\n하지만 어쨌든, 쉽고 직관적이라서 크롤링에 많이 쓰이는 듯하다.\n긁어오려는 컨텐츠가 HTML보다는 JavaScript로 문서에 더해진 경우에 적합하다.\n예를 들어, 컨텐츠를 로딩하기 위해 Javascript가 웹 API를 호출하는 경우\n일반적인 정적 HTML 문서라면 HTTP 라이브러리(\nrequests\n또는 내장된\nurllib.request\n)와\nlxml\n또는\nbeautifulsoup\n을 쓰는 것이 좋다. selenium을 쓸 때의 단점은 아래와 같다.\n(참고 :\nSelenium versus BeautifulSoup for web scraping(stackoverflow)\n)\n불필요한 광대역 사용 : stylesheets, scripts, images 등을 모두 가져옴\nrequest\n를 쓰는 것보다 안정성과 에러복구의 용이성이 떨어짐\nCPU와 메모리 사용량이 상대적으로 많음\n간단히 사용해 본 소감으로도, 처음에 driver가 해당 웹페이지를 브라우저에 띄울 때 시간이 꽤 걸리는 느낌이다. 급하다고 다음 코드를 바로 실행시켜도 웹페이지가 완전히 뜬 다음이 아니면, 제대로 추출되지 않는다.\n3. Scrapy\nspider\n라는 크롤러를 만들기 위한 웹크롤링 프레임워크\nDjango를 다뤄봤다면 유리하다.\n프레임워크를 다뤄본 경험이 없다면 다소 부담스러울 수 있다.\n가파른 러닝커브\nScrapy 전문가가 되려면 좀 많이 노력해야 함\n하지만 학습비용이 아깝지 않을 만큼, 확장성이 뛰어남\n웹사이트를 스크래핑하면서 발생하는 이슈들에 대한 내장 솔루션 제공\n비동기 네트워킹 라이브러리인 Twisted에 built on 되어, 퍼포먼스가 매우 뛰어남\n같은 작업을 할 때 Selenium에 비해 매우 빠를 수 있음\n데이터 추출에 CSS selector와 XPath 모두 지원\nScrapy spider 내에 beautifulsoup 사용 가능\njavascript를 건드려야 한다면,\n번거롭지만 방법이 없는 것은 아님\n긁어올 데이터가 많은 ajax/pjax 리퀘스트 후에 나타나는 경우라면 selenium을 쓰는 걸 권장\n마치며\n당장의 업무에는 이미 손대기 시작한 selenium으로 충분할 것 같다.\n하지만 아무래도 장기적인 관점에서 scrapy를 배워두면 좋을 것 같다. SNS나 앱 리뷰 등을 모니터링하려면 scrapy로 파이프라인을 구축해두는 게 필요할 듯.\n지금 내가 필요로 하는 웹페이지의 크롤링에 Javascript가 영향을 미치는지 확인하기 위해, beautifulsoup으로 살짝만 트라이해봐야 겠다.\nPlease enable JavaScript to view the\ncomments powered by Disqus.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 237290, 236770, 236361, 238986, 108, 236840, 238721, 239055, 49532, 236589, 90621, 58888, 236859, 241592, 236432, 237410, 128047, 118058, 236392, 58272, 236386, 53355, 238994, 239779, 235269, 84961, 236417, 22803, 142995, 237908, 236179, 187003, 238602, 196582, 236392, 31288, 237611, 242237, 239074, 235283, 238304, 239465, 40284, 130059, 236392, 27941, 236840, 237138, 237036, 236386, 236375, 235248, 88513, 235265, 131901, 239308, 210450, 237233, 34103, 239720, 236432, 118058, 236392, 235248, 255105, 255105, 101969, 61943, 40284, 170613, 235265, 108, 237936, 236589, 235832, 174375, 236725, 236375, 76230, 241103, 238080, 54715, 237807, 61928, 236939, 142995, 237908, 22803, 69225, 54715, 236137, 126277, 185075, 91292, 206367, 235269, 118058, 207092, 241938, 235832, 215134, 237138, 236183, 236464, 142995, 237908, 240833, 237233, 44997, 237526, 210450, 236392, 71277, 241656, 238080, 22618, 21167, 237458, 95622, 161509, 235278, 238080, 22618, 215995, 238305, 153422, 236214, 235275, 131901, 236666, 170613, 235265, 58272, 95917, 236214, 625, 236392, 208134, 237138, 94177, 242237, 239074, 237138, 238744, 99797, 236648, 21167, 95091, 17706, 236648, 106204, 238036, 235832, 236950, 53355, 242251, 213862, 238997, 237822, 176947, 235248, 242974, 238305, 69225, 34805, 46749, 238754, 235832, 235248, 174647, 235265, 126160, 237152, 237584, 237545, 236392, 75500, 237433, 236817, 72159, 93806, 236554, 236039, 235265, 108, 240333, 237358, 243699, 26291, 153935, 239956, 108, 20909, 68543, 108, 235265, 108, 236770, 242251, 129669, 240499, 237924, 153818, 22803, 197781, 106191, 236791, 94177, 242237, 239074, 236345, 241039, 236950, 235248, 246333, 161509, 108, 32891, 108, 235265, 108, 235832, 236840, 238721, 236840, 34459, 238500, 241716, 236770, 236554, 4145, 21746, 84608, 236137, 236791, 134498, 236655, 247269, 238589, 236405, 40712, 238365, 26291, 23248, 238500, 237924, 236214, 108, 224725, 108, 235265, 108, 236569, 238356, 241293, 237410, 236791, 184434, 235832, 236386, 93806, 82366, 243051, 239969, 210450, 236392, 208134, 237138, 127149, 238335, 239055, 17309, 237045, 237602, 236417, 236791, 56787, 237036, 236386, 236375, 235248, 88513, 235265, 23745, 238608, 236214, 20350, 161050, 236791, 35467, 236432, 236511, 196582, 61742, 235265, 591, 238873, 238036, 41388, 237092, 40284, 74209, 237199, 235832, 236950, 150759, 240794, 201194, 236345, 160696, 84389, 238071, 236511, 196582, 235832, 21167, 236392, 22618, 21167, 237214, 236405, 44245, 239758, 236791, 66144, 241253, 236345, 236569, 237722, 73523, 240855, 238739, 235832, 99742, 237135, 239506, 43761, 243019, 237135, 239837, 12957, 13420, 108, 237941, 94177, 242237, 239074, 5135, 235265, 31288, 32275, 237611, 238608, 241496, 108, 237941, 32275, 237611, 238608, 241496, 108, 237941, 236417, 78749, 236137, 196582, 236392, 235248, 250274, 236770, 237410, 236214, 29599, 108, 250274, 236770, 239956, 19319, 44997, 236354, 236375, 124431, 68586, 40284, 112762, 236791, 75943, 238483, 72159, 93806, 108, 238183, 241870, 108, 236392, 30181, 237458, 95622, 236039, 235265, 108, 237941, 94177, 242237, 239074, 108, 236417, 237045, 90621, 237598, 72163, 123472, 3031, 237941, 94177, 242237, 237822, 236361, 109976, 32929, 235349, 236179, 56787, 238272, 238602, 236039, 235265, 94177, 242237, 239074, 235248, 244524, 235269, 49061, 239334, 244524, 73143, 236392, 142882, 123472, 49532, 241631, 201194, 236361, 235248, 243274, 236039, 235265, 108, 239740, 238931, 241167, 237589, 73143, 236648, 112762, 236137, 75500, 237502, 209975, 236791, 46355, 236183, 72159, 93806, 235269, 94177, 242237, 237822, 236791, 128047, 236770, 76326, 236791, 187118, 31288, 83137, 134660, 205006, 26291, 235248, 242850, 238931, 101969, 153422, 235265, 108, 242756, 50691, 211558, 236137, 55526, 239158, 22803, 29283, 237722, 235248, 243976, 70231, 42916, 239385, 237603, 224907, 205006, 236817, 238602, 130059, 26291, 197781, 133889, 134660, 22618, 239346, 40284, 93205, 238986, 235269, 32275, 237611, 238608, 241496, 236392, 58888, 245414, 40284, 49532, 241631, 61742, 235265, 108, 237014, 236375, 198670, 206367, 213862, 238997, 237822, 236432, 96564, 4964, 68543, 235269, 67519, 235832, 21167, 236464, 235269, 94177, 242237, 239074, 58510, 237990, 238700, 239779, 237611, 236375, 102083, 236361, 69581, 235265, 108, 189764, 865, 108, 2468, 1336, 10173, 235265, 228182, 1572, 473, 235265, 3296, 235283, 4405, 235290, 143498, 574, 235290, 5880, 235290, 17899, 235290, 224725, 235290, 7255, 235290, 32891, 235283, 108, 235274, 235265, 25111, 68543, 108, 237941, 161615, 238608, 241496, 236179, 126277, 235248, 241518, 236432, 198670, 206367, 17706, 213862, 238997, 237822, 236432, 108, 11271, 235283, 10114, 145240, 236392, 59994, 241870, 1148, 112762, 75943, 238483, 108, 12594, 236214, 68586, 40284, 109241, 61943, 236511, 212174, 4964, 68543, 236392, 208134, 237138, 27452, 5421, 236375, 124431, 126942, 236511, 112762, 236791, 75943, 238483, 238080, 22618, 21167, 238036, 108, 237941, 83137, 236791, 32048, 238138, 200576, 238080, 54715, 108, 525, 4613, 235284, 108, 236915, 108, 43313, 108, 236791, 61943, 149735, 81796, 108, 238312, 237312, 236386, 236361, 195531, 235248, 243274, 236039, 235265, 235248, 243937, 236648, 213989, 243098, 239709, 238997, 235265, 108, 237889, 239190, 238002, 236214, 150759, 66144, 239522, 141048, 21167, 236183, 48682, 238036, 235265, 187003, 132880, 242989, 236859, 236915, 117904, 237822, 236671, 236589, 99797, 238036, 235265, 108, 238982, 236840, 236791, 220234, 237047, 236569, 238705, 238994, 237722, 108, 6467, 26347, 108, 809, 126942, 108, 189764, 865, 108, 108306, 2158, 48504, 1700, 235274, 235292, 94078, 2158, 28404, 25111, 57579, 108, 235284, 235265, 130817, 108, 237941, 122096, 239135, 236432, 239814, 146689, 236137, 108214, 236354, 240880, 236392, 205006, 236817, 72159, 93806, 128047, 236770, 237589, 235248, 246543, 61742, 235265, 108, 129262, 97647, 8229, 484, 71005, 235369, 865, 4009, 1336, 1920, 235265, 32891, 75942, 235265, 2164, 45198, 108, 74860, 237598, 53355, 249104, 239227, 235269, 235248, 243274, 236464, 143636, 237956, 237603, 235832, 236950, 236554, 94177, 242237, 239074, 236179, 99805, 235832, 198670, 206367, 235248, 243483, 188898, 235265, 108, 250274, 236770, 237410, 238994, 236214, 235248, 241996, 164594, 236361, 19319, 237036, 161509, 22978, 236375, 133889, 236179, 70231, 237138, 237589, 95917, 236179, 99797, 237961, 188898, 235265, 108, 238748, 236791, 153935, 235269, 235248, 241996, 164594, 236791, 54868, 241103, 72159, 93806, 73009, 236361, 31288, 10665, 236791, 83942, 238483, 40284, 95917, 108, 236666, 238559, 85024, 35467, 237603, 19319, 133889, 236950, 237722, 24493, 213862, 238997, 237822, 236432, 235278, 108, 43313, 108, 239607, 236214, 58272, 237199, 238602, 108, 222740, 235265, 3840, 108, 235275, 237807, 108, 235257, 7944, 108, 239607, 236214, 108, 20909, 68543, 108, 236392, 198670, 236214, 93205, 106509, 236039, 235265, 67519, 236392, 235248, 245471, 54715, 236137, 80289, 239158, 236648, 23745, 238608, 237807, 81673, 236039, 235265, 108, 235278, 189764, 865, 108, 97647, 17529, 92793, 604, 2744, 117653, 235278, 137635, 235275, 108, 235275, 108, 239310, 239498, 237526, 236511, 154304, 236800, 238071, 61943, 865, 13588, 47205, 235269, 37089, 235269, 5191, 73143, 236392, 189364, 174538, 244911, 108, 3840, 108, 236791, 198670, 236214, 29599, 180677, 70685, 236864, 237154, 237233, 44705, 237822, 239205, 237302, 236137, 120340, 235832, 237154, 235832, 235248, 243433, 236770, 243805, 108, 28524, 237807, 75630, 237551, 236432, 61943, 240833, 235832, 36203, 236800, 90621, 99805, 238036, 108, 238264, 238335, 239055, 61943, 237138, 138720, 44997, 239199, 26291, 236840, 235269, 106204, 238036, 236179, 8569, 236361, 56787, 238272, 31288, 83137, 236791, 129669, 236950, 237312, 238721, 236179, 235248, 245622, 239254, 54715, 118058, 235832, 235248, 247965, 180850, 137120, 216702, 245461, 61742, 235265, 235248, 240115, 188898, 236464, 115049, 215441, 236791, 55393, 236375, 191754, 236569, 243423, 236840, 31288, 83137, 236361, 123248, 232523, 235248, 249899, 115049, 235832, 123184, 237722, 235269, 31850, 204588, 75943, 238483, 234654, 186830, 236039, 235265, 108, 235304, 235265, 94078, 2158, 108, 57893, 108, 139978, 94177, 242237, 237822, 236791, 128047, 236386, 168947, 31288, 237611, 242237, 239074, 58510, 237990, 238700, 239779, 237611, 108, 125068, 236791, 32048, 248723, 247269, 236039, 237722, 46355, 236432, 188898, 235265, 108, 237964, 237990, 238700, 239779, 237611, 236791, 32048, 248723, 238744, 43033, 240521, 235832, 56341, 236039, 237722, 32048, 237433, 43761, 240599, 236354, 237822, 239254, 22618, 69581, 235265, 108, 236361, 238183, 239296, 213989, 243098, 239709, 238997, 108, 108306, 2158, 31087, 237465, 236361, 236361, 116508, 238994, 237722, 235248, 243976, 99805, 235832, 61138, 238365, 149735, 81796, 108, 74860, 237598, 126160, 237152, 237584, 237545, 235832, 23745, 247872, 236183, 48682, 236392, 49427, 243977, 235269, 69781, 237199, 237154, 235832, 235248, 244258, 236770, 238582, 108, 237941, 236417, 78749, 236791, 32275, 237611, 238608, 241496, 123472, 236554, 205209, 40284, 11464, 241601, 237290, 236179, 71100, 58272, 237199, 235248, 242387, 238949, 239109, 110308, 108, 237584, 237358, 236386, 123722, 236859, 239779, 242539, 213862, 238997, 237822, 236432, 236589, 151217, 236179, 6233, 611, 116508, 236770, 235269, 235248, 240320, 238199, 241364, 236354, 236361, 195531, 235248, 244258, 236770, 238582, 108, 239012, 236648, 211896, 236392, 69225, 54715, 130817, 236179, 51732, 237138, 195531, 235119, 236791, 22618, 21167, 238036, 108, 238266, 90081, 75943, 238483, 236179, 26862, 44736, 237807, 192844, 189364, 224790, 108, 108306, 2158, 25221, 58272, 236179, 4964, 68543, 61943, 153728, 108, 19675, 236791, 109961, 237135, 238994, 238305, 153422, 237722, 235269, 108, 238628, 238154, 243130, 95091, 130059, 235832, 233473, 143613, 23745, 239957, 108, 250274, 236770, 240256, 112762, 236361, 139148, 65143, 235283, 53643, 1247, 63102, 245826, 50691, 70957, 236179, 211491, 156539, 95917, 236950, 237722, 67519, 236392, 198670, 236214, 180850, 155280, 237199, 108, 237354, 237924, 238986, 108, 238272, 237199, 236137, 142995, 237908, 96564, 22573, 119312, 236800, 236386, 106793, 236511, 67519, 26291, 163964, 238304, 238080, 29599, 81673, 236039, 235265, 108, 74860, 237598, 23745, 237908, 238608, 236840, 60318, 236386, 85024, 55526, 239158, 22803, 102083, 236791, 50548, 239779, 238928, 237722, 106509, 236392, 29599, 81673, 236039, 235265, 146726, 236915, 235248, 243582, 63102, 241803, 73143, 236392, 34459, 236405, 237524, 239074, 227860, 237722, 102083, 236375, 59994, 235832, 237964, 236950, 236589, 236392, 49061, 240130, 237138, 238928, 236214, 85181, 126942, 238080, 235248, 243483, 235265, 108, 236183, 239079, 58272, 236361, 126942, 236375, 109976, 31288, 83137, 236137, 94177, 242237, 239074, 236179, 73009, 236361, 52604, 240112, 236392, 48835, 237924, 236214, 236183, 88936, 72159, 93806, 235269, 4964, 68543, 26291, 130412, 244320, 237598, 106365, 122717, 237138, 244950, 238305, 235248, 241716, 236039, 235265, 108, 5958, 11321, 22978, 577, 2116, 573, 108, 14791, 31793, 731, 146075, 235265], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:52642 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:33:57 engine.py:275] Added request cmpl-59e9ae7627174b59b2ecd8ce097c789f-0.
INFO 02-16 20:33:59 metrics.py:455] Avg prompt throughput: 319.4 tokens/s, Avg generation throughput: 180.8 tokens/s, Running: 3 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 8.5%, CPU KV cache usage: 0.0%.
INFO 02-16 20:34:04 logger.py:39] Received request cmpl-ba4d05ee407444c882579232107e5284-0: prompt: '아래 정보에 기반하여, 사용자의 질문에 답하세요.\n        \n\n\n\n\n\n\n\n## 웹 스크래핑을 위한 Python 라이브러리 소개: 요약\n\n본 문서는 웹 스크래핑을 위한 Python 라이브러리인 BeautifulSoup, Scrapy, Selenium을 소개하고 각 라이브러리의 특징과 적용 사례를 설명합니다.\n\n**주요 내용:**\n\n* **BeautifulSoup:** HTML 및 XML 문서 파싱에 특화된 라이브러리로, 웹 페이지 소스 코드를 분석하여 데이터 추출에 효과적입니다. \n* **Scrapy:** 대규모 웹 스크래핑 작업에 적합한 포괄적인 웹 크롤링 프레임워크로, 동시 요청 처리 및 데이터 처리 기능을 제공합니다.\n* **Selenium:** 웹 애플리케이션 테스트를 위한 라이브러리이지만, 웹 스크래핑에도 활용됩니다. 사용자와 유사한 웹 페이지 상호작용을 자동화하여 비동기 콘텐츠 로드 및 사용자 상호작용에 응답하는 웹사이트 스크래핑에 적합합니다.\n\n**라이브러리 선택 가이드:**\n\n* **BeautifulSoup:** 소규모 또는 중간 규모의 웹 스크래핑 작업, 간편한 사용, 빠른 속도 필요 시\n* **Scrapy:** 대규모 및 복잡한 웹 스크래핑 작업, 동시 요청 처리 및 데이터 처리 필요 시\n* **Selenium:** 비동기 콘텐츠 로드, 사용자 상호작용 필요한 웹 스크래핑 작업\n\n**결론:**\n\n웹 스크래핑 프로젝트의 요구 사항에 따라 적합한 라이브러리를 선택하는 것이 중요합니다. 필요에 따라 여러 라이브러리를 조합하여 사용할 수도 있습니다.\n\n\n\n\n\n---\n## 웹 크롤링 윤리\n\n- 웹사이트의 robots.txt 파일을 확인하여 크롤링이 허용되는지 확인해야 함\n- 너무 많은 요청을 보내지 않도록 rate limiting을 적용해야 함\n- 수집한 데이터를 적절하게 사용하고, 개인정보보호에 유의해야 함\n\n\n\n## 웹 크롤링의 중요성\n\n웹 크롤링은 데이터 수집 및 분석의 중요한 도구로, 다양한 분야에서 활용될 수 있습니다. \n\n**웹 크롤링을 통해 얻을 수 있는 이점:**\n\n- **데이터 수집:** 대량의 웹 데이터를 빠르고 효율적으로 수집할 수 있습니다.\n- **시장 분석:** 경쟁사, 제품, 트렌드 등을 분석하여 시장 상황을 파악할 수 있습니다.\n- **정보 검색:** 특정 키워드, 주제, 기업 등에 대한 정보를 효과적으로 검색할 수 있습니다.\n- **웹 사이트 모니터링:** 웹 사이트의 변경 사항, 오류, 가용성 등을 모니터링할 수 있습니다.\n- **학술 연구:** 웹 데이터를 활용하여 다양한 학술 연구를 수행할 수 있습니다.\n\n\n\n---\n\n## 결론\n\n웹 크롤링은 웹 데이터를 수집하고 분석하는 강력한 도구이며, 다양한 분야에서 활용될 수 있습니다. 하지만 크롤링 시 윤리적인 문제를 고려하고 적절한 방법을 사용하는 것이 중요합니다.\n\n\n\n\n\n\n**요약문**\n\n본 텍스트는 저자의 파이썬 학습 경험과 데이터 크롤링에 대한 관심을 담고 있습니다. 과거에 파이썬을 무시했던 저자는 최근 팀원의 영향으로 파이썬의 강력함을 인지하게 되었고, 데이터 크롤링을 통해 파이썬의 장점을 탐구하기로 결심했습니다. 파이썬의 풍부한 라이브러리, 특히 Pandas, Selenium, Urllib을 활용하여 데이터 크롤링을 실습할 계획이며, Google Colab 환경에서 Selenium 라이브러리 설치 방법을 안내합니다. 또한, 크롤링, 스크래핑, 파싱의 개념을 간략하게 설명하며, 데이터 수집 및 분석 작업을 위한 준비를 시작하는 모습을 보여줍니다. \n\n\n\n\nhttps://www.geeksforgeeks.org/python-web-scraping-using-beautifulsoup-4/\n\n\n**요약문**\n\n본 텍스트는 파이썬 웹 크롤링 라이브러리의 종류와 특징을 소개하고 있습니다. 크게 BeautifulSoup4, requests, lxml, selenium, scrapy 등이 있으며, 각 라이브러리의 장단점을 비교 분석합니다. \n\nBeautifulSoup4는 HTML 파싱에 뛰어나지만, JavaScript를 사용한 페이지 크롤링에는 한계가 있습니다. lxml 모듈을 사용하면 BeautifulSoup4의 속도를 향상시킬 수 있습니다. selenium은 웹 브라우저를 실제로 실행하여 크롤링을 수행하여 JavaScript를 포함한 다양한 데이터를 추출할 수 있지만, 속도와 메모리 사용량이 많다는 단점이 있습니다. scrapy는 크롤링을 위한 프레임워크로 Django와 연동이 용이하고 다양한 플러그인을 제공하지만 유료입니다. \n\n결론적으로, 크롤링 목적과 환경에 따라 적합한 라이브러리를 선택하는 것이 중요합니다.\n\n\n\n\n\n\n\n\n## 텍스트 요약\n\n본 텍스트는 저자의 업무에 필요한 웹 크롤링/스크래핑 방법을 찾고 학습하려는 과정을 기록한 것이다. \n\n저자는 Python을 이용하여 웹 크롤링을 시작하려는 목적에서, 가장 적합한 라이브러리를 선택하는 과정을 소개하고 있다. \n\n**주요 내용은 다음과 같다**:\n\n* **웹 크롤링 vs 웹 스크래핑**: 웹 스크래핑은 웹사이트 내용을 긁어오고, 파싱을 통해 필요한 데이터를 추출하는 과정이며, 웹 크롤링은 웹 페이지를 자동으로 탐색하는 것을 의미한다.\n* **라이브러리 비교**:  \n    * **BeautifulSoup**: HTML/XML 파싱 및 데이터 추출에 널리 사용되는 라이브러리로 배우기 쉽지만, 생태계가 비교적 발달하지 않았다.\n    * **Selenium**: 웹 애플리케이션 테스팅을 위한 도구로, JavaScript로 생성된 웹 콘텐츠 크롤링에 적합하지만, 성능이 저하될 수 있다.\n    * **Scrapy**: 웹 크롤링 프레임워크로 Django와 유사한 구조를 가지며, 확장성이 뛰어나지만 학습 난이도가 높다.\n\n**결론**:\n\n저자는 당장의 업무에 selenium을 사용할 것이지만, 장기적인 관점에서 웹 크롤링의 확장성을 고려하여 Scrapy를 추가로 학습할 계획이다.\n\n\n\n        사용자 질문: 크롤링 라이브러리를 알아봐주고, 공통점과 차이점을 비교해줘 ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236655, 238608, 104569, 236179, 28693, 238559, 72494, 235269, 61943, 236645, 236137, 160587, 237465, 236179, 235248, 241305, 204551, 235265, 108, 145, 115, 1620, 31288, 32275, 237611, 238608, 241496, 236392, 168947, 21237, 213862, 238997, 237822, 236432, 44997, 237936, 235292, 73713, 239618, 109, 238744, 133889, 236214, 31288, 32275, 237611, 238608, 241496, 236392, 168947, 21237, 213862, 238997, 237822, 236432, 236589, 92793, 235269, 94078, 2158, 235269, 130817, 236392, 44997, 237936, 48060, 163558, 213862, 238997, 237822, 236432, 236137, 94492, 241330, 237233, 99797, 237545, 17309, 241569, 236791, 220596, 43395, 235265, 109, 688, 237014, 237526, 196582, 66058, 109, 235287, 5231, 22106, 59078, 66058, 19319, 60709, 26176, 133889, 59994, 241870, 236179, 94492, 236817, 238602, 213862, 238997, 237822, 236432, 236375, 235269, 31288, 106191, 44997, 236354, 215441, 236791, 211558, 72494, 112762, 75943, 238483, 236179, 207092, 237233, 237603, 47555, 235265, 235248, 108, 235287, 5231, 108306, 2158, 66058, 26801, 240753, 237551, 31288, 32275, 237611, 238608, 241496, 211896, 236179, 99797, 237961, 236511, 58888, 245414, 85024, 31288, 94177, 242237, 239074, 58510, 237990, 238700, 239779, 237611, 236375, 235269, 49697, 236569, 227038, 168788, 60709, 112762, 168788, 201619, 236392, 110308, 43395, 235265, 108, 235287, 5231, 97647, 66058, 31288, 122096, 239135, 236432, 239814, 146689, 108214, 50691, 236791, 168947, 213862, 238997, 237822, 236432, 235832, 95091, 235269, 31288, 32275, 237611, 238608, 241496, 209929, 147226, 237545, 129090, 235265, 61943, 236645, 237807, 46355, 236417, 236511, 31288, 106191, 36203, 238033, 238115, 237545, 236392, 205006, 236817, 72494, 51732, 237358, 236386, 176427, 54868, 237135, 60709, 61943, 236645, 36203, 238033, 238115, 237545, 236179, 224047, 241305, 40284, 31288, 236417, 78749, 32275, 237611, 238608, 241496, 236179, 99797, 237961, 43395, 235265, 109, 688, 122717, 238997, 237822, 236432, 134472, 23248, 217534, 66058, 109, 235287, 5231, 22106, 59078, 66058, 44997, 240753, 237551, 132879, 47250, 238264, 235248, 240753, 237551, 236137, 31288, 32275, 237611, 238608, 241496, 211896, 235269, 127149, 239813, 236511, 61943, 235269, 235119, 239296, 125507, 236840, 126942, 27941, 108, 235287, 5231, 108306, 2158, 66058, 26801, 240753, 237551, 60709, 122447, 241533, 236511, 31288, 32275, 237611, 238608, 241496, 211896, 235269, 49697, 236569, 227038, 168788, 60709, 112762, 168788, 126942, 27941, 108, 235287, 5231, 97647, 66058, 51732, 237358, 236386, 176427, 54868, 237135, 235269, 61943, 236645, 36203, 238033, 238115, 237545, 126942, 236511, 31288, 32275, 237611, 238608, 241496, 211896, 109, 688, 238665, 240405, 66058, 109, 237941, 32275, 237611, 238608, 241496, 132880, 242989, 236859, 236137, 73713, 237302, 17309, 239383, 236179, 156976, 99797, 237961, 236511, 213862, 238997, 237822, 176947, 134472, 40284, 93205, 215134, 43395, 235265, 126942, 236179, 156976, 197781, 213862, 238997, 237822, 176947, 42916, 237961, 72494, 61943, 238080, 22618, 236840, 55496, 235265, 113, 3976, 108, 1620, 31288, 94177, 242237, 239074, 223187, 236432, 109, 235290, 31288, 236417, 78749, 236137, 42037, 235265, 5592, 145240, 236392, 88936, 72494, 94177, 242237, 239074, 235832, 189305, 237545, 156610, 236183, 88936, 149735, 81796, 108, 235290, 162056, 237908, 139148, 227038, 236392, 29283, 238151, 236183, 48682, 153145, 3974, 35677, 236392, 99797, 237545, 149735, 81796, 108, 235290, 22618, 239346, 236511, 112762, 236791, 99797, 240046, 101969, 61943, 48060, 235269, 49532, 236589, 173499, 237036, 238033, 236179, 46355, 236137, 149735, 81796, 111, 1620, 31288, 94177, 242237, 239074, 236137, 215134, 237154, 109, 237941, 94177, 242237, 239074, 236648, 112762, 22618, 239346, 60709, 211558, 236137, 215134, 236511, 50316, 237302, 236375, 235269, 32048, 238780, 236511, 70754, 238305, 22803, 147226, 237545, 241093, 22618, 55496, 235265, 235248, 109, 688, 237941, 94177, 242237, 239074, 236392, 187118, 210976, 236392, 22618, 72941, 11464, 239158, 66058, 109, 235290, 5231, 238266, 90081, 22618, 239346, 66058, 26801, 240833, 236137, 31288, 112762, 236791, 235119, 238500, 236464, 207092, 241938, 90621, 22618, 239346, 238080, 22618, 55496, 235265, 108, 235290, 5231, 236569, 237199, 211558, 66058, 43033, 241513, 236417, 235269, 31850, 238398, 235269, 106365, 241486, 237135, 73143, 236392, 211558, 72494, 27941, 237199, 36203, 240054, 236392, 59994, 240146, 238080, 22618, 55496, 235265, 108, 235290, 5231, 173499, 203755, 66058, 94492, 236864, 141107, 239779, 237135, 235269, 40712, 236939, 235269, 28693, 238391, 73143, 236179, 71100, 104569, 236791, 207092, 237233, 90621, 203755, 238080, 22618, 55496, 235265, 108, 235290, 5231, 237941, 17309, 78749, 34459, 236405, 237524, 239074, 66058, 31288, 17309, 78749, 236137, 170116, 17309, 239383, 235269, 44245, 239758, 235269, 23248, 237545, 237154, 73143, 236392, 34459, 236405, 237524, 239074, 238080, 22618, 55496, 235265, 108, 235290, 5231, 237834, 239718, 195363, 66058, 31288, 112762, 236791, 147226, 237545, 72494, 32048, 238780, 236511, 126160, 239718, 195363, 236791, 22618, 238356, 238080, 22618, 55496, 235265, 111, 3976, 109, 1620, 72510, 240405, 109, 237941, 94177, 242237, 239074, 236648, 31288, 112762, 236791, 22618, 239346, 48060, 211558, 40284, 84608, 238365, 236511, 50316, 237302, 225022, 235269, 32048, 238780, 236511, 70754, 238305, 22803, 147226, 237545, 241093, 22618, 55496, 235265, 30181, 95091, 94177, 242237, 239074, 27941, 223187, 236432, 85024, 132793, 236791, 46749, 238994, 48060, 99797, 240046, 236511, 130059, 236392, 61943, 40284, 93205, 215134, 43395, 235265, 114, 688, 237526, 239618, 237465, 688, 109, 238744, 235248, 242756, 50691, 236214, 80404, 236645, 236137, 59994, 235832, 246881, 126160, 237152, 43033, 240521, 237233, 112762, 94177, 242237, 239074, 236179, 71100, 55526, 239308, 236392, 205799, 236464, 55496, 235265, 65084, 238154, 236179, 59994, 235832, 246881, 236392, 60331, 236569, 238267, 240080, 80404, 236645, 236214, 75500, 239969, 235248, 241452, 237399, 236137, 52604, 240112, 26291, 59994, 235832, 246881, 236137, 84608, 238365, 238467, 236392, 30743, 236183, 101969, 235248, 75084, 236464, 235269, 112762, 94177, 242237, 239074, 236392, 187118, 59994, 235832, 246881, 236137, 60318, 239158, 236392, 235248, 242850, 237302, 72159, 236375, 72510, 239308, 76571, 235265, 59994, 235832, 246881, 236137, 209727, 237092, 236511, 213862, 238997, 237822, 236432, 235269, 94492, 239055, 192601, 235269, 130817, 235269, 59734, 4613, 236392, 147226, 237545, 72494, 112762, 94177, 242237, 239074, 236392, 61928, 237152, 238080, 213126, 225022, 235269, 6238, 1911, 9236, 161409, 237392, 22803, 130817, 213862, 238997, 237822, 236432, 65952, 237924, 130059, 236392, 70685, 238151, 43395, 235265, 86622, 236511, 235269, 94177, 242237, 239074, 235269, 32275, 237611, 238608, 241496, 235269, 59994, 241870, 236137, 49532, 241631, 236392, 127149, 242296, 101969, 220596, 206716, 235269, 112762, 22618, 239346, 60709, 211558, 211896, 236392, 168947, 166422, 237584, 236791, 106793, 40284, 34459, 237152, 236392, 29283, 237386, 244557, 12957, 235265, 235248, 112, 2468, 1336, 1920, 235265, 541, 5046, 47821, 5046, 235265, 2164, 235283, 7774, 235290, 4405, 235290, 143498, 574, 235290, 1442, 235290, 20909, 68543, 235290, 235310, 235283, 110, 688, 237526, 239618, 237465, 688, 109, 238744, 235248, 242756, 50691, 236214, 59994, 235832, 246881, 31288, 94177, 242237, 239074, 213862, 238997, 237822, 236432, 236137, 86126, 239758, 237807, 94492, 241330, 236392, 44997, 237936, 48060, 55496, 235265, 94177, 237458, 92793, 235310, 235269, 12557, 235269, 533, 7944, 235269, 67519, 235269, 102083, 73143, 235832, 218631, 235269, 163558, 213862, 238997, 237822, 236432, 236137, 60318, 238335, 239158, 236392, 51732, 237905, 211558, 43395, 235265, 235248, 109, 22106, 59078, 235310, 236214, 19319, 59994, 241870, 236179, 235248, 244258, 236770, 236915, 95091, 235269, 22978, 236791, 61943, 236511, 106191, 94177, 242237, 239074, 96564, 35191, 238002, 236361, 55496, 235265, 533, 7944, 34459, 245526, 236392, 61943, 123472, 92793, 235310, 236137, 125507, 236840, 236791, 220234, 237047, 236569, 243167, 22618, 55496, 235265, 67519, 236648, 31288, 129669, 236950, 237312, 238721, 236791, 61928, 236939, 236375, 191754, 72494, 94177, 242237, 239074, 236392, 22618, 238356, 72494, 22978, 236791, 157329, 236511, 32048, 238780, 236511, 112762, 236791, 75943, 238483, 238080, 22618, 21167, 95091, 235269, 125507, 236840, 237807, 75630, 237551, 236432, 61943, 240833, 235832, 99805, 161509, 80289, 239158, 235832, 55496, 235265, 102083, 236214, 94177, 242237, 239074, 236392, 168947, 58510, 237990, 238700, 239779, 237611, 236375, 95945, 237807, 50833, 237358, 235832, 120340, 235832, 48060, 32048, 238780, 236511, 117904, 237822, 236671, 236589, 236392, 110308, 74860, 237598, 46355, 239077, 47555, 235265, 235248, 109, 238665, 240405, 90621, 235269, 94177, 242237, 239074, 86040, 237603, 237233, 161409, 237392, 236179, 156976, 99797, 237961, 236511, 213862, 238997, 237822, 176947, 134472, 40284, 93205, 215134, 43395, 235265, 116, 1620, 235248, 242756, 50691, 73713, 239618, 109, 238744, 235248, 242756, 50691, 236214, 80404, 236645, 236137, 142995, 237908, 236179, 126942, 236511, 31288, 94177, 242237, 239074, 235283, 161615, 238608, 241496, 130059, 236392, 134498, 236464, 126160, 237152, 227860, 236214, 65084, 236864, 236392, 28693, 238779, 236511, 170613, 235265, 235248, 109, 238721, 236645, 236214, 21237, 236392, 208134, 72494, 31288, 94177, 242237, 239074, 236392, 106793, 227860, 236214, 86040, 237603, 22803, 235269, 126277, 99797, 237961, 236511, 213862, 238997, 237822, 176947, 134472, 40284, 65084, 236864, 236392, 44997, 237936, 48060, 69581, 235265, 235248, 109, 688, 237014, 237526, 196582, 236648, 115049, 237233, 81673, 236039, 95573, 109, 235287, 5231, 237941, 94177, 242237, 239074, 5135, 31288, 32275, 237611, 238608, 241496, 95573, 31288, 32275, 237611, 238608, 241496, 236648, 31288, 236417, 78749, 196582, 236392, 235248, 250274, 236770, 237410, 236464, 235269, 59994, 241870, 236392, 187118, 126942, 236511, 112762, 236791, 75943, 238483, 40284, 65084, 236864, 225022, 235269, 31288, 94177, 242237, 239074, 236648, 31288, 106191, 236791, 205006, 26291, 235248, 242850, 238931, 40284, 109241, 223616, 78949, 235265, 108, 235287, 5231, 122717, 238997, 237822, 236432, 51732, 237905, 95573, 139, 108, 141, 235287, 5231, 22106, 59078, 95573, 19319, 235283, 10114, 59994, 241870, 60709, 112762, 75943, 238483, 236179, 235248, 241518, 236432, 61943, 156610, 213862, 238997, 237822, 236432, 236375, 192317, 236386, 235248, 243274, 95091, 235269, 50390, 239190, 238002, 236361, 51732, 237905, 237603, 66144, 239522, 74860, 172893, 236039, 235265, 108, 141, 235287, 5231, 97647, 95573, 31288, 122096, 239135, 236432, 239814, 146689, 108214, 236354, 240880, 236392, 168947, 50316, 237302, 236375, 235269, 22978, 236375, 116518, 238602, 31288, 176427, 94177, 242237, 239074, 236179, 99797, 237961, 74860, 237598, 235269, 64301, 239474, 235832, 80404, 236345, 241093, 22618, 69581, 235265, 108, 141, 235287, 5231, 108306, 2158, 95573, 31288, 94177, 242237, 239074, 58510, 237990, 238700, 239779, 237611, 236375, 95945, 237807, 46355, 236417, 236511, 49061, 237602, 236791, 128753, 238986, 235269, 69781, 237199, 237154, 235832, 235248, 244258, 236770, 236915, 95091, 126160, 237152, 235248, 240198, 235832, 236840, 236361, 187800, 236039, 235265, 109, 688, 238665, 240405, 95573, 109, 238721, 236645, 236214, 84815, 237199, 236137, 142995, 237908, 236179, 67519, 236392, 61943, 238080, 93205, 95091, 235269, 60318, 236386, 85024, 55526, 239158, 22803, 31288, 94177, 242237, 239074, 236137, 69781, 237199, 237154, 236392, 46749, 238994, 72494, 94078, 2158, 236791, 133818, 236375, 126160, 237152, 238080, 213126, 61742, 235265, 111, 145, 236417, 237545, 236645, 160587, 237465, 235292, 94177, 242237, 239074, 213862, 238997, 237822, 176947, 78183, 236655, 244950, 237014, 236464, 235269, 41388, 238693, 239158, 237233, 91292, 235832, 239158, 236392, 51732, 237905, 237138, 244669, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:56590 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 20:34:04 engine.py:275] Added request cmpl-ba4d05ee407444c882579232107e5284-0.
INFO 02-16 20:34:05 metrics.py:455] Avg prompt throughput: 311.3 tokens/s, Avg generation throughput: 72.6 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 3.3%, CPU KV cache usage: 0.0%.
INFO 02-16 20:34:10 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 52.5 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 3.8%, CPU KV cache usage: 0.0%.
INFO 02-16 20:34:15 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 51.2 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 4.3%, CPU KV cache usage: 0.0%.
INFO 02-16 20:34:25 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 1.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 20:34:35 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO:     199.45.154.144:45784 - "GET / HTTP/1.1" 404 Not Found
INFO:     199.45.154.144:49560 - "GET / HTTP/1.1" 404 Not Found
WARNING:  Invalid HTTP request received.
INFO 02-16 21:58:12 logger.py:39] Received request cmpl-dd4c6313497744558ef984734d635519-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 서버사이드 프로그래밍에 대해 알려줘 <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236179, 142192, 78183, 238994, 244669, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:60216 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 21:58:12 engine.py:275] Added request cmpl-dd4c6313497744558ef984734d635519-0.
INFO 02-16 21:58:14 logger.py:39] Received request cmpl-208a35a20b3f4b01a1556b4c81f748d0-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 21:58:14 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍이란 무엇인가 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235274, 235292, 235308, 235321, 235292, 235274, 235310, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 235832, 240136, 60331, 242513, 236589, 236361, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:60216 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 21:58:14 engine.py:275] Added request cmpl-208a35a20b3f4b01a1556b4c81f748d0-0.
INFO 02-16 21:58:15 logger.py:39] Received request cmpl-a624f5aaf59949c08c795569303d7e2d-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 21:58:15 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍의 역할 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235274, 235292, 235308, 235321, 235292, 235274, 235308, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236137, 61169, 238080, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:60216 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 21:58:15 engine.py:275] Added request cmpl-a624f5aaf59949c08c795569303d7e2d-0.
INFO 02-16 21:58:15 metrics.py:455] Avg prompt throughput: 450.3 tokens/s, Avg generation throughput: 33.3 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.1%, CPU KV cache usage: 0.0%.
INFO 02-16 21:58:16 logger.py:39] Received request cmpl-980692e97fe24b53bc18760a35779c0b-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 21:58:16 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍 언어 예시 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235274, 235292, 235308, 235321, 235292, 235274, 235318, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 171754, 236770, 71277, 236569, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:60216 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 21:58:16 engine.py:275] Added request cmpl-980692e97fe24b53bc18760a35779c0b-0.
INFO 02-16 21:58:17 logger.py:39] Received request cmpl-2256ae121bc74cc9ac4b3989f9222ee6-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 21:58:17 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍과 클라이언트사이드 프로그래밍의 차이점 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235274, 235292, 235308, 235321, 235292, 235274, 235324, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 237233, 91940, 122717, 239753, 236859, 236417, 217534, 58510, 93674, 238608, 243903, 236137, 91292, 235832, 239158, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:60216 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 21:58:17 engine.py:275] Added request cmpl-2256ae121bc74cc9ac4b3989f9222ee6-0.
INFO 02-16 21:58:19 logger.py:39] Received request cmpl-29e043289bbf4df28a9788f364d0d62d-0: prompt: '아래 정보에 기반하여, 사용자의 질문에 답하세요.\n        \n        사용자 질문: 서버사이드 프로그래밍에 대해 알려줘 ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=5000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236655, 238608, 104569, 236179, 28693, 238559, 72494, 235269, 61943, 236645, 236137, 160587, 237465, 236179, 235248, 241305, 204551, 235265, 108, 145, 108, 145, 236417, 237545, 236645, 160587, 237465, 235292, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236179, 142192, 78183, 238994, 244669, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:60216 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 21:58:19 engine.py:275] Added request cmpl-29e043289bbf4df28a9788f364d0d62d-0.
INFO 02-16 21:58:20 metrics.py:455] Avg prompt throughput: 215.9 tokens/s, Avg generation throughput: 52.9 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.2%, CPU KV cache usage: 0.0%.
INFO 02-16 21:58:25 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 55.5 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.7%, CPU KV cache usage: 0.0%.
INFO 02-16 21:58:30 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 54.9 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.3%, CPU KV cache usage: 0.0%.
INFO 02-16 21:58:43 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 10.7 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 21:58:53 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 22:38:56 launcher.py:59] Shutting down FastAPI HTTP server.
[rank0]:[W216 22:38:57.922532107 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
INFO:     Shutting down
INFO:     Waiting for application shutdown.
INFO:     Application shutdown complete.
INFO 02-16 22:41:16 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 22:41:17 api_server.py:840] vLLM API server version 0.7.2
INFO 02-16 22:41:17 api_server.py:841] args: Namespace(subparser='serve', model_tag='snunlp/bigdata_exaone3_7.8b_fft', config='', host=None, port=8000, uvicorn_log_level='info', allow_credentials=False, allowed_origins=['*'], allowed_methods=['*'], allowed_headers=['*'], api_key='token-snuintern2025', lora_modules=None, prompt_adapters=None, chat_template=None, chat_template_content_format='auto', response_role='assistant', ssl_keyfile=None, ssl_certfile=None, ssl_ca_certs=None, ssl_cert_reqs=0, root_path=None, middleware=[], return_tokens_as_token_ids=False, disable_frontend_multiprocessing=False, enable_request_id_headers=False, enable_auto_tool_choice=False, enable_reasoning=False, reasoning_parser=None, tool_call_parser=None, tool_parser_plugin='', model='snunlp/bigdata_exaone3_7.8b_fft', task='auto', tokenizer=None, skip_tokenizer_init=False, revision=None, code_revision=None, tokenizer_revision=None, tokenizer_mode='auto', trust_remote_code=False, allowed_local_media_path=None, download_dir=None, load_format='auto', config_format=<ConfigFormat.AUTO: 'auto'>, dtype='auto', kv_cache_dtype='auto', max_model_len=None, guided_decoding_backend='xgrammar', logits_processor_pattern=None, model_impl='auto', distributed_executor_backend=None, pipeline_parallel_size=1, tensor_parallel_size=4, max_parallel_loading_workers=None, ray_workers_use_nsight=False, block_size=None, enable_prefix_caching=None, disable_sliding_window=False, use_v2_block_manager=True, num_lookahead_slots=0, seed=0, swap_space=4, cpu_offload_gb=0, gpu_memory_utilization=0.9, num_gpu_blocks_override=None, max_num_batched_tokens=None, max_num_seqs=None, max_logprobs=20, disable_log_stats=False, quantization=None, rope_scaling=None, rope_theta=None, hf_overrides=None, enforce_eager=False, max_seq_len_to_capture=8192, disable_custom_all_reduce=False, tokenizer_pool_size=0, tokenizer_pool_type='ray', tokenizer_pool_extra_config=None, limit_mm_per_prompt=None, mm_processor_kwargs=None, disable_mm_preprocessor_cache=False, enable_lora=False, enable_lora_bias=False, max_loras=1, max_lora_rank=16, lora_extra_vocab_size=256, lora_dtype='auto', long_lora_scaling_factors=None, max_cpu_loras=None, fully_sharded_loras=False, enable_prompt_adapter=False, max_prompt_adapters=1, max_prompt_adapter_token=0, device='auto', num_scheduler_steps=1, multi_step_stream_outputs=True, scheduler_delay_factor=0.0, enable_chunked_prefill=None, speculative_model=None, speculative_model_quantization=None, num_speculative_tokens=None, speculative_disable_mqa_scorer=False, speculative_draft_tensor_parallel_size=None, speculative_max_model_len=None, speculative_disable_by_batch_size=None, ngram_prompt_lookup_max=None, ngram_prompt_lookup_min=None, spec_decoding_acceptance_method='rejection_sampler', typical_acceptance_sampler_posterior_threshold=None, typical_acceptance_sampler_posterior_alpha=None, disable_logprobs_during_spec_decoding=None, model_loader_extra_config=None, ignore_patterns=[], preemption_mode=None, served_model_name=None, qlora_adapter_name_or_path=None, otlp_traces_endpoint=None, collect_detailed_traces=None, disable_async_output_proc=False, scheduling_policy='fcfs', override_neuron_config=None, override_pooler_config=None, compilation_config=None, kv_transfer_config=None, worker_cls='auto', generation_config=None, override_generation_config=None, enable_sleep_mode=False, calculate_kv_scales=False, disable_log_requests=False, max_log_len=None, disable_fastapi_docs=False, enable_prompt_tokens_details=False, dispatch_function=<function serve at 0x7fa44224fec0>)
INFO 02-16 22:41:17 api_server.py:206] Started engine process with PID 3975652
INFO 02-16 22:41:21 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 22:41:37 config.py:542] This model supports multiple tasks: {'generate', 'score', 'classify', 'reward', 'embed'}. Defaulting to 'generate'.
INFO 02-16 22:41:37 config.py:1401] Defaulting to use mp for distributed inference
INFO 02-16 22:41:41 config.py:542] This model supports multiple tasks: {'generate', 'reward', 'embed', 'classify', 'score'}. Defaulting to 'generate'.
INFO 02-16 22:41:41 config.py:1401] Defaulting to use mp for distributed inference
INFO 02-16 22:41:41 llm_engine.py:234] Initializing a V0 LLM engine (v0.7.2) with config: model='snunlp/bigdata_exaone3_7.8b_fft', speculative_config=None, tokenizer='snunlp/bigdata_exaone3_7.8b_fft', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=4, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=snunlp/bigdata_exaone3_7.8b_fft, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=True, 
WARNING 02-16 22:41:42 multiproc_worker_utils.py:300] Reducing Torch parallelism from 40 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
INFO 02-16 22:41:42 custom_cache_manager.py:19] Setting Triton cache manager to: vllm.triton_utils.custom_cache_manager:CustomCacheManager
INFO 02-16 22:41:44 cuda.py:230] Using Flash Attention backend.
INFO 02-16 22:41:46 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 22:41:46 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 22:41:46 __init__.py:190] Automatically detected platform cuda.
[1;36m(VllmWorkerProcess pid=3976358)[0;0m INFO 02-16 22:41:47 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3976359)[0;0m INFO 02-16 22:41:47 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3976360)[0;0m INFO 02-16 22:41:47 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3976358)[0;0m INFO 02-16 22:41:48 cuda.py:230] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=3976359)[0;0m INFO 02-16 22:41:48 cuda.py:230] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=3976360)[0;0m INFO 02-16 22:41:48 cuda.py:230] Using Flash Attention backend.
INFO 02-16 22:41:50 utils.py:950] Found nccl from library libnccl.so.2
INFO 02-16 22:41:50 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3976358)[0;0m INFO 02-16 22:41:50 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3976359)[0;0m INFO 02-16 22:41:50 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3976360)[0;0m INFO 02-16 22:41:50 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3976359)[0;0m INFO 02-16 22:41:50 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3976358)[0;0m INFO 02-16 22:41:50 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3976360)[0;0m INFO 02-16 22:41:50 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3976360)[0;0m WARNING 02-16 22:41:50 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
[1;36m(VllmWorkerProcess pid=3976358)[0;0m WARNING 02-16 22:41:50 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
[1;36m(VllmWorkerProcess pid=3976359)[0;0m WARNING 02-16 22:41:50 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
WARNING 02-16 22:41:50 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
INFO 02-16 22:41:51 shm_broadcast.py:258] vLLM message queue communication handle: Handle(connect_ip='127.0.0.1', local_reader_ranks=[1, 2, 3], buffer_handle=(3, 4194304, 6, 'psm_45527698'), local_subscribe_port=43557, remote_subscribe_port=None)
INFO 02-16 22:41:51 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3976358)[0;0m INFO 02-16 22:41:51 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3976360)[0;0m INFO 02-16 22:41:51 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3976359)[0;0m INFO 02-16 22:41:51 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3976358)[0;0m INFO 02-16 22:41:51 weight_utils.py:252] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=3976360)[0;0m INFO 02-16 22:41:51 weight_utils.py:252] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=3976359)[0;0m INFO 02-16 22:41:51 weight_utils.py:252] Using model weights format ['*.safetensors']
INFO 02-16 22:41:51 weight_utils.py:252] Using model weights format ['*.safetensors']
Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:00<00:01,  1.94it/s]
Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:01<00:01,  1.83it/s]
[1;36m(VllmWorkerProcess pid=3976358)[0;0m INFO 02-16 22:41:54 model_runner.py:1115] Loading model weights took 3.6422 GB
Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:01<00:00,  2.83it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:01<00:00,  2.44it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:01<00:00,  2.34it/s]

[1;36m(VllmWorkerProcess pid=3976360)[0;0m INFO 02-16 22:41:54 model_runner.py:1115] Loading model weights took 3.6422 GB
INFO 02-16 22:41:55 model_runner.py:1115] Loading model weights took 3.6422 GB
[1;36m(VllmWorkerProcess pid=3976359)[0;0m INFO 02-16 22:41:55 model_runner.py:1115] Loading model weights took 3.6422 GB
[1;36m(VllmWorkerProcess pid=3976359)[0;0m INFO 02-16 22:41:59 worker.py:267] Memory profiling takes 3.94 seconds
[1;36m(VllmWorkerProcess pid=3976359)[0;0m INFO 02-16 22:41:59 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3976359)[0;0m INFO 02-16 22:41:59 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.25GiB; the rest of the memory reserved for KV Cache is 31.29GiB.
[1;36m(VllmWorkerProcess pid=3976358)[0;0m INFO 02-16 22:41:59 worker.py:267] Memory profiling takes 3.90 seconds
[1;36m(VllmWorkerProcess pid=3976358)[0;0m INFO 02-16 22:41:59 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3976358)[0;0m INFO 02-16 22:41:59 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.25GiB; the rest of the memory reserved for KV Cache is 31.29GiB.
[1;36m(VllmWorkerProcess pid=3976360)[0;0m INFO 02-16 22:41:59 worker.py:267] Memory profiling takes 3.95 seconds
[1;36m(VllmWorkerProcess pid=3976360)[0;0m INFO 02-16 22:41:59 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3976360)[0;0m INFO 02-16 22:41:59 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.25GiB; the rest of the memory reserved for KV Cache is 31.29GiB.
INFO 02-16 22:41:59 worker.py:267] Memory profiling takes 4.05 seconds
INFO 02-16 22:41:59 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
INFO 02-16 22:41:59 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.97GiB; the rest of the memory reserved for KV Cache is 30.57GiB.
INFO 02-16 22:42:00 executor_base.py:110] # CUDA blocks: 62599, # CPU blocks: 8192
INFO 02-16 22:42:00 executor_base.py:115] Maximum concurrency for 4096 tokens per request: 244.53x
[1;36m(VllmWorkerProcess pid=3976360)[0;0m INFO 02-16 22:42:02 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 02-16 22:42:02 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s][1;36m(VllmWorkerProcess pid=3976358)[0;0m INFO 02-16 22:42:02 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=3976359)[0;0m INFO 02-16 22:42:02 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:25,  1.32it/s]Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:01<00:24,  1.37it/s]Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:02<00:22,  1.45it/s]Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:02<00:21,  1.45it/s]Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:03<00:20,  1.49it/s]Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:04<00:19,  1.51it/s]Capturing CUDA graph shapes:  20%|██        | 7/35 [00:04<00:18,  1.53it/s]Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:05<00:17,  1.52it/s]Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:06<00:17,  1.49it/s]Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:06<00:16,  1.52it/s]Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:07<00:15,  1.51it/s]Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:08<00:14,  1.55it/s]Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:08<00:14,  1.53it/s]Capturing CUDA graph shapes:  40%|████      | 14/35 [00:09<00:13,  1.52it/s]Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:09<00:12,  1.54it/s]Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:10<00:12,  1.54it/s]Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:11<00:11,  1.56it/s]Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:11<00:10,  1.58it/s]Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:12<00:10,  1.59it/s]Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:13<00:09,  1.57it/s]Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:13<00:08,  1.56it/s]Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:14<00:08,  1.58it/s]Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:15<00:07,  1.58it/s]Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:15<00:06,  1.59it/s]Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:16<00:06,  1.59it/s]Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:16<00:05,  1.61it/s]Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:17<00:04,  1.60it/s]Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:18<00:04,  1.59it/s]Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:18<00:03,  1.60it/s]Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:19<00:03,  1.60it/s]Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:20<00:02,  1.59it/s]Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:20<00:01,  1.62it/s]Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:21<00:01,  1.63it/s]Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:21<00:00,  1.64it/s][1;36m(VllmWorkerProcess pid=3976360)[0;0m INFO 02-16 22:42:25 model_runner.py:1562] Graph capturing finished in 23 secs, took 1.21 GiB
[1;36m(VllmWorkerProcess pid=3976359)[0;0m INFO 02-16 22:42:25 model_runner.py:1562] Graph capturing finished in 23 secs, took 1.21 GiB
[1;36m(VllmWorkerProcess pid=3976358)[0;0m INFO 02-16 22:42:25 model_runner.py:1562] Graph capturing finished in 23 secs, took 1.21 GiB
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:22<00:00,  1.37it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:22<00:00,  1.53it/s]
INFO 02-16 22:42:25 model_runner.py:1562] Graph capturing finished in 23 secs, took 1.22 GiB
INFO 02-16 22:42:25 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 29.88 seconds
INFO 02-16 22:42:26 api_server.py:756] Using supplied chat template:
INFO 02-16 22:42:26 api_server.py:756] None
INFO 02-16 22:42:26 launcher.py:21] Available routes are:
INFO 02-16 22:42:26 launcher.py:29] Route: /openapi.json, Methods: HEAD, GET
INFO 02-16 22:42:26 launcher.py:29] Route: /docs, Methods: HEAD, GET
INFO 02-16 22:42:26 launcher.py:29] Route: /docs/oauth2-redirect, Methods: HEAD, GET
INFO 02-16 22:42:26 launcher.py:29] Route: /redoc, Methods: HEAD, GET
INFO 02-16 22:42:26 launcher.py:29] Route: /health, Methods: GET
INFO 02-16 22:42:26 launcher.py:29] Route: /ping, Methods: GET, POST
INFO 02-16 22:42:26 launcher.py:29] Route: /tokenize, Methods: POST
INFO 02-16 22:42:26 launcher.py:29] Route: /detokenize, Methods: POST
INFO 02-16 22:42:26 launcher.py:29] Route: /v1/models, Methods: GET
INFO 02-16 22:42:26 launcher.py:29] Route: /version, Methods: GET
INFO 02-16 22:42:26 launcher.py:29] Route: /v1/chat/completions, Methods: POST
INFO 02-16 22:42:26 launcher.py:29] Route: /v1/completions, Methods: POST
INFO 02-16 22:42:26 launcher.py:29] Route: /v1/embeddings, Methods: POST
INFO 02-16 22:42:26 launcher.py:29] Route: /pooling, Methods: POST
INFO 02-16 22:42:26 launcher.py:29] Route: /score, Methods: POST
INFO 02-16 22:42:26 launcher.py:29] Route: /v1/score, Methods: POST
INFO 02-16 22:42:26 launcher.py:29] Route: /rerank, Methods: POST
INFO 02-16 22:42:26 launcher.py:29] Route: /v1/rerank, Methods: POST
INFO 02-16 22:42:26 launcher.py:29] Route: /v2/rerank, Methods: POST
INFO 02-16 22:42:26 launcher.py:29] Route: /invocations, Methods: POST
INFO:     Started server process [3975484]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
INFO:     127.0.0.1:59746 - "GET /docs HTTP/1.1" 200 OK
/home/hyeznee/.local/lib/python3.12/site-packages/fastapi/openapi/utils.py:225: UserWarning: Duplicate Operation ID ping_ping_get for function ping at /home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/api_server.py
  warnings.warn(message, stacklevel=1)
INFO:     127.0.0.1:59746 - "GET /openapi.json HTTP/1.1" 200 OK
INFO:     127.0.0.1:59756 - "GET /health HTTP/1.1" 200 OK
INFO:     127.0.0.1:42400 - "GET /docs/health HTTP/1.1" 404 Not Found
INFO:     127.0.0.1:42400 - "GET /health HTTP/1.1" 200 OK
INFO:     127.0.0.1:42402 - "GET /docs HTTP/1.1" 200 OK
INFO:     127.0.0.1:42402 - "GET /openapi.json HTTP/1.1" 200 OK
INFO:     127.0.0.1:42406 - "GET /v1/models HTTP/1.1" 401 Unauthorized
INFO:     127.0.0.1:34010 - "GET /v1/models HTTP/1.1" 401 Unauthorized
INFO:     127.0.0.1:34020 - "GET /v1/models HTTP/1.1" 401 Unauthorized
INFO:     127.0.0.1:60558 - "GET /v1/models HTTP/1.1" 401 Unauthorized
INFO:     127.0.0.1:33098 - "GET /v1/models HTTP/1.1" 401 Unauthorized
INFO 02-16 22:48:30 chat_utils.py:332] Detected the chat template content format to be 'string'. You can set `--chat-template-content-format` to override this.
INFO 02-16 22:48:30 logger.py:39] Received request chatcmpl-b1a8debdae784d9c887db3c50acd053c: prompt: '[|system|][|endofturn|]\n[|user|]세종대왕에 대해 알려줘.\n[|assistant|]', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4070, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: None, lora_request: None, prompt_adapter_request: None.
INFO 02-16 22:48:30 engine.py:275] Added request chatcmpl-b1a8debdae784d9c887db3c50acd053c.
INFO 02-16 22:48:31 metrics.py:455] Avg prompt throughput: 5.2 tokens/s, Avg generation throughput: 12.8 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO:     127.0.0.1:48696 - "POST /v1/chat/completions HTTP/1.1" 200 OK
INFO 02-16 22:48:44 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 27.7 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 22:48:54 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
ERROR 02-16 22:48:57 serving_completion.py:112] Error in preprocessing prompt inputs
ERROR 02-16 22:48:57 serving_completion.py:112] Traceback (most recent call last):
ERROR 02-16 22:48:57 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_completion.py", line 104, in create_completion
ERROR 02-16 22:48:57 serving_completion.py:112]     request_prompts, engine_prompts = await self._preprocess_completion(
ERROR 02-16 22:48:57 serving_completion.py:112]                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 22:48:57 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 349, in _preprocess_completion
ERROR 02-16 22:48:57 serving_completion.py:112]     request_prompts = await self._tokenize_prompt_input_or_inputs_async(
ERROR 02-16 22:48:57 serving_completion.py:112]                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 22:48:57 serving_completion.py:112]   File "/opt/anaconda3/lib/python3.12/concurrent/futures/thread.py", line 58, in run
ERROR 02-16 22:48:57 serving_completion.py:112]     result = self.fn(*self.args, **self.kwargs)
ERROR 02-16 22:48:57 serving_completion.py:112]              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 22:48:57 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 326, in _tokenize_prompt_input_or_inputs
ERROR 02-16 22:48:57 serving_completion.py:112]     self._normalize_prompt_text_to_input(
ERROR 02-16 22:48:57 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 183, in _normalize_prompt_text_to_input
ERROR 02-16 22:48:57 serving_completion.py:112]     return self._validate_input(request, input_ids, input_text)
ERROR 02-16 22:48:57 serving_completion.py:112]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 22:48:57 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 246, in _validate_input
ERROR 02-16 22:48:57 serving_completion.py:112]     raise ValueError(
ERROR 02-16 22:48:57 serving_completion.py:112] ValueError: This model's maximum context length is 4096 tokens. However, you requested 6008 tokens (1008 in the messages, 5000 in the completion). Please reduce the length of the messages or completion.
INFO:     127.0.0.1:59086 - "POST /v1/completions HTTP/1.1" 400 Bad Request
INFO 02-16 22:49:40 logger.py:39] Received request cmpl-60e11be507e0455e920a267468528047-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.[|system|] 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요.\n4. 하위 쿼리는 최대한 간단한 질문으로 만드세요. (예: "만약 날아다니는 스파게티 괴물이 창작물이나 상상력의 산물이라면, 그 창작물의 출처나 배경 정보 파악" 대신 "날아다니는 스파게티 괴물의 출처 파악"과 같이 간단하게 만드세요.)\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n[|assistant|]\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.[|endofturn|][|example|] 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n[|endofturn|]\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    [|user|] 서버사이드 프로그래밍에 대해 알려줘 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2939, 732, 582, 379, 377, 379, 382, 2171, 582, 377, 379, 2751, 582, 378, 383, 858, 10996, 375, 4484, 657, 582, 379, 377, 379, 382, 2171, 10996, 375, 2626, 1578, 732, 582, 379, 2751, 10996, 15954, 453, 47982, 453, 422, 5998, 732, 7205, 657, 12037, 1075, 5962, 1371, 696, 8019, 1075, 27498, 3644, 13456, 7872, 657, 1736, 2373, 4362, 1727, 1075, 7111, 10996, 375, 560, 378, 375, 24348, 5962, 696, 39380, 41281, 17661, 3644, 13456, 7872, 5847, 375, 560, 379, 375, 2534, 27498, 100048, 657, 1799, 730, 3644, 1043, 13456, 53712, 1481, 375, 7164, 2690, 1823, 730, 3644, 696, 4666, 1130, 698, 14182, 375, 688, 3027, 387, 6873, 2373, 1546, 1208, 2329, 730, 3231, 4605, 4415, 1130, 657, 3644, 1084, 2873, 375, 23784, 1222, 720, 9190, 715, 7135, 5658, 5962, 696, 8890, 37728, 691, 5847, 22442, 560, 380, 375, 582, 380, 1823, 8099, 730, 27498, 100048, 4605, 16769, 1130, 5847, 375, 560, 381, 375, 27498, 100048, 657, 9338, 5488, 1075, 5962, 13456, 5799, 5847, 375, 688, 3027, 387, 738, 20267, 69972, 657, 28874, 30874, 634, 23993, 1113, 37891, 42738, 730, 62058, 634, 17663, 373, 855, 23993, 1113, 730, 10411, 902, 10300, 3231, 7936, 363, 6414, 738, 1945, 1023, 8367, 657, 28874, 30874, 730, 10411, 7936, 363, 1548, 2485, 5488, 1130, 1060, 5799, 5847, 22442, 560, 381, 375, 9556, 732, 4488, 2030, 2485, 15214, 12947, 13456, 1992, 1481, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 20498, 26942, 23454, 1130, 1595, 100048, 582, 378, 9417, 738, 1130, 1595, 100048, 582, 379, 9417, 4377, 10924, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 14182, 375, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 1130, 5847, 375, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 4488, 32604, 4605, 5813, 5414, 9556, 696, 6016, 1130, 5847, 375, 3027, 954, 13385, 387, 11225, 1339, 18295, 657, 7135, 3930, 11966, 2373, 9633, 392, 3136, 1780, 2373, 6930, 5571, 9500, 1162, 696, 698, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 25999, 905, 9633, 657, 11966, 9417, 738, 49065, 905, 9633, 657, 11966, 9417, 738, 25999, 2030, 18295, 1126, 1162, 696, 924, 3093, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 16993, 373, 11819, 373, 5805, 730, 11282, 7460, 732, 3656, 91728, 392, 7135, 730, 3830, 14178, 3090, 18938, 5927, 696, 1821, 48199, 773, 657, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 54529, 730, 11282, 7460, 9417, 738, 22279, 730, 11282, 7460, 9417, 738, 34724, 730, 11282, 7460, 9417, 738, 54529, 373, 11819, 373, 5805, 730, 11282, 7460, 29289, 9417, 738, 54529, 730, 18938, 5927, 9417, 738, 22279, 730, 18938, 5927, 9417, 738, 34724, 730, 18938, 5927, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 11265, 4605, 1747, 657, 924, 634, 3164, 2373, 1104, 732, 905, 392, 11265, 1747, 37817, 1104, 732, 6620, 657, 4083, 798, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 23454, 39190, 1747, 722, 905, 3164, 2373, 11310, 657, 5282, 1996, 722, 9417, 738, 39190, 1747, 37817, 1104, 732, 6620, 1996, 722, 71045, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 41728, 7991, 13456, 713, 657, 40187, 2030, 77348, 13891, 3231, 4605, 5080, 999, 823, 853, 373, 2472, 8570, 1590, 696, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 20715, 40187, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 77348, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 40187, 2030, 77348, 5080, 9417, 560, 23, 363, 8397, 374, 20715, 1601, 1430, 15767, 13891, 834, 3093, 363, 560, 27, 422, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 4113, 1146, 830, 730, 17129, 4747, 1548, 16951, 4747, 696, 3504, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 19, 363, 2839, 1146, 830, 730, 17129, 4747, 9417, 560, 19, 363, 2839, 1254, 830, 730, 16951, 4747, 363, 560, 23, 422, 582, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 2879, 41728, 7646, 999, 13186, 373, 7967, 373, 18066, 4605, 10916, 4817, 76876, 3253, 2870, 3864, 74914, 373, 2534, 2878, 730, 7245, 23512, 2030, 3093, 3501, 696, 3504, 823, 853, 373, 17028, 730, 5346, 19597, 2030, 73414, 696, 5422, 999, 15887, 375, 3662, 5210, 15767, 1590, 1548, 5262, 696, 4666, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 32122, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 32122, 7245, 23512, 9417, 560, 23, 363, 32122, 3093, 3501, 9417, 560, 23, 363, 32122, 374, 23135, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 23135, 7245, 23512, 9417, 560, 23, 363, 23135, 3093, 3501, 9417, 560, 23, 363, 23135, 374, 44868, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 44868, 7245, 23512, 9417, 560, 23, 363, 44868, 3093, 3501, 9417, 560, 23, 363, 44868, 374, 12149, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 12149, 7245, 23512, 9417, 560, 23, 363, 12149, 3093, 3501, 9417, 560, 23, 363, 17793, 3253, 5210, 15767, 1590, 2425, 5262, 363, 560, 27, 422, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 715, 3253, 696, 713, 12438, 691, 15913, 4977, 905, 3835, 34325, 392, 2210, 3835, 732, 23512, 2131, 3093, 999, 15887, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 13225, 2879, 4977, 9417, 560, 23, 363, 8397, 7245, 23512, 363, 560, 27, 422, 560, 27, 454, 560, 361, 560, 560, 6297, 5962, 696, 2690, 78028, 27498, 5962, 13456, 7872, 33413, 5847, 375, 560, 31, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 2373, 2409, 3504, 15887, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53844 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:49:40 engine.py:275] Added request cmpl-60e11be507e0455e920a267468528047-0.
INFO 02-16 22:49:40 metrics.py:455] Avg prompt throughput: 152.1 tokens/s, Avg generation throughput: 0.2 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 22:49:41 logger.py:39] Received request cmpl-92fd97d245f94036a9ee97fb70728594-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 정의 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 11476, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53844 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:49:41 engine.py:275] Added request cmpl-92fd97d245f94036a9ee97fb70728594-0.
INFO 02-16 22:49:41 logger.py:39] Received request cmpl-5262706314bc4b2c87d91c056537f513-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 특징 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 8574, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53844 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:49:41 engine.py:275] Added request cmpl-5262706314bc4b2c87d91c056537f513-0.
INFO 02-16 22:49:45 logger.py:39] Received request cmpl-06eefd5e102e4fb88b289e92e6d80169-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 장점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 7306, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53844 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:49:45 engine.py:275] Added request cmpl-06eefd5e102e4fb88b289e92e6d80169-0.
INFO 02-16 22:49:45 metrics.py:455] Avg prompt throughput: 533.0 tokens/s, Avg generation throughput: 118.3 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 22:49:47 logger.py:39] Received request cmpl-bebf34dbfa6949deb586ed36a98cd909-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 단점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 13263, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53844 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:49:47 engine.py:275] Added request cmpl-bebf34dbfa6949deb586ed36a98cd909-0.
INFO 02-16 22:49:50 metrics.py:455] Avg prompt throughput: 177.6 tokens/s, Avg generation throughput: 126.7 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 22:49:52 logger.py:39] Received request cmpl-cfbf1860f37f463696ccc1be22411e81-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 사용 사례 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 1821, 8224, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53844 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:49:52 engine.py:275] Added request cmpl-cfbf1860f37f463696ccc1be22411e81-0.
INFO 02-16 22:49:56 logger.py:39] Received request cmpl-76030d5c250142f9bbfd78c9ea0af57d-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        안녕하세요 jju_developer입니다.오늘은제이쿼리 비동기 방식 연동에 대해 설명하다가따로 설명을 드려야 할 것 같은 정보가 있어서!! 글을 정리하여 적어봅니다~책을 읽다보면 서버사이드와 클라이언트 사이드를 많이 접하실텐데요?웹 프로그래밍에서서버 사이드/클라이언트 사이드가 나뉘고,어느 쪽에 중심을 두느냐에 따라 프로젝트의 방향이 달라지게 됩니다.그렇다면 클라이언트 사이드와 서버 사이드는 무엇일까요?1. 클라이언트 사이드(Client-Side)-클라이언트(사용자) 측에서 처리하는 것.클라이언트(사용자)가 입력한 것을 수신해서 HTML로 만들어서 크롬과 같은 애플리케이션에 해석해서 표시합니다.대표적으로 자바스크립트(Javascript)가 있습니다.2. 서버 사이드(Server-Side)-서버(제공자) 측에서 즉시 처리하는 것.서버 사이드는\xa0클라이언트로 보낼\xa0웹 페이지(HTML,\xa0JavaScript 등이 담긴)를\xa0만들며,작업들(사용자 유효성, DB 관련 등)을 수행합니다.대표적인 언어는 Java, PHP, Ruby, Python, Node.js 등이 있습니다.즉,서버와클라이언트는 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.클라이언트 사이드 언어를 다루고 그에 관련된 개발자들을프론트 엔드서버 사이드 언어를 다루고 그에 관련된 개발자를백엔드라 부릅니다.웹사이트를\xa0제작하는데\xa0쓰이는\xa0스크립트는실행되는 위치에 따라 클라이언트 사이드 스크립트와 서버사이드 스크립트로 구분합니다.서버사이드 스크립트는서버에서 해석해서 구동되는 스크립트이고,클라이언트 사이드 스크립트는브라우저에서 해석해서 구동되는 스크립트입니다.서버사이드 스크립트는 DB를 액세스 하는 게 주요 목적이고,클라이언트 사이드 스크립트는 브라우저의 객체를 제어하는데 쓰입니다.서버 사이드와 클라이언트의 데이터 교환은 HTTPS로 하는데요!여기서 HTTP의 한계를 알아보겠습니다.HTTP의 한계HTTP의 뒤 두 글자 Transfer Protocol.HTTP의 대전제는 “URL 및 부가정보를 통해 사용자가 원하는 페이지를 서버에요청한다,그리고 서버는 해당 요청에응답한다”입니다.사용자가 URL을 요청할 때에만!서버에서 해당 페이지를 꺼내주는 식이라는 겁니다.거꾸로\xa0말하자면,\xa0사용자는\xa0서버로부터\xa0새로운\xa0정보를\xa0받아보기\xa0위해서,\xa0반드시,\xa0새로운\xa0URL을\xa0요청해야\xa0한다는\xa0말과\xa0같습니다.예전에 로그인할 때 아이디 중복확인하는 거 해보셨죠?그때 서버에게 중복 검사를 요청하기 위해서 새 페이지를 요청해야만 했었는데,회원 정보 작성 중에는 페이지를 이동할 수 없었기 때문에새로 요청한 페이지를 팝업창으로 띄웠던 것입니다.(요즘 사이트들은 대부분 팝업창 없이 검사가 가능합니다. 이것이 바로\xa0 Ajax를 이용했기 때문이죠!!!)AJAX그 당시에 떠오르기 시작한 구글은 HTTP 규약을 뛰어넘는 방안을 제안합니다.이름하여AJAX입니다.AJAX를 쓰면, 유저는 새로운 HTML을 서버로부터 받는 것이 아닙니다.즉, 유저는 새로운 웹페이지로 이동하는 것이 아닙니다.대신, 동일한 웹페이지 내에서 DOM을 변경하게 됩니다.요청 페이지에서 이름 칸에 ‘쮸’를 쓰고, 내용에 ‘안녕하세요. 쮸입니다’라고 썼다고 해봅시다.사용자의 이벤트로부터 Javascript는 해당 이름과 내용이 쓰인 DOM을 읽습니다.그리고는 XMLHttpRequest 객체를 통해 웹서버에 해당 이름과 내용을 전송합니다.웹서버는 요청을 처리하고 XML, Text 혹은 JSON을 XMLHttpRequest 객체에 전송합니다.그러면, Javascript가 해당 응답 정보를 DOM에 씁니다.그렇게 결과페이지가 만들어집니다.\u200bAJAX를 쓰면 새로운 HTML을 서버로부터 받아야 하는 것이 아닙니다.동일한 페이지의 일부를 수정할 수도 있는 가능성이 생깁니다.결과적으로 사용자 입장에서는페이지 이동이 발생되지 않고 페이지 내부 변화만 일어나게 됩니다.HTML 페이지 전체를 다 바꿔야 하는 것이 아니라 부분만 바꿀 수 있게 되는 것입니다.이렇게 따로 페이지의 이동 없이 페이지 내부에서 검사를 하여 결과를 출력하는 것을 볼 수 있죵?아이디 중복체크하려면 필히 서버 쪽 DB와 통신하기 위해서 웹서버 동작이 필요한데,이때 페이지를 바꾸지 않고 요청 결과만 그대로 가져와서 띄우면 되게 됩니다.그 외에도 비밀번호 강도 확인, 검색어 실시간 추천, 마우스 커서나 스크롤바 위치에 반응하는 그림, 지도 표시 서비스 등등 다양합니다.<정리>Ajax는 웹 페이지 전체를다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있게 해 줍니다.즉 Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분에만 표시할 수 있습니다.이때 서버와는 다음과 같은 다양한 형태의 데이터를 주고받을 수 있습니다.JSONXMLHTML텍스트 파일 등Ajax의 장점Ajax를 이용하면 다음과 같은 장점이 있습니다.\u200b1.웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있습니다.2. 웹 페이지가 로드된 후에 서버로 데이터 요청을 보낼 수 있습니다. (Post를 통해 값을 서버 쪽으로 전달해 처리되고 받아올 수 있음)3. 웹 페이지가 로드된 후에 서버로부터 데이터를 받을 수 있습니다.4. 백그라운드 영역에서 서버로 데이터를 보낼 수 있습니다.Ajax의 단점Ajax를 이용하면 여러 장점을 가지지만, Ajax로도 다음과 같은 일들은 처리할 수 없습니다.\u200b1.Ajax는 클라이언트가 서버에 데이터를 요청하는 클라이언트 풀링 방식(사용자가 직접 요청)을 사용하므로,서버 푸시 방식(푸시알람 같은)의 실시간 서비스는 만들 수 없습니다.2. Ajax로는 바이너리 데이터를 보내거나 받을 수 없습니다.3. Ajax 스크립트가 포함된 서버가 아닌 다른 서버로 Ajax 요청을 보낼 수는 없습니다.4.클라이언트의 PC로 Ajax 요청을 보낼 수는 없습니다.Ajax 구성 요소- 웹 페이지의 표현을 위한HTML과 CSS- 데이터에 접근하거나 화면 구성을 동적으로 조작하기 위해 사용되는DOM 모델- 데이터의 교환을 위한JSON이나 XML- 웹 서버와의 비동기식 통신을 위한XMLHttpRequest 객체- 위에서 언급한 모든 기술을 결합하여 사용자의 작업 흐름을 제어하는 데 사용되는자바스크립트1 : 사용자에 의한 요청 이벤트가 발생합니다. (-> jju240 아이디 생성 요청함)2 : 요청 이벤트가 발생하면 이벤트 핸들러에 의해 자바스크립트가 호출됩니다.3 : 자바스크립트는 XMLHttpRequest 객체를 사용하여 서버로 요청을 보냅니다.이때 웹 브라우저는 요청을 보내고 나서,서버의 응답을 기다릴 필요 없이다른 작업을 처리할 수 있습니다.4 : 서버는 전달받은 XMLHttpRequest 객체를 가지고 Ajax 요청을 처리합니다.5,6 : 서버는 처리한 결과를 HTML, XML 또는 JSON 형태의 데이터로 웹 브라우저에 전달합니다.이때 전달되는 응답은 새 페이지 전부 보내는 것이 아니라 필요한 데이터만을 전달합니다.(->이미사용 중이라는 문구)7 : 서버로부터 전달받은 데이터를 가지고 웹 페이지의 일부분만을 갱신하는 자바스크립트를 호출합니다.8 : 최종으로 웹 페이지의 일부분만이 다시 로딩되어 표시됩니다. (-> 이미 사용 중인 아이디입니다!)XMLHttpRequest 객체Ajax의 가장 핵심적인 구성 요소는 바로 XMLHttpRequest 객체입니다.Ajax에서 XMLHttpRequest 객체는웹 브라우저가 서버와 데이터를 교환할 때 사용됩니다.웹 브라우저가 백그라운드에서 계속해서 서버와 통신할 수 있는 것은 바로 이 객체를 사용하기 때문입니다.let httpRequest = new XMLHttpRequest();이상으로 서버사이드, 클라이언트의 개념과 그 둘이 어떻게 데이터를 교환하는지 알아보았습니다.⭐⭐⭐⭐⭐ 이번 글은 이해하고 적는 것에 초점을 두었기 때문에 시간이 많이 걸렸었는데용\xa0ㅎㅎ😥\\중요한 개념이니 꼭 숙지하시는데 도움이 되었으면 좋겠습니다~!!!그럼 오늘도 수고하셨습니다~참고 웹사이트:http://tcpschool.com/ajax/ajax_intro_works', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 3801, 1130, 5847, 1056, 13238, 424, 50874, 623, 10996, 375, 2939, 732, 37762, 46008, 760, 1202, 50048, 5073, 24108, 2373, 2409, 3328, 1130, 5954, 28837, 3328, 696, 32961, 1051, 924, 1119, 732, 3231, 905, 773, 22556, 3461, 2272, 696, 4892, 22226, 1015, 721, 41065, 455, 2703, 696, 3405, 10816, 838, 18296, 37305, 2030, 56794, 16444, 4605, 1719, 20032, 1332, 6891, 27778, 392, 51257, 42980, 41728, 95473, 16444, 376, 6055, 49544, 16444, 905, 20903, 853, 373, 12258, 3609, 2373, 5696, 696, 1546, 3016, 5133, 2373, 2414, 10902, 730, 6319, 634, 17032, 1060, 2873, 375, 9251, 4767, 56794, 16444, 2030, 18296, 16444, 657, 4262, 858, 4148, 392, 378, 375, 56794, 16444, 369, 16483, 374, 44590, 370, 374, 6055, 49544, 369, 16167, 942, 370, 4387, 41728, 5547, 1130, 657, 924, 375, 6055, 49544, 369, 16167, 942, 370, 905, 13385, 1075, 924, 696, 33278, 5414, 15447, 715, 2069, 22556, 40433, 1548, 1119, 732, 38217, 2373, 11235, 5414, 10269, 14010, 375, 13908, 41281, 47201, 4183, 56386, 369, 403, 1238, 10832, 370, 905, 773, 50747, 375, 379, 375, 18296, 16444, 369, 23423, 374, 44590, 370, 374, 95473, 369, 1050, 40041, 370, 4387, 41728, 16192, 5547, 1130, 657, 924, 375, 95473, 16444, 657, 2926, 31158, 25430, 17681, 11574, 13203, 369, 24961, 373, 20820, 1222, 634, 17206, 370, 4605, 2069, 1877, 373, 21135, 1371, 369, 16167, 942, 24146, 1210, 373, 12847, 3051, 1222, 370, 696, 9425, 14010, 375, 13908, 1965, 798, 10978, 657, 11154, 373, 21479, 373, 30967, 373, 14138, 373, 19206, 375, 12716, 1222, 634, 773, 50747, 375, 18909, 373, 95473, 2030, 6055, 49544, 657, 11574, 13203, 715, 5372, 32906, 696, 3868, 2109, 868, 773, 643, 375, 6055, 49544, 16444, 10978, 4605, 16383, 853, 855, 2373, 3051, 16524, 33468, 1371, 696, 1770, 2024, 1067, 54110, 95473, 16444, 10978, 4605, 16383, 853, 855, 2373, 3051, 16524, 33468, 4605, 3387, 8789, 24835, 60354, 375, 51257, 79184, 4605, 5465, 1130, 15913, 15533, 657, 59588, 657, 1332, 1282, 13452, 657, 3897, 2373, 2414, 56794, 16444, 59588, 2030, 18296, 37305, 12870, 2158, 25430, 11301, 14010, 375, 95473, 37305, 59588, 657, 95473, 41728, 11235, 5414, 35730, 13452, 657, 59588, 634, 853, 373, 6055, 49544, 16444, 59588, 657, 21014, 962, 1415, 41728, 11235, 5414, 35730, 13452, 657, 59588, 10996, 375, 95473, 37305, 59588, 657, 12847, 4605, 92284, 691, 657, 869, 7245, 6801, 634, 853, 373, 6055, 49544, 16444, 59588, 657, 61559, 730, 42225, 4605, 23245, 1130, 15913, 2112, 10996, 375, 95473, 16444, 2030, 56794, 730, 7957, 10547, 732, 60728, 715, 691, 15913, 740, 362, 5429, 712, 17086, 730, 13602, 4605, 5337, 13910, 50747, 375, 64157, 730, 13602, 64157, 730, 2448, 1546, 18302, 31113, 28607, 375, 64157, 730, 7991, 1050, 657, 1488, 20654, 2425, 24688, 33377, 4605, 2364, 7332, 905, 9062, 657, 13203, 4605, 18296, 2373, 740, 1774, 10348, 373, 3011, 18296, 657, 5299, 8254, 2373, 99822, 10348, 9583, 10996, 375, 16167, 942, 905, 3293, 696, 8254, 2870, 1105, 2373, 1043, 362, 95473, 41728, 5299, 13203, 4605, 9596, 823, 657, 23890, 21212, 7356, 375, 1387, 36647, 1216, 1130, 942, 838, 373, 7332, 657, 18296, 715, 4560, 4650, 3231, 4605, 1374, 25539, 722, 4313, 373, 8887, 373, 4650, 3293, 696, 8254, 21046, 4375, 1216, 1548, 1119, 50747, 375, 12926, 2373, 33063, 2870, 1105, 23807, 27013, 9506, 1130, 657, 1022, 67157, 5797, 12099, 392, 16591, 18296, 2373, 1060, 27013, 4830, 4605, 8254, 76766, 4313, 1956, 13203, 4605, 8254, 21046, 1043, 5039, 15913, 373, 35457, 3231, 6016, 1126, 97300, 13203, 4605, 5346, 2870, 868, 1107, 2957, 722, 1668, 2373, 29650, 8254, 1075, 13203, 4605, 32583, 3239, 13456, 9534, 3245, 5623, 924, 10996, 21339, 5438, 8050, 1371, 732, 5255, 32583, 3239, 2705, 4830, 905, 1995, 14010, 375, 4383, 634, 2264, 582, 62632, 4605, 2785, 2662, 722, 1668, 634, 12099, 11258, 370, 75983, 36226, 799, 5569, 2373, 15454, 722, 2104, 1075, 16993, 732, 17086, 87364, 696, 33094, 657, 8800, 696, 11137, 14010, 375, 17787, 22226, 75983, 36226, 10996, 375, 75983, 36226, 4605, 2112, 838, 373, 19589, 657, 4650, 15447, 696, 18296, 715, 4560, 1374, 657, 924, 634, 10454, 375, 18909, 373, 19589, 657, 4650, 11574, 7696, 715, 51034, 657, 924, 634, 10454, 375, 27299, 373, 9725, 1075, 11574, 7696, 1080, 41728, 27591, 696, 8171, 1130, 1060, 2873, 375, 740, 1774, 13203, 41728, 3730, 10940, 2373, 2376, 49854, 18420, 4605, 2112, 853, 373, 3311, 2373, 2376, 3801, 1130, 5847, 375, 58301, 10996, 18420, 3885, 9347, 3401, 844, 64429, 375, 16167, 942, 730, 6594, 715, 4560, 46456, 657, 5299, 3730, 1548, 3311, 634, 44037, 27591, 696, 3405, 50747, 375, 3011, 657, 20100, 88354, 42225, 4605, 2364, 11574, 95473, 2373, 5299, 3730, 1548, 3311, 696, 24134, 14010, 375, 51257, 95473, 657, 8254, 696, 5547, 48199, 20100, 373, 11353, 7597, 15214, 696, 20100, 88354, 42225, 2373, 24134, 14010, 375, 27150, 373, 46456, 905, 5299, 16352, 3231, 4605, 27591, 2373, 35027, 375, 10008, 3336, 7696, 905, 2069, 52232, 76456, 75983, 36226, 4605, 2112, 838, 4650, 15447, 696, 18296, 715, 4560, 69597, 1137, 691, 657, 924, 634, 10454, 375, 74038, 1075, 13203, 730, 5720, 4605, 10122, 2870, 8952, 773, 657, 1995, 35604, 45523, 375, 29635, 41281, 7332, 5106, 41728, 657, 7696, 5346, 634, 3449, 13452, 698, 1145, 853, 13203, 5424, 5005, 1043, 5735, 1060, 2873, 375, 24961, 13203, 4532, 4605, 694, 39655, 691, 657, 924, 634, 1579, 789, 2578, 1043, 20867, 868, 773, 1060, 970, 657, 924, 10996, 375, 5366, 5658, 13203, 730, 5346, 2705, 13203, 5424, 41728, 4830, 4605, 22356, 3336, 4605, 17653, 1130, 657, 924, 696, 2109, 868, 773, 796, 475, 392, 5763, 1689, 27013, 40269, 1130, 38835, 55216, 18296, 3609, 12847, 2030, 7514, 76766, 4313, 11574, 95473, 14288, 634, 2327, 1075, 896, 373, 17540, 13203, 4605, 8766, 698, 1145, 853, 8254, 3336, 1043, 5476, 44700, 49354, 838, 9312, 2873, 375, 799, 2068, 15169, 10239, 63320, 19570, 2927, 373, 47700, 17557, 3093, 373, 25801, 15774, 902, 70806, 1987, 3897, 2373, 7667, 1130, 657, 5124, 373, 6577, 10269, 3670, 7429, 2841, 14010, 39065, 27896, 391, 67884, 1817, 657, 11574, 13203, 4532, 4605, 7237, 86183, 1130, 698, 1145, 94925, 373, 11574, 13203, 730, 47792, 1043, 696, 21522, 2870, 868, 773, 1060, 844, 6916, 375, 18909, 62632, 4605, 2785, 16559, 2599, 33388, 7179, 11693, 41728, 18296, 2030, 7514, 22226, 373, 855, 3336, 4605, 11574, 13203, 730, 47792, 2373, 1043, 10269, 2870, 868, 773, 50747, 375, 17540, 18296, 2030, 657, 2775, 1548, 1119, 732, 2841, 1075, 7075, 730, 7957, 4605, 33052, 696, 868, 773, 50747, 375, 34613, 52991, 24961, 20151, 2754, 11038, 1222, 67884, 1817, 730, 7306, 67884, 1817, 4605, 2785, 16559, 2775, 1548, 1119, 732, 7306, 634, 773, 50747, 76456, 378, 375, 51257, 13203, 4532, 4605, 2257, 86183, 1130, 698, 1145, 94925, 373, 11574, 13203, 730, 47792, 1043, 696, 21522, 2870, 868, 773, 50747, 375, 379, 375, 11574, 13203, 905, 17099, 16524, 1452, 2373, 18296, 715, 7957, 8254, 696, 17681, 868, 773, 50747, 375, 688, 19889, 4605, 2364, 7812, 696, 18296, 3609, 13456, 7820, 999, 5547, 13452, 853, 69597, 3009, 868, 773, 1040, 370, 380, 375, 11574, 13203, 905, 17099, 16524, 1452, 2373, 18296, 715, 4560, 7957, 4605, 1374, 696, 868, 773, 50747, 375, 381, 375, 2599, 33388, 7179, 11693, 41728, 18296, 715, 7957, 4605, 17681, 868, 773, 50747, 375, 67884, 1817, 730, 13263, 67884, 1817, 4605, 2785, 16559, 2690, 7306, 696, 2034, 2597, 373, 62632, 715, 720, 2775, 1548, 1119, 732, 955, 1371, 732, 5547, 2870, 868, 1107, 50747, 76456, 378, 375, 67884, 1817, 657, 56794, 905, 18296, 2373, 7957, 4605, 8254, 1130, 657, 56794, 3320, 3890, 5073, 369, 16167, 942, 905, 3492, 8254, 370, 696, 1821, 1130, 8158, 373, 95473, 83791, 5073, 369, 6953, 954, 5006, 1324, 1119, 732, 370, 730, 17557, 3670, 657, 2069, 868, 1107, 50747, 375, 379, 375, 62632, 715, 657, 5308, 2088, 760, 7957, 4605, 3399, 16519, 1374, 696, 868, 1107, 50747, 375, 380, 375, 62632, 59588, 905, 4666, 16524, 18296, 905, 2993, 2126, 18296, 715, 62632, 8254, 696, 17681, 868, 657, 1107, 50747, 375, 381, 375, 6055, 49544, 730, 4769, 715, 62632, 8254, 696, 17681, 868, 657, 1107, 50747, 375, 67884, 1817, 4394, 9517, 374, 11574, 13203, 730, 5233, 696, 3125, 24961, 1548, 20772, 374, 7957, 2373, 10625, 1130, 16519, 9836, 4394, 696, 1368, 41281, 15597, 76766, 1902, 1821, 13452, 657, 53148, 5927, 374, 7957, 730, 10547, 696, 3125, 34613, 37891, 20100, 374, 11574, 18296, 2030, 730, 1202, 50048, 1286, 7514, 696, 3125, 52991, 88354, 42225, 374, 1144, 41728, 10198, 1075, 2904, 3755, 696, 15581, 22226, 7332, 730, 3644, 11019, 696, 23245, 1130, 657, 1736, 1821, 13452, 657, 942, 1987, 4183, 56386, 378, 756, 7332, 2373, 14095, 8254, 6594, 905, 3449, 14010, 375, 6169, 391, 1056, 13238, 379, 381, 377, 23807, 16769, 8254, 3117, 370, 379, 756, 8254, 6594, 905, 3449, 16559, 6594, 22437, 1030, 2373, 9428, 47201, 4183, 56386, 905, 39038, 837, 1318, 375, 380, 756, 47201, 4183, 56386, 657, 20100, 88354, 42225, 4605, 1821, 22226, 18296, 715, 8254, 696, 63149, 375, 17540, 11574, 61559, 657, 8254, 696, 3399, 853, 11030, 373, 95473, 730, 16352, 696, 30567, 2327, 2705, 6472, 3644, 696, 5547, 2870, 868, 773, 50747, 375, 381, 756, 18296, 657, 7820, 6912, 732, 20100, 88354, 42225, 4605, 2034, 853, 62632, 8254, 696, 5547, 14010, 375, 382, 373, 383, 756, 18296, 657, 5547, 1075, 3336, 4605, 15447, 373, 20100, 4978, 15214, 7075, 730, 7957, 715, 11574, 61559, 2373, 7820, 14010, 375, 17540, 7820, 13452, 657, 16352, 732, 1956, 13203, 7853, 3399, 657, 924, 634, 1579, 789, 2327, 1075, 7957, 1043, 696, 7820, 14010, 21339, 24802, 14360, 16167, 70476, 21212, 15837, 370, 384, 756, 18296, 715, 4560, 7820, 6912, 732, 7957, 4605, 2034, 853, 11574, 13203, 730, 47792, 1043, 696, 21522, 1130, 657, 47201, 4183, 56386, 4605, 39038, 14010, 375, 385, 756, 9350, 13456, 11574, 13203, 730, 47792, 1043, 634, 2257, 86183, 13452, 721, 10269, 837, 1318, 375, 6169, 391, 3519, 1821, 1126, 798, 23807, 10996, 362, 370, 52991, 88354, 42225, 67884, 1817, 730, 2472, 8771, 1965, 798, 4394, 9517, 657, 2264, 20100, 88354, 42225, 10996, 375, 67884, 1817, 41728, 20100, 88354, 42225, 657, 51257, 61559, 905, 18296, 2030, 7957, 4605, 10547, 2870, 1105, 1821, 837, 1318, 375, 51257, 61559, 905, 2599, 33388, 7179, 41728, 3063, 5414, 18296, 2030, 7514, 2870, 868, 773, 657, 924, 732, 2264, 650, 42225, 4605, 1821, 76766, 1668, 10996, 375, 3538, 3825, 13427, 801, 1539, 20100, 88354, 60621, 13766, 13456, 18296, 37305, 373, 56794, 730, 9711, 1548, 855, 3136, 634, 3656, 7957, 4605, 10547, 1130, 59985, 5337, 19850, 50747, 375, 48689, 48689, 48689, 48689, 48689, 2626, 2272, 732, 4630, 48199, 1015, 657, 924, 2373, 18073, 696, 1546, 2957, 722, 1668, 2373, 1590, 634, 1719, 14012, 2957, 15913, 1018, 3301, 11881, 608, 460, 421, 31724, 1075, 9711, 96201, 3102, 4520, 25661, 954, 15913, 3577, 634, 970, 2957, 8235, 1104, 13910, 50747, 455, 11258, 8179, 2247, 720, 16400, 1130, 5797, 50747, 455, 16874, 11574, 79184, 387, 13656, 387, 9413, 14298, 1557, 22662, 375, 3256, 376, 2740, 1817, 376, 2740, 1817, 424, 52062, 424, 7125], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:52592 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:49:56 logger.py:39] Received request cmpl-d228b1d0bbd043aba59c901bf101d797-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ### 👉 스크립트란?\n\n---\n\n- 특정 작업을 자동으로 수행하기 위해 작성된 프로그램이나 명령어의 집합\n- 스크립트는 주로 단순 반복 작업이나 일련의 과정을 자동화하기 위해 사용되며, 보통 프로그래밍 언어보다 간단한 구조를 가지고 있음\n- 스크립트는 일반적으로 독립적인 애플리케이션보다는 다른 소프트웨어 환경 내에서 실행\n- 인터프리터를 통해 한 줄씩 실행됨\n\\u003cbr>\n\\u003cbr>\n\n### 👉 서버 사이드 스크립트란?\n\n---\n\n- 웹 서버에서 실행되는 스크립트 언어\n- 클라이언트(웹 브라우저)의 요청을 받아 서버에서 처리하고 그 결과를 다시 클라이언트에게 전송하는 역할\n- 웹 개발에서 널리 사용되고 있음\n- 동적인 웹 페이지 생성, 데이터 처리, 사용자 인증 등 다양한 기능을 구현하는 데 핵심적인 역할을 함\n- 대표적으로는 PHP, Python(Django, Flask), Ruby(Ruby on Rails), Java(JSP) 등이 있음\n\\u003cbr>\n\\u003cbr>\n\n### 👉 서버 사이드 스크립트의 주요 특징\n\n---\n\n- 서버에서 실행\n    - 서버 사이드 스크립트는 웹 서버 내에서 실행되며, 클라이언트는 실행 결과만 받음\n- 다양한 언어 지원\n    - PHP, Python, Ruby, Java 등 다양한 언어로 작성할 수 있음\n- 데이터베이스 연동\n    - 서버 사이드 스크립트는 데이터베이스와 상호작용하여 데이터를 저장, 수정, 삭제할 수 있음\n- 보안성\n    - 소스 코드가 클라이언트에게 노출되지 않아 보안에 유리\n- 서버 자원 활용\n    - 서버의 CPU, 메모리 등 자원을 활용하여 복잡한 작업을 처리할 수 있음\n    \\u003cbr>\n    \\u003cbr>\n\n### 👉 클라이언트 사이드 스크립트란?\n\n---\n\n- 웹 브라우저에서 실행되는 스크립트 언어\n- 서버로부터 웹 페이지를 받아온 후, 브라우저에서 스크립트를 실행하여 동적으로 웹 페이지를 변경하거나 사용자와 상호작용\n- 동적인 웹 페이지 구현, 사용자 인터페이스 개선, 폼 유효성 검사 등 다양한 기능을 구현할 수 있음\n- 웹 개발에서는 일반적으로 서버 사이드 스크립트와 클라이언트 사이드 스크립트를 함께 사용\n- 대표적으로는 JavaScript가 있으며, jQuery, React, AngularJS, Vue.js 등의 라이브러리와 프레임워크가 많이 사용됨\n\\u003cbr>\n\\u003cbr>\n\n### 👉 클라이언트 사이드 스크립트의 주요 특징\n\n---\n\n- 브라우저에서 실행\n    - 클라이언트 사이드 스크립트는 사용자의 웹 브라우저에서 실행됨\n- JavaScript 사용\n    - 대부분의 클라이언트 사이드 스크립트는 JavaScript로 작성됨\n- 빠른 응답성\n    - 서버와의 통신 없이 브라우저에서 직접 실행되므로 빠른 응답이 가능\n- 사용자 상호 작용\n    - 마우스 클릭, 키보드 입력 등 사용자 이벤트에 즉각적으로 반응할 수 있음\n- 제한된 접근권한\n    - 보안상의 이유로 클라이언트 사이드 스크립트는 사용자 컴퓨터의 자원에 제한적으로 접근', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 5941, 76629, 593, 59588, 1868, 392, 560, 560, 4961, 560, 560, 374, 11126, 3644, 696, 4440, 13456, 9425, 76766, 1902, 6016, 16524, 5371, 37891, 62305, 730, 34617, 560, 374, 59588, 657, 8011, 8019, 7930, 3644, 37891, 43699, 730, 3540, 696, 4440, 1255, 76766, 1902, 1821, 13452, 1877, 373, 6586, 42980, 10978, 30885, 5488, 1075, 5630, 4605, 2034, 853, 773, 1040, 560, 374, 59588, 657, 4400, 41281, 12125, 1965, 798, 38217, 1280, 4264, 2126, 22839, 4576, 1080, 41728, 12944, 560, 374, 4517, 23615, 1173, 4605, 2364, 764, 1949, 64101, 12944, 837, 463, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 18296, 16444, 59588, 1868, 392, 560, 560, 4961, 560, 560, 374, 11574, 18296, 41728, 12944, 13452, 657, 59588, 10978, 560, 374, 56794, 369, 51257, 61559, 370, 730, 8254, 696, 69597, 18296, 41728, 5547, 48199, 855, 3336, 4605, 2257, 56794, 2373, 1060, 24134, 1130, 657, 6034, 560, 374, 11574, 4003, 41728, 23487, 1821, 13452, 853, 773, 1040, 560, 374, 84906, 798, 11574, 13203, 16769, 373, 7957, 5547, 373, 7332, 7741, 1222, 2841, 1075, 4198, 696, 19495, 1130, 657, 1736, 8771, 1965, 798, 6034, 696, 1470, 560, 374, 3163, 41281, 657, 21479, 373, 14138, 369, 78680, 10380, 373, 58607, 5445, 30967, 369, 65566, 450, 807, 50760, 5445, 11154, 369, 17770, 409, 370, 1222, 634, 773, 1040, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 18296, 16444, 59588, 730, 7245, 8574, 560, 560, 4961, 560, 560, 374, 18296, 41728, 12944, 560, 31, 374, 18296, 16444, 59588, 657, 11574, 18296, 1080, 41728, 12944, 13452, 1877, 373, 56794, 657, 12944, 3336, 1043, 1374, 1040, 560, 374, 2841, 1075, 10978, 3157, 560, 31, 374, 21479, 373, 14138, 373, 30967, 373, 11154, 1222, 2841, 1075, 10978, 715, 6016, 2870, 868, 773, 1040, 560, 374, 51359, 24108, 560, 31, 374, 18296, 16444, 59588, 657, 51359, 2030, 14885, 14052, 22226, 7957, 4605, 11503, 373, 10122, 373, 14829, 2870, 868, 773, 1040, 560, 374, 13949, 1210, 560, 31, 374, 6126, 12291, 905, 56794, 2373, 1060, 12448, 13452, 698, 1145, 1023, 13949, 2373, 7167, 560, 374, 18296, 10622, 4703, 560, 31, 374, 18296, 730, 18313, 373, 21497, 1222, 10622, 696, 4703, 22226, 12037, 1075, 3644, 696, 5547, 2870, 868, 773, 1040, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 56794, 16444, 59588, 1868, 392, 560, 560, 4961, 560, 560, 374, 11574, 61559, 41728, 12944, 13452, 657, 59588, 10978, 560, 374, 18296, 715, 4560, 11574, 13203, 4605, 69597, 2263, 1452, 373, 61559, 41728, 59588, 4605, 12944, 22226, 1368, 41281, 11574, 13203, 4605, 8171, 1130, 16519, 7332, 2030, 14885, 14052, 560, 374, 84906, 798, 11574, 13203, 19495, 373, 7332, 51299, 4982, 373, 8809, 24146, 1210, 4830, 1222, 2841, 1075, 4198, 696, 19495, 2870, 868, 773, 1040, 560, 374, 11574, 4003, 41728, 657, 4400, 41281, 18296, 16444, 59588, 2030, 56794, 16444, 59588, 4605, 2110, 1821, 560, 374, 3163, 41281, 657, 20820, 905, 773, 5718, 373, 27010, 373, 21676, 373, 43047, 17770, 373, 46552, 375, 12716, 53641, 67175, 2030, 18286, 13518, 905, 1719, 1821, 837, 463, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 56794, 16444, 59588, 730, 7245, 8574, 560, 560, 4961, 560, 560, 374, 61559, 41728, 12944, 560, 31, 374, 56794, 16444, 59588, 657, 7332, 730, 11574, 61559, 41728, 12944, 837, 463, 560, 374, 20820, 1821, 560, 31, 374, 5255, 730, 56794, 16444, 59588, 657, 20820, 715, 6016, 837, 463, 560, 374, 8570, 16352, 1210, 560, 31, 374, 18296, 2030, 730, 7514, 2705, 61559, 41728, 3492, 12944, 13452, 8158, 8570, 16352, 634, 1995, 560, 374, 7332, 14885, 9368, 560, 31, 374, 25801, 9144, 373, 28674, 13385, 1222, 7332, 6594, 2373, 24385, 41281, 7667, 2870, 868, 773, 1040, 560, 374, 8673, 16524, 10625, 1810, 1075, 560, 31, 374, 13949, 84890, 95483, 56794, 16444, 59588, 657, 7332, 9231, 730, 10622, 2373, 8673, 41281, 10625], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:52598 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:49:56 engine.py:275] Added request cmpl-76030d5c250142f9bbfd78c9ea0af57d-0.
INFO 02-16 22:49:56 engine.py:275] Added request cmpl-d228b1d0bbd043aba59c901bf101d797-0.
INFO 02-16 22:49:56 logger.py:39] Received request cmpl-48bdd89d97cf47eb9262e6ba373c1291-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        서버 사이드 개발은 웹 애플리케이션의 백엔드 측을 구축하는 프로그래밍 작업으로, 사용자 요청을 처리하고 데이터를 제공하는 역할을 합니다. 이 글에서는 서버 사이드 개발의 개념과 중요성에 대해 알아보고, 백엔드 개발의 주요 내용을 다룰 것입니다.\n서버 사이드 개발의 개념\n서버 사이드 개발은 웹 애플리케이션 또는 다른 네트워크 기반 애플리케이션에서 클라이언트 요청을 처리하고 데이터를 제공하는 부분을 담당하는 개발 프로세스입니다. 서버 사이드 개발은 서버 측에서 실행되며, 클라이언트의 요청에 응답하고 필요한 데이터를 처리하고 반환합니다. 서버 사이드 개발은 다양한 언어와 프레임워크를 사용하여 이루어집니다. 주로 사용되는 언어로는 Java, Python, Ruby, PHP 등이 있으며, 프레임워크로는 Spring, Django, Ruby on Rails, Laravel 등이 있습니다. 이러한 언어와 프레임워크는 개발자가 효율적이고 안정적인 서버 사이드 애플리케이션을 구축할 수 있도록 도와줍니다. 서버 사이드 개발은 다양한 기능과 기술을 다룹니다. 데이터베이스와의 상호작용, 보안 및 인증, 성능 최적화, API 설계, 비즈니스 로직 구현 등이 그중 일부입니다. 또한, 서버 사이드 개발은 확장성과 활용성을 고려하여 서버 아키텍처를 설계하고, 클라이언트와의 효율적인 통신을 위해 RESTful API, 웹 소켓 등과 같은 통신 프로토콜을 사용하기도 합니다.\n백엔드 프로그래밍 언어와 프레임워크\n주로 사용되는 백엔드 프로그래밍 언어로는 Java, Python, Ruby, PHP, Node.js 등이 있습니다. 각 언어마다 특징과 장단점이 있으며, 개발자는 프로젝트의 요구 사항과 성격에 맞는 언어를 선택합니다. Java는 객체지향적이고 안정적인 성능을 제공하며, Python은 가독성이 높고 생산성이 좋습니다. Ruby는 간결하고 유연한 문법을 가지며, PHP는 웹 개발에 특화되어 있습니다. Node.js는 JavaScript 기반으로 동작하며, 비동기식 프로그래밍을 지원하여 높은 처리량과 확장성을 가집니다. 각 백엔드 프로그래밍 언어에는 해당 언어를 활용한 다양한 프레임워크가 존재합니다. 프레임워크는 개발자가 애플리케이션의 핵심 로직에 집중할 수 있도록 기본 구조와 기능을 제공합니다. 예를 들어, Java의 Spring 프레임워크는 의존성 주입(Dependency Injection), MVC 아키텍처 패턴, 데이터베이스 연동 등을 지원하여 개발자가 생산성을 높이고 품질 좋은 애플리케이션을 개발할 수 있도록 도와줍니다. Python의 Django, Ruby의 Ruby on Rails, PHP의 Laravel 등도 마찬가지로 각 언어에 대한 효율적인 개발 환경을 제공합니다.\n데이터베이스와의 연동\n백엔드 프로그래밍에서 데이터베이스와의 연동은 핵심적인 역할을 수행합니다. 데이터베이스는 애플리케이션의 데이터를 저장하고 관리하는 역할을 담당하며, 백엔드 개발자는 데이터베이스와의 연동을 통해 데이터를 읽고 쓰며 애플리케이션의 비즈니스 로직을 구현합니다. 데이터베이스와의 연동을 위해 백엔드 개발자는 SQL(Structured Query Language)을 사용합니다. SQL은 데이터베이스 관리 시스템(DBMS)과 상호 작용하기 위한 표준화된 언어로, 데이터베이스에 쿼리를 전달하고 결과를 받아오는 역할을 수행합니다. SQL을 사용하여 데이터베이스에 테이블을 생성하고 수정하며, 데이터를 삽입, 수정, 삭제하고 조회할 수 있습니다. 데이터베이스와의 연동은 일반적으로 DBMS와의 드라이버를 사용하여 이루어집니다. 백엔드 프로그래밍 언어에는 다양한 DBMS와의 연동을 지원하는 드라이버가 제공되며, 이를 활용하여 데이터베이스에 접속하고 쿼리를 실행합니다. 드라이버를 통해 데이터베이스와의 연결을 설정하고, SQL 문을 실행하여 데이터를 조회하거나 수정할 수 있습니다. 이를 통해 백엔드 개발자는 데이터베이스의 테이블과 컬럼을 활용하여 데이터를 조작하고 필요한 정보를 애플리케이션에 제공할 수 있습니다. 데이터베이스와의 연동은 애플리케이션의 데이터 관리와 동시에 데이터의 일관성, 안전성, 보안성을 보장하는 중요한 요소입니다. 백엔드 개발자는 데이터베이스 스키마 설계, 쿼리의 최적화, 트랜잭션 관리 등을 고려하여 데이터베이스와의 효율적이고 안정적인 연동을 구현해야 합니다. 또한, ORM(Object-Relational Mapping)을 활용하여 객체와 데이터베이스 간의 매핑을 자동화할 수도 있으며, 이를 통해 개발자는 보다 직관적이고 편리한 방식으로 데이터를 다룰 수 있습니다.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 95473, 16444, 4003, 732, 11574, 38217, 730, 2599, 65840, 4387, 696, 9472, 1130, 657, 42980, 3644, 13456, 373, 7332, 8254, 696, 5547, 48199, 7957, 4605, 4078, 1130, 657, 6034, 696, 1481, 375, 650, 2272, 41728, 657, 18296, 16444, 4003, 730, 9711, 1548, 2963, 1210, 2373, 2409, 5337, 853, 373, 2599, 65840, 4003, 730, 7245, 3311, 696, 48149, 924, 10996, 375, 560, 95473, 16444, 4003, 730, 9711, 560, 95473, 16444, 4003, 732, 11574, 38217, 4978, 2126, 15227, 8898, 38217, 41728, 56794, 8254, 696, 5547, 48199, 7957, 4605, 4078, 1130, 657, 2578, 696, 8065, 1130, 657, 4003, 33427, 10996, 375, 18296, 16444, 4003, 732, 18296, 4387, 41728, 12944, 13452, 1877, 373, 56794, 730, 8254, 2373, 16352, 48199, 2327, 1075, 7957, 4605, 5547, 48199, 30824, 14010, 375, 18296, 16444, 4003, 732, 2841, 1075, 10978, 2030, 18286, 13518, 4605, 1821, 22226, 68635, 375, 8011, 1821, 13452, 657, 10978, 715, 657, 11154, 373, 14138, 373, 30967, 373, 21479, 1222, 634, 773, 5718, 373, 18286, 13518, 715, 657, 16934, 373, 38493, 373, 30967, 807, 50760, 373, 82417, 1222, 634, 773, 50747, 375, 4476, 1075, 10978, 2030, 18286, 13518, 657, 33468, 905, 9687, 1965, 634, 853, 5957, 1965, 798, 18296, 16444, 38217, 696, 9472, 2870, 868, 773, 37728, 6153, 24244, 375, 18296, 16444, 4003, 732, 2841, 1075, 4198, 1548, 3755, 696, 694, 6516, 819, 375, 51359, 2030, 730, 14885, 14052, 373, 13949, 2425, 7741, 373, 11758, 64620, 373, 8682, 9449, 373, 18938, 54794, 19495, 1222, 634, 82729, 5720, 10996, 375, 3662, 373, 18296, 16444, 4003, 732, 12472, 1210, 1548, 4703, 1210, 696, 6581, 22226, 18296, 42188, 20151, 2351, 4605, 9449, 48199, 373, 56794, 2030, 730, 9687, 1965, 798, 7514, 696, 1902, 35231, 1993, 8682, 373, 11574, 92194, 1222, 1548, 1119, 732, 7514, 72829, 696, 1821, 1130, 46461, 1481, 375, 560, 3387, 65840, 42980, 10978, 2030, 18286, 13518, 560, 32512, 1821, 13452, 657, 2599, 65840, 42980, 10978, 715, 657, 11154, 373, 14138, 373, 30967, 373, 21479, 373, 19206, 375, 12716, 1222, 634, 773, 50747, 375, 2534, 10978, 34445, 8574, 1548, 42622, 634, 773, 5718, 373, 33468, 657, 10902, 730, 6453, 6318, 1548, 8984, 2373, 1867, 657, 10978, 4605, 3329, 14010, 375, 11154, 657, 42225, 698, 2368, 1965, 634, 853, 5957, 1965, 798, 11758, 696, 4078, 1130, 1877, 373, 14138, 732, 713, 2822, 35604, 2388, 853, 5865, 35604, 1104, 50747, 375, 30967, 657, 48360, 48199, 20211, 1075, 28664, 696, 2034, 1877, 373, 21479, 657, 11574, 4003, 2373, 24778, 13452, 721, 773, 50747, 375, 19206, 375, 12716, 657, 20820, 8898, 13456, 14288, 1130, 1877, 373, 1202, 50048, 1286, 42980, 696, 3157, 22226, 2388, 732, 5547, 1983, 1548, 12472, 1210, 696, 713, 11903, 375, 2534, 2599, 65840, 42980, 10978, 97300, 5299, 10978, 4605, 4703, 1075, 2841, 1075, 18286, 13518, 905, 5582, 14010, 375, 18286, 13518, 657, 33468, 905, 38217, 730, 8771, 54794, 2373, 5359, 2870, 868, 773, 37728, 4214, 5630, 2030, 4198, 696, 4078, 14010, 375, 1288, 4605, 1944, 373, 11154, 730, 16934, 18286, 13518, 657, 20665, 1210, 27218, 369, 97620, 74760, 5445, 49108, 42188, 20151, 2351, 13249, 373, 51359, 24108, 1222, 696, 3157, 22226, 33468, 905, 5865, 1210, 696, 7485, 853, 12326, 1104, 732, 38217, 696, 4003, 2870, 868, 773, 37728, 6153, 24244, 375, 14138, 730, 38493, 373, 30967, 730, 30967, 807, 50760, 373, 21479, 730, 82417, 1222, 720, 9190, 715, 2534, 10978, 2373, 2047, 9687, 1965, 798, 4003, 4576, 696, 4078, 14010, 375, 560, 64766, 35972, 2030, 730, 24108, 560, 3387, 65840, 42980, 41728, 51359, 2030, 730, 24108, 732, 8771, 1965, 798, 6034, 696, 9425, 14010, 375, 51359, 657, 38217, 730, 7957, 4605, 11503, 48199, 2645, 1130, 657, 6034, 696, 8065, 1130, 1877, 373, 2599, 65840, 33468, 657, 51359, 2030, 730, 24108, 696, 2364, 7957, 4605, 3405, 853, 2112, 1877, 38217, 730, 18938, 54794, 696, 19495, 14010, 375, 51359, 2030, 730, 24108, 696, 1902, 2599, 65840, 33468, 657, 14339, 369, 412, 47243, 29796, 20709, 370, 696, 1821, 14010, 375, 14339, 732, 51359, 2645, 5309, 369, 14947, 6865, 370, 1548, 14885, 9368, 76766, 3125, 16203, 1255, 16524, 10978, 715, 373, 51359, 2373, 100048, 4605, 7820, 48199, 3336, 4605, 1374, 40223, 657, 6034, 696, 9425, 14010, 375, 14339, 696, 1821, 22226, 51359, 2373, 6807, 696, 16769, 48199, 10122, 1130, 1877, 373, 7957, 4605, 30599, 373, 10122, 373, 14829, 48199, 20127, 2870, 868, 773, 50747, 375, 51359, 2030, 730, 24108, 732, 4400, 41281, 12847, 6865, 2030, 730, 32179, 4605, 1821, 22226, 68635, 375, 2599, 65840, 42980, 10978, 97300, 2841, 1075, 12847, 6865, 2030, 730, 24108, 696, 3157, 1130, 657, 32179, 905, 4078, 13452, 1877, 373, 38069, 4703, 22226, 51359, 2373, 18979, 48199, 100048, 4605, 12944, 14010, 375, 32179, 4605, 2364, 51359, 2030, 730, 5810, 696, 8587, 48199, 373, 14339, 1451, 696, 12944, 22226, 7957, 4605, 20127, 1130, 16519, 10122, 2870, 868, 773, 50747, 375, 38069, 2364, 2599, 65840, 33468, 657, 51359, 730, 6807, 1548, 82625, 696, 4703, 22226, 7957, 4605, 15597, 48199, 2327, 1075, 3231, 4605, 38217, 2373, 4078, 2870, 868, 773, 50747, 375, 51359, 2030, 730, 24108, 732, 38217, 730, 7957, 2645, 2030, 6873, 2373, 7957, 730, 27883, 1210, 373, 58935, 373, 13949, 1210, 696, 7859, 1130, 657, 2963, 1075, 9517, 10996, 375, 2599, 65840, 33468, 657, 51359, 17722, 1200, 9449, 373, 100048, 730, 64620, 373, 34626, 62345, 2481, 2645, 1222, 696, 6581, 22226, 51359, 2030, 730, 9687, 1965, 634, 853, 5957, 1965, 798, 24108, 696, 19495, 21046, 1481, 375, 3662, 373, 83200, 369, 10913, 374, 16631, 2016, 48808, 370, 696, 4703, 22226, 42225, 2030, 51359, 1682, 730, 1484, 4102, 696, 4440, 1255, 2870, 8952, 773, 5718, 373, 38069, 2364, 33468, 657, 1738, 37846, 1965, 634, 853, 9621, 1075, 5073, 13456, 7957, 4605, 48149, 868, 773, 50747, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:52608 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:49:56 logger.py:39] Received request cmpl-b9642068573740b0ac4b8de79afbf400-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        \n![](https://velog.velcdn.com/images/hope1213/post/54bce33a-07d8-4d3d-96c5-6a99b9d9cdc7/image.png)\n\n웹 개발을 할 때 가장 중요한 결정 중 하나는 어떤 작업을 서버 사이드(Server-side)에서 처리할지, 클라이언트 사이드(Client-side)에서 처리할지를 결정하는 것입니다. 이 글에서는 서버 사이드와 클라이언트 사이드의 차이점, 각 방식의 장단점, 그리고 어떤 상황에서 어떤 방식을 선택해야 하는지에 대해 살펴보겠습니다.\n\n#### 서버 사이드(Server-side)란?\n\n서버 사이드 프로그래밍은 웹 서버에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 클라이언트(사용자의 브라우저)에서 요청을 받을 때 실행됩니다. 서버 사이드 스크립트는 데이터베이스에 접근하고, 데이터를 처리하고, HTML 페이지를 동적으로 생성하는 데 사용됩니다.\n즉 웹에서 서버와 클라이언트는 정해진 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.\n\n\n**주요 언어 및 기술:**\n![](https://velog.velcdn.com/images/hope1213/post/6f8e3e86-7b7d-453a-8684-da3898c25af4/image.png)\n\n- PHP\n- Python (Django, Flask)\n- Ruby (Ruby on Rails)\n- Java (Spring)\n- Node.js\n\n**장점:**\n1. **보안**: 중요한 로직과 데이터베이스 접근이 서버에서 처리되어 클라이언트에서 접근할 수 없습니다.\n2. **데이터베이스 접근**: 서버에서 직접 데이터베이스와 상호작용할 수 있어 데이터 처리와 저장이 용이합니다.\n3. **호환성**: 모든 클라이언트가 동일한 서버 측 코드를 실행하므로 브라우저 호환성 문제를 줄일 수 있습니다.\n\n**단점:**\n1. **서버 부하**: 모든 처리가 서버에서 이루어지기 때문에 서버의 부하가 증가할 수 있습니다.\n2. **응답 시간**: 클라이언트가 요청을 보내고 서버가 응답할 때까지 시간이 걸릴 수 있습니다.\n\n#### 클라이언트 사이드(Client-side)란?\n\n클라이언트 사이드 프로그래밍은 사용자의 브라우저에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 HTML, CSS, JavaScript로 작성되며, 사용자의 인터페이스를 조작하고 사용자와 상호작용합니다.\n\n![](https://velog.velcdn.com/images/hope1213/post/d9319a2f-6c80-477b-987e-2102e2d24bbe/image.png) 일반적으로 Chrome과 같은 웹브라우저는 굉장히 많은 메모리를 차지합니다.\n\n단순히 탐색을 진행했을 뿐인데 다른 프로세스에 비해 굉장히 많은 메모리를 사용한다는 점에서 의문을 가질수 있습니다. 그 이유는 현재 Web쪽에 무거운 처리 대부분은 클라이언트 사이드 언어로 작업하기 때문입니다.\n\n\n**주요 언어 및 기술:**\n- HTML\n- CSS\n- JavaScript (React, Angular, Vue.js)\n\n\n**장점:**\n1. **빠른 응답**: 서버에 요청을 보내지 않고 브라우저에서 바로 처리하므로 응답 속도가 빠릅니다.\n2. **서버 부하 감소**: 많은 작업을 클라이언트에서 처리함으로써 서버의 부담을 줄일 수 있습니다.\n3. **향상된 사용자 경험**: 애니메이션, 실시간 업데이트 등 사용자 인터페이스를 더욱 풍부하게 만들 수 있습니다.\n\n**단점:**\n1. **보안 문제**: 클라이언트 사이드 코드가 브라우저에 노출되므로 보안에 취약할 수 있습니다.\n2. **브라우저 호환성**: 다양한 브라우저에서 동일하게 작동하도록 코드 작성이 어려울 수 있습니다.\n3. **제한된 성능**: 클라이언트의 기기 성능에 따라 처리 속도가 달라질 수 있습니다.\n\n#### 언제 서버 사이드를 선택해야 할까?\n\n- **보안이 중요한 경우**: 민감한 데이터나 중요한 비즈니스 로직이 포함된 경우 서버 사이드 처리가 필요합니다.\n- **데이터베이스 작업**: 데이터베이스와의 상호작용이 빈번하게 이루어질 때 서버 사이드가 적합합니다.\n- **복잡한 처리**: 복잡한 계산이나 대량의 데이터 처리가 필요할 때 서버 측에서 처리하는 것이 좋습니다.\n\n#### 언제 클라이언트 사이드를 선택해야 할까?\n\n- **실시간 상호작용**: 사용자와의 실시간 상호작용이 중요한 경우 클라이언트 사이드 처리가 필요합니다.\n- **인터페이스 동적 처리**: 동적인 사용자 인터페이스, 애니메이션, 실시간 업데이트 등은 클라이언트 사이드에서 처리하는 것이 좋습니다.\n- **서버 부하 분산**: 서버의 부하를 줄이고자 할 때 일부 처리를 클라이언트 사이드로 이동할 수 있습니다.\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 382, 381, 427, 828, 380, 380, 426, 374, 377, 384, 429, 385, 374, 381, 429, 380, 429, 374, 386, 383, 428, 382, 374, 383, 426, 386, 386, 427, 386, 429, 386, 18748, 428, 384, 376, 18958, 375, 441, 2345, 370, 560, 560, 51257, 4003, 696, 1051, 1105, 2472, 2963, 1075, 4024, 1126, 1799, 657, 3090, 3644, 696, 18296, 16444, 369, 23423, 374, 4261, 370, 41728, 5547, 93047, 373, 56794, 16444, 369, 16483, 374, 4261, 370, 41728, 5547, 93047, 4605, 4024, 1130, 657, 924, 10996, 375, 650, 2272, 41728, 657, 18296, 16444, 2030, 56794, 16444, 730, 29289, 373, 2534, 5073, 730, 42622, 373, 2210, 3090, 2876, 41728, 3090, 5073, 696, 3329, 21046, 691, 59985, 2373, 2409, 8926, 13910, 50747, 375, 560, 560, 3673, 18296, 16444, 369, 23423, 374, 4261, 370, 1868, 392, 560, 560, 95473, 16444, 42980, 732, 11574, 18296, 41728, 12944, 13452, 657, 12291, 4605, 6016, 1130, 657, 924, 696, 4536, 14010, 375, 650, 12291, 657, 56794, 369, 16167, 942, 730, 61559, 370, 41728, 8254, 696, 1374, 696, 1105, 12944, 837, 1318, 375, 18296, 16444, 59588, 657, 51359, 2373, 10625, 48199, 373, 7957, 4605, 5547, 48199, 373, 15447, 13203, 4605, 1368, 41281, 16769, 1130, 657, 1736, 1821, 837, 1318, 375, 560, 18909, 11574, 41728, 18296, 2030, 56794, 657, 24730, 11574, 13203, 715, 5372, 32906, 696, 3868, 2109, 868, 773, 643, 375, 560, 560, 560, 2484, 42008, 10978, 2425, 3755, 387, 2484, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 383, 431, 385, 430, 380, 430, 385, 383, 374, 384, 427, 384, 429, 374, 381, 382, 380, 426, 374, 385, 383, 385, 381, 374, 3695, 380, 385, 386, 385, 428, 379, 382, 3543, 381, 376, 18958, 375, 441, 2345, 370, 560, 560, 374, 21479, 560, 374, 14138, 688, 78680, 10380, 373, 58607, 370, 560, 374, 30967, 688, 65566, 450, 807, 50760, 370, 560, 374, 11154, 688, 60192, 370, 560, 374, 19206, 375, 12716, 560, 560, 2484, 50938, 387, 2484, 560, 378, 375, 1316, 1280, 1336, 2484, 387, 2963, 1075, 54794, 1548, 51359, 10625, 634, 18296, 41728, 5547, 13452, 721, 56794, 41728, 10625, 2870, 868, 1107, 50747, 375, 560, 379, 375, 1316, 64766, 35972, 10625, 2484, 387, 18296, 41728, 3492, 51359, 2030, 14885, 14052, 2870, 868, 773, 721, 7957, 5547, 2030, 11503, 634, 26188, 14010, 375, 560, 380, 375, 1316, 1818, 2401, 1210, 2484, 387, 2904, 56794, 905, 9725, 1075, 18296, 4387, 12291, 4605, 12944, 1130, 8158, 61559, 39833, 1210, 2372, 4605, 23006, 868, 773, 50747, 375, 560, 560, 2484, 29376, 387, 2484, 560, 378, 375, 1316, 95473, 33473, 2484, 387, 2904, 5547, 905, 18296, 41728, 14572, 722, 1668, 2373, 18296, 730, 33473, 905, 5010, 2870, 868, 773, 50747, 375, 560, 379, 375, 1316, 99822, 1590, 2484, 387, 56794, 905, 8254, 696, 3399, 853, 18296, 905, 16352, 2870, 1105, 76876, 1590, 634, 20589, 868, 773, 50747, 375, 560, 560, 3673, 56794, 16444, 369, 16483, 374, 4261, 370, 1868, 392, 560, 560, 6055, 49544, 16444, 42980, 732, 7332, 730, 61559, 41728, 12944, 13452, 657, 12291, 4605, 6016, 1130, 657, 924, 696, 4536, 14010, 375, 650, 12291, 657, 15447, 373, 20772, 373, 20820, 715, 6016, 13452, 1877, 373, 7332, 730, 51299, 4605, 15597, 48199, 7332, 2030, 14885, 14052, 14010, 375, 560, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 429, 386, 380, 378, 386, 426, 379, 431, 374, 383, 428, 385, 377, 374, 381, 384, 384, 427, 374, 386, 385, 384, 430, 374, 379, 378, 377, 379, 430, 379, 429, 379, 381, 100800, 376, 18958, 375, 441, 2345, 370, 4400, 41281, 25698, 1548, 1119, 732, 11574, 21014, 962, 80649, 6121, 1180, 732, 21497, 4605, 8145, 14010, 375, 560, 560, 50375, 30694, 696, 2379, 2662, 696, 3075, 74914, 2126, 33427, 2373, 7322, 6121, 1180, 732, 21497, 4605, 1821, 1075, 4264, 1694, 41728, 15539, 696, 17640, 800, 773, 50747, 375, 855, 3071, 657, 3570, 8545, 2155, 2373, 20671, 5547, 5255, 732, 56794, 16444, 10978, 715, 3644, 76766, 1668, 10996, 375, 560, 560, 560, 2484, 42008, 10978, 2425, 3755, 387, 2484, 560, 374, 15447, 560, 374, 20772, 560, 374, 20820, 688, 72936, 373, 43047, 373, 46552, 375, 12716, 370, 560, 560, 560, 2484, 50938, 387, 2484, 560, 378, 375, 1316, 42750, 16352, 2484, 387, 18296, 2373, 8254, 696, 3399, 698, 1145, 853, 61559, 41728, 2264, 5547, 1130, 8158, 16352, 7818, 905, 92987, 375, 560, 379, 375, 1316, 95473, 33473, 7632, 2484, 387, 1180, 732, 3644, 696, 56794, 41728, 5547, 3117, 13456, 2500, 18296, 730, 4649, 696, 23006, 868, 773, 50747, 375, 560, 380, 375, 1316, 2368, 1029, 16524, 7332, 4503, 2484, 387, 25022, 373, 17557, 18240, 1222, 7332, 51299, 4605, 3892, 10482, 1130, 1060, 2069, 868, 773, 50747, 375, 560, 560, 2484, 29376, 387, 2484, 560, 378, 375, 1316, 1280, 1336, 2372, 2484, 387, 56794, 16444, 12291, 905, 61559, 2373, 12448, 13452, 8158, 13949, 2373, 17954, 2870, 868, 773, 50747, 375, 560, 379, 375, 1316, 21014, 962, 1415, 39833, 1210, 2484, 387, 2841, 1075, 61559, 41728, 9725, 1130, 1060, 13981, 1130, 37728, 12291, 6016, 634, 17717, 868, 773, 50747, 375, 560, 380, 375, 1316, 68118, 16524, 11758, 2484, 387, 56794, 730, 11241, 11758, 2373, 2414, 5547, 7818, 905, 27309, 868, 773, 50747, 375, 560, 560, 3673, 4269, 18296, 16444, 4605, 3329, 21046, 8354, 392, 560, 560, 374, 1316, 1280, 1336, 634, 2963, 1075, 2042, 2484, 387, 15480, 1075, 7957, 902, 2963, 1075, 18938, 54794, 634, 4666, 16524, 2042, 18296, 16444, 5547, 905, 2327, 14010, 375, 560, 374, 1316, 64766, 35972, 3644, 2484, 387, 51359, 2030, 730, 14885, 14052, 634, 39765, 1130, 1060, 40711, 1105, 18296, 16444, 905, 13329, 14010, 375, 560, 374, 1316, 67972, 1075, 5547, 2484, 387, 12037, 1075, 9939, 37891, 23536, 730, 7957, 5547, 905, 2327, 2870, 1105, 18296, 4387, 41728, 5547, 1130, 657, 924, 634, 1104, 50747, 375, 560, 560, 3673, 4269, 56794, 16444, 4605, 3329, 21046, 8354, 392, 560, 560, 374, 1316, 91144, 14885, 14052, 2484, 387, 7332, 2030, 730, 17557, 14885, 14052, 634, 2963, 1075, 2042, 56794, 16444, 5547, 905, 2327, 14010, 375, 560, 374, 1316, 17111, 27512, 84906, 5547, 2484, 387, 84906, 798, 7332, 51299, 373, 25022, 373, 17557, 18240, 1222, 732, 56794, 16444, 41728, 5547, 1130, 657, 924, 634, 1104, 50747, 375, 560, 374, 1316, 95473, 33473, 28350, 2484, 387, 18296, 730, 33473, 4605, 10466, 853, 942, 1051, 1105, 5720, 5547, 4605, 56794, 16444, 715, 5346, 2870, 868, 773, 50747, 375, 560], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:52624 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:49:56 engine.py:275] Added request cmpl-48bdd89d97cf47eb9262e6ba373c1291-0.
INFO 02-16 22:49:56 engine.py:275] Added request cmpl-b9642068573740b0ac4b8de79afbf400-0.
INFO 02-16 22:49:56 metrics.py:455] Avg prompt throughput: 643.0 tokens/s, Avg generation throughput: 44.5 tokens/s, Running: 4 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.5%, CPU KV cache usage: 0.0%.
INFO 02-16 22:49:56 logger.py:39] Received request cmpl-34eaa26c52da495ea745823f6e7fa437-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        403 Forbidden\nRequest forbidden by administrative rules.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 381, 377, 380, 101630, 560, 13427, 37644, 956, 15021, 6827, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:52592 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:49:56 engine.py:275] Added request cmpl-34eaa26c52da495ea745823f6e7fa437-0.
INFO 02-16 22:49:56 logger.py:39] Received request cmpl-21b582fbde92469babf4cacb4218e99c-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8d ëª¨ë\x93\x88ì\x97\x90ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dì\x97\x90 ë\x8c\x80í\x95´ ëª\x87 ê°\x80ì§\x80 ê·¼ë³¸ì\xa0\x81ì\x9d¸ ì§\x88ë¬¸ì\x9d\x84 í\x95©ë\x8b\x88ë\x8b¤. â\x80\x94 "ê·¸ê²\x8c ë\xad\x90ì\x95¼?", "í\x81´ë\x9d¼ì\x9d´ì\x96¸í\x8a¸ ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dê³¼ ë\xad\x90ê°\x80 ë\x8b¬ë\x9d¼?", "ì\x99\x9c ì\x93¸ë§\x8cí\x95´?". ì\x97¬ê¸°ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x97¬ë\x9f¬ë¶\x84ì\x9d\x98 ì²« ì\x9b¹ì\x82¬ì\x9d´í\x8a¸ë¥¼ ë§\x8cë\x93\x9cë\x8a\x94 ë\x8d°ì\x97\x90 í\x95\x84ì\x9a\x94í\x95\x9c ê°\x80ì\x9e¥ ì\xa0\x81í\x95©í\x95\x9c í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë¥¼ ì\x96´ë\x96»ê²\x8c ì\xa0\x95í\x95\x98ë\x8a\x94 ì§\x80ì\x97\x90 ë\x8c\x80í\x95\x9c ì\xa0\x81ì\xa0\x88í\x95\x9c ì§\x80ë\x8f\x84ì\x99\x80 í\x95¨ê»\x98 ê°\x80ì\x9e¥ ì\x9d¸ê¸°ì\x9e\x88ë\x8a\x94 ì\x84\x9cë²\x84 ì\x82¬ì\x9d´ë\x93\x9c ì\x9b¹ í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë\x93¤ì\x9d\x98 ê°\x9cì\x9a\x94ë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤. ë\x81\x9dì\x9c¼ë¡\x9c ë\x86\x92ì\x9d\x80 ì\x88\x98ì¤\x80ì\x9d\x98 ì\x9b¹ ì\x84\x9cë²\x84 ë³´ì\x95\x88ì\x97\x90 ë\x8c\x80í\x95\x9c ì\x86\x8cê°\x9cë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 30176, 23681, 36870, 24687, 379, 23681, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 10760, 426, 19407, 24687, 97903, 35427, 30176, 488, 607, 44827, 30176, 23681, 36870, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 23681, 36870, 24687, 379, 23681, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 10834, 10760, 426, 100899, 15924, 41861, 49638, 30176, 20548, 49638, 15924, 17005, 378, 83073, 588, 381, 24687, 380, 11066, 30176, 16687, 30176, 488, 613, 11066, 9289, 20548, 35427, 24687, 61970, 11066, 30176, 488, 613, 23681, 21274, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375, 23076, 49638, 28092, 738, 12575, 17005, 11066, 12575, 379, 50189, 10760, 7452, 44827, 30176, 67176, 378, 83073, 588, 381, 392, 9417, 738, 4882, 488, 585, 10834, 24687, 488, 613, 378, 83073, 588, 381, 30176, 488, 613, 10834, 30176, 488, 606, 11066, 4882, 77721, 11066, 9289, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 12575, 380, 378, 83073, 588, 381, 10760, 7452, 44827, 12575, 41861, 49638, 10760, 488, 595, 61970, 24687, 488, 613, 378, 83073, 588, 381, 392, 9417, 738, 30176, 94485, 36870, 9289, 97903, 11066, 24687, 20548, 50189, 4882, 67176, 10834, 392, 14830, 9289, 488, 607, 61970, 12575, 29291, 470, 30176, 23681, 36870, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 607, 61970, 24687, 488, 615, 61970, 24687, 17558, 23681, 30176, 488, 613, 31708, 9289, 379, 39389, 9289, 488, 611, 378, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 4882, 77721, 11066, 24687, 74674, 378, 83073, 588, 381, 10760, 20548, 50189, 24687, 97903, 36870, 24687, 77721, 28092, 10760, 85395, 41861, 30176, 488, 607, 44827, 21274, 67176, 23681, 30176, 488, 610, 28092, 4882, 67176, 36870, 15924, 41861, 49638, 30176, 488, 614, 74674, 9289, 16687, 4882, 67176, 40057, 4882, 67176, 36870, 21274, 28092, 23681, 24687, 22332, 30176, 488, 614, 23681, 30176, 488, 611, 50189, 4882, 488, 585, 61970, 24687, 74674, 378, 83073, 588, 381, 9289, 488, 606, 10834, 24687, 488, 606, 41973, 12575, 379, 50189, 9289, 18737, 4882, 67176, 31708, 24687, 77721, 28092, 9289, 20548, 49638, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 36870, 9289, 16687, 30176, 22332, 4882, 67176, 36870, 9289, 20548, 49638, 24687, 488, 599, 23681, 30176, 94485, 49638, 21274, 67176, 19407, 12575, 41973, 31708, 15924, 41861, 49638, 30176, 488, 614, 74674, 9289, 488, 613, 11066, 12575, 29291, 470, 30176, 488, 614, 35427, 24687, 77721, 28092, 9289, 23681, 36870, 24687, 379, 23681, 9289, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 9289, 488, 611, 378, 21274, 28092, 23681, 24687, 22332, 30176, 488, 614, 23681, 30176, 488, 611, 50189, 4882, 488, 585, 61970, 24687, 97903, 101270, 30176, 488, 613, 31708, 15924, 41861, 36870, 30176, 488, 610, 28092, 24687, 74674, 378, 83073, 588, 381, 9289, 21301, 12575, 380, 21615, 4882, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375, 10760, 488, 585, 488, 613, 30176, 36870, 378, 83073, 588, 381, 24687, 55971, 36870, 10760, 95517, 488, 602, 30176, 488, 613, 49638, 9289, 35427, 31708, 30176, 101270, 49638, 30176, 488, 613, 31708, 9289, 488, 611, 378, 9289, 23681, 36870, 24687, 379, 23681, 10760, 380, 10834, 30176, 67176, 35427, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 36870, 9289, 95517, 50189, 12575, 41861, 36870, 24687, 74674, 378, 83073, 588, 381, 9289, 21301, 12575, 380, 21615, 4882, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:52592 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:49:56 engine.py:275] Added request cmpl-21b582fbde92469babf4cacb4218e99c-0.
INFO 02-16 22:50:01 metrics.py:455] Avg prompt throughput: 610.9 tokens/s, Avg generation throughput: 337.8 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.3%, CPU KV cache usage: 0.0%.
INFO 02-16 22:50:06 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 237.1 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.4%, CPU KV cache usage: 0.0%.
INFO 02-16 22:50:11 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 237.0 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.5%, CPU KV cache usage: 0.0%.
ERROR 02-16 22:50:14 serving_completion.py:112] Error in preprocessing prompt inputs
ERROR 02-16 22:50:14 serving_completion.py:112] Traceback (most recent call last):
ERROR 02-16 22:50:14 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_completion.py", line 104, in create_completion
ERROR 02-16 22:50:14 serving_completion.py:112]     request_prompts, engine_prompts = await self._preprocess_completion(
ERROR 02-16 22:50:14 serving_completion.py:112]                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 22:50:14 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 349, in _preprocess_completion
ERROR 02-16 22:50:14 serving_completion.py:112]     request_prompts = await self._tokenize_prompt_input_or_inputs_async(
ERROR 02-16 22:50:14 serving_completion.py:112]                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 22:50:14 serving_completion.py:112]   File "/opt/anaconda3/lib/python3.12/concurrent/futures/thread.py", line 58, in run
ERROR 02-16 22:50:14 serving_completion.py:112]     result = self.fn(*self.args, **self.kwargs)
ERROR 02-16 22:50:14 serving_completion.py:112]              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 22:50:14 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 326, in _tokenize_prompt_input_or_inputs
ERROR 02-16 22:50:14 serving_completion.py:112]     self._normalize_prompt_text_to_input(
ERROR 02-16 22:50:14 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 183, in _normalize_prompt_text_to_input
ERROR 02-16 22:50:14 serving_completion.py:112]     return self._validate_input(request, input_ids, input_text)
ERROR 02-16 22:50:14 serving_completion.py:112]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 22:50:14 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 246, in _validate_input
ERROR 02-16 22:50:14 serving_completion.py:112]     raise ValueError(
ERROR 02-16 22:50:14 serving_completion.py:112] ValueError: This model's maximum context length is 4096 tokens. However, you requested 6480 tokens (4432 in the messages, 2048 in the completion). Please reduce the length of the messages or completion.
INFO:     127.0.0.1:34434 - "POST /v1/completions HTTP/1.1" 400 Bad Request
INFO 02-16 22:50:23 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 27.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 22:50:34 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 22:51:37 logger.py:39] Received request cmpl-06beb5e5764242d89dbdc90de38e37a8-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.[|system|] 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요.\n4. 하위 쿼리는 최대한 간단한 질문으로 만드세요. (예: "만약 날아다니는 스파게티 괴물이 창작물이나 상상력의 산물이라면, 그 창작물의 출처나 배경 정보 파악" 대신 "날아다니는 스파게티 괴물의 출처 파악"과 같이 간단하게 만드세요.)\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n[|assistant|]\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.[|endofturn|][|example|] 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n[|endofturn|]\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    [|user|] 크롤링 라이브러리를 알아봐주고, 공통점과 차이점을 비교해줘 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2939, 732, 582, 379, 377, 379, 382, 2171, 582, 377, 379, 2751, 582, 378, 383, 858, 10996, 375, 4484, 657, 582, 379, 377, 379, 382, 2171, 10996, 375, 2626, 1578, 732, 582, 379, 2751, 10996, 15954, 453, 47982, 453, 422, 5998, 732, 7205, 657, 12037, 1075, 5962, 1371, 696, 8019, 1075, 27498, 3644, 13456, 7872, 657, 1736, 2373, 4362, 1727, 1075, 7111, 10996, 375, 560, 378, 375, 24348, 5962, 696, 39380, 41281, 17661, 3644, 13456, 7872, 5847, 375, 560, 379, 375, 2534, 27498, 100048, 657, 1799, 730, 3644, 1043, 13456, 53712, 1481, 375, 7164, 2690, 1823, 730, 3644, 696, 4666, 1130, 698, 14182, 375, 688, 3027, 387, 6873, 2373, 1546, 1208, 2329, 730, 3231, 4605, 4415, 1130, 657, 3644, 1084, 2873, 375, 23784, 1222, 720, 9190, 715, 7135, 5658, 5962, 696, 8890, 37728, 691, 5847, 22442, 560, 380, 375, 582, 380, 1823, 8099, 730, 27498, 100048, 4605, 16769, 1130, 5847, 375, 560, 381, 375, 27498, 100048, 657, 9338, 5488, 1075, 5962, 13456, 5799, 5847, 375, 688, 3027, 387, 738, 20267, 69972, 657, 28874, 30874, 634, 23993, 1113, 37891, 42738, 730, 62058, 634, 17663, 373, 855, 23993, 1113, 730, 10411, 902, 10300, 3231, 7936, 363, 6414, 738, 1945, 1023, 8367, 657, 28874, 30874, 730, 10411, 7936, 363, 1548, 2485, 5488, 1130, 1060, 5799, 5847, 22442, 560, 381, 375, 9556, 732, 4488, 2030, 2485, 15214, 12947, 13456, 1992, 1481, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 20498, 26942, 23454, 1130, 1595, 100048, 582, 378, 9417, 738, 1130, 1595, 100048, 582, 379, 9417, 4377, 10924, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 14182, 375, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 1130, 5847, 375, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 4488, 32604, 4605, 5813, 5414, 9556, 696, 6016, 1130, 5847, 375, 3027, 954, 13385, 387, 11225, 1339, 18295, 657, 7135, 3930, 11966, 2373, 9633, 392, 3136, 1780, 2373, 6930, 5571, 9500, 1162, 696, 698, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 25999, 905, 9633, 657, 11966, 9417, 738, 49065, 905, 9633, 657, 11966, 9417, 738, 25999, 2030, 18295, 1126, 1162, 696, 924, 3093, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 16993, 373, 11819, 373, 5805, 730, 11282, 7460, 732, 3656, 91728, 392, 7135, 730, 3830, 14178, 3090, 18938, 5927, 696, 1821, 48199, 773, 657, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 54529, 730, 11282, 7460, 9417, 738, 22279, 730, 11282, 7460, 9417, 738, 34724, 730, 11282, 7460, 9417, 738, 54529, 373, 11819, 373, 5805, 730, 11282, 7460, 29289, 9417, 738, 54529, 730, 18938, 5927, 9417, 738, 22279, 730, 18938, 5927, 9417, 738, 34724, 730, 18938, 5927, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 11265, 4605, 1747, 657, 924, 634, 3164, 2373, 1104, 732, 905, 392, 11265, 1747, 37817, 1104, 732, 6620, 657, 4083, 798, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 23454, 39190, 1747, 722, 905, 3164, 2373, 11310, 657, 5282, 1996, 722, 9417, 738, 39190, 1747, 37817, 1104, 732, 6620, 1996, 722, 71045, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 41728, 7991, 13456, 713, 657, 40187, 2030, 77348, 13891, 3231, 4605, 5080, 999, 823, 853, 373, 2472, 8570, 1590, 696, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 20715, 40187, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 77348, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 40187, 2030, 77348, 5080, 9417, 560, 23, 363, 8397, 374, 20715, 1601, 1430, 15767, 13891, 834, 3093, 363, 560, 27, 422, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 4113, 1146, 830, 730, 17129, 4747, 1548, 16951, 4747, 696, 3504, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 19, 363, 2839, 1146, 830, 730, 17129, 4747, 9417, 560, 19, 363, 2839, 1254, 830, 730, 16951, 4747, 363, 560, 23, 422, 582, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 2879, 41728, 7646, 999, 13186, 373, 7967, 373, 18066, 4605, 10916, 4817, 76876, 3253, 2870, 3864, 74914, 373, 2534, 2878, 730, 7245, 23512, 2030, 3093, 3501, 696, 3504, 823, 853, 373, 17028, 730, 5346, 19597, 2030, 73414, 696, 5422, 999, 15887, 375, 3662, 5210, 15767, 1590, 1548, 5262, 696, 4666, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 32122, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 32122, 7245, 23512, 9417, 560, 23, 363, 32122, 3093, 3501, 9417, 560, 23, 363, 32122, 374, 23135, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 23135, 7245, 23512, 9417, 560, 23, 363, 23135, 3093, 3501, 9417, 560, 23, 363, 23135, 374, 44868, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 44868, 7245, 23512, 9417, 560, 23, 363, 44868, 3093, 3501, 9417, 560, 23, 363, 44868, 374, 12149, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 12149, 7245, 23512, 9417, 560, 23, 363, 12149, 3093, 3501, 9417, 560, 23, 363, 17793, 3253, 5210, 15767, 1590, 2425, 5262, 363, 560, 27, 422, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 715, 3253, 696, 713, 12438, 691, 15913, 4977, 905, 3835, 34325, 392, 2210, 3835, 732, 23512, 2131, 3093, 999, 15887, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 13225, 2879, 4977, 9417, 560, 23, 363, 8397, 7245, 23512, 363, 560, 27, 422, 560, 27, 454, 560, 361, 560, 560, 6297, 5962, 696, 2690, 78028, 27498, 5962, 13456, 7872, 33413, 5847, 375, 560, 31, 420, 453, 14719, 453, 422, 1883, 10697, 3890, 67175, 4605, 55662, 823, 853, 373, 37701, 1548, 29289, 696, 5080, 999, 15887, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48598 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:51:37 engine.py:275] Added request cmpl-06beb5e5764242d89dbdc90de38e37a8-0.
INFO 02-16 22:51:37 logger.py:39] Received request cmpl-27ffe0472fa74499a018043bb95e4aaa-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 크롤링 라이브러리 목록 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 1883, 10697, 3890, 67175, 23415, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48598 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:51:37 engine.py:275] Added request cmpl-27ffe0472fa74499a018043bb95e4aaa-0.
INFO 02-16 22:51:38 logger.py:39] Received request cmpl-9a08e2f5e0a34984b2f3781c0d9aea84-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 크롤링 라이브러리 공통점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 1883, 10697, 3890, 67175, 37701, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48598 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:51:38 engine.py:275] Added request cmpl-9a08e2f5e0a34984b2f3781c0d9aea84-0.
INFO 02-16 22:51:39 metrics.py:455] Avg prompt throughput: 557.9 tokens/s, Avg generation throughput: 36.8 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 22:51:39 logger.py:39] Received request cmpl-ca1c0678715f48bf90607e9444934efe-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 크롤링 라이브러리 차이점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 1883, 10697, 3890, 67175, 29289, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48598 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:51:39 engine.py:275] Added request cmpl-ca1c0678715f48bf90607e9444934efe-0.
INFO 02-16 22:51:41 logger.py:39] Received request cmpl-a9d606ad188e45398ce94bf2212f5902-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        03) 웹 스크래핑을 위한 Python 라이브러리 소개\nPython은 웹 사이트에서 데이터를 추출하는 데 도움을 주는 라이브러리들이 개발되어있어 웹 스크래핑에 큰 힘을 발휘합니다. BeautifulSoup, Scrapy, Selenium이라는 세 가지 일반적으로 사용되는 라이브러리가 그 예입니다. 이 세 가지 라이브러리는 각각 독특한 기능을 제공하며, 사용 방법은 스크래핑 프로젝트의 복잡성과 요구 사항에 따라 달라집니다.\nBeautifulSoup, Scrapy, Selenium 개요\nBeautifulSoup\n: 이 파이썬 라이브러리는 HTML 및 XML 문서를 파싱하는 데 사용되며, HTML 및 XML 파일에서 데이터를 추출하기에 좋습니다. BeautifulSoup은 웹페이지 소스 코드에서 구문 분석 트리(parse tree)를 생성하며, 이를 통해 웹페이지를 탐색하고 검색하며 수정하기 쉽습니다. BeautifulSoup은 복잡한 HTML 문서를 태그, 탐색 가능한 문자열 또는 주석 등의 파이썬 객체 트리로 변환합니다.\nfrom bs4 import BeautifulSoup\nimport requests\n\nURL = "https://www.example.com"\npage = requests.get(URL)\nsoup = BeautifulSoup(page.content, "html.parser")\n\n# 페이지에서 첫 번째 h1 태그 찾기\nh1_tag = soup.find("h1")  \nprint(h1_tag.text)  # h1 태그 내부의 텍스트 출력\nScrapy\n: 더 복잡한 스크래핑 작업을 처리할 수 있는 포괄적인 웹 크롤링 프레임워크입니다. Scrapy는 여러 요청을 동시에 처리할 수 있는 비동기 처리 프레임워크로, 대규모 스크래핑 작업에서 효율적으로 작동합니다. 웹 사이트에서 데이터를 추출하고 처리하여 원하는 형식으로 저장하는 데 필요한 모든 도구를 제공합니다.\nimport scrapy\n\nclass QuotesSpider(scrapy.Spider):\n    name = "quotes"\n    start_urls = [\'http://quotes.toscrape.com/tag/humor/\']\n\n    def parse(self, response):\n        for quote in response.css(\'div.quote\'):\n            yield {\n                \'text\': quote.css(\'span.text::text\').get(),\n                \'author\': quote.xpath(\'span/small/text()\').get(),\n            }\nSelenium\n: 웹 애플리케이션 테스트를 위해 개발된 라이브러리이지만, 웹 스크래핑에도 널리 사용됩니다. Selenium의 강점은 웹페이지와 상호작용을 자동화할 수 있는 능력에 있습니다. Selenium은 버튼 클릭이나 페이지 스크롤링과 같은 인간과 유사한 동작을 시뮬레이션할 수 있어, 비동기로 콘텐츠가 로드되거나 사용자 상호작용에 응답하는 동적 웹사이트에 적합합니다.\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\n\ndriver = webdriver.Firefox()\ndriver.get("http://www.python.org")\nassert "Python" in driver.title\nelem = driver.find_element_by_name("q")\nelem.clear()\nelem.send_keys("pycon")\nelem.send_keys(Keys.RETURN)\nassert "No results found." not in driver.page_source\ndriver.close()\n각 라이브러리의 사용 시점\nBeautifulSoup\n: 웹페이지의 HTML에서 데이터를 추출해야하는 소규모 또는 중간 규모의 스크래핑 작업에 적합합니다. 사용이 간편하며, 속도가 큰 문제가 되지 않는 프로젝트에 이상적입니다.\nScrapy\n: 대규모이고 복잡한 웹 스크래핑 작업에 가장 적합하며, 여러 요청을 처리하고 데이터를 체계적으로 처리해야 할 때 유용합니다. Scrapy는 라이브러리보다는 웹 크롤링 프레임워크에 가깝기 때문에 기능이 더 많고 학습 곡선이 더 가파릅니다.\nSelenium\n: 웹사이트가 콘텐츠를 비동기적으로 로드하거나 사용자 상호작용에 응답하는 경우에 적합합니다. 버튼 클릭이나 양식 작성과 같은 사용자 상호작용이 필요한 스크래핑 작업에 유용합니다.\n기억하세요, 라이브러리의 선택은 웹 스크래핑 프로젝트의 구체적인 요구 사항에 크게 의존합니다. 일부 경우에는 이러한 라이브러리를 조합하여 목표를 달성해야 할 수도 있습니다. 다음 섹션에서는 이러한 라이브러리 각각에 대해 자세히 알아보고 실용적인 예제를 통해 기능을 소개할 것입니다.\n마지막 편집일시 : 2023년 6월 2일 11:33 오전', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 377, 380, 370, 11574, 12870, 1117, 4102, 696, 3125, 14138, 67175, 3810, 560, 54440, 732, 11574, 8050, 41728, 7957, 4605, 13189, 1130, 657, 1736, 3577, 696, 901, 657, 67175, 14178, 4003, 13452, 721, 1840, 721, 11574, 12870, 1117, 4102, 2373, 2491, 2128, 696, 17269, 14010, 375, 83188, 373, 42574, 5754, 373, 96630, 634, 21212, 1139, 2034, 4400, 41281, 1821, 13452, 657, 67175, 905, 855, 1288, 10996, 375, 650, 1139, 2034, 67175, 657, 7135, 15803, 1075, 4198, 696, 4078, 1130, 1877, 373, 1821, 2818, 732, 12870, 1117, 4102, 10902, 730, 12037, 1210, 1548, 6453, 6318, 2373, 2414, 60636, 375, 560, 95469, 75872, 373, 42574, 5754, 373, 96630, 49408, 560, 95469, 75872, 560, 387, 650, 80044, 67175, 657, 15447, 2425, 20100, 20440, 4605, 1717, 6685, 1130, 657, 1736, 1821, 13452, 1877, 373, 15447, 2425, 20100, 11038, 41728, 7957, 4605, 13189, 1130, 37817, 1104, 50747, 375, 83188, 732, 11574, 7696, 6126, 12291, 41728, 72412, 5422, 9702, 369, 24963, 6622, 370, 4605, 16769, 1130, 1877, 373, 38069, 2364, 11574, 7696, 4605, 30694, 48199, 6276, 1130, 1877, 10122, 76766, 3497, 50747, 375, 83188, 732, 12037, 1075, 15447, 20440, 4605, 28775, 373, 30694, 1995, 1075, 66894, 4978, 28347, 53641, 80044, 42225, 9702, 715, 34398, 14010, 375, 560, 4018, 24946, 381, 2007, 83188, 560, 4393, 11168, 560, 560, 20654, 801, 738, 15385, 387, 9413, 38790, 375, 47090, 375, 3256, 363, 560, 18100, 801, 11168, 375, 4689, 369, 20654, 370, 560, 444, 4607, 801, 83188, 369, 18100, 375, 18213, 373, 738, 27092, 375, 17024, 11627, 560, 560, 364, 13203, 41728, 3257, 1457, 5088, 678, 378, 28775, 1996, 722, 560, 433, 378, 424, 4799, 801, 26950, 375, 39459, 59074, 433, 378, 11627, 33, 560, 4825, 369, 433, 378, 424, 4799, 375, 2812, 370, 33, 364, 678, 378, 28775, 5424, 730, 33728, 17653, 560, 98326, 5754, 560, 387, 1047, 12037, 1075, 12870, 1117, 4102, 3644, 696, 5547, 2870, 868, 773, 657, 36634, 1965, 798, 11574, 1883, 10697, 3890, 18286, 13518, 10996, 375, 42574, 5754, 657, 2690, 8254, 696, 6873, 2373, 5547, 2870, 868, 773, 657, 1202, 50048, 5547, 18286, 13518, 715, 373, 915, 30453, 12870, 1117, 4102, 3644, 41728, 9687, 41281, 13981, 14010, 375, 11574, 8050, 41728, 7957, 4605, 13189, 48199, 5547, 22226, 9062, 657, 12947, 13456, 11503, 1130, 657, 1736, 2327, 1075, 2904, 15546, 4605, 4078, 14010, 375, 560, 4393, 95413, 560, 560, 5138, 93831, 13541, 2063, 369, 21140, 5754, 375, 13541, 2063, 65754, 560, 31, 4726, 801, 738, 906, 6998, 363, 560, 31, 17795, 424, 790, 4720, 801, 25990, 13656, 387, 9413, 906, 6998, 375, 665, 21140, 3012, 375, 3256, 376, 4799, 376, 433, 34131, 376, 86886, 560, 560, 31, 2405, 10423, 369, 2079, 373, 3507, 65754, 560, 27, 2772, 18138, 666, 3507, 375, 66854, 48465, 30294, 375, 38013, 66353, 560, 23, 32152, 940, 560, 19, 368, 445, 6662, 25547, 18138, 375, 66854, 48465, 26497, 375, 2812, 31145, 2812, 69609, 4689, 369, 5445, 560, 19, 368, 15959, 25547, 18138, 375, 449, 9661, 48465, 26497, 376, 58300, 376, 2812, 40553, 69609, 4689, 369, 5445, 560, 23, 454, 560, 71215, 32030, 560, 387, 11574, 38217, 10990, 4605, 1902, 4003, 16524, 67175, 634, 2597, 373, 11574, 12870, 1117, 4102, 15169, 23487, 1821, 837, 1318, 375, 96630, 730, 23029, 732, 11574, 7696, 2030, 14885, 14052, 696, 4440, 1255, 2870, 868, 773, 657, 5772, 2373, 773, 50747, 375, 96630, 732, 11337, 9144, 37891, 13203, 70806, 3890, 1548, 1119, 732, 5247, 1548, 14930, 1075, 14288, 696, 50954, 2870, 868, 773, 721, 373, 1202, 50048, 715, 11821, 905, 17099, 13452, 16519, 7332, 14885, 14052, 2373, 16352, 1130, 657, 84906, 11574, 79184, 2373, 13329, 14010, 375, 560, 4018, 46818, 2007, 74871, 560, 4018, 46818, 375, 33167, 38429, 375, 54530, 375, 26690, 2007, 47705, 560, 560, 38429, 801, 74871, 375, 43059, 22121, 40553, 560, 38429, 375, 4689, 59074, 13656, 387, 9413, 38790, 375, 50475, 375, 23632, 11627, 560, 7034, 738, 54440, 363, 666, 8834, 375, 13058, 560, 96464, 801, 8834, 375, 39459, 424, 46151, 424, 3663, 424, 4726, 59074, 442, 11627, 560, 96464, 375, 45190, 40553, 560, 96464, 375, 43238, 424, 26690, 59074, 8507, 2298, 11627, 560, 96464, 375, 43238, 424, 26690, 369, 38327, 375, 42481, 44314, 370, 560, 7034, 738, 6644, 2533, 2224, 13222, 1017, 666, 8834, 375, 18100, 424, 32758, 560, 38429, 375, 31550, 40553, 560, 1246, 67175, 730, 1821, 10742, 560, 95469, 75872, 560, 387, 11574, 7696, 730, 15447, 41728, 7957, 4605, 13189, 21046, 1130, 657, 38140, 4978, 6208, 5197, 730, 12870, 1117, 4102, 3644, 2373, 13329, 14010, 375, 1821, 634, 11969, 1130, 1877, 373, 7818, 905, 2491, 2372, 905, 970, 698, 1145, 657, 10902, 2373, 2329, 1965, 10996, 375, 560, 98326, 5754, 560, 387, 915, 30453, 634, 853, 12037, 1075, 11574, 12870, 1117, 4102, 3644, 2373, 2472, 13329, 1130, 1877, 373, 2690, 8254, 696, 5547, 48199, 7957, 4605, 8846, 41281, 5547, 21046, 1051, 1105, 15420, 14010, 375, 42574, 5754, 657, 67175, 1280, 4264, 11574, 1883, 10697, 3890, 18286, 13518, 2373, 16470, 722, 1668, 2373, 4198, 634, 1047, 1180, 853, 7730, 34376, 634, 1047, 34161, 14231, 375, 560, 71215, 32030, 560, 387, 11574, 79184, 905, 11821, 4605, 1202, 50048, 41281, 17099, 1130, 16519, 7332, 14885, 14052, 2373, 16352, 1130, 657, 2042, 2373, 13329, 14010, 375, 11337, 9144, 37891, 15660, 6016, 1548, 1119, 732, 7332, 14885, 14052, 634, 2327, 1075, 12870, 1117, 4102, 3644, 2373, 15420, 14010, 375, 560, 29130, 1130, 5847, 373, 67175, 730, 3329, 732, 11574, 12870, 1117, 4102, 10902, 730, 10756, 1965, 798, 6453, 6318, 2373, 1883, 1060, 20665, 14010, 375, 5720, 2042, 97300, 4476, 1075, 67175, 4605, 7781, 22226, 5999, 4605, 11985, 21046, 1051, 8952, 773, 50747, 375, 2775, 55265, 41728, 657, 4476, 1075, 67175, 7135, 2373, 2409, 11586, 5337, 853, 19765, 1965, 798, 77481, 4605, 2364, 4198, 696, 3810, 2870, 924, 10996, 375, 560, 9431, 15025, 84149, 756, 582, 379, 377, 379, 380, 2171, 582, 383, 2751, 582, 379, 858, 582, 378, 378, 387, 380, 380, 6101], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55058 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:51:41 engine.py:275] Added request cmpl-a9d606ad188e45398ce94bf2212f5902-0.
INFO 02-16 22:51:41 logger.py:39] Received request cmpl-09b1370b34eb4ff5b5f919c1323f2b65-0: prompt: "다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        파이썬 크롤링 라이브러리로 크게 BeautifulSoup4, requests, , selenium, scrapy 등이 있다.[ BeautifulSoup4 ]BeautifulSoup4는 파이썬 내장 모듈인 requests, urllib를 이용해 HTML 을 받아오고 beautifulSoup로 추출한다.장점쉽고, 빠르고(병렬 처리시), 간단하다.단점HTML을 받아오기 때문에 SPA (ex. vue.js에서 라우팅 기능을 사용하여 페이지를 하나만 유지시키는 것)이나 js가 적용된 페이지를 크롤링하기엔 어렵다.[ lxml ]기본적으로 BeautifulSoup에서는 BeautifulSoup(html, 'html.parser') 와 같이 html parser 를 사용할수도 있지만 lxml 모듈을 설치하여 속도를 빠르게 할 수 있다.\xa0사용방법으로 BeautifulSoup(html, 'lxml') 과 같다.pip install lxml[ selenium ]웹 자동화 테스트에 사용되는 프레임워크로 웹 브라우저를 실제로 실행시켜 클릭을 하고 스크롤을 올리고 내리기에 속도가 많이 느리고 메모리도 많이 차지하게 된다.장점JavaScript도 렌더링하여 데이터를 추출 할 수 있다.단점웹브라우저를 실제로 실행하기에 (우리가 보는 정보를 모두 가져올 수 있다는 장점도 될 것 같다. ) 속도가 느리고, 메모리 사용이 상대적으로 크다.[ scrapy ]유료이며 크롤링을 위해 개발된 프레임워크이다.장점Django 처럼 벡엔드 서비스와 연동하기 편리하고 플러그인이 다양하다.문서화가 잘되며 기능구현이 잘 되어있다.단점플러그인간의 호환이 안되는 경우가 있다.[ 참고 자료 ]https://keyhyuk-kim.medium.com/python-%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%9F%AC-%EB%8F%84%EA%B5%AC-%EB%B9%84%EA%B5%90-%EB%B0%8F-%EC%82%AC%EC%9A%A9-%ED%9B%84%EA%B8%B0-scrapy-vs-selenium-vs-requests-urllib-6483041ca1baPython 웹 크롤러 도구 비교 및 사용 후기(Scrapy vs selenium vs Requests, urllib)웹 크롤러 개발 언어로 Python을 선택했다면, 개발 효율성을 높혀줄 여러가지 라이브러리와 프레임워크가 있습니다.keyhyuk-kim.medium.comhttps://www.baragi.net/bbs/board.php?bo_table=dev&wr_id=8858", params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 17830, 35344, 1883, 10697, 3890, 67175, 715, 1883, 1060, 83188, 381, 373, 11168, 373, 624, 46818, 373, 95413, 1222, 634, 773, 643, 15954, 83188, 381, 950, 95469, 75872, 381, 657, 80044, 16379, 28581, 798, 11168, 373, 49184, 4605, 87633, 15447, 699, 1374, 40223, 853, 8647, 75872, 715, 13189, 10348, 375, 50938, 6737, 853, 373, 5955, 853, 369, 3196, 10544, 5547, 954, 5445, 5488, 96266, 375, 29376, 24961, 696, 1374, 40223, 722, 1668, 2373, 63108, 688, 1912, 375, 19311, 375, 12716, 41728, 41962, 2399, 4198, 696, 1821, 22226, 13203, 4605, 1799, 1043, 4516, 71181, 657, 924, 370, 37891, 6545, 905, 5552, 16524, 13203, 4605, 1883, 10697, 3890, 76766, 8789, 5333, 643, 15954, 716, 23256, 950, 14367, 41281, 83188, 41728, 657, 83188, 369, 27092, 373, 741, 27092, 375, 17024, 10771, 1082, 2485, 4609, 17979, 779, 1821, 2870, 31622, 773, 2597, 716, 23256, 28581, 696, 4490, 22226, 7818, 4605, 5955, 1060, 1051, 868, 773, 643, 375, 1821, 46016, 13456, 83188, 369, 27092, 373, 741, 437, 23256, 10771, 958, 1119, 643, 375, 54485, 4251, 716, 23256, 420, 46818, 950, 51257, 4440, 1255, 10990, 2373, 1821, 13452, 657, 18286, 13518, 715, 11574, 61559, 4605, 8297, 12944, 85765, 9144, 696, 9858, 70806, 696, 1565, 1766, 7054, 37817, 7818, 905, 1719, 1585, 1766, 21497, 720, 1719, 8145, 1130, 1060, 2036, 375, 50938, 98683, 720, 6064, 87346, 22226, 7957, 4605, 13189, 1051, 868, 773, 643, 375, 29376, 51257, 21014, 962, 1415, 4605, 8297, 12944, 1130, 37817, 688, 3718, 905, 846, 657, 3231, 4605, 2618, 39169, 868, 773, 4264, 7306, 720, 2015, 924, 1119, 643, 375, 693, 7818, 905, 1585, 1766, 373, 21497, 1821, 634, 4826, 41281, 49546, 15954, 95413, 950, 1420, 1472, 634, 1877, 1883, 10697, 3890, 696, 1902, 4003, 16524, 18286, 13518, 40379, 375, 50938, 78680, 10380, 2352, 37588, 65840, 3670, 2030, 24108, 76766, 9621, 48199, 87518, 634, 2841, 96266, 375, 89098, 55196, 1353, 13452, 1877, 4198, 887, 2252, 634, 1353, 970, 721, 1840, 643, 375, 29376, 39283, 799, 25284, 730, 39833, 634, 1084, 13452, 657, 2042, 905, 773, 643, 15954, 5813, 6784, 950, 15385, 387, 9413, 8025, 6254, 5386, 374, 89418, 375, 2913, 2692, 375, 3256, 376, 50475, 374, 366, 5487, 366, 386, 395, 366, 395, 386, 374, 366, 3381, 366, 385, 378, 366, 4145, 366, 51692, 366, 394, 378, 366, 394, 381, 366, 51692, 366, 386, 399, 366, 4145, 374, 366, 51692, 366, 385, 399, 366, 385, 381, 366, 13879, 366, 395, 382, 366, 4145, 374, 366, 51692, 366, 395, 386, 366, 385, 381, 366, 13879, 366, 395, 382, 366, 386, 377, 374, 366, 51692, 366, 395, 377, 366, 385, 399, 374, 366, 5487, 366, 385, 379, 366, 4145, 366, 5487, 366, 386, 394, 366, 394, 386, 374, 366, 3381, 366, 386, 395, 366, 385, 381, 366, 13879, 366, 395, 385, 366, 395, 377, 374, 21140, 5754, 374, 26631, 374, 7136, 32030, 374, 26631, 374, 101281, 374, 790, 45053, 374, 383, 381, 385, 380, 377, 381, 378, 12262, 378, 8278, 54440, 11574, 1883, 10697, 1030, 15546, 5080, 2425, 1821, 5131, 369, 98326, 5754, 6382, 46818, 6382, 70540, 373, 49184, 370, 51257, 1883, 10697, 1030, 4003, 10978, 715, 14138, 696, 3329, 2662, 4767, 373, 4003, 9687, 1210, 696, 2388, 2994, 6539, 2690, 6576, 67175, 2030, 18286, 13518, 905, 773, 50747, 375, 8025, 6254, 5386, 374, 89418, 375, 2913, 2692, 375, 3256, 15385, 387, 9413, 38790, 375, 5961, 43705, 375, 9281, 376, 427, 2218, 376, 7119, 375, 98086, 392, 2354, 424, 3032, 390, 23169, 367, 40649, 424, 766, 390, 385, 385, 382, 385], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55060 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:51:41 logger.py:39] Received request cmpl-8f4d25f973da42a2838b2441ad98bd92-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        \\u003caside>\n💡  최근 자바를 이용한 크롤링을 할 일이 있어서, 크롤링 도구에 대해서 학습하게 되었다.\n하지만 크롤링을 위한 라이브러리는 굉장히 많아서 어떤 라이브러리를 사용해야할 지 매우 혼란이 왔는데, 그래서 각 대표 라이브러리들은 무슨 차이가 있고, 어떤 상황에서 어떤 도구를 선택해야 할까?\n\n\\u003c/aside>\n\n---\n\n## 대표 라이브러리 - Jsoup\n\n---\n\n### Jsoup이란?\n\n맨 처음으로 대표 라이브러리인 jsoup을 접하게 되었다. \n\n> jsoup은 HTML 문서에 저장된 데이터를 구문 분석, 추출 및 조작하도록 설계된 오픈 소스 Java 라이브러리입니다.\n- 위키백과\n> \n- Jsoup은 자바로 작성된 HTML 파싱및 조작 라이브러리이다. 이번에 활용한 기능은 아래와 같다.\n    1. HTML 파싱: HTML 문서를 파싱하여 **DOM 트리**를 생성하여, HTML 문서의 요소에 쉽게 접근할 수 있다.\n    2. 요소 검색: CSS 선택자를 사용하여 HTML 요소를 검색하여 데이터에 접근하거나, 추출할 수 있다.\n    - DOM 트리란 DOM(Documen Object Model) 트리는 HTML, XML 또는 다른 마크업 언어의 문서를 표현하는 트리 구조이다.\n    \n![](https://velog.velcdn.com/images/hyn_053/post/7d968d0d-7934-444b-943b-f13f8b2c2b98/image.png)\n\n    - 이런 식으로 계층적인 트리 형식으로 표현할 수 있다. \n    이를 통해 각 구조에 쉽게 접근하고 조작할 수가 있다. \n    부모 노드 - 자식 노드를 가진 트리의 형태 이므로, 탐색및 순회가 용이하다.\n\n 그래서 Jsoup을 쓰는 이유는 뭘까?\n\n### Jsoup은 왜 쓸까?\n\n 우린 여기서 정적인 웹페이지와 동적인 웹페이지, 즉 **서버 사이드 렌더링**과 **클라이언트 사이드 렌더링**에 대해 알아야 한다. \n  이 글은 이에 대한 주제가 아니기 때문에 간단하게 설명하자면,\n\n- **서버 사이드 렌더링(Server Side Rendering, SSR)**은 웹 페이지를 서버에서 렌더링을 해서 클라이언트에게 전달하는 것이다.\n- **클라이언트 사이드 렌더링(Client Side Rendering, CSR)**은 웹 페이지 초기 로딩시 레이아웃과 자바 스크립트 코드를 전달하고 이후 브라우저가 자바 스크립트를 실행하여 데이터를 불러와 동적으로 웹 페이지를 생성한다.\n\n \n\n Jsoup은 SSR을 통해 미리 렌더링된 정적인 HTML 코드를 반환한다. Jsoup은 Http Request를 통해 서버에서 보내오는 HTML 문서를 그대로 받아와 사용하고 처리한다. \n\n따라서, **정적인 웹페이지**를 크롤링하는데 다음과 강점을 가지고 있다.\n\n- 간편하고 직관적인 API\n- CSS 선택자를 사용해 요소를 선택하고 추출 ex) **`select`** 메서드\n- 빠르고 경량화되어 좋은 성능을 보유\n- DOM 트리 형태로 HTML 문서 구조 접근에 용이하고, 이를 바탕으로 한 다양한 메서드들을 제공한다. ex) **`getElementById`**, **`getElementsByClass`**, **`getElementsByTag`**\n\n 그럼 **동적인 웹페이지**에선 Jsoup이 왜 안좋을까? 여기엔 다음과 같은 이유가 있다.\n\n1. Jsoup은 Http Request를 통해 서버에서 보내오는 HTML 문서를 그대로 받아와 사용하고 처리한다. \n2. 하지만 동적인 웹페이지에선 CSR 방식으로 웹페이지 초기 로딩시 레이아웃과 자바 스크립트 코드를 전달하고, 이후 브라우저가 자바 스크립트를 실행하여 데이터를 불러와 동적으로 웹 페이지를 생성한다. \n3. 때문에 웹 페이지가 로딩되고 난 후 웹 브라우저에서 자바스크립트가 실행되어야 하기 때문에 Http 요청만으로는 완전한 구조를 가져올 수 없기 때문에, Jsoup이 좋지 않다.\n\n 따라서, 동적인 웹페이지 처리하는 도구가 필요하다. 그래서 Selenium과 같은 라이브러리를 사용한다.\n\n## 대표적인 동적 웹 페이지 도구 Selenium\n\n---\n\n> 셀레늄은 웹 애플리케이션 자동화 및 테스트를 위한 포터블 프레임워크이다. 셀레늄은 테스트 스크립트 언어를 학습할 필요 없이 기능 테스트를 만들기 위한 플레이백 도구를 제공한다.\n-\xa0[위키백과](https://ko.wikipedia.org/wiki/%EC%85%80%EB%A0%88%EB%8A%84_(%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4))\n> \n\n Selenium을 이용하면 동적 웹 페이지를 크롤링 할 수 있는데, Selenium의 동작 방식은 다음과 같다.\n\n1. 웹 드라이버를 설정한다. 이는 각 브라우저별로 제공되는 독립 실행형 실행파일로, 각 브라우저와 통신 할 수 있게 도와준다.\n2. 웹 드라이버를 사용해 웹 브라우저를 열어 자동으로 제어할 수 있는 객체를 얻는다.\n3. 웹 페이지를 로드하고, DOM 트리를 구성한다.\n4. 자바스크립트를 하고 AJAX 요청을 처리해 동적으로 웹 페이지를 구성한다.\n5. 웹 페이지가 완전히 로드되면, 데이터를 추출한다.\n\n\n 동적인 웹페이지에선 **브라우저**가 자바 스크립트를 실행하여 데이터를 불러와 동적으로 웹 페이지를 생성한다.\n\n 즉, Selenium은 웹 드라이버를 사용해 웹 브라우저를 활용해 자바 스크립트를 실행하여 웹 페이지를 그리는 것이다 !\n\n## 🤔\xa0그래서 뭘 써야 할까?\n\n---\n\n 앞서 살펴본 동작방식에서 차이가 있다. 그래서 어떤 상황에서 무엇을 써야할까?\n\n 정적인 웹페이지를 크롤링 해야되는 상황에는 Jsoup과 같은 라이브러리를 사용하면 좋은 이유는 다음과 같다.\n Jsoup은 웹 브라우저를 사용하지 않아 브라우저 자체의 로딩 시간과 자바스크립트 실행에 필요한 시간이 없다. URL을 이용해 웹 페이지를 로드하거나, 직접 HTML 코드를 입력해 로드가 가능하기 때문에, 빠르고 경량화 된 것이다.\n\n동적인 웹페이지를 크롤링 해야되는 상황에는 Selenium과 Puppeteer와 같은 라이브러리를 사용하면 좋고, 이유는 다음과 같다.\n\n Jsoup은 Http Request를 통해 서버에서 보내오는 HTML 문서를 그대로 받아와 사용하고 처리한다. 그래서 CSR 상황에는 적절하지 않고, 브라우저를 이용해 웹 페이지를 그리고 가져와야 하기 때문 Selenium과 Puppeteer와 같은 라이브러리를 사용하는 것이 좋다.\n\n## 알게 된 점\n\n---\n\n 위와 같이 학습 내용을 정리하면서, 아래의 항목에 대해 깨닫게 되었다.\n\n- CSR과 SSR의 차이\n- Jsoup과 Selenium의 동작 방식\n- DOM 트리\n- 어떤 상황에서 어떠한 도구를 선택하는게 적절한지\n\n 크롤링을 처음하면서, 많은 내용을 학습하게 되었다. 예전부터 라이브러리를 선택할 때, 왜 그 라이브러리를 선택했고 어떤 방식으로 동작하는지 다른 라이브러리들과 차이점이 뭔지에 대해서 항상 고민하고 아는 것이 중요하다고 들었다. 이번 기회에 이와 같은 학습을 하면서 무지성으로 import 했던 자신에 대해 반성하게 되었던 것 같다.\n\n 앞으로는 라이브러리를 선택할 땐 적어도 왜 쓰는진 알고 선택해보자 !', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 421, 446, 377, 377, 380, 49703, 1198, 391, 560, 11881, 602, 456, 33, 11175, 47201, 4605, 69281, 1883, 10697, 3890, 696, 1051, 955, 634, 773, 22556, 373, 1883, 10697, 3890, 15546, 2373, 4641, 7730, 1130, 1060, 970, 2957, 643, 375, 560, 4854, 1883, 10697, 3890, 696, 3125, 67175, 657, 6121, 1180, 96565, 3090, 67175, 4605, 1821, 21046, 2870, 775, 4679, 18418, 634, 2516, 15913, 373, 2949, 2534, 3163, 67175, 1371, 732, 5571, 4935, 905, 773, 853, 373, 3090, 2876, 41728, 3090, 15546, 4605, 3329, 21046, 8354, 392, 560, 560, 421, 446, 377, 377, 380, 428, 376, 689, 1198, 391, 560, 560, 4961, 560, 560, 1757, 3163, 67175, 672, 84621, 4607, 560, 560, 4961, 560, 560, 5941, 84621, 4607, 90042, 392, 560, 560, 7874, 2718, 13456, 3163, 67175, 798, 6545, 4607, 696, 20032, 1060, 970, 2957, 643, 375, 582, 560, 560, 391, 6545, 4607, 732, 15447, 20440, 2373, 11503, 16524, 7957, 4605, 72412, 5422, 373, 13189, 2425, 15597, 1130, 37728, 9449, 16524, 6941, 6126, 11154, 67175, 10996, 375, 560, 374, 49475, 3387, 1548, 560, 391, 582, 560, 374, 84621, 4607, 732, 948, 6509, 6016, 16524, 15447, 1717, 6685, 706, 599, 15597, 67175, 40379, 375, 2626, 2373, 4703, 1075, 4198, 732, 4488, 2030, 1119, 643, 375, 560, 31, 378, 375, 15447, 1717, 6685, 387, 15447, 20440, 4605, 1717, 6685, 22226, 1316, 53148, 9702, 2484, 4605, 16769, 22226, 373, 15447, 20440, 730, 9517, 2373, 3497, 1060, 10625, 2870, 868, 773, 643, 375, 560, 31, 379, 375, 9517, 6276, 387, 20772, 3329, 942, 4605, 1821, 22226, 15447, 9517, 4605, 6276, 22226, 7957, 2373, 10625, 1130, 16519, 373, 13189, 2870, 868, 773, 643, 375, 560, 31, 374, 27591, 9702, 1868, 27591, 369, 18491, 36238, 9226, 9667, 370, 9702, 657, 15447, 373, 20100, 4978, 2126, 16905, 1257, 10978, 730, 20440, 4605, 5233, 1130, 657, 9702, 5630, 40379, 375, 560, 31, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 433, 2590, 424, 377, 382, 380, 376, 26713, 376, 384, 429, 386, 383, 385, 429, 377, 429, 374, 384, 386, 380, 381, 374, 381, 381, 381, 427, 374, 386, 381, 380, 427, 374, 431, 378, 380, 431, 385, 427, 379, 428, 379, 427, 386, 385, 376, 18958, 375, 441, 2345, 370, 560, 560, 31, 374, 2419, 1887, 13456, 19862, 1965, 798, 9702, 12947, 13456, 5233, 2870, 868, 773, 643, 375, 582, 560, 31, 634, 4605, 2364, 2534, 5630, 2373, 3497, 1060, 10625, 48199, 15597, 2870, 87460, 773, 643, 375, 582, 560, 31, 12246, 62131, 672, 14103, 62131, 4605, 7110, 9702, 730, 7075, 650, 8158, 373, 30694, 706, 599, 57041, 905, 26188, 96266, 375, 560, 560, 2949, 84621, 4607, 696, 2112, 657, 3071, 657, 36693, 392, 560, 560, 5941, 84621, 4607, 732, 2804, 76309, 392, 560, 560, 16204, 2664, 712, 44742, 798, 11574, 7696, 2030, 84906, 798, 11574, 7696, 373, 5645, 1316, 95473, 16444, 6064, 87346, 2484, 1548, 1316, 6055, 49544, 16444, 6064, 87346, 2484, 2373, 2409, 4164, 1137, 1367, 375, 582, 560, 33, 634, 2272, 732, 650, 2373, 2047, 7109, 905, 1579, 722, 1668, 2373, 5488, 1130, 1060, 3328, 1130, 942, 838, 373, 560, 560, 374, 1316, 95473, 16444, 6064, 87346, 369, 23423, 25994, 66633, 4216, 373, 68707, 370, 2484, 732, 11574, 13203, 4605, 18296, 41728, 6064, 87346, 696, 1547, 56794, 2373, 1060, 7820, 1130, 657, 924, 40379, 375, 560, 374, 1316, 6055, 49544, 16444, 6064, 87346, 369, 16483, 25994, 66633, 4216, 373, 49689, 370, 2484, 732, 11574, 13203, 9377, 86183, 954, 73850, 1548, 47201, 59588, 12291, 4605, 7820, 48199, 3428, 61559, 905, 47201, 59588, 4605, 12944, 22226, 7957, 4605, 8425, 2030, 1368, 41281, 11574, 13203, 4605, 16769, 10348, 375, 560, 560, 582, 560, 560, 84621, 4607, 732, 68707, 696, 2364, 5722, 6064, 87346, 16524, 44742, 798, 15447, 12291, 4605, 30824, 10348, 375, 84621, 4607, 732, 24166, 19449, 4605, 2364, 18296, 41728, 3399, 1235, 657, 15447, 20440, 4605, 5476, 69597, 2030, 1821, 48199, 5547, 10348, 375, 582, 560, 560, 21122, 373, 1316, 1002, 1965, 798, 11574, 7696, 2484, 4605, 1883, 10697, 3890, 1130, 15913, 2775, 1548, 23029, 696, 2034, 853, 773, 643, 375, 560, 560, 374, 11969, 48199, 37846, 1965, 798, 8682, 560, 374, 20772, 3329, 942, 4605, 1821, 999, 9517, 4605, 3329, 48199, 13189, 910, 370, 1316, 425, 26908, 425, 2484, 2012, 712, 1147, 560, 374, 5955, 853, 48093, 1255, 13452, 721, 1104, 732, 11758, 696, 8491, 560, 374, 27591, 9702, 7075, 715, 15447, 20440, 5630, 10625, 2373, 26188, 48199, 373, 38069, 10247, 13456, 764, 2841, 1075, 2012, 712, 1147, 1371, 696, 4078, 10348, 375, 910, 370, 1316, 425, 4689, 10309, 21458, 425, 2484, 373, 1316, 425, 4689, 37255, 6103, 8894, 425, 2484, 373, 1316, 425, 4689, 37255, 6103, 17756, 425, 2484, 560, 560, 5578, 1316, 977, 1965, 798, 11574, 7696, 2484, 2373, 1437, 84621, 4607, 634, 2804, 1084, 7888, 34325, 392, 2664, 8789, 2775, 1548, 1119, 732, 3071, 905, 773, 643, 375, 560, 560, 378, 375, 84621, 4607, 732, 24166, 19449, 4605, 2364, 18296, 41728, 3399, 1235, 657, 15447, 20440, 4605, 5476, 69597, 2030, 1821, 48199, 5547, 10348, 375, 582, 560, 379, 375, 3684, 84906, 798, 11574, 7696, 2373, 1437, 49689, 5073, 13456, 11574, 7696, 9377, 86183, 954, 73850, 1548, 47201, 59588, 12291, 4605, 7820, 48199, 373, 3428, 61559, 905, 47201, 59588, 4605, 12944, 22226, 7957, 4605, 8425, 2030, 1368, 41281, 11574, 13203, 4605, 16769, 10348, 375, 582, 560, 380, 375, 1668, 2373, 11574, 13203, 905, 86183, 13452, 853, 2583, 1452, 11574, 61559, 41728, 47201, 4183, 56386, 905, 12944, 13452, 36309, 691, 722, 1668, 2373, 24166, 8254, 1043, 13456, 657, 4025, 1075, 5630, 4605, 39169, 868, 1107, 722, 1668, 2373, 373, 84621, 4607, 634, 1104, 698, 1145, 643, 375, 560, 560, 6883, 373, 84906, 798, 11574, 7696, 5547, 1130, 657, 15546, 905, 2327, 96266, 375, 2949, 96630, 1548, 1119, 732, 67175, 4605, 1821, 10348, 375, 560, 560, 1757, 3163, 1965, 798, 84906, 11574, 13203, 15546, 96630, 560, 560, 4961, 560, 560, 391, 83831, 21155, 732, 11574, 38217, 4440, 1255, 2425, 10990, 4605, 3125, 47619, 2912, 18286, 13518, 40379, 375, 83831, 21155, 732, 10990, 59588, 10978, 4605, 7730, 2870, 2327, 2705, 4198, 10990, 4605, 2069, 722, 3125, 7865, 3387, 15546, 4605, 4078, 10348, 375, 560, 374, 974, 1595, 2113, 3387, 1548, 8064, 15385, 387, 9413, 13092, 375, 448, 20444, 375, 23632, 376, 89631, 376, 366, 5487, 366, 385, 382, 366, 385, 377, 366, 51692, 366, 394, 377, 366, 385, 385, 366, 51692, 366, 385, 394, 366, 385, 381, 95953, 366, 5487, 366, 385, 383, 366, 385, 396, 366, 3381, 366, 386, 381, 366, 385, 381, 366, 3381, 366, 385, 394, 366, 395, 385, 366, 5487, 366, 386, 395, 366, 394, 385, 366, 5487, 366, 386, 383, 366, 395, 381, 19146, 560, 391, 582, 560, 560, 96630, 696, 2785, 16559, 84906, 11574, 13203, 4605, 1883, 10697, 3890, 1051, 868, 773, 15913, 373, 96630, 730, 14288, 5073, 732, 2775, 1548, 1119, 643, 375, 560, 560, 378, 375, 11574, 32179, 4605, 8587, 10348, 375, 650, 657, 2534, 61559, 44065, 4078, 13452, 657, 12125, 12944, 2318, 12944, 54082, 715, 373, 2534, 61559, 2030, 7514, 1051, 868, 773, 1060, 6153, 15622, 375, 560, 379, 375, 11574, 32179, 4605, 1821, 999, 11574, 61559, 4605, 1873, 721, 4440, 13456, 23245, 2870, 868, 773, 657, 42225, 4605, 4573, 657, 643, 375, 560, 380, 375, 11574, 13203, 4605, 17099, 48199, 373, 27591, 9702, 4605, 4394, 10348, 375, 560, 381, 375, 47201, 4183, 56386, 4605, 9858, 75030, 8254, 696, 5547, 999, 1368, 41281, 11574, 13203, 4605, 4394, 10348, 375, 560, 382, 375, 11574, 13203, 905, 10839, 17099, 13452, 838, 373, 7957, 4605, 13189, 10348, 375, 560, 560, 560, 84906, 798, 11574, 7696, 2373, 1437, 1316, 21014, 962, 1415, 2484, 905, 47201, 59588, 4605, 12944, 22226, 7957, 4605, 8425, 2030, 1368, 41281, 11574, 13203, 4605, 16769, 10348, 375, 560, 560, 5645, 373, 96630, 732, 11574, 32179, 4605, 1821, 999, 11574, 61559, 4605, 4703, 999, 47201, 59588, 4605, 12944, 22226, 11574, 13203, 4605, 5097, 657, 924, 40379, 863, 560, 560, 1757, 90438, 604, 2949, 8284, 13491, 8354, 392, 560, 560, 4961, 560, 560, 8502, 55062, 14288, 52387, 41728, 4935, 905, 773, 643, 375, 2949, 3090, 2876, 41728, 4262, 696, 13491, 89493, 392, 560, 560, 44742, 798, 11574, 7696, 4605, 1883, 10697, 3890, 1992, 13452, 657, 2876, 97300, 84621, 4607, 1548, 1119, 732, 67175, 4605, 1821, 16559, 1104, 732, 3071, 657, 2775, 1548, 1119, 643, 375, 560, 84621, 4607, 732, 11574, 61559, 4605, 1821, 1130, 698, 1145, 1023, 61559, 4786, 730, 86183, 1590, 1548, 47201, 4183, 56386, 12944, 2373, 2327, 1075, 1590, 634, 1107, 643, 375, 3293, 696, 87633, 11574, 13203, 4605, 17099, 1130, 16519, 373, 3492, 15447, 12291, 4605, 13385, 999, 17099, 905, 1995, 76766, 1668, 2373, 373, 5955, 853, 48093, 1255, 1265, 924, 40379, 375, 560, 560, 977, 1965, 798, 11574, 7696, 4605, 1883, 10697, 3890, 1992, 13452, 657, 2876, 97300, 96630, 1548, 67252, 12999, 623, 2030, 1119, 732, 67175, 4605, 1821, 16559, 1104, 853, 373, 3071, 657, 2775, 1548, 1119, 643, 375, 560, 560, 84621, 4607, 732, 24166, 19449, 4605, 2364, 18296, 41728, 3399, 1235, 657, 15447, 20440, 4605, 5476, 69597, 2030, 1821, 48199, 5547, 10348, 375, 2949, 49689, 2876, 97300, 10252, 1130, 698, 1145, 853, 373, 61559, 4605, 87633, 11574, 13203, 4605, 2210, 37193, 1137, 691, 722, 1668, 96630, 1548, 67252, 12999, 623, 2030, 1119, 732, 67175, 4605, 1821, 1130, 657, 924, 634, 1104, 643, 375, 560, 560, 1757, 1360, 1060, 1265, 1694, 560, 560, 4961, 560, 560, 1144, 2030, 2485, 7730, 3311, 696, 4892, 16559, 712, 373, 4488, 730, 16966, 2373, 2409, 17165, 1060, 970, 2957, 643, 375, 560, 560, 374, 49689, 1548, 68707, 730, 4935, 560, 374, 84621, 4607, 1548, 96630, 730, 14288, 5073, 560, 374, 27591, 9702, 560, 374, 3090, 2876, 41728, 9269, 1075, 15546, 4605, 3329, 1130, 657, 1060, 10252, 1075, 698, 560, 560, 1883, 10697, 3890, 696, 2718, 16559, 712, 373, 1180, 732, 3311, 696, 7730, 1130, 1060, 970, 2957, 643, 375, 7204, 4560, 67175, 4605, 3329, 2870, 1105, 373, 2804, 855, 67175, 4605, 3329, 2662, 853, 3090, 5073, 13456, 14288, 1130, 59985, 2126, 67175, 1371, 1548, 29289, 634, 17280, 2373, 4641, 4604, 3474, 48199, 785, 657, 924, 634, 2963, 1130, 3401, 826, 2957, 643, 375, 2626, 5789, 2373, 650, 2030, 1119, 732, 7730, 696, 691, 838, 712, 14098, 1210, 13456, 2007, 932, 5623, 2572, 2373, 2409, 19358, 1130, 1060, 970, 2957, 5623, 924, 1119, 643, 375, 560, 560, 2048, 13456, 657, 67175, 4605, 3329, 2870, 6868, 19014, 2804, 2112, 657, 1146, 1360, 853, 3329, 999, 1280, 942, 863], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55070 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:51:41 engine.py:275] Added request cmpl-09b1370b34eb4ff5b5f919c1323f2b65-0.
INFO 02-16 22:51:41 engine.py:275] Added request cmpl-8f4d25f973da42a2838b2441ad98bd92-0.
INFO 02-16 22:51:42 logger.py:39] Received request cmpl-fee06760db1f4490896874bbe77b04fd-0: prompt: '아래 정보에 기반하여, 사용자의 질문에 답하세요.\n         UTC\n위의 문장에서 핵심 내용을 요약해주세요.\n\n\n        사용자 질문: 크롤링 라이브러리를 알아봐주고, 공통점과 차이점을 비교해줘 ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [13696, 3231, 2373, 8898, 22226, 373, 7332, 730, 5962, 2373, 3455, 1130, 5847, 375, 560, 26, 94595, 560, 1595, 730, 13742, 41728, 8771, 3311, 696, 16399, 999, 823, 5847, 375, 560, 560, 560, 27, 16167, 942, 5962, 387, 1883, 10697, 3890, 67175, 4605, 55662, 823, 853, 373, 37701, 1548, 29289, 696, 5080, 999, 15887, 582], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48598 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:51:42 engine.py:275] Added request cmpl-fee06760db1f4490896874bbe77b04fd-0.
INFO 02-16 22:51:52 metrics.py:455] Avg prompt throughput: 342.7 tokens/s, Avg generation throughput: 14.6 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 22:52:02 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 22:53:49 logger.py:39] Received request cmpl-a2719e09b32544558ca994534866f58a-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.[|system|] 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요.\n4. 하위 쿼리는 최대한 간단한 질문으로 만드세요. (예: "만약 날아다니는 스파게티 괴물이 창작물이나 상상력의 산물이라면, 그 창작물의 출처나 배경 정보 파악" 대신 "날아다니는 스파게티 괴물의 출처 파악"과 같이 간단하게 만드세요.)\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n[|assistant|]\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.[|endofturn|][|example|] 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n[|endofturn|]\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    [|user|] 조선 왕조에 대해 간략히 설명해줘. [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2939, 732, 582, 379, 377, 379, 382, 2171, 582, 377, 379, 2751, 582, 378, 383, 858, 10996, 375, 4484, 657, 582, 379, 377, 379, 382, 2171, 10996, 375, 2626, 1578, 732, 582, 379, 2751, 10996, 15954, 453, 47982, 453, 422, 5998, 732, 7205, 657, 12037, 1075, 5962, 1371, 696, 8019, 1075, 27498, 3644, 13456, 7872, 657, 1736, 2373, 4362, 1727, 1075, 7111, 10996, 375, 560, 378, 375, 24348, 5962, 696, 39380, 41281, 17661, 3644, 13456, 7872, 5847, 375, 560, 379, 375, 2534, 27498, 100048, 657, 1799, 730, 3644, 1043, 13456, 53712, 1481, 375, 7164, 2690, 1823, 730, 3644, 696, 4666, 1130, 698, 14182, 375, 688, 3027, 387, 6873, 2373, 1546, 1208, 2329, 730, 3231, 4605, 4415, 1130, 657, 3644, 1084, 2873, 375, 23784, 1222, 720, 9190, 715, 7135, 5658, 5962, 696, 8890, 37728, 691, 5847, 22442, 560, 380, 375, 582, 380, 1823, 8099, 730, 27498, 100048, 4605, 16769, 1130, 5847, 375, 560, 381, 375, 27498, 100048, 657, 9338, 5488, 1075, 5962, 13456, 5799, 5847, 375, 688, 3027, 387, 738, 20267, 69972, 657, 28874, 30874, 634, 23993, 1113, 37891, 42738, 730, 62058, 634, 17663, 373, 855, 23993, 1113, 730, 10411, 902, 10300, 3231, 7936, 363, 6414, 738, 1945, 1023, 8367, 657, 28874, 30874, 730, 10411, 7936, 363, 1548, 2485, 5488, 1130, 1060, 5799, 5847, 22442, 560, 381, 375, 9556, 732, 4488, 2030, 2485, 15214, 12947, 13456, 1992, 1481, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 20498, 26942, 23454, 1130, 1595, 100048, 582, 378, 9417, 738, 1130, 1595, 100048, 582, 379, 9417, 4377, 10924, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 14182, 375, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 1130, 5847, 375, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 4488, 32604, 4605, 5813, 5414, 9556, 696, 6016, 1130, 5847, 375, 3027, 954, 13385, 387, 11225, 1339, 18295, 657, 7135, 3930, 11966, 2373, 9633, 392, 3136, 1780, 2373, 6930, 5571, 9500, 1162, 696, 698, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 25999, 905, 9633, 657, 11966, 9417, 738, 49065, 905, 9633, 657, 11966, 9417, 738, 25999, 2030, 18295, 1126, 1162, 696, 924, 3093, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 16993, 373, 11819, 373, 5805, 730, 11282, 7460, 732, 3656, 91728, 392, 7135, 730, 3830, 14178, 3090, 18938, 5927, 696, 1821, 48199, 773, 657, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 54529, 730, 11282, 7460, 9417, 738, 22279, 730, 11282, 7460, 9417, 738, 34724, 730, 11282, 7460, 9417, 738, 54529, 373, 11819, 373, 5805, 730, 11282, 7460, 29289, 9417, 738, 54529, 730, 18938, 5927, 9417, 738, 22279, 730, 18938, 5927, 9417, 738, 34724, 730, 18938, 5927, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 11265, 4605, 1747, 657, 924, 634, 3164, 2373, 1104, 732, 905, 392, 11265, 1747, 37817, 1104, 732, 6620, 657, 4083, 798, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 23454, 39190, 1747, 722, 905, 3164, 2373, 11310, 657, 5282, 1996, 722, 9417, 738, 39190, 1747, 37817, 1104, 732, 6620, 1996, 722, 71045, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 41728, 7991, 13456, 713, 657, 40187, 2030, 77348, 13891, 3231, 4605, 5080, 999, 823, 853, 373, 2472, 8570, 1590, 696, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 20715, 40187, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 77348, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 40187, 2030, 77348, 5080, 9417, 560, 23, 363, 8397, 374, 20715, 1601, 1430, 15767, 13891, 834, 3093, 363, 560, 27, 422, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 4113, 1146, 830, 730, 17129, 4747, 1548, 16951, 4747, 696, 3504, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 19, 363, 2839, 1146, 830, 730, 17129, 4747, 9417, 560, 19, 363, 2839, 1254, 830, 730, 16951, 4747, 363, 560, 23, 422, 582, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 2879, 41728, 7646, 999, 13186, 373, 7967, 373, 18066, 4605, 10916, 4817, 76876, 3253, 2870, 3864, 74914, 373, 2534, 2878, 730, 7245, 23512, 2030, 3093, 3501, 696, 3504, 823, 853, 373, 17028, 730, 5346, 19597, 2030, 73414, 696, 5422, 999, 15887, 375, 3662, 5210, 15767, 1590, 1548, 5262, 696, 4666, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 32122, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 32122, 7245, 23512, 9417, 560, 23, 363, 32122, 3093, 3501, 9417, 560, 23, 363, 32122, 374, 23135, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 23135, 7245, 23512, 9417, 560, 23, 363, 23135, 3093, 3501, 9417, 560, 23, 363, 23135, 374, 44868, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 44868, 7245, 23512, 9417, 560, 23, 363, 44868, 3093, 3501, 9417, 560, 23, 363, 44868, 374, 12149, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 12149, 7245, 23512, 9417, 560, 23, 363, 12149, 3093, 3501, 9417, 560, 23, 363, 17793, 3253, 5210, 15767, 1590, 2425, 5262, 363, 560, 27, 422, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 715, 3253, 696, 713, 12438, 691, 15913, 4977, 905, 3835, 34325, 392, 2210, 3835, 732, 23512, 2131, 3093, 999, 15887, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 13225, 2879, 4977, 9417, 560, 23, 363, 8397, 7245, 23512, 363, 560, 27, 422, 560, 27, 454, 560, 361, 560, 560, 6297, 5962, 696, 2690, 78028, 27498, 5962, 13456, 7872, 33413, 5847, 375, 560, 31, 420, 453, 14719, 453, 422, 8493, 50451, 2373, 2409, 73581, 3328, 999, 15887, 375, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43862 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:53:49 engine.py:275] Added request cmpl-a2719e09b32544558ca994534866f58a-0.
INFO 02-16 22:53:49 metrics.py:455] Avg prompt throughput: 146.4 tokens/s, Avg generation throughput: 0.1 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 22:53:49 logger.py:39] Received request cmpl-a16275c65af64952a0d13da941b37d8e-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 조선 왕조 개요 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 8493, 50451, 49408, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43862 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:53:49 engine.py:275] Added request cmpl-a16275c65af64952a0d13da941b37d8e-0.
INFO 02-16 22:53:50 logger.py:39] Received request cmpl-f7a4a0b8acb74a09875265733cf0dc20-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 조선 왕조의 건국 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 8493, 50451, 730, 39832, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43862 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:53:50 engine.py:275] Added request cmpl-f7a4a0b8acb74a09875265733cf0dc20-0.
INFO 02-16 22:53:50 logger.py:39] Received request cmpl-aeb909bd9f9f49f49342ea327e4796d8-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 조선 왕조의 주요 역사적 사건 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 8493, 50451, 730, 7245, 6288, 1965, 5256, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43862 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:53:50 engine.py:275] Added request cmpl-aeb909bd9f9f49f49342ea327e4796d8-0.
INFO 02-16 22:53:51 logger.py:39] Received request cmpl-7949ce6e4d694023a6a93963477d2d4d-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 조선 왕조의 문화와 사회 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 8493, 50451, 730, 4373, 2030, 3347, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43862 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:53:51 engine.py:275] Added request cmpl-7949ce6e4d694023a6a93963477d2d4d-0.
INFO 02-16 22:53:51 logger.py:39] Received request cmpl-a72dba9542494056b6bc211247782045-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 조선 왕조의 멸망 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=2048, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 8493, 50451, 730, 36850, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43862 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:53:52 engine.py:275] Added request cmpl-a72dba9542494056b6bc211247782045-0.
INFO 02-16 22:54:02 metrics.py:455] Avg prompt throughput: 333.4 tokens/s, Avg generation throughput: 25.7 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 22:54:12 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 22:54:36 launcher.py:59] Shutting down FastAPI HTTP server.
INFO 02-16 22:54:36 multiproc_worker_utils.py:141] Terminating local vLLM worker processes
[1;36m(VllmWorkerProcess pid=3976358)[0;0m INFO 02-16 22:54:36 multiproc_worker_utils.py:253] Worker exiting
[1;36m(VllmWorkerProcess pid=3976359)[0;0m INFO 02-16 22:54:36 multiproc_worker_utils.py:253] Worker exiting
[1;36m(VllmWorkerProcess pid=3976360)[0;0m INFO 02-16 22:54:36 multiproc_worker_utils.py:253] Worker exiting
[rank0]:[W216 22:54:39.913313284 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
INFO:     Shutting down
INFO:     Waiting for application shutdown.
INFO:     Application shutdown complete.
/opt/anaconda3/lib/python3.12/multiprocessing/resource_tracker.py:254: UserWarning: resource_tracker: There appear to be 1 leaked shared_memory objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
INFO 02-16 22:57:19 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 22:57:20 api_server.py:840] vLLM API server version 0.7.2
INFO 02-16 22:57:20 api_server.py:841] args: Namespace(subparser='serve', model_tag='snunlp/bigdata_exaone3_7.8b_fft', config='', host=None, port=8000, uvicorn_log_level='info', allow_credentials=False, allowed_origins=['*'], allowed_methods=['*'], allowed_headers=['*'], api_key='token-snuintern2025', lora_modules=None, prompt_adapters=None, chat_template=None, chat_template_content_format='auto', response_role='assistant', ssl_keyfile=None, ssl_certfile=None, ssl_ca_certs=None, ssl_cert_reqs=0, root_path=None, middleware=[], return_tokens_as_token_ids=False, disable_frontend_multiprocessing=False, enable_request_id_headers=False, enable_auto_tool_choice=False, enable_reasoning=False, reasoning_parser=None, tool_call_parser=None, tool_parser_plugin='', model='snunlp/bigdata_exaone3_7.8b_fft', task='auto', tokenizer=None, skip_tokenizer_init=False, revision=None, code_revision=None, tokenizer_revision=None, tokenizer_mode='auto', trust_remote_code=False, allowed_local_media_path=None, download_dir=None, load_format='auto', config_format=<ConfigFormat.AUTO: 'auto'>, dtype='auto', kv_cache_dtype='auto', max_model_len=None, guided_decoding_backend='xgrammar', logits_processor_pattern=None, model_impl='auto', distributed_executor_backend=None, pipeline_parallel_size=1, tensor_parallel_size=4, max_parallel_loading_workers=None, ray_workers_use_nsight=False, block_size=None, enable_prefix_caching=None, disable_sliding_window=False, use_v2_block_manager=True, num_lookahead_slots=0, seed=0, swap_space=4, cpu_offload_gb=0, gpu_memory_utilization=0.9, num_gpu_blocks_override=None, max_num_batched_tokens=None, max_num_seqs=None, max_logprobs=20, disable_log_stats=False, quantization=None, rope_scaling=None, rope_theta=None, hf_overrides=None, enforce_eager=False, max_seq_len_to_capture=8192, disable_custom_all_reduce=False, tokenizer_pool_size=0, tokenizer_pool_type='ray', tokenizer_pool_extra_config=None, limit_mm_per_prompt=None, mm_processor_kwargs=None, disable_mm_preprocessor_cache=False, enable_lora=False, enable_lora_bias=False, max_loras=1, max_lora_rank=16, lora_extra_vocab_size=256, lora_dtype='auto', long_lora_scaling_factors=None, max_cpu_loras=None, fully_sharded_loras=False, enable_prompt_adapter=False, max_prompt_adapters=1, max_prompt_adapter_token=0, device='auto', num_scheduler_steps=1, multi_step_stream_outputs=True, scheduler_delay_factor=0.0, enable_chunked_prefill=None, speculative_model=None, speculative_model_quantization=None, num_speculative_tokens=None, speculative_disable_mqa_scorer=False, speculative_draft_tensor_parallel_size=None, speculative_max_model_len=None, speculative_disable_by_batch_size=None, ngram_prompt_lookup_max=None, ngram_prompt_lookup_min=None, spec_decoding_acceptance_method='rejection_sampler', typical_acceptance_sampler_posterior_threshold=None, typical_acceptance_sampler_posterior_alpha=None, disable_logprobs_during_spec_decoding=None, model_loader_extra_config=None, ignore_patterns=[], preemption_mode=None, served_model_name=None, qlora_adapter_name_or_path=None, otlp_traces_endpoint=None, collect_detailed_traces=None, disable_async_output_proc=False, scheduling_policy='fcfs', override_neuron_config=None, override_pooler_config=None, compilation_config=None, kv_transfer_config=None, worker_cls='auto', generation_config=None, override_generation_config=None, enable_sleep_mode=False, calculate_kv_scales=False, disable_log_requests=False, max_log_len=None, disable_fastapi_docs=False, enable_prompt_tokens_details=False, dispatch_function=<function serve at 0x7fbe44353ec0>)
INFO 02-16 22:57:20 api_server.py:206] Started engine process with PID 3979875
INFO 02-16 22:57:24 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 22:57:30 config.py:542] This model supports multiple tasks: {'classify', 'embed', 'generate', 'reward', 'score'}. Defaulting to 'generate'.
INFO 02-16 22:57:30 config.py:1401] Defaulting to use mp for distributed inference
INFO 02-16 22:57:38 config.py:542] This model supports multiple tasks: {'reward', 'classify', 'generate', 'score', 'embed'}. Defaulting to 'generate'.
INFO 02-16 22:57:38 config.py:1401] Defaulting to use mp for distributed inference
INFO 02-16 22:57:38 llm_engine.py:234] Initializing a V0 LLM engine (v0.7.2) with config: model='snunlp/bigdata_exaone3_7.8b_fft', speculative_config=None, tokenizer='snunlp/bigdata_exaone3_7.8b_fft', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=4, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=snunlp/bigdata_exaone3_7.8b_fft, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=True, 
WARNING 02-16 22:57:39 multiproc_worker_utils.py:300] Reducing Torch parallelism from 40 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
INFO 02-16 22:57:39 custom_cache_manager.py:19] Setting Triton cache manager to: vllm.triton_utils.custom_cache_manager:CustomCacheManager
INFO 02-16 22:57:40 cuda.py:230] Using Flash Attention backend.
INFO 02-16 22:57:43 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 22:57:43 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 22:57:43 __init__.py:190] Automatically detected platform cuda.
[1;36m(VllmWorkerProcess pid=3980441)[0;0m INFO 02-16 22:57:44 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3980440)[0;0m INFO 02-16 22:57:44 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3980439)[0;0m INFO 02-16 22:57:44 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3980440)[0;0m INFO 02-16 22:57:45 cuda.py:230] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=3980441)[0;0m INFO 02-16 22:57:45 cuda.py:230] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=3980439)[0;0m INFO 02-16 22:57:45 cuda.py:230] Using Flash Attention backend.
INFO 02-16 22:57:46 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3980441)[0;0m INFO 02-16 22:57:46 utils.py:950] Found nccl from library libnccl.so.2
INFO 02-16 22:57:46 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3980441)[0;0m INFO 02-16 22:57:46 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3980439)[0;0m INFO 02-16 22:57:46 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3980440)[0;0m INFO 02-16 22:57:46 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3980439)[0;0m INFO 02-16 22:57:46 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3980440)[0;0m INFO 02-16 22:57:46 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3980441)[0;0m WARNING 02-16 22:57:47 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
[1;36m(VllmWorkerProcess pid=3980440)[0;0m WARNING 02-16 22:57:47 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
[1;36m(VllmWorkerProcess pid=3980439)[0;0m WARNING 02-16 22:57:47 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
WARNING 02-16 22:57:47 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
INFO 02-16 22:57:47 shm_broadcast.py:258] vLLM message queue communication handle: Handle(connect_ip='127.0.0.1', local_reader_ranks=[1, 2, 3], buffer_handle=(3, 4194304, 6, 'psm_8b48449b'), local_subscribe_port=44651, remote_subscribe_port=None)
INFO 02-16 22:57:47 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3980440)[0;0m INFO 02-16 22:57:47 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3980439)[0;0m INFO 02-16 22:57:47 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3980441)[0;0m INFO 02-16 22:57:47 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
INFO 02-16 22:57:48 weight_utils.py:252] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=3980440)[0;0m INFO 02-16 22:57:48 weight_utils.py:252] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=3980439)[0;0m INFO 02-16 22:57:48 weight_utils.py:252] Using model weights format ['*.safetensors']
Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:00<00:01,  1.99it/s]
Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:01<00:01,  1.89it/s]
Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:01<00:00,  2.93it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:01<00:00,  2.46it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:01<00:00,  2.39it/s]

INFO 02-16 22:57:50 model_runner.py:1115] Loading model weights took 3.6422 GB
[1;36m(VllmWorkerProcess pid=3980439)[0;0m INFO 02-16 22:57:51 model_runner.py:1115] Loading model weights took 3.6422 GB
[1;36m(VllmWorkerProcess pid=3980440)[0;0m INFO 02-16 22:57:51 model_runner.py:1115] Loading model weights took 3.6422 GB
[1;36m(VllmWorkerProcess pid=3980441)[0;0m INFO 02-16 22:57:58 weight_utils.py:252] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=3980441)[0;0m INFO 02-16 22:58:00 model_runner.py:1115] Loading model weights took 3.6422 GB
[1;36m(VllmWorkerProcess pid=3980441)[0;0m INFO 02-16 22:58:05 worker.py:267] Memory profiling takes 3.79 seconds
[1;36m(VllmWorkerProcess pid=3980441)[0;0m INFO 02-16 22:58:05 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3980441)[0;0m INFO 02-16 22:58:05 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.25GiB; the rest of the memory reserved for KV Cache is 31.29GiB.
[1;36m(VllmWorkerProcess pid=3980439)[0;0m INFO 02-16 22:58:05 worker.py:267] Memory profiling takes 3.84 seconds
[1;36m(VllmWorkerProcess pid=3980439)[0;0m INFO 02-16 22:58:05 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3980439)[0;0m INFO 02-16 22:58:05 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.25GiB; the rest of the memory reserved for KV Cache is 31.29GiB.
[1;36m(VllmWorkerProcess pid=3980440)[0;0m INFO 02-16 22:58:05 worker.py:267] Memory profiling takes 3.87 seconds
[1;36m(VllmWorkerProcess pid=3980440)[0;0m INFO 02-16 22:58:05 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3980440)[0;0m INFO 02-16 22:58:05 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.25GiB; the rest of the memory reserved for KV Cache is 31.29GiB.
INFO 02-16 22:58:05 worker.py:267] Memory profiling takes 3.92 seconds
INFO 02-16 22:58:05 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
INFO 02-16 22:58:05 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.97GiB; the rest of the memory reserved for KV Cache is 30.57GiB.
INFO 02-16 22:58:05 executor_base.py:110] # CUDA blocks: 62599, # CPU blocks: 8192
INFO 02-16 22:58:05 executor_base.py:115] Maximum concurrency for 4096 tokens per request: 244.53x
INFO 02-16 22:58:07 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s][1;36m(VllmWorkerProcess pid=3980441)[0;0m INFO 02-16 22:58:07 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=3980439)[0;0m INFO 02-16 22:58:07 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=3980440)[0;0m INFO 02-16 22:58:07 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:25,  1.33it/s]Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:01<00:23,  1.39it/s]Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:02<00:22,  1.44it/s]Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:02<00:21,  1.45it/s]Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:03<00:20,  1.43it/s]Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:04<00:19,  1.48it/s]Capturing CUDA graph shapes:  20%|██        | 7/35 [00:04<00:19,  1.46it/s]Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:05<00:18,  1.47it/s]Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:06<00:17,  1.45it/s]Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:06<00:16,  1.49it/s]Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:07<00:16,  1.49it/s]Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:08<00:15,  1.51it/s]Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:08<00:14,  1.51it/s]Capturing CUDA graph shapes:  40%|████      | 14/35 [00:09<00:13,  1.52it/s]Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:10<00:13,  1.53it/s]Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:10<00:12,  1.53it/s]Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:11<00:11,  1.56it/s]Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:12<00:10,  1.56it/s]Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:12<00:10,  1.55it/s]Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:13<00:09,  1.60it/s]Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:13<00:08,  1.61it/s]Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:14<00:08,  1.58it/s]Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:15<00:07,  1.61it/s]Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:15<00:06,  1.61it/s]Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:16<00:06,  1.61it/s]Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:16<00:05,  1.62it/s]Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:17<00:04,  1.60it/s]Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:18<00:04,  1.62it/s]Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:18<00:03,  1.58it/s]Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:19<00:03,  1.60it/s]Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:20<00:02,  1.63it/s]Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:20<00:01,  1.62it/s]Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:21<00:01,  1.64it/s]Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:21<00:00,  1.64it/s][1;36m(VllmWorkerProcess pid=3980439)[0;0m INFO 02-16 22:58:30 model_runner.py:1562] Graph capturing finished in 23 secs, took 1.21 GiB
[1;36m(VllmWorkerProcess pid=3980441)[0;0m INFO 02-16 22:58:30 model_runner.py:1562] Graph capturing finished in 23 secs, took 1.21 GiB
[1;36m(VllmWorkerProcess pid=3980440)[0;0m INFO 02-16 22:58:30 model_runner.py:1562] Graph capturing finished in 23 secs, took 1.21 GiB
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:22<00:00,  1.37it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:22<00:00,  1.53it/s]
INFO 02-16 22:58:30 model_runner.py:1562] Graph capturing finished in 23 secs, took 1.22 GiB
INFO 02-16 22:58:30 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 29.75 seconds
INFO 02-16 22:58:31 api_server.py:756] Using supplied chat template:
INFO 02-16 22:58:31 api_server.py:756] None
INFO 02-16 22:58:31 launcher.py:21] Available routes are:
INFO 02-16 22:58:31 launcher.py:29] Route: /openapi.json, Methods: HEAD, GET
INFO 02-16 22:58:31 launcher.py:29] Route: /docs, Methods: HEAD, GET
INFO 02-16 22:58:31 launcher.py:29] Route: /docs/oauth2-redirect, Methods: HEAD, GET
INFO 02-16 22:58:31 launcher.py:29] Route: /redoc, Methods: HEAD, GET
INFO 02-16 22:58:31 launcher.py:29] Route: /health, Methods: GET
INFO 02-16 22:58:31 launcher.py:29] Route: /ping, Methods: POST, GET
INFO 02-16 22:58:31 launcher.py:29] Route: /tokenize, Methods: POST
INFO 02-16 22:58:31 launcher.py:29] Route: /detokenize, Methods: POST
INFO 02-16 22:58:31 launcher.py:29] Route: /v1/models, Methods: GET
INFO 02-16 22:58:31 launcher.py:29] Route: /version, Methods: GET
INFO 02-16 22:58:31 launcher.py:29] Route: /v1/chat/completions, Methods: POST
INFO 02-16 22:58:31 launcher.py:29] Route: /v1/completions, Methods: POST
INFO 02-16 22:58:31 launcher.py:29] Route: /v1/embeddings, Methods: POST
INFO 02-16 22:58:31 launcher.py:29] Route: /pooling, Methods: POST
INFO 02-16 22:58:31 launcher.py:29] Route: /score, Methods: POST
INFO 02-16 22:58:31 launcher.py:29] Route: /v1/score, Methods: POST
INFO 02-16 22:58:31 launcher.py:29] Route: /rerank, Methods: POST
INFO 02-16 22:58:31 launcher.py:29] Route: /v1/rerank, Methods: POST
INFO 02-16 22:58:31 launcher.py:29] Route: /v2/rerank, Methods: POST
INFO 02-16 22:58:31 launcher.py:29] Route: /invocations, Methods: POST
INFO:     Started server process [3979707]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
INFO 02-16 22:58:55 chat_utils.py:332] Detected the chat template content format to be 'string'. You can set `--chat-template-content-format` to override this.
INFO 02-16 22:58:55 logger.py:39] Received request chatcmpl-7d6294053fb444c99031206613f5d46a: prompt: '[|system|][|endofturn|]\n[|user|]세종대왕에 대해 알려줘.\n[|assistant|]', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4070, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: None, lora_request: None, prompt_adapter_request: None.
INFO 02-16 22:58:55 engine.py:275] Added request chatcmpl-7d6294053fb444c99031206613f5d46a.
INFO 02-16 22:58:56 metrics.py:455] Avg prompt throughput: 5.2 tokens/s, Avg generation throughput: 11.4 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO:     127.0.0.1:59168 - "POST /v1/chat/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:09 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 28.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 22:59:19 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 22:59:20 logger.py:39] Received request cmpl-756f3e11b1d44a699f256269c8c63551-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.[|system|] 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요.\n4. 하위 쿼리는 최대한 간단한 질문으로 만드세요. (예: "만약 날아다니는 스파게티 괴물이 창작물이나 상상력의 산물이라면, 그 창작물의 출처나 배경 정보 파악" 대신 "날아다니는 스파게티 괴물의 출처 파악"과 같이 간단하게 만드세요.)\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n[|assistant|]\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.[|endofturn|][|example|] 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n[|endofturn|]\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    [|user|] 서버사이드 프로그래밍에 대해 알려줘 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2939, 732, 582, 379, 377, 379, 382, 2171, 582, 377, 379, 2751, 582, 378, 383, 858, 10996, 375, 4484, 657, 582, 379, 377, 379, 382, 2171, 10996, 375, 2626, 1578, 732, 582, 379, 2751, 10996, 15954, 453, 47982, 453, 422, 5998, 732, 7205, 657, 12037, 1075, 5962, 1371, 696, 8019, 1075, 27498, 3644, 13456, 7872, 657, 1736, 2373, 4362, 1727, 1075, 7111, 10996, 375, 560, 378, 375, 24348, 5962, 696, 39380, 41281, 17661, 3644, 13456, 7872, 5847, 375, 560, 379, 375, 2534, 27498, 100048, 657, 1799, 730, 3644, 1043, 13456, 53712, 1481, 375, 7164, 2690, 1823, 730, 3644, 696, 4666, 1130, 698, 14182, 375, 688, 3027, 387, 6873, 2373, 1546, 1208, 2329, 730, 3231, 4605, 4415, 1130, 657, 3644, 1084, 2873, 375, 23784, 1222, 720, 9190, 715, 7135, 5658, 5962, 696, 8890, 37728, 691, 5847, 22442, 560, 380, 375, 582, 380, 1823, 8099, 730, 27498, 100048, 4605, 16769, 1130, 5847, 375, 560, 381, 375, 27498, 100048, 657, 9338, 5488, 1075, 5962, 13456, 5799, 5847, 375, 688, 3027, 387, 738, 20267, 69972, 657, 28874, 30874, 634, 23993, 1113, 37891, 42738, 730, 62058, 634, 17663, 373, 855, 23993, 1113, 730, 10411, 902, 10300, 3231, 7936, 363, 6414, 738, 1945, 1023, 8367, 657, 28874, 30874, 730, 10411, 7936, 363, 1548, 2485, 5488, 1130, 1060, 5799, 5847, 22442, 560, 381, 375, 9556, 732, 4488, 2030, 2485, 15214, 12947, 13456, 1992, 1481, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 20498, 26942, 23454, 1130, 1595, 100048, 582, 378, 9417, 738, 1130, 1595, 100048, 582, 379, 9417, 4377, 10924, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 14182, 375, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 1130, 5847, 375, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 4488, 32604, 4605, 5813, 5414, 9556, 696, 6016, 1130, 5847, 375, 3027, 954, 13385, 387, 11225, 1339, 18295, 657, 7135, 3930, 11966, 2373, 9633, 392, 3136, 1780, 2373, 6930, 5571, 9500, 1162, 696, 698, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 25999, 905, 9633, 657, 11966, 9417, 738, 49065, 905, 9633, 657, 11966, 9417, 738, 25999, 2030, 18295, 1126, 1162, 696, 924, 3093, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 16993, 373, 11819, 373, 5805, 730, 11282, 7460, 732, 3656, 91728, 392, 7135, 730, 3830, 14178, 3090, 18938, 5927, 696, 1821, 48199, 773, 657, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 54529, 730, 11282, 7460, 9417, 738, 22279, 730, 11282, 7460, 9417, 738, 34724, 730, 11282, 7460, 9417, 738, 54529, 373, 11819, 373, 5805, 730, 11282, 7460, 29289, 9417, 738, 54529, 730, 18938, 5927, 9417, 738, 22279, 730, 18938, 5927, 9417, 738, 34724, 730, 18938, 5927, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 11265, 4605, 1747, 657, 924, 634, 3164, 2373, 1104, 732, 905, 392, 11265, 1747, 37817, 1104, 732, 6620, 657, 4083, 798, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 23454, 39190, 1747, 722, 905, 3164, 2373, 11310, 657, 5282, 1996, 722, 9417, 738, 39190, 1747, 37817, 1104, 732, 6620, 1996, 722, 71045, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 41728, 7991, 13456, 713, 657, 40187, 2030, 77348, 13891, 3231, 4605, 5080, 999, 823, 853, 373, 2472, 8570, 1590, 696, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 20715, 40187, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 77348, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 40187, 2030, 77348, 5080, 9417, 560, 23, 363, 8397, 374, 20715, 1601, 1430, 15767, 13891, 834, 3093, 363, 560, 27, 422, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 4113, 1146, 830, 730, 17129, 4747, 1548, 16951, 4747, 696, 3504, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 19, 363, 2839, 1146, 830, 730, 17129, 4747, 9417, 560, 19, 363, 2839, 1254, 830, 730, 16951, 4747, 363, 560, 23, 422, 582, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 2879, 41728, 7646, 999, 13186, 373, 7967, 373, 18066, 4605, 10916, 4817, 76876, 3253, 2870, 3864, 74914, 373, 2534, 2878, 730, 7245, 23512, 2030, 3093, 3501, 696, 3504, 823, 853, 373, 17028, 730, 5346, 19597, 2030, 73414, 696, 5422, 999, 15887, 375, 3662, 5210, 15767, 1590, 1548, 5262, 696, 4666, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 32122, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 32122, 7245, 23512, 9417, 560, 23, 363, 32122, 3093, 3501, 9417, 560, 23, 363, 32122, 374, 23135, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 23135, 7245, 23512, 9417, 560, 23, 363, 23135, 3093, 3501, 9417, 560, 23, 363, 23135, 374, 44868, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 44868, 7245, 23512, 9417, 560, 23, 363, 44868, 3093, 3501, 9417, 560, 23, 363, 44868, 374, 12149, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 12149, 7245, 23512, 9417, 560, 23, 363, 12149, 3093, 3501, 9417, 560, 23, 363, 17793, 3253, 5210, 15767, 1590, 2425, 5262, 363, 560, 27, 422, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 715, 3253, 696, 713, 12438, 691, 15913, 4977, 905, 3835, 34325, 392, 2210, 3835, 732, 23512, 2131, 3093, 999, 15887, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 13225, 2879, 4977, 9417, 560, 23, 363, 8397, 7245, 23512, 363, 560, 27, 422, 560, 27, 454, 560, 361, 560, 560, 6297, 5962, 696, 2690, 78028, 27498, 5962, 13456, 7872, 33413, 5847, 375, 560, 31, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 2373, 2409, 3504, 15887, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:49948 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:20 engine.py:275] Added request cmpl-756f3e11b1d44a699f256269c8c63551-0.
INFO 02-16 22:59:21 logger.py:39] Received request cmpl-11f083bff90c42f7854faba694f7f719-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 정의 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 11476, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:49948 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:21 engine.py:275] Added request cmpl-11f083bff90c42f7854faba694f7f719-0.
INFO 02-16 22:59:21 logger.py:39] Received request cmpl-89f96be8fa7d47fba9b729f8f56d514e-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 특징 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 8574, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:49948 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:21 engine.py:275] Added request cmpl-89f96be8fa7d47fba9b729f8f56d514e-0.
INFO 02-16 22:59:24 metrics.py:455] Avg prompt throughput: 556.1 tokens/s, Avg generation throughput: 81.6 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 22:59:25 logger.py:39] Received request cmpl-230be9d3a3dd46c39256e42addda6f79-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 장점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 7306, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:49948 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:25 engine.py:275] Added request cmpl-230be9d3a3dd46c39256e42addda6f79-0.
INFO 02-16 22:59:27 logger.py:39] Received request cmpl-7cf7b589b5e34e208d68c3bd6ca48455-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 단점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 13263, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:49948 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:27 engine.py:275] Added request cmpl-7cf7b589b5e34e208d68c3bd6ca48455-0.
INFO 02-16 22:59:29 metrics.py:455] Avg prompt throughput: 355.5 tokens/s, Avg generation throughput: 121.6 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 22:59:32 logger.py:39] Received request cmpl-8fed317fa84845fabba22adcdadf87a2-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 사용 사례 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 1821, 8224, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:49948 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:32 engine.py:275] Added request cmpl-8fed317fa84845fabba22adcdadf87a2-0.
INFO 02-16 22:59:34 logger.py:39] Received request cmpl-211ee0ca08bd488e9bd7219cc7143f2d-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        서버 사이드 개발은 웹 애플리케이션의 백엔드 측을 구축하는 프로그래밍 작업으로, 사용자 요청을 처리하고 데이터를 제공하는 역할을 합니다. 이 글에서는 서버 사이드 개발의 개념과 중요성에 대해 알아보고, 백엔드 개발의 주요 내용을 다룰 것입니다.\n서버 사이드 개발의 개념\n서버 사이드 개발은 웹 애플리케이션 또는 다른 네트워크 기반 애플리케이션에서 클라이언트 요청을 처리하고 데이터를 제공하는 부분을 담당하는 개발 프로세스입니다. 서버 사이드 개발은 서버 측에서 실행되며, 클라이언트의 요청에 응답하고 필요한 데이터를 처리하고 반환합니다. 서버 사이드 개발은 다양한 언어와 프레임워크를 사용하여 이루어집니다. 주로 사용되는 언어로는 Java, Python, Ruby, PHP 등이 있으며, 프레임워크로는 Spring, Django, Ruby on Rails, Laravel 등이 있습니다. 이러한 언어와 프레임워크는 개발자가 효율적이고 안정적인 서버 사이드 애플리케이션을 구축할 수 있도록 도와줍니다. 서버 사이드 개발은 다양한 기능과 기술을 다룹니다. 데이터베이스와의 상호작용, 보안 및 인증, 성능 최적화, API 설계, 비즈니스 로직 구현 등이 그중 일부입니다. 또한, 서버 사이드 개발은 확장성과 활용성을 고려하여 서버 아키텍처를 설계하고, 클라이언트와의 효율적인 통신을 위해 RESTful API, 웹 소켓 등과 같은 통신 프로토콜을 사용하기도 합니다.\n백엔드 프로그래밍 언어와 프레임워크\n주로 사용되는 백엔드 프로그래밍 언어로는 Java, Python, Ruby, PHP, Node.js 등이 있습니다. 각 언어마다 특징과 장단점이 있으며, 개발자는 프로젝트의 요구 사항과 성격에 맞는 언어를 선택합니다. Java는 객체지향적이고 안정적인 성능을 제공하며, Python은 가독성이 높고 생산성이 좋습니다. Ruby는 간결하고 유연한 문법을 가지며, PHP는 웹 개발에 특화되어 있습니다. Node.js는 JavaScript 기반으로 동작하며, 비동기식 프로그래밍을 지원하여 높은 처리량과 확장성을 가집니다. 각 백엔드 프로그래밍 언어에는 해당 언어를 활용한 다양한 프레임워크가 존재합니다. 프레임워크는 개발자가 애플리케이션의 핵심 로직에 집중할 수 있도록 기본 구조와 기능을 제공합니다. 예를 들어, Java의 Spring 프레임워크는 의존성 주입(Dependency Injection), MVC 아키텍처 패턴, 데이터베이스 연동 등을 지원하여 개발자가 생산성을 높이고 품질 좋은 애플리케이션을 개발할 수 있도록 도와줍니다. Python의 Django, Ruby의 Ruby on Rails, PHP의 Laravel 등도 마찬가지로 각 언어에 대한 효율적인 개발 환경을 제공합니다.\n데이터베이스와의 연동\n백엔드 프로그래밍에서 데이터베이스와의 연동은 핵심적인 역할을 수행합니다. 데이터베이스는 애플리케이션의 데이터를 저장하고 관리하는 역할을 담당하며, 백엔드 개발자는 데이터베이스와의 연동을 통해 데이터를 읽고 쓰며 애플리케이션의 비즈니스 로직을 구현합니다. 데이터베이스와의 연동을 위해 백엔드 개발자는 SQL(Structured Query Language)을 사용합니다. SQL은 데이터베이스 관리 시스템(DBMS)과 상호 작용하기 위한 표준화된 언어로, 데이터베이스에 쿼리를 전달하고 결과를 받아오는 역할을 수행합니다. SQL을 사용하여 데이터베이스에 테이블을 생성하고 수정하며, 데이터를 삽입, 수정, 삭제하고 조회할 수 있습니다. 데이터베이스와의 연동은 일반적으로 DBMS와의 드라이버를 사용하여 이루어집니다. 백엔드 프로그래밍 언어에는 다양한 DBMS와의 연동을 지원하는 드라이버가 제공되며, 이를 활용하여 데이터베이스에 접속하고 쿼리를 실행합니다. 드라이버를 통해 데이터베이스와의 연결을 설정하고, SQL 문을 실행하여 데이터를 조회하거나 수정할 수 있습니다. 이를 통해 백엔드 개발자는 데이터베이스의 테이블과 컬럼을 활용하여 데이터를 조작하고 필요한 정보를 애플리케이션에 제공할 수 있습니다. 데이터베이스와의 연동은 애플리케이션의 데이터 관리와 동시에 데이터의 일관성, 안전성, 보안성을 보장하는 중요한 요소입니다. 백엔드 개발자는 데이터베이스 스키마 설계, 쿼리의 최적화, 트랜잭션 관리 등을 고려하여 데이터베이스와의 효율적이고 안정적인 연동을 구현해야 합니다. 또한, ORM(Object-Relational Mapping)을 활용하여 객체와 데이터베이스 간의 매핑을 자동화할 수도 있으며, 이를 통해 개발자는 보다 직관적이고 편리한 방식으로 데이터를 다룰 수 있습니다.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 95473, 16444, 4003, 732, 11574, 38217, 730, 2599, 65840, 4387, 696, 9472, 1130, 657, 42980, 3644, 13456, 373, 7332, 8254, 696, 5547, 48199, 7957, 4605, 4078, 1130, 657, 6034, 696, 1481, 375, 650, 2272, 41728, 657, 18296, 16444, 4003, 730, 9711, 1548, 2963, 1210, 2373, 2409, 5337, 853, 373, 2599, 65840, 4003, 730, 7245, 3311, 696, 48149, 924, 10996, 375, 560, 95473, 16444, 4003, 730, 9711, 560, 95473, 16444, 4003, 732, 11574, 38217, 4978, 2126, 15227, 8898, 38217, 41728, 56794, 8254, 696, 5547, 48199, 7957, 4605, 4078, 1130, 657, 2578, 696, 8065, 1130, 657, 4003, 33427, 10996, 375, 18296, 16444, 4003, 732, 18296, 4387, 41728, 12944, 13452, 1877, 373, 56794, 730, 8254, 2373, 16352, 48199, 2327, 1075, 7957, 4605, 5547, 48199, 30824, 14010, 375, 18296, 16444, 4003, 732, 2841, 1075, 10978, 2030, 18286, 13518, 4605, 1821, 22226, 68635, 375, 8011, 1821, 13452, 657, 10978, 715, 657, 11154, 373, 14138, 373, 30967, 373, 21479, 1222, 634, 773, 5718, 373, 18286, 13518, 715, 657, 16934, 373, 38493, 373, 30967, 807, 50760, 373, 82417, 1222, 634, 773, 50747, 375, 4476, 1075, 10978, 2030, 18286, 13518, 657, 33468, 905, 9687, 1965, 634, 853, 5957, 1965, 798, 18296, 16444, 38217, 696, 9472, 2870, 868, 773, 37728, 6153, 24244, 375, 18296, 16444, 4003, 732, 2841, 1075, 4198, 1548, 3755, 696, 694, 6516, 819, 375, 51359, 2030, 730, 14885, 14052, 373, 13949, 2425, 7741, 373, 11758, 64620, 373, 8682, 9449, 373, 18938, 54794, 19495, 1222, 634, 82729, 5720, 10996, 375, 3662, 373, 18296, 16444, 4003, 732, 12472, 1210, 1548, 4703, 1210, 696, 6581, 22226, 18296, 42188, 20151, 2351, 4605, 9449, 48199, 373, 56794, 2030, 730, 9687, 1965, 798, 7514, 696, 1902, 35231, 1993, 8682, 373, 11574, 92194, 1222, 1548, 1119, 732, 7514, 72829, 696, 1821, 1130, 46461, 1481, 375, 560, 3387, 65840, 42980, 10978, 2030, 18286, 13518, 560, 32512, 1821, 13452, 657, 2599, 65840, 42980, 10978, 715, 657, 11154, 373, 14138, 373, 30967, 373, 21479, 373, 19206, 375, 12716, 1222, 634, 773, 50747, 375, 2534, 10978, 34445, 8574, 1548, 42622, 634, 773, 5718, 373, 33468, 657, 10902, 730, 6453, 6318, 1548, 8984, 2373, 1867, 657, 10978, 4605, 3329, 14010, 375, 11154, 657, 42225, 698, 2368, 1965, 634, 853, 5957, 1965, 798, 11758, 696, 4078, 1130, 1877, 373, 14138, 732, 713, 2822, 35604, 2388, 853, 5865, 35604, 1104, 50747, 375, 30967, 657, 48360, 48199, 20211, 1075, 28664, 696, 2034, 1877, 373, 21479, 657, 11574, 4003, 2373, 24778, 13452, 721, 773, 50747, 375, 19206, 375, 12716, 657, 20820, 8898, 13456, 14288, 1130, 1877, 373, 1202, 50048, 1286, 42980, 696, 3157, 22226, 2388, 732, 5547, 1983, 1548, 12472, 1210, 696, 713, 11903, 375, 2534, 2599, 65840, 42980, 10978, 97300, 5299, 10978, 4605, 4703, 1075, 2841, 1075, 18286, 13518, 905, 5582, 14010, 375, 18286, 13518, 657, 33468, 905, 38217, 730, 8771, 54794, 2373, 5359, 2870, 868, 773, 37728, 4214, 5630, 2030, 4198, 696, 4078, 14010, 375, 1288, 4605, 1944, 373, 11154, 730, 16934, 18286, 13518, 657, 20665, 1210, 27218, 369, 97620, 74760, 5445, 49108, 42188, 20151, 2351, 13249, 373, 51359, 24108, 1222, 696, 3157, 22226, 33468, 905, 5865, 1210, 696, 7485, 853, 12326, 1104, 732, 38217, 696, 4003, 2870, 868, 773, 37728, 6153, 24244, 375, 14138, 730, 38493, 373, 30967, 730, 30967, 807, 50760, 373, 21479, 730, 82417, 1222, 720, 9190, 715, 2534, 10978, 2373, 2047, 9687, 1965, 798, 4003, 4576, 696, 4078, 14010, 375, 560, 64766, 35972, 2030, 730, 24108, 560, 3387, 65840, 42980, 41728, 51359, 2030, 730, 24108, 732, 8771, 1965, 798, 6034, 696, 9425, 14010, 375, 51359, 657, 38217, 730, 7957, 4605, 11503, 48199, 2645, 1130, 657, 6034, 696, 8065, 1130, 1877, 373, 2599, 65840, 33468, 657, 51359, 2030, 730, 24108, 696, 2364, 7957, 4605, 3405, 853, 2112, 1877, 38217, 730, 18938, 54794, 696, 19495, 14010, 375, 51359, 2030, 730, 24108, 696, 1902, 2599, 65840, 33468, 657, 14339, 369, 412, 47243, 29796, 20709, 370, 696, 1821, 14010, 375, 14339, 732, 51359, 2645, 5309, 369, 14947, 6865, 370, 1548, 14885, 9368, 76766, 3125, 16203, 1255, 16524, 10978, 715, 373, 51359, 2373, 100048, 4605, 7820, 48199, 3336, 4605, 1374, 40223, 657, 6034, 696, 9425, 14010, 375, 14339, 696, 1821, 22226, 51359, 2373, 6807, 696, 16769, 48199, 10122, 1130, 1877, 373, 7957, 4605, 30599, 373, 10122, 373, 14829, 48199, 20127, 2870, 868, 773, 50747, 375, 51359, 2030, 730, 24108, 732, 4400, 41281, 12847, 6865, 2030, 730, 32179, 4605, 1821, 22226, 68635, 375, 2599, 65840, 42980, 10978, 97300, 2841, 1075, 12847, 6865, 2030, 730, 24108, 696, 3157, 1130, 657, 32179, 905, 4078, 13452, 1877, 373, 38069, 4703, 22226, 51359, 2373, 18979, 48199, 100048, 4605, 12944, 14010, 375, 32179, 4605, 2364, 51359, 2030, 730, 5810, 696, 8587, 48199, 373, 14339, 1451, 696, 12944, 22226, 7957, 4605, 20127, 1130, 16519, 10122, 2870, 868, 773, 50747, 375, 38069, 2364, 2599, 65840, 33468, 657, 51359, 730, 6807, 1548, 82625, 696, 4703, 22226, 7957, 4605, 15597, 48199, 2327, 1075, 3231, 4605, 38217, 2373, 4078, 2870, 868, 773, 50747, 375, 51359, 2030, 730, 24108, 732, 38217, 730, 7957, 2645, 2030, 6873, 2373, 7957, 730, 27883, 1210, 373, 58935, 373, 13949, 1210, 696, 7859, 1130, 657, 2963, 1075, 9517, 10996, 375, 2599, 65840, 33468, 657, 51359, 17722, 1200, 9449, 373, 100048, 730, 64620, 373, 34626, 62345, 2481, 2645, 1222, 696, 6581, 22226, 51359, 2030, 730, 9687, 1965, 634, 853, 5957, 1965, 798, 24108, 696, 19495, 21046, 1481, 375, 3662, 373, 83200, 369, 10913, 374, 16631, 2016, 48808, 370, 696, 4703, 22226, 42225, 2030, 51359, 1682, 730, 1484, 4102, 696, 4440, 1255, 2870, 8952, 773, 5718, 373, 38069, 2364, 33468, 657, 1738, 37846, 1965, 634, 853, 9621, 1075, 5073, 13456, 7957, 4605, 48149, 868, 773, 50747, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48316 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:34 engine.py:275] Added request cmpl-211ee0ca08bd488e9bd7219cc7143f2d-0.
INFO 02-16 22:59:34 logger.py:39] Received request cmpl-b71e5a19d3764b6fb40174cbdd00bf64-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ### 👉 스크립트란?\n\n---\n\n- 특정 작업을 자동으로 수행하기 위해 작성된 프로그램이나 명령어의 집합\n- 스크립트는 주로 단순 반복 작업이나 일련의 과정을 자동화하기 위해 사용되며, 보통 프로그래밍 언어보다 간단한 구조를 가지고 있음\n- 스크립트는 일반적으로 독립적인 애플리케이션보다는 다른 소프트웨어 환경 내에서 실행\n- 인터프리터를 통해 한 줄씩 실행됨\n\\u003cbr>\n\\u003cbr>\n\n### 👉 서버 사이드 스크립트란?\n\n---\n\n- 웹 서버에서 실행되는 스크립트 언어\n- 클라이언트(웹 브라우저)의 요청을 받아 서버에서 처리하고 그 결과를 다시 클라이언트에게 전송하는 역할\n- 웹 개발에서 널리 사용되고 있음\n- 동적인 웹 페이지 생성, 데이터 처리, 사용자 인증 등 다양한 기능을 구현하는 데 핵심적인 역할을 함\n- 대표적으로는 PHP, Python(Django, Flask), Ruby(Ruby on Rails), Java(JSP) 등이 있음\n\\u003cbr>\n\\u003cbr>\n\n### 👉 서버 사이드 스크립트의 주요 특징\n\n---\n\n- 서버에서 실행\n    - 서버 사이드 스크립트는 웹 서버 내에서 실행되며, 클라이언트는 실행 결과만 받음\n- 다양한 언어 지원\n    - PHP, Python, Ruby, Java 등 다양한 언어로 작성할 수 있음\n- 데이터베이스 연동\n    - 서버 사이드 스크립트는 데이터베이스와 상호작용하여 데이터를 저장, 수정, 삭제할 수 있음\n- 보안성\n    - 소스 코드가 클라이언트에게 노출되지 않아 보안에 유리\n- 서버 자원 활용\n    - 서버의 CPU, 메모리 등 자원을 활용하여 복잡한 작업을 처리할 수 있음\n    \\u003cbr>\n    \\u003cbr>\n\n### 👉 클라이언트 사이드 스크립트란?\n\n---\n\n- 웹 브라우저에서 실행되는 스크립트 언어\n- 서버로부터 웹 페이지를 받아온 후, 브라우저에서 스크립트를 실행하여 동적으로 웹 페이지를 변경하거나 사용자와 상호작용\n- 동적인 웹 페이지 구현, 사용자 인터페이스 개선, 폼 유효성 검사 등 다양한 기능을 구현할 수 있음\n- 웹 개발에서는 일반적으로 서버 사이드 스크립트와 클라이언트 사이드 스크립트를 함께 사용\n- 대표적으로는 JavaScript가 있으며, jQuery, React, AngularJS, Vue.js 등의 라이브러리와 프레임워크가 많이 사용됨\n\\u003cbr>\n\\u003cbr>\n\n### 👉 클라이언트 사이드 스크립트의 주요 특징\n\n---\n\n- 브라우저에서 실행\n    - 클라이언트 사이드 스크립트는 사용자의 웹 브라우저에서 실행됨\n- JavaScript 사용\n    - 대부분의 클라이언트 사이드 스크립트는 JavaScript로 작성됨\n- 빠른 응답성\n    - 서버와의 통신 없이 브라우저에서 직접 실행되므로 빠른 응답이 가능\n- 사용자 상호 작용\n    - 마우스 클릭, 키보드 입력 등 사용자 이벤트에 즉각적으로 반응할 수 있음\n- 제한된 접근권한\n    - 보안상의 이유로 클라이언트 사이드 스크립트는 사용자 컴퓨터의 자원에 제한적으로 접근', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 5941, 76629, 593, 59588, 1868, 392, 560, 560, 4961, 560, 560, 374, 11126, 3644, 696, 4440, 13456, 9425, 76766, 1902, 6016, 16524, 5371, 37891, 62305, 730, 34617, 560, 374, 59588, 657, 8011, 8019, 7930, 3644, 37891, 43699, 730, 3540, 696, 4440, 1255, 76766, 1902, 1821, 13452, 1877, 373, 6586, 42980, 10978, 30885, 5488, 1075, 5630, 4605, 2034, 853, 773, 1040, 560, 374, 59588, 657, 4400, 41281, 12125, 1965, 798, 38217, 1280, 4264, 2126, 22839, 4576, 1080, 41728, 12944, 560, 374, 4517, 23615, 1173, 4605, 2364, 764, 1949, 64101, 12944, 837, 463, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 18296, 16444, 59588, 1868, 392, 560, 560, 4961, 560, 560, 374, 11574, 18296, 41728, 12944, 13452, 657, 59588, 10978, 560, 374, 56794, 369, 51257, 61559, 370, 730, 8254, 696, 69597, 18296, 41728, 5547, 48199, 855, 3336, 4605, 2257, 56794, 2373, 1060, 24134, 1130, 657, 6034, 560, 374, 11574, 4003, 41728, 23487, 1821, 13452, 853, 773, 1040, 560, 374, 84906, 798, 11574, 13203, 16769, 373, 7957, 5547, 373, 7332, 7741, 1222, 2841, 1075, 4198, 696, 19495, 1130, 657, 1736, 8771, 1965, 798, 6034, 696, 1470, 560, 374, 3163, 41281, 657, 21479, 373, 14138, 369, 78680, 10380, 373, 58607, 5445, 30967, 369, 65566, 450, 807, 50760, 5445, 11154, 369, 17770, 409, 370, 1222, 634, 773, 1040, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 18296, 16444, 59588, 730, 7245, 8574, 560, 560, 4961, 560, 560, 374, 18296, 41728, 12944, 560, 31, 374, 18296, 16444, 59588, 657, 11574, 18296, 1080, 41728, 12944, 13452, 1877, 373, 56794, 657, 12944, 3336, 1043, 1374, 1040, 560, 374, 2841, 1075, 10978, 3157, 560, 31, 374, 21479, 373, 14138, 373, 30967, 373, 11154, 1222, 2841, 1075, 10978, 715, 6016, 2870, 868, 773, 1040, 560, 374, 51359, 24108, 560, 31, 374, 18296, 16444, 59588, 657, 51359, 2030, 14885, 14052, 22226, 7957, 4605, 11503, 373, 10122, 373, 14829, 2870, 868, 773, 1040, 560, 374, 13949, 1210, 560, 31, 374, 6126, 12291, 905, 56794, 2373, 1060, 12448, 13452, 698, 1145, 1023, 13949, 2373, 7167, 560, 374, 18296, 10622, 4703, 560, 31, 374, 18296, 730, 18313, 373, 21497, 1222, 10622, 696, 4703, 22226, 12037, 1075, 3644, 696, 5547, 2870, 868, 773, 1040, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 56794, 16444, 59588, 1868, 392, 560, 560, 4961, 560, 560, 374, 11574, 61559, 41728, 12944, 13452, 657, 59588, 10978, 560, 374, 18296, 715, 4560, 11574, 13203, 4605, 69597, 2263, 1452, 373, 61559, 41728, 59588, 4605, 12944, 22226, 1368, 41281, 11574, 13203, 4605, 8171, 1130, 16519, 7332, 2030, 14885, 14052, 560, 374, 84906, 798, 11574, 13203, 19495, 373, 7332, 51299, 4982, 373, 8809, 24146, 1210, 4830, 1222, 2841, 1075, 4198, 696, 19495, 2870, 868, 773, 1040, 560, 374, 11574, 4003, 41728, 657, 4400, 41281, 18296, 16444, 59588, 2030, 56794, 16444, 59588, 4605, 2110, 1821, 560, 374, 3163, 41281, 657, 20820, 905, 773, 5718, 373, 27010, 373, 21676, 373, 43047, 17770, 373, 46552, 375, 12716, 53641, 67175, 2030, 18286, 13518, 905, 1719, 1821, 837, 463, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 56794, 16444, 59588, 730, 7245, 8574, 560, 560, 4961, 560, 560, 374, 61559, 41728, 12944, 560, 31, 374, 56794, 16444, 59588, 657, 7332, 730, 11574, 61559, 41728, 12944, 837, 463, 560, 374, 20820, 1821, 560, 31, 374, 5255, 730, 56794, 16444, 59588, 657, 20820, 715, 6016, 837, 463, 560, 374, 8570, 16352, 1210, 560, 31, 374, 18296, 2030, 730, 7514, 2705, 61559, 41728, 3492, 12944, 13452, 8158, 8570, 16352, 634, 1995, 560, 374, 7332, 14885, 9368, 560, 31, 374, 25801, 9144, 373, 28674, 13385, 1222, 7332, 6594, 2373, 24385, 41281, 7667, 2870, 868, 773, 1040, 560, 374, 8673, 16524, 10625, 1810, 1075, 560, 31, 374, 13949, 84890, 95483, 56794, 16444, 59588, 657, 7332, 9231, 730, 10622, 2373, 8673, 41281, 10625], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48320 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:34 logger.py:39] Received request cmpl-f3e700266b364c97b86b06c29c6c479e-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        안녕하세요 jju_developer입니다.오늘은제이쿼리 비동기 방식 연동에 대해 설명하다가따로 설명을 드려야 할 것 같은 정보가 있어서!! 글을 정리하여 적어봅니다~책을 읽다보면 서버사이드와 클라이언트 사이드를 많이 접하실텐데요?웹 프로그래밍에서서버 사이드/클라이언트 사이드가 나뉘고,어느 쪽에 중심을 두느냐에 따라 프로젝트의 방향이 달라지게 됩니다.그렇다면 클라이언트 사이드와 서버 사이드는 무엇일까요?1. 클라이언트 사이드(Client-Side)-클라이언트(사용자) 측에서 처리하는 것.클라이언트(사용자)가 입력한 것을 수신해서 HTML로 만들어서 크롬과 같은 애플리케이션에 해석해서 표시합니다.대표적으로 자바스크립트(Javascript)가 있습니다.2. 서버 사이드(Server-Side)-서버(제공자) 측에서 즉시 처리하는 것.서버 사이드는\xa0클라이언트로 보낼\xa0웹 페이지(HTML,\xa0JavaScript 등이 담긴)를\xa0만들며,작업들(사용자 유효성, DB 관련 등)을 수행합니다.대표적인 언어는 Java, PHP, Ruby, Python, Node.js 등이 있습니다.즉,서버와클라이언트는 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.클라이언트 사이드 언어를 다루고 그에 관련된 개발자들을프론트 엔드서버 사이드 언어를 다루고 그에 관련된 개발자를백엔드라 부릅니다.웹사이트를\xa0제작하는데\xa0쓰이는\xa0스크립트는실행되는 위치에 따라 클라이언트 사이드 스크립트와 서버사이드 스크립트로 구분합니다.서버사이드 스크립트는서버에서 해석해서 구동되는 스크립트이고,클라이언트 사이드 스크립트는브라우저에서 해석해서 구동되는 스크립트입니다.서버사이드 스크립트는 DB를 액세스 하는 게 주요 목적이고,클라이언트 사이드 스크립트는 브라우저의 객체를 제어하는데 쓰입니다.서버 사이드와 클라이언트의 데이터 교환은 HTTPS로 하는데요!여기서 HTTP의 한계를 알아보겠습니다.HTTP의 한계HTTP의 뒤 두 글자 Transfer Protocol.HTTP의 대전제는 “URL 및 부가정보를 통해 사용자가 원하는 페이지를 서버에요청한다,그리고 서버는 해당 요청에응답한다”입니다.사용자가 URL을 요청할 때에만!서버에서 해당 페이지를 꺼내주는 식이라는 겁니다.거꾸로\xa0말하자면,\xa0사용자는\xa0서버로부터\xa0새로운\xa0정보를\xa0받아보기\xa0위해서,\xa0반드시,\xa0새로운\xa0URL을\xa0요청해야\xa0한다는\xa0말과\xa0같습니다.예전에 로그인할 때 아이디 중복확인하는 거 해보셨죠?그때 서버에게 중복 검사를 요청하기 위해서 새 페이지를 요청해야만 했었는데,회원 정보 작성 중에는 페이지를 이동할 수 없었기 때문에새로 요청한 페이지를 팝업창으로 띄웠던 것입니다.(요즘 사이트들은 대부분 팝업창 없이 검사가 가능합니다. 이것이 바로\xa0 Ajax를 이용했기 때문이죠!!!)AJAX그 당시에 떠오르기 시작한 구글은 HTTP 규약을 뛰어넘는 방안을 제안합니다.이름하여AJAX입니다.AJAX를 쓰면, 유저는 새로운 HTML을 서버로부터 받는 것이 아닙니다.즉, 유저는 새로운 웹페이지로 이동하는 것이 아닙니다.대신, 동일한 웹페이지 내에서 DOM을 변경하게 됩니다.요청 페이지에서 이름 칸에 ‘쮸’를 쓰고, 내용에 ‘안녕하세요. 쮸입니다’라고 썼다고 해봅시다.사용자의 이벤트로부터 Javascript는 해당 이름과 내용이 쓰인 DOM을 읽습니다.그리고는 XMLHttpRequest 객체를 통해 웹서버에 해당 이름과 내용을 전송합니다.웹서버는 요청을 처리하고 XML, Text 혹은 JSON을 XMLHttpRequest 객체에 전송합니다.그러면, Javascript가 해당 응답 정보를 DOM에 씁니다.그렇게 결과페이지가 만들어집니다.\u200bAJAX를 쓰면 새로운 HTML을 서버로부터 받아야 하는 것이 아닙니다.동일한 페이지의 일부를 수정할 수도 있는 가능성이 생깁니다.결과적으로 사용자 입장에서는페이지 이동이 발생되지 않고 페이지 내부 변화만 일어나게 됩니다.HTML 페이지 전체를 다 바꿔야 하는 것이 아니라 부분만 바꿀 수 있게 되는 것입니다.이렇게 따로 페이지의 이동 없이 페이지 내부에서 검사를 하여 결과를 출력하는 것을 볼 수 있죵?아이디 중복체크하려면 필히 서버 쪽 DB와 통신하기 위해서 웹서버 동작이 필요한데,이때 페이지를 바꾸지 않고 요청 결과만 그대로 가져와서 띄우면 되게 됩니다.그 외에도 비밀번호 강도 확인, 검색어 실시간 추천, 마우스 커서나 스크롤바 위치에 반응하는 그림, 지도 표시 서비스 등등 다양합니다.<정리>Ajax는 웹 페이지 전체를다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있게 해 줍니다.즉 Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분에만 표시할 수 있습니다.이때 서버와는 다음과 같은 다양한 형태의 데이터를 주고받을 수 있습니다.JSONXMLHTML텍스트 파일 등Ajax의 장점Ajax를 이용하면 다음과 같은 장점이 있습니다.\u200b1.웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있습니다.2. 웹 페이지가 로드된 후에 서버로 데이터 요청을 보낼 수 있습니다. (Post를 통해 값을 서버 쪽으로 전달해 처리되고 받아올 수 있음)3. 웹 페이지가 로드된 후에 서버로부터 데이터를 받을 수 있습니다.4. 백그라운드 영역에서 서버로 데이터를 보낼 수 있습니다.Ajax의 단점Ajax를 이용하면 여러 장점을 가지지만, Ajax로도 다음과 같은 일들은 처리할 수 없습니다.\u200b1.Ajax는 클라이언트가 서버에 데이터를 요청하는 클라이언트 풀링 방식(사용자가 직접 요청)을 사용하므로,서버 푸시 방식(푸시알람 같은)의 실시간 서비스는 만들 수 없습니다.2. Ajax로는 바이너리 데이터를 보내거나 받을 수 없습니다.3. Ajax 스크립트가 포함된 서버가 아닌 다른 서버로 Ajax 요청을 보낼 수는 없습니다.4.클라이언트의 PC로 Ajax 요청을 보낼 수는 없습니다.Ajax 구성 요소- 웹 페이지의 표현을 위한HTML과 CSS- 데이터에 접근하거나 화면 구성을 동적으로 조작하기 위해 사용되는DOM 모델- 데이터의 교환을 위한JSON이나 XML- 웹 서버와의 비동기식 통신을 위한XMLHttpRequest 객체- 위에서 언급한 모든 기술을 결합하여 사용자의 작업 흐름을 제어하는 데 사용되는자바스크립트1 : 사용자에 의한 요청 이벤트가 발생합니다. (-> jju240 아이디 생성 요청함)2 : 요청 이벤트가 발생하면 이벤트 핸들러에 의해 자바스크립트가 호출됩니다.3 : 자바스크립트는 XMLHttpRequest 객체를 사용하여 서버로 요청을 보냅니다.이때 웹 브라우저는 요청을 보내고 나서,서버의 응답을 기다릴 필요 없이다른 작업을 처리할 수 있습니다.4 : 서버는 전달받은 XMLHttpRequest 객체를 가지고 Ajax 요청을 처리합니다.5,6 : 서버는 처리한 결과를 HTML, XML 또는 JSON 형태의 데이터로 웹 브라우저에 전달합니다.이때 전달되는 응답은 새 페이지 전부 보내는 것이 아니라 필요한 데이터만을 전달합니다.(->이미사용 중이라는 문구)7 : 서버로부터 전달받은 데이터를 가지고 웹 페이지의 일부분만을 갱신하는 자바스크립트를 호출합니다.8 : 최종으로 웹 페이지의 일부분만이 다시 로딩되어 표시됩니다. (-> 이미 사용 중인 아이디입니다!)XMLHttpRequest 객체Ajax의 가장 핵심적인 구성 요소는 바로 XMLHttpRequest 객체입니다.Ajax에서 XMLHttpRequest 객체는웹 브라우저가 서버와 데이터를 교환할 때 사용됩니다.웹 브라우저가 백그라운드에서 계속해서 서버와 통신할 수 있는 것은 바로 이 객체를 사용하기 때문입니다.let httpRequest = new XMLHttpRequest();이상으로 서버사이드, 클라이언트의 개념과 그 둘이 어떻게 데이터를 교환하는지 알아보았습니다.⭐⭐⭐⭐⭐ 이번 글은 이해하고 적는 것에 초점을 두었기 때문에 시간이 많이 걸렸었는데용\xa0ㅎㅎ😥\\중요한 개념이니 꼭 숙지하시는데 도움이 되었으면 좋겠습니다~!!!그럼 오늘도 수고하셨습니다~참고 웹사이트:http://tcpschool.com/ajax/ajax_intro_works', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 3801, 1130, 5847, 1056, 13238, 424, 50874, 623, 10996, 375, 2939, 732, 37762, 46008, 760, 1202, 50048, 5073, 24108, 2373, 2409, 3328, 1130, 5954, 28837, 3328, 696, 32961, 1051, 924, 1119, 732, 3231, 905, 773, 22556, 3461, 2272, 696, 4892, 22226, 1015, 721, 41065, 455, 2703, 696, 3405, 10816, 838, 18296, 37305, 2030, 56794, 16444, 4605, 1719, 20032, 1332, 6891, 27778, 392, 51257, 42980, 41728, 95473, 16444, 376, 6055, 49544, 16444, 905, 20903, 853, 373, 12258, 3609, 2373, 5696, 696, 1546, 3016, 5133, 2373, 2414, 10902, 730, 6319, 634, 17032, 1060, 2873, 375, 9251, 4767, 56794, 16444, 2030, 18296, 16444, 657, 4262, 858, 4148, 392, 378, 375, 56794, 16444, 369, 16483, 374, 44590, 370, 374, 6055, 49544, 369, 16167, 942, 370, 4387, 41728, 5547, 1130, 657, 924, 375, 6055, 49544, 369, 16167, 942, 370, 905, 13385, 1075, 924, 696, 33278, 5414, 15447, 715, 2069, 22556, 40433, 1548, 1119, 732, 38217, 2373, 11235, 5414, 10269, 14010, 375, 13908, 41281, 47201, 4183, 56386, 369, 403, 1238, 10832, 370, 905, 773, 50747, 375, 379, 375, 18296, 16444, 369, 23423, 374, 44590, 370, 374, 95473, 369, 1050, 40041, 370, 4387, 41728, 16192, 5547, 1130, 657, 924, 375, 95473, 16444, 657, 2926, 31158, 25430, 17681, 11574, 13203, 369, 24961, 373, 20820, 1222, 634, 17206, 370, 4605, 2069, 1877, 373, 21135, 1371, 369, 16167, 942, 24146, 1210, 373, 12847, 3051, 1222, 370, 696, 9425, 14010, 375, 13908, 1965, 798, 10978, 657, 11154, 373, 21479, 373, 30967, 373, 14138, 373, 19206, 375, 12716, 1222, 634, 773, 50747, 375, 18909, 373, 95473, 2030, 6055, 49544, 657, 11574, 13203, 715, 5372, 32906, 696, 3868, 2109, 868, 773, 643, 375, 6055, 49544, 16444, 10978, 4605, 16383, 853, 855, 2373, 3051, 16524, 33468, 1371, 696, 1770, 2024, 1067, 54110, 95473, 16444, 10978, 4605, 16383, 853, 855, 2373, 3051, 16524, 33468, 4605, 3387, 8789, 24835, 60354, 375, 51257, 79184, 4605, 5465, 1130, 15913, 15533, 657, 59588, 657, 1332, 1282, 13452, 657, 3897, 2373, 2414, 56794, 16444, 59588, 2030, 18296, 37305, 12870, 2158, 25430, 11301, 14010, 375, 95473, 37305, 59588, 657, 95473, 41728, 11235, 5414, 35730, 13452, 657, 59588, 634, 853, 373, 6055, 49544, 16444, 59588, 657, 21014, 962, 1415, 41728, 11235, 5414, 35730, 13452, 657, 59588, 10996, 375, 95473, 37305, 59588, 657, 12847, 4605, 92284, 691, 657, 869, 7245, 6801, 634, 853, 373, 6055, 49544, 16444, 59588, 657, 61559, 730, 42225, 4605, 23245, 1130, 15913, 2112, 10996, 375, 95473, 16444, 2030, 56794, 730, 7957, 10547, 732, 60728, 715, 691, 15913, 740, 362, 5429, 712, 17086, 730, 13602, 4605, 5337, 13910, 50747, 375, 64157, 730, 13602, 64157, 730, 2448, 1546, 18302, 31113, 28607, 375, 64157, 730, 7991, 1050, 657, 1488, 20654, 2425, 24688, 33377, 4605, 2364, 7332, 905, 9062, 657, 13203, 4605, 18296, 2373, 740, 1774, 10348, 373, 3011, 18296, 657, 5299, 8254, 2373, 99822, 10348, 9583, 10996, 375, 16167, 942, 905, 3293, 696, 8254, 2870, 1105, 2373, 1043, 362, 95473, 41728, 5299, 13203, 4605, 9596, 823, 657, 23890, 21212, 7356, 375, 1387, 36647, 1216, 1130, 942, 838, 373, 7332, 657, 18296, 715, 4560, 4650, 3231, 4605, 1374, 25539, 722, 4313, 373, 8887, 373, 4650, 3293, 696, 8254, 21046, 4375, 1216, 1548, 1119, 50747, 375, 12926, 2373, 33063, 2870, 1105, 23807, 27013, 9506, 1130, 657, 1022, 67157, 5797, 12099, 392, 16591, 18296, 2373, 1060, 27013, 4830, 4605, 8254, 76766, 4313, 1956, 13203, 4605, 8254, 21046, 1043, 5039, 15913, 373, 35457, 3231, 6016, 1126, 97300, 13203, 4605, 5346, 2870, 868, 1107, 2957, 722, 1668, 2373, 29650, 8254, 1075, 13203, 4605, 32583, 3239, 13456, 9534, 3245, 5623, 924, 10996, 21339, 5438, 8050, 1371, 732, 5255, 32583, 3239, 2705, 4830, 905, 1995, 14010, 375, 4383, 634, 2264, 582, 62632, 4605, 2785, 2662, 722, 1668, 634, 12099, 11258, 370, 75983, 36226, 799, 5569, 2373, 15454, 722, 2104, 1075, 16993, 732, 17086, 87364, 696, 33094, 657, 8800, 696, 11137, 14010, 375, 17787, 22226, 75983, 36226, 10996, 375, 75983, 36226, 4605, 2112, 838, 373, 19589, 657, 4650, 15447, 696, 18296, 715, 4560, 1374, 657, 924, 634, 10454, 375, 18909, 373, 19589, 657, 4650, 11574, 7696, 715, 51034, 657, 924, 634, 10454, 375, 27299, 373, 9725, 1075, 11574, 7696, 1080, 41728, 27591, 696, 8171, 1130, 1060, 2873, 375, 740, 1774, 13203, 41728, 3730, 10940, 2373, 2376, 49854, 18420, 4605, 2112, 853, 373, 3311, 2373, 2376, 3801, 1130, 5847, 375, 58301, 10996, 18420, 3885, 9347, 3401, 844, 64429, 375, 16167, 942, 730, 6594, 715, 4560, 46456, 657, 5299, 3730, 1548, 3311, 634, 44037, 27591, 696, 3405, 50747, 375, 3011, 657, 20100, 88354, 42225, 4605, 2364, 11574, 95473, 2373, 5299, 3730, 1548, 3311, 696, 24134, 14010, 375, 51257, 95473, 657, 8254, 696, 5547, 48199, 20100, 373, 11353, 7597, 15214, 696, 20100, 88354, 42225, 2373, 24134, 14010, 375, 27150, 373, 46456, 905, 5299, 16352, 3231, 4605, 27591, 2373, 35027, 375, 10008, 3336, 7696, 905, 2069, 52232, 76456, 75983, 36226, 4605, 2112, 838, 4650, 15447, 696, 18296, 715, 4560, 69597, 1137, 691, 657, 924, 634, 10454, 375, 74038, 1075, 13203, 730, 5720, 4605, 10122, 2870, 8952, 773, 657, 1995, 35604, 45523, 375, 29635, 41281, 7332, 5106, 41728, 657, 7696, 5346, 634, 3449, 13452, 698, 1145, 853, 13203, 5424, 5005, 1043, 5735, 1060, 2873, 375, 24961, 13203, 4532, 4605, 694, 39655, 691, 657, 924, 634, 1579, 789, 2578, 1043, 20867, 868, 773, 1060, 970, 657, 924, 10996, 375, 5366, 5658, 13203, 730, 5346, 2705, 13203, 5424, 41728, 4830, 4605, 22356, 3336, 4605, 17653, 1130, 657, 924, 696, 2109, 868, 773, 796, 475, 392, 5763, 1689, 27013, 40269, 1130, 38835, 55216, 18296, 3609, 12847, 2030, 7514, 76766, 4313, 11574, 95473, 14288, 634, 2327, 1075, 896, 373, 17540, 13203, 4605, 8766, 698, 1145, 853, 8254, 3336, 1043, 5476, 44700, 49354, 838, 9312, 2873, 375, 799, 2068, 15169, 10239, 63320, 19570, 2927, 373, 47700, 17557, 3093, 373, 25801, 15774, 902, 70806, 1987, 3897, 2373, 7667, 1130, 657, 5124, 373, 6577, 10269, 3670, 7429, 2841, 14010, 39065, 27896, 391, 67884, 1817, 657, 11574, 13203, 4532, 4605, 7237, 86183, 1130, 698, 1145, 94925, 373, 11574, 13203, 730, 47792, 1043, 696, 21522, 2870, 868, 773, 1060, 844, 6916, 375, 18909, 62632, 4605, 2785, 16559, 2599, 33388, 7179, 11693, 41728, 18296, 2030, 7514, 22226, 373, 855, 3336, 4605, 11574, 13203, 730, 47792, 2373, 1043, 10269, 2870, 868, 773, 50747, 375, 17540, 18296, 2030, 657, 2775, 1548, 1119, 732, 2841, 1075, 7075, 730, 7957, 4605, 33052, 696, 868, 773, 50747, 375, 34613, 52991, 24961, 20151, 2754, 11038, 1222, 67884, 1817, 730, 7306, 67884, 1817, 4605, 2785, 16559, 2775, 1548, 1119, 732, 7306, 634, 773, 50747, 76456, 378, 375, 51257, 13203, 4532, 4605, 2257, 86183, 1130, 698, 1145, 94925, 373, 11574, 13203, 730, 47792, 1043, 696, 21522, 2870, 868, 773, 50747, 375, 379, 375, 11574, 13203, 905, 17099, 16524, 1452, 2373, 18296, 715, 7957, 8254, 696, 17681, 868, 773, 50747, 375, 688, 19889, 4605, 2364, 7812, 696, 18296, 3609, 13456, 7820, 999, 5547, 13452, 853, 69597, 3009, 868, 773, 1040, 370, 380, 375, 11574, 13203, 905, 17099, 16524, 1452, 2373, 18296, 715, 4560, 7957, 4605, 1374, 696, 868, 773, 50747, 375, 381, 375, 2599, 33388, 7179, 11693, 41728, 18296, 715, 7957, 4605, 17681, 868, 773, 50747, 375, 67884, 1817, 730, 13263, 67884, 1817, 4605, 2785, 16559, 2690, 7306, 696, 2034, 2597, 373, 62632, 715, 720, 2775, 1548, 1119, 732, 955, 1371, 732, 5547, 2870, 868, 1107, 50747, 76456, 378, 375, 67884, 1817, 657, 56794, 905, 18296, 2373, 7957, 4605, 8254, 1130, 657, 56794, 3320, 3890, 5073, 369, 16167, 942, 905, 3492, 8254, 370, 696, 1821, 1130, 8158, 373, 95473, 83791, 5073, 369, 6953, 954, 5006, 1324, 1119, 732, 370, 730, 17557, 3670, 657, 2069, 868, 1107, 50747, 375, 379, 375, 62632, 715, 657, 5308, 2088, 760, 7957, 4605, 3399, 16519, 1374, 696, 868, 1107, 50747, 375, 380, 375, 62632, 59588, 905, 4666, 16524, 18296, 905, 2993, 2126, 18296, 715, 62632, 8254, 696, 17681, 868, 657, 1107, 50747, 375, 381, 375, 6055, 49544, 730, 4769, 715, 62632, 8254, 696, 17681, 868, 657, 1107, 50747, 375, 67884, 1817, 4394, 9517, 374, 11574, 13203, 730, 5233, 696, 3125, 24961, 1548, 20772, 374, 7957, 2373, 10625, 1130, 16519, 9836, 4394, 696, 1368, 41281, 15597, 76766, 1902, 1821, 13452, 657, 53148, 5927, 374, 7957, 730, 10547, 696, 3125, 34613, 37891, 20100, 374, 11574, 18296, 2030, 730, 1202, 50048, 1286, 7514, 696, 3125, 52991, 88354, 42225, 374, 1144, 41728, 10198, 1075, 2904, 3755, 696, 15581, 22226, 7332, 730, 3644, 11019, 696, 23245, 1130, 657, 1736, 1821, 13452, 657, 942, 1987, 4183, 56386, 378, 756, 7332, 2373, 14095, 8254, 6594, 905, 3449, 14010, 375, 6169, 391, 1056, 13238, 379, 381, 377, 23807, 16769, 8254, 3117, 370, 379, 756, 8254, 6594, 905, 3449, 16559, 6594, 22437, 1030, 2373, 9428, 47201, 4183, 56386, 905, 39038, 837, 1318, 375, 380, 756, 47201, 4183, 56386, 657, 20100, 88354, 42225, 4605, 1821, 22226, 18296, 715, 8254, 696, 63149, 375, 17540, 11574, 61559, 657, 8254, 696, 3399, 853, 11030, 373, 95473, 730, 16352, 696, 30567, 2327, 2705, 6472, 3644, 696, 5547, 2870, 868, 773, 50747, 375, 381, 756, 18296, 657, 7820, 6912, 732, 20100, 88354, 42225, 4605, 2034, 853, 62632, 8254, 696, 5547, 14010, 375, 382, 373, 383, 756, 18296, 657, 5547, 1075, 3336, 4605, 15447, 373, 20100, 4978, 15214, 7075, 730, 7957, 715, 11574, 61559, 2373, 7820, 14010, 375, 17540, 7820, 13452, 657, 16352, 732, 1956, 13203, 7853, 3399, 657, 924, 634, 1579, 789, 2327, 1075, 7957, 1043, 696, 7820, 14010, 21339, 24802, 14360, 16167, 70476, 21212, 15837, 370, 384, 756, 18296, 715, 4560, 7820, 6912, 732, 7957, 4605, 2034, 853, 11574, 13203, 730, 47792, 1043, 696, 21522, 1130, 657, 47201, 4183, 56386, 4605, 39038, 14010, 375, 385, 756, 9350, 13456, 11574, 13203, 730, 47792, 1043, 634, 2257, 86183, 13452, 721, 10269, 837, 1318, 375, 6169, 391, 3519, 1821, 1126, 798, 23807, 10996, 362, 370, 52991, 88354, 42225, 67884, 1817, 730, 2472, 8771, 1965, 798, 4394, 9517, 657, 2264, 20100, 88354, 42225, 10996, 375, 67884, 1817, 41728, 20100, 88354, 42225, 657, 51257, 61559, 905, 18296, 2030, 7957, 4605, 10547, 2870, 1105, 1821, 837, 1318, 375, 51257, 61559, 905, 2599, 33388, 7179, 41728, 3063, 5414, 18296, 2030, 7514, 2870, 868, 773, 657, 924, 732, 2264, 650, 42225, 4605, 1821, 76766, 1668, 10996, 375, 3538, 3825, 13427, 801, 1539, 20100, 88354, 60621, 13766, 13456, 18296, 37305, 373, 56794, 730, 9711, 1548, 855, 3136, 634, 3656, 7957, 4605, 10547, 1130, 59985, 5337, 19850, 50747, 375, 48689, 48689, 48689, 48689, 48689, 2626, 2272, 732, 4630, 48199, 1015, 657, 924, 2373, 18073, 696, 1546, 2957, 722, 1668, 2373, 1590, 634, 1719, 14012, 2957, 15913, 1018, 3301, 11881, 608, 460, 421, 31724, 1075, 9711, 96201, 3102, 4520, 25661, 954, 15913, 3577, 634, 970, 2957, 8235, 1104, 13910, 50747, 455, 11258, 8179, 2247, 720, 16400, 1130, 5797, 50747, 455, 16874, 11574, 79184, 387, 13656, 387, 9413, 14298, 1557, 22662, 375, 3256, 376, 2740, 1817, 376, 2740, 1817, 424, 52062, 424, 7125], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48328 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:34 logger.py:39] Received request cmpl-8743af749cf54720a67d08569ea11e2e-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        \n![](https://velog.velcdn.com/images/hope1213/post/54bce33a-07d8-4d3d-96c5-6a99b9d9cdc7/image.png)\n\n웹 개발을 할 때 가장 중요한 결정 중 하나는 어떤 작업을 서버 사이드(Server-side)에서 처리할지, 클라이언트 사이드(Client-side)에서 처리할지를 결정하는 것입니다. 이 글에서는 서버 사이드와 클라이언트 사이드의 차이점, 각 방식의 장단점, 그리고 어떤 상황에서 어떤 방식을 선택해야 하는지에 대해 살펴보겠습니다.\n\n#### 서버 사이드(Server-side)란?\n\n서버 사이드 프로그래밍은 웹 서버에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 클라이언트(사용자의 브라우저)에서 요청을 받을 때 실행됩니다. 서버 사이드 스크립트는 데이터베이스에 접근하고, 데이터를 처리하고, HTML 페이지를 동적으로 생성하는 데 사용됩니다.\n즉 웹에서 서버와 클라이언트는 정해진 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.\n\n\n**주요 언어 및 기술:**\n![](https://velog.velcdn.com/images/hope1213/post/6f8e3e86-7b7d-453a-8684-da3898c25af4/image.png)\n\n- PHP\n- Python (Django, Flask)\n- Ruby (Ruby on Rails)\n- Java (Spring)\n- Node.js\n\n**장점:**\n1. **보안**: 중요한 로직과 데이터베이스 접근이 서버에서 처리되어 클라이언트에서 접근할 수 없습니다.\n2. **데이터베이스 접근**: 서버에서 직접 데이터베이스와 상호작용할 수 있어 데이터 처리와 저장이 용이합니다.\n3. **호환성**: 모든 클라이언트가 동일한 서버 측 코드를 실행하므로 브라우저 호환성 문제를 줄일 수 있습니다.\n\n**단점:**\n1. **서버 부하**: 모든 처리가 서버에서 이루어지기 때문에 서버의 부하가 증가할 수 있습니다.\n2. **응답 시간**: 클라이언트가 요청을 보내고 서버가 응답할 때까지 시간이 걸릴 수 있습니다.\n\n#### 클라이언트 사이드(Client-side)란?\n\n클라이언트 사이드 프로그래밍은 사용자의 브라우저에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 HTML, CSS, JavaScript로 작성되며, 사용자의 인터페이스를 조작하고 사용자와 상호작용합니다.\n\n![](https://velog.velcdn.com/images/hope1213/post/d9319a2f-6c80-477b-987e-2102e2d24bbe/image.png) 일반적으로 Chrome과 같은 웹브라우저는 굉장히 많은 메모리를 차지합니다.\n\n단순히 탐색을 진행했을 뿐인데 다른 프로세스에 비해 굉장히 많은 메모리를 사용한다는 점에서 의문을 가질수 있습니다. 그 이유는 현재 Web쪽에 무거운 처리 대부분은 클라이언트 사이드 언어로 작업하기 때문입니다.\n\n\n**주요 언어 및 기술:**\n- HTML\n- CSS\n- JavaScript (React, Angular, Vue.js)\n\n\n**장점:**\n1. **빠른 응답**: 서버에 요청을 보내지 않고 브라우저에서 바로 처리하므로 응답 속도가 빠릅니다.\n2. **서버 부하 감소**: 많은 작업을 클라이언트에서 처리함으로써 서버의 부담을 줄일 수 있습니다.\n3. **향상된 사용자 경험**: 애니메이션, 실시간 업데이트 등 사용자 인터페이스를 더욱 풍부하게 만들 수 있습니다.\n\n**단점:**\n1. **보안 문제**: 클라이언트 사이드 코드가 브라우저에 노출되므로 보안에 취약할 수 있습니다.\n2. **브라우저 호환성**: 다양한 브라우저에서 동일하게 작동하도록 코드 작성이 어려울 수 있습니다.\n3. **제한된 성능**: 클라이언트의 기기 성능에 따라 처리 속도가 달라질 수 있습니다.\n\n#### 언제 서버 사이드를 선택해야 할까?\n\n- **보안이 중요한 경우**: 민감한 데이터나 중요한 비즈니스 로직이 포함된 경우 서버 사이드 처리가 필요합니다.\n- **데이터베이스 작업**: 데이터베이스와의 상호작용이 빈번하게 이루어질 때 서버 사이드가 적합합니다.\n- **복잡한 처리**: 복잡한 계산이나 대량의 데이터 처리가 필요할 때 서버 측에서 처리하는 것이 좋습니다.\n\n#### 언제 클라이언트 사이드를 선택해야 할까?\n\n- **실시간 상호작용**: 사용자와의 실시간 상호작용이 중요한 경우 클라이언트 사이드 처리가 필요합니다.\n- **인터페이스 동적 처리**: 동적인 사용자 인터페이스, 애니메이션, 실시간 업데이트 등은 클라이언트 사이드에서 처리하는 것이 좋습니다.\n- **서버 부하 분산**: 서버의 부하를 줄이고자 할 때 일부 처리를 클라이언트 사이드로 이동할 수 있습니다.\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 382, 381, 427, 828, 380, 380, 426, 374, 377, 384, 429, 385, 374, 381, 429, 380, 429, 374, 386, 383, 428, 382, 374, 383, 426, 386, 386, 427, 386, 429, 386, 18748, 428, 384, 376, 18958, 375, 441, 2345, 370, 560, 560, 51257, 4003, 696, 1051, 1105, 2472, 2963, 1075, 4024, 1126, 1799, 657, 3090, 3644, 696, 18296, 16444, 369, 23423, 374, 4261, 370, 41728, 5547, 93047, 373, 56794, 16444, 369, 16483, 374, 4261, 370, 41728, 5547, 93047, 4605, 4024, 1130, 657, 924, 10996, 375, 650, 2272, 41728, 657, 18296, 16444, 2030, 56794, 16444, 730, 29289, 373, 2534, 5073, 730, 42622, 373, 2210, 3090, 2876, 41728, 3090, 5073, 696, 3329, 21046, 691, 59985, 2373, 2409, 8926, 13910, 50747, 375, 560, 560, 3673, 18296, 16444, 369, 23423, 374, 4261, 370, 1868, 392, 560, 560, 95473, 16444, 42980, 732, 11574, 18296, 41728, 12944, 13452, 657, 12291, 4605, 6016, 1130, 657, 924, 696, 4536, 14010, 375, 650, 12291, 657, 56794, 369, 16167, 942, 730, 61559, 370, 41728, 8254, 696, 1374, 696, 1105, 12944, 837, 1318, 375, 18296, 16444, 59588, 657, 51359, 2373, 10625, 48199, 373, 7957, 4605, 5547, 48199, 373, 15447, 13203, 4605, 1368, 41281, 16769, 1130, 657, 1736, 1821, 837, 1318, 375, 560, 18909, 11574, 41728, 18296, 2030, 56794, 657, 24730, 11574, 13203, 715, 5372, 32906, 696, 3868, 2109, 868, 773, 643, 375, 560, 560, 560, 2484, 42008, 10978, 2425, 3755, 387, 2484, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 383, 431, 385, 430, 380, 430, 385, 383, 374, 384, 427, 384, 429, 374, 381, 382, 380, 426, 374, 385, 383, 385, 381, 374, 3695, 380, 385, 386, 385, 428, 379, 382, 3543, 381, 376, 18958, 375, 441, 2345, 370, 560, 560, 374, 21479, 560, 374, 14138, 688, 78680, 10380, 373, 58607, 370, 560, 374, 30967, 688, 65566, 450, 807, 50760, 370, 560, 374, 11154, 688, 60192, 370, 560, 374, 19206, 375, 12716, 560, 560, 2484, 50938, 387, 2484, 560, 378, 375, 1316, 1280, 1336, 2484, 387, 2963, 1075, 54794, 1548, 51359, 10625, 634, 18296, 41728, 5547, 13452, 721, 56794, 41728, 10625, 2870, 868, 1107, 50747, 375, 560, 379, 375, 1316, 64766, 35972, 10625, 2484, 387, 18296, 41728, 3492, 51359, 2030, 14885, 14052, 2870, 868, 773, 721, 7957, 5547, 2030, 11503, 634, 26188, 14010, 375, 560, 380, 375, 1316, 1818, 2401, 1210, 2484, 387, 2904, 56794, 905, 9725, 1075, 18296, 4387, 12291, 4605, 12944, 1130, 8158, 61559, 39833, 1210, 2372, 4605, 23006, 868, 773, 50747, 375, 560, 560, 2484, 29376, 387, 2484, 560, 378, 375, 1316, 95473, 33473, 2484, 387, 2904, 5547, 905, 18296, 41728, 14572, 722, 1668, 2373, 18296, 730, 33473, 905, 5010, 2870, 868, 773, 50747, 375, 560, 379, 375, 1316, 99822, 1590, 2484, 387, 56794, 905, 8254, 696, 3399, 853, 18296, 905, 16352, 2870, 1105, 76876, 1590, 634, 20589, 868, 773, 50747, 375, 560, 560, 3673, 56794, 16444, 369, 16483, 374, 4261, 370, 1868, 392, 560, 560, 6055, 49544, 16444, 42980, 732, 7332, 730, 61559, 41728, 12944, 13452, 657, 12291, 4605, 6016, 1130, 657, 924, 696, 4536, 14010, 375, 650, 12291, 657, 15447, 373, 20772, 373, 20820, 715, 6016, 13452, 1877, 373, 7332, 730, 51299, 4605, 15597, 48199, 7332, 2030, 14885, 14052, 14010, 375, 560, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 429, 386, 380, 378, 386, 426, 379, 431, 374, 383, 428, 385, 377, 374, 381, 384, 384, 427, 374, 386, 385, 384, 430, 374, 379, 378, 377, 379, 430, 379, 429, 379, 381, 100800, 376, 18958, 375, 441, 2345, 370, 4400, 41281, 25698, 1548, 1119, 732, 11574, 21014, 962, 80649, 6121, 1180, 732, 21497, 4605, 8145, 14010, 375, 560, 560, 50375, 30694, 696, 2379, 2662, 696, 3075, 74914, 2126, 33427, 2373, 7322, 6121, 1180, 732, 21497, 4605, 1821, 1075, 4264, 1694, 41728, 15539, 696, 17640, 800, 773, 50747, 375, 855, 3071, 657, 3570, 8545, 2155, 2373, 20671, 5547, 5255, 732, 56794, 16444, 10978, 715, 3644, 76766, 1668, 10996, 375, 560, 560, 560, 2484, 42008, 10978, 2425, 3755, 387, 2484, 560, 374, 15447, 560, 374, 20772, 560, 374, 20820, 688, 72936, 373, 43047, 373, 46552, 375, 12716, 370, 560, 560, 560, 2484, 50938, 387, 2484, 560, 378, 375, 1316, 42750, 16352, 2484, 387, 18296, 2373, 8254, 696, 3399, 698, 1145, 853, 61559, 41728, 2264, 5547, 1130, 8158, 16352, 7818, 905, 92987, 375, 560, 379, 375, 1316, 95473, 33473, 7632, 2484, 387, 1180, 732, 3644, 696, 56794, 41728, 5547, 3117, 13456, 2500, 18296, 730, 4649, 696, 23006, 868, 773, 50747, 375, 560, 380, 375, 1316, 2368, 1029, 16524, 7332, 4503, 2484, 387, 25022, 373, 17557, 18240, 1222, 7332, 51299, 4605, 3892, 10482, 1130, 1060, 2069, 868, 773, 50747, 375, 560, 560, 2484, 29376, 387, 2484, 560, 378, 375, 1316, 1280, 1336, 2372, 2484, 387, 56794, 16444, 12291, 905, 61559, 2373, 12448, 13452, 8158, 13949, 2373, 17954, 2870, 868, 773, 50747, 375, 560, 379, 375, 1316, 21014, 962, 1415, 39833, 1210, 2484, 387, 2841, 1075, 61559, 41728, 9725, 1130, 1060, 13981, 1130, 37728, 12291, 6016, 634, 17717, 868, 773, 50747, 375, 560, 380, 375, 1316, 68118, 16524, 11758, 2484, 387, 56794, 730, 11241, 11758, 2373, 2414, 5547, 7818, 905, 27309, 868, 773, 50747, 375, 560, 560, 3673, 4269, 18296, 16444, 4605, 3329, 21046, 8354, 392, 560, 560, 374, 1316, 1280, 1336, 634, 2963, 1075, 2042, 2484, 387, 15480, 1075, 7957, 902, 2963, 1075, 18938, 54794, 634, 4666, 16524, 2042, 18296, 16444, 5547, 905, 2327, 14010, 375, 560, 374, 1316, 64766, 35972, 3644, 2484, 387, 51359, 2030, 730, 14885, 14052, 634, 39765, 1130, 1060, 40711, 1105, 18296, 16444, 905, 13329, 14010, 375, 560, 374, 1316, 67972, 1075, 5547, 2484, 387, 12037, 1075, 9939, 37891, 23536, 730, 7957, 5547, 905, 2327, 2870, 1105, 18296, 4387, 41728, 5547, 1130, 657, 924, 634, 1104, 50747, 375, 560, 560, 3673, 4269, 56794, 16444, 4605, 3329, 21046, 8354, 392, 560, 560, 374, 1316, 91144, 14885, 14052, 2484, 387, 7332, 2030, 730, 17557, 14885, 14052, 634, 2963, 1075, 2042, 56794, 16444, 5547, 905, 2327, 14010, 375, 560, 374, 1316, 17111, 27512, 84906, 5547, 2484, 387, 84906, 798, 7332, 51299, 373, 25022, 373, 17557, 18240, 1222, 732, 56794, 16444, 41728, 5547, 1130, 657, 924, 634, 1104, 50747, 375, 560, 374, 1316, 95473, 33473, 28350, 2484, 387, 18296, 730, 33473, 4605, 10466, 853, 942, 1051, 1105, 5720, 5547, 4605, 56794, 16444, 715, 5346, 2870, 868, 773, 50747, 375, 560], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48344 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:34 engine.py:275] Added request cmpl-b71e5a19d3764b6fb40174cbdd00bf64-0.
INFO 02-16 22:59:34 engine.py:275] Added request cmpl-f3e700266b364c97b86b06c29c6c479e-0.
INFO 02-16 22:59:34 engine.py:275] Added request cmpl-8743af749cf54720a67d08569ea11e2e-0.
INFO 02-16 22:59:34 metrics.py:455] Avg prompt throughput: 350.8 tokens/s, Avg generation throughput: 83.4 tokens/s, Running: 4 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.5%, CPU KV cache usage: 0.0%.
INFO 02-16 22:59:35 logger.py:39] Received request cmpl-1d264ed8433c40dcb112b18496fcab80-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8d ëª¨ë\x93\x88ì\x97\x90ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dì\x97\x90 ë\x8c\x80í\x95´ ëª\x87 ê°\x80ì§\x80 ê·¼ë³¸ì\xa0\x81ì\x9d¸ ì§\x88ë¬¸ì\x9d\x84 í\x95©ë\x8b\x88ë\x8b¤. â\x80\x94 "ê·¸ê²\x8c ë\xad\x90ì\x95¼?", "í\x81´ë\x9d¼ì\x9d´ì\x96¸í\x8a¸ ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dê³¼ ë\xad\x90ê°\x80 ë\x8b¬ë\x9d¼?", "ì\x99\x9c ì\x93¸ë§\x8cí\x95´?". ì\x97¬ê¸°ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x97¬ë\x9f¬ë¶\x84ì\x9d\x98 ì²« ì\x9b¹ì\x82¬ì\x9d´í\x8a¸ë¥¼ ë§\x8cë\x93\x9cë\x8a\x94 ë\x8d°ì\x97\x90 í\x95\x84ì\x9a\x94í\x95\x9c ê°\x80ì\x9e¥ ì\xa0\x81í\x95©í\x95\x9c í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë¥¼ ì\x96´ë\x96»ê²\x8c ì\xa0\x95í\x95\x98ë\x8a\x94 ì§\x80ì\x97\x90 ë\x8c\x80í\x95\x9c ì\xa0\x81ì\xa0\x88í\x95\x9c ì§\x80ë\x8f\x84ì\x99\x80 í\x95¨ê»\x98 ê°\x80ì\x9e¥ ì\x9d¸ê¸°ì\x9e\x88ë\x8a\x94 ì\x84\x9cë²\x84 ì\x82¬ì\x9d´ë\x93\x9c ì\x9b¹ í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë\x93¤ì\x9d\x98 ê°\x9cì\x9a\x94ë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤. ë\x81\x9dì\x9c¼ë¡\x9c ë\x86\x92ì\x9d\x80 ì\x88\x98ì¤\x80ì\x9d\x98 ì\x9b¹ ì\x84\x9cë²\x84 ë³´ì\x95\x88ì\x97\x90 ë\x8c\x80í\x95\x9c ì\x86\x8cê°\x9cë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 30176, 23681, 36870, 24687, 379, 23681, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 10760, 426, 19407, 24687, 97903, 35427, 30176, 488, 607, 44827, 30176, 23681, 36870, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 23681, 36870, 24687, 379, 23681, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 10834, 10760, 426, 100899, 15924, 41861, 49638, 30176, 20548, 49638, 15924, 17005, 378, 83073, 588, 381, 24687, 380, 11066, 30176, 16687, 30176, 488, 613, 11066, 9289, 20548, 35427, 24687, 61970, 11066, 30176, 488, 613, 23681, 21274, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375, 23076, 49638, 28092, 738, 12575, 17005, 11066, 12575, 379, 50189, 10760, 7452, 44827, 30176, 67176, 378, 83073, 588, 381, 392, 9417, 738, 4882, 488, 585, 10834, 24687, 488, 613, 378, 83073, 588, 381, 30176, 488, 613, 10834, 30176, 488, 606, 11066, 4882, 77721, 11066, 9289, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 12575, 380, 378, 83073, 588, 381, 10760, 7452, 44827, 12575, 41861, 49638, 10760, 488, 595, 61970, 24687, 488, 613, 378, 83073, 588, 381, 392, 9417, 738, 30176, 94485, 36870, 9289, 97903, 11066, 24687, 20548, 50189, 4882, 67176, 10834, 392, 14830, 9289, 488, 607, 61970, 12575, 29291, 470, 30176, 23681, 36870, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 607, 61970, 24687, 488, 615, 61970, 24687, 17558, 23681, 30176, 488, 613, 31708, 9289, 379, 39389, 9289, 488, 611, 378, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 4882, 77721, 11066, 24687, 74674, 378, 83073, 588, 381, 10760, 20548, 50189, 24687, 97903, 36870, 24687, 77721, 28092, 10760, 85395, 41861, 30176, 488, 607, 44827, 21274, 67176, 23681, 30176, 488, 610, 28092, 4882, 67176, 36870, 15924, 41861, 49638, 30176, 488, 614, 74674, 9289, 16687, 4882, 67176, 40057, 4882, 67176, 36870, 21274, 28092, 23681, 24687, 22332, 30176, 488, 614, 23681, 30176, 488, 611, 50189, 4882, 488, 585, 61970, 24687, 74674, 378, 83073, 588, 381, 9289, 488, 606, 10834, 24687, 488, 606, 41973, 12575, 379, 50189, 9289, 18737, 4882, 67176, 31708, 24687, 77721, 28092, 9289, 20548, 49638, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 36870, 9289, 16687, 30176, 22332, 4882, 67176, 36870, 9289, 20548, 49638, 24687, 488, 599, 23681, 30176, 94485, 49638, 21274, 67176, 19407, 12575, 41973, 31708, 15924, 41861, 49638, 30176, 488, 614, 74674, 9289, 488, 613, 11066, 12575, 29291, 470, 30176, 488, 614, 35427, 24687, 77721, 28092, 9289, 23681, 36870, 24687, 379, 23681, 9289, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 9289, 488, 611, 378, 21274, 28092, 23681, 24687, 22332, 30176, 488, 614, 23681, 30176, 488, 611, 50189, 4882, 488, 585, 61970, 24687, 97903, 101270, 30176, 488, 613, 31708, 15924, 41861, 36870, 30176, 488, 610, 28092, 24687, 74674, 378, 83073, 588, 381, 9289, 21301, 12575, 380, 21615, 4882, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375, 10760, 488, 585, 488, 613, 30176, 36870, 378, 83073, 588, 381, 24687, 55971, 36870, 10760, 95517, 488, 602, 30176, 488, 613, 49638, 9289, 35427, 31708, 30176, 101270, 49638, 30176, 488, 613, 31708, 9289, 488, 611, 378, 9289, 23681, 36870, 24687, 379, 23681, 10760, 380, 10834, 30176, 67176, 35427, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 36870, 9289, 95517, 50189, 12575, 41861, 36870, 24687, 74674, 378, 83073, 588, 381, 9289, 21301, 12575, 380, 21615, 4882, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48328 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:35 engine.py:275] Added request cmpl-1d264ed8433c40dcb112b18496fcab80-0.
INFO 02-16 22:59:35 logger.py:39] Received request cmpl-d6cb41eff86946dc838a2b912894db30-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        403 Forbidden\nRequest forbidden by administrative rules.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 381, 377, 380, 101630, 560, 13427, 37644, 956, 15021, 6827, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48344 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:35 engine.py:275] Added request cmpl-d6cb41eff86946dc838a2b912894db30-0.
INFO 02-16 22:59:39 metrics.py:455] Avg prompt throughput: 938.4 tokens/s, Avg generation throughput: 295.9 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.3%, CPU KV cache usage: 0.0%.
INFO 02-16 22:59:44 logger.py:39] Received request cmpl-22a299411cf642a8b934acd491a8cd9f-0: prompt: '아래 정보에 기반하여, 사용자의 질문에 답하세요.\n        \n보안 및 인증\n보안 및 인증은 백엔드 개발에서 중요한 역할을 수행합니다. 웹 애플리케이션은 사용자의 민감한 정보를 다루기 때문에 보안이 필수적입니다. 백엔드 개발자는 다양한 보안 메커니즘을 구현하여 애플리케이션의 보안을 강화합니다. 주요 보안 메커니즘으로는 데이터 암호화, 인증, 권한 관리, 입력 검증 등이 있습니다. 데이터 암호화는 전송 중인 데이터를 보호하는 것뿐만 아니라 저장된 데이터를 보호하는 것도 포함됩니다. 이를 위해 백엔드 개발자는 대칭키 암호화, 비대칭키 암호화, 해싱 등 다양한 암호화 기법을 사용합니다. 예를 들어, 데이터베이스에 저장되는 사용자의 비밀번호는 해싱을 통해 암호화되어 저장됩니다. 이렇게 하면 데이터베이스가 유출되더라도 비밀번호가 노출되지 않습니다. 인증은 사용자가 자신이 누구인지를 증명하는 과정입니다. 백엔드 개발자는 다양한 인증 방법을 구현하여 사용자의 신원을 확인합니다. 주로 사용되는 인증 방법으로는 세션 기반 인증, 쿠키 기반 인증, OAuth, OpenID Connect 등이 있습니다. 각 인증 방법은 상황에 따라 장단점이 있으며, 백엔드 개발자는 애플리케이션의 요구 사항에 맞는 인증 방법을 선택합니다. 권한 관리는 사용자가 애플리케이션에서 수행할 수 있는 작업을 제한하는 것입니다. 백엔드 개발자는 사용자의 권한을 정의하고, 각 권한에 따라 사용자가 수행할 수 있는 작업을 제한합니다. 이를 통해 애플리케이션의 데이터와 기능을 보호할 수 있습니다. 입력 검증은 사용자가 입력하는 데이터를 검증하는 과정입니다. 백엔드 개발자는 사용자의 입력을 검증하여 악의적인 입력이 애플리케이션에 영향을 미치지 않도록 합니다. 이를 통해 XSS(Cross-Site Scripting), SQL 인젝션, CSRF(Cross-Site Request Forgery) 등의 공격을 예방할 수 있습니다.\n백엔드 개발자의 역할\n백엔드 개발자는 애플리케이션의 서버 측 개발을 담당하며, 서버의 아키텍처를 설계하고, 서버와 데이터베이스 간의 연동을 구현하며, 보안 및 인증을 구현하고, 성능 최적화를 수행합니다. 백엔드 개발자는 클라이언트의 요청을 처리하고, 필요한 데이터를 제공하며, 비즈니스 로직을 구현합니다. 또한, 백엔드 개발자는 API 설계를 통해 클라이언트와의 효율적인 통신을 지원합니다. 백엔드 개발자는 데이터베이스와의 연동을 통해 데이터를 관리하고, 보안 및 인증을 구현하여 애플리케이션의 보안을 강화합니다. 백엔드 개발자는 성능 최적화를 통해 애플리케이션의 성능을 향상시킵니다. 백엔드 개발자는 확장성과 활용성을 고려하여 서버 아키텍처를 설계하고, 클라이언트와의 효율적인 통신을 위해 RESTful API, 웹 소켓 등과 같은 통신 프로토콜을 사용합니다. 백엔드 개발자는 애플리케이션의 데이터 관리, 보안, 성능 최적화, API 설계 등 다양한 역할을 수행하며, 이러한 역할을 통해 애플리케이션의 안정성과 효율성을 보장합니다. 백엔드 개발자는 서버 측 개발의 모든 측면을 고려하여 애플리케이션의 전반적인 품질을 향상시킵니다.\n결론\n서버 사이드 개발은 웹 애플리케이션의 백엔드 측을 구축하는 프로그래밍 작업으로, 사용자 요청을 처리하고 데이터를 제공하는 역할을 합니다. 서버 사이드 개발은 서버 측에서 실행되며, 클라이언트의 요청에 응답하고 필요한 데이터를 처리하고 반환합니다. 서버 사이드 개발은 다양한 언어와 프레임워크를 사용하여 이루어지며, 데이터베이스와의 연동, 보안 및 인증, 성능 최적화, API 설계, 비즈니스 로직 구현 등을 다룹니다. 백엔드 개발자는 서버 아키텍처를 설계하고, 데이터베이스와의 연동을 통해 데이터를 관리하며, 보안 및 인증을 구현하여 애플리케이션의 보안을 강화하고, 성능 최적화를 통해 애플리케이션의 성능을 향상시킵니다. 백엔드 개발자는 서버 측 개발의 모든 측면을 고려하여 애플리케이션의 전반적인 품질을 향상시킵니다.\n할 수 있음\n    \\u003cbr>\n    \\u003cbr>\n\n### 👉 스크립트의 종류\n\n---\n\n- 서버 사이드 스크립트: PHP, Python, Ruby, Java 등\n- 클라이언트 사이드 스크립트: JavaScript, jQuery, React, AngularJS, Vue.js 등\n\\u003cbr>\n\\u003cbr>\n\n### 👉 요약\n\n---\n\n스크립트는 특정 작업을 자동으로 수행하기 위해 작성된 프로그램이나 명령어의 집합이다. 주로 단순 반복 작업이나 일련의 과정을 자동화하기 위해 사용되며, 보통 프로그래밍 언어보다 간단한 구조를 가지고 있다. 서버 사이드 스크립트는 웹 서버에서 실행되는 스크립트 언어로, 클라이언트의 요청을 받아 서버에서 처리하고 그 결과를 다시 클라이언트에게 전송하는 역할을 한다. 클라이언트 사이드 스크립트는 웹 브라우저에서 실행되는 스크립트 언어로, 서버로부터 웹 페이지를 받아온 후, 브라우저에서 스크립트를 실행하여 동적으로 웹 페이지를 변경하거나 사용자와 상호작용한다. 서버 사이드 스크립트는 서버에서 실행되며, 클라이언트는 실행 결과만 받는다. 다양한 언어로 작성할 수 있고, 데이터베이스와 상호작용하여 데이터를 저장, 수정, 삭제할 수 있다. 소스 코드가 클라이언트에게 노출되지 않아 보안에 유리하며, 서버의 CPU, 메모리 등 자원을 활용하여 복잡한 작업을 처리할 수 있다. 클라이언트 사이드 스크립트는 브라우저에서 실행되며, 대부분의 클라이언트 사이드 스크립트는 JavaScript로 작성된다. 서버와의 통신 없이 브라우저에서 직접 실행되므로 빠른 응답이 가능하며, 사용자 이벤트에 즉각적으로 반응할 수 있다. 보안상의 이유로 클라이언트 사이드 스크립트는 사용자 컴퓨터의 자원에 제한적으로 접근할 수 있다.\n.php\n\n#### 결론\n\n서버 사이드와 클라이언트 사이드는 각각의 장단점이 있으며, 웹 개발에서 이 두 가지 방식을 적절히 조합하여 사용하는 것이 중요합니다. 보안, 성능, 사용자 경험 등 다양한 요소를 고려하여 적절한 방식을 선택하는 것이 성공적인 웹 개발의 핵심입니다.\n\n\n        ê· ̧ê2\x8c ë�°ë¦¬ì\x9d ́ì\x96 ̧í\x8a ̧ì\x9d1⁄4ì\x9d ́ë\x82\x98ì\x9a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x9a°ë¦¬ë\x8a\x94 ì\x9e\x85ë\x8b\x88ë\x8b¤ì\x97\x90ì\n\n        사용자 질문: 서버사이드 프로그래밍에 대해 알려줘 ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [13696, 3231, 2373, 8898, 22226, 373, 7332, 730, 5962, 2373, 3455, 1130, 5847, 375, 560, 27, 560, 1280, 1336, 2425, 7741, 560, 1280, 1336, 2425, 7741, 732, 2599, 65840, 4003, 41728, 2963, 1075, 6034, 696, 9425, 14010, 375, 11574, 38217, 732, 7332, 730, 15480, 1075, 3231, 4605, 16383, 722, 1668, 2373, 13949, 634, 7137, 1965, 10996, 375, 2599, 65840, 33468, 657, 2841, 1075, 13949, 71121, 696, 19495, 22226, 38217, 730, 13949, 696, 5876, 14010, 375, 7245, 13949, 71121, 13456, 657, 7957, 25997, 1255, 373, 7741, 373, 20865, 2645, 373, 13385, 15950, 1222, 634, 773, 50747, 375, 7957, 25997, 1255, 657, 24134, 1126, 798, 7957, 4605, 5731, 1130, 657, 924, 29547, 1043, 1579, 789, 11503, 16524, 7957, 4605, 5731, 1130, 657, 924, 720, 4666, 837, 1318, 375, 38069, 1902, 2599, 65840, 33468, 657, 58400, 2113, 25997, 1255, 373, 42567, 2113, 25997, 1255, 373, 844, 6685, 1222, 2841, 1075, 25997, 1255, 21985, 696, 1821, 14010, 375, 1288, 4605, 1944, 373, 51359, 2373, 11503, 13452, 657, 7332, 730, 10239, 63320, 657, 844, 6685, 696, 2364, 25997, 1255, 13452, 721, 11503, 837, 1318, 375, 2353, 691, 838, 51359, 905, 22361, 13452, 2560, 10368, 10239, 63320, 905, 12448, 13452, 698, 1145, 50747, 375, 7741, 732, 7332, 905, 2572, 634, 5081, 11316, 4605, 13134, 1130, 657, 3540, 10996, 375, 2599, 65840, 33468, 657, 2841, 1075, 7741, 2818, 696, 19495, 22226, 7332, 730, 43560, 696, 2927, 14010, 375, 8011, 1821, 13452, 657, 7741, 2818, 13456, 657, 47269, 8898, 7741, 373, 13466, 8898, 7741, 373, 60091, 373, 9114, 3975, 36493, 1222, 634, 773, 50747, 375, 2534, 7741, 2818, 732, 2876, 2373, 2414, 42622, 634, 773, 5718, 373, 2599, 65840, 33468, 657, 38217, 730, 6453, 6318, 2373, 1867, 657, 7741, 2818, 696, 3329, 14010, 375, 20865, 2645, 657, 7332, 905, 38217, 41728, 9425, 2870, 868, 773, 657, 3644, 696, 8673, 1130, 657, 924, 10996, 375, 2599, 65840, 33468, 657, 7332, 730, 20865, 696, 11476, 48199, 373, 2534, 20865, 2373, 2414, 7332, 905, 9425, 2870, 868, 773, 657, 3644, 696, 8673, 14010, 375, 38069, 2364, 38217, 730, 7957, 2030, 4198, 696, 5731, 2870, 868, 773, 50747, 375, 13385, 15950, 732, 7332, 905, 13385, 1130, 657, 7957, 4605, 15950, 1130, 657, 3540, 10996, 375, 2599, 65840, 33468, 657, 7332, 730, 13385, 696, 15950, 22226, 60034, 1965, 798, 13385, 634, 38217, 2373, 5282, 696, 11310, 698, 1145, 37728, 1481, 375, 38069, 2364, 2008, 5976, 369, 46869, 374, 46270, 26695, 668, 5445, 14339, 893, 9899, 2481, 373, 8266, 42778, 369, 46869, 374, 46270, 19449, 2233, 8583, 370, 53641, 6779, 696, 6675, 2870, 868, 773, 50747, 375, 560, 3387, 65840, 33468, 730, 6034, 560, 3387, 65840, 33468, 657, 38217, 730, 18296, 4387, 4003, 696, 8065, 1130, 1877, 373, 18296, 730, 42188, 20151, 2351, 4605, 9449, 48199, 373, 18296, 2030, 51359, 1682, 730, 24108, 696, 19495, 1130, 1877, 373, 13949, 2425, 7741, 696, 19495, 48199, 373, 11758, 64620, 4605, 9425, 14010, 375, 2599, 65840, 33468, 657, 56794, 730, 8254, 696, 5547, 48199, 373, 2327, 1075, 7957, 4605, 4078, 1130, 1877, 373, 18938, 54794, 696, 19495, 14010, 375, 3662, 373, 2599, 65840, 33468, 657, 8682, 9449, 4605, 2364, 56794, 2030, 730, 9687, 1965, 798, 7514, 696, 3157, 14010, 375, 2599, 65840, 33468, 657, 51359, 2030, 730, 24108, 696, 2364, 7957, 4605, 2645, 48199, 373, 13949, 2425, 7741, 696, 19495, 22226, 38217, 730, 13949, 696, 5876, 14010, 375, 2599, 65840, 33468, 657, 11758, 64620, 4605, 2364, 38217, 730, 11758, 696, 11151, 954, 34632, 375, 2599, 65840, 33468, 657, 12472, 1210, 1548, 4703, 1210, 696, 6581, 22226, 18296, 42188, 20151, 2351, 4605, 9449, 48199, 373, 56794, 2030, 730, 9687, 1965, 798, 7514, 696, 1902, 35231, 1993, 8682, 373, 11574, 92194, 1222, 1548, 1119, 732, 7514, 72829, 696, 1821, 14010, 375, 2599, 65840, 33468, 657, 38217, 730, 7957, 2645, 373, 13949, 373, 11758, 64620, 373, 8682, 9449, 1222, 2841, 1075, 6034, 696, 9425, 1130, 1877, 373, 4476, 1075, 6034, 696, 2364, 38217, 730, 5957, 1210, 1548, 9687, 1210, 696, 7859, 14010, 375, 2599, 65840, 33468, 657, 18296, 4387, 4003, 730, 2904, 11947, 696, 6581, 22226, 38217, 730, 10292, 1965, 798, 12326, 696, 11151, 954, 34632, 375, 560, 29358, 560, 95473, 16444, 4003, 732, 11574, 38217, 730, 2599, 65840, 4387, 696, 9472, 1130, 657, 42980, 3644, 13456, 373, 7332, 8254, 696, 5547, 48199, 7957, 4605, 4078, 1130, 657, 6034, 696, 1481, 375, 18296, 16444, 4003, 732, 18296, 4387, 41728, 12944, 13452, 1877, 373, 56794, 730, 8254, 2373, 16352, 48199, 2327, 1075, 7957, 4605, 5547, 48199, 30824, 14010, 375, 18296, 16444, 4003, 732, 2841, 1075, 10978, 2030, 18286, 13518, 4605, 1821, 22226, 14572, 1877, 373, 51359, 2030, 730, 24108, 373, 13949, 2425, 7741, 373, 11758, 64620, 373, 8682, 9449, 373, 18938, 54794, 19495, 1222, 696, 694, 6516, 819, 375, 2599, 65840, 33468, 657, 18296, 42188, 20151, 2351, 4605, 9449, 48199, 373, 51359, 2030, 730, 24108, 696, 2364, 7957, 4605, 2645, 1130, 1877, 373, 13949, 2425, 7741, 696, 19495, 22226, 38217, 730, 13949, 696, 5876, 48199, 373, 11758, 64620, 4605, 2364, 38217, 730, 11758, 696, 11151, 954, 34632, 375, 2599, 65840, 33468, 657, 18296, 4387, 4003, 730, 2904, 11947, 696, 6581, 22226, 38217, 730, 10292, 1965, 798, 12326, 696, 11151, 954, 34632, 375, 560, 2870, 868, 773, 1040, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 59588, 730, 5549, 560, 560, 4961, 560, 560, 374, 18296, 16444, 59588, 387, 21479, 373, 14138, 373, 30967, 373, 11154, 1222, 560, 374, 56794, 16444, 59588, 387, 20820, 373, 27010, 373, 21676, 373, 43047, 17770, 373, 46552, 375, 12716, 1222, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 16399, 560, 560, 4961, 560, 560, 4183, 56386, 657, 11126, 3644, 696, 4440, 13456, 9425, 76766, 1902, 6016, 16524, 5371, 37891, 62305, 730, 34617, 40379, 375, 8011, 8019, 7930, 3644, 37891, 43699, 730, 3540, 696, 4440, 1255, 76766, 1902, 1821, 13452, 1877, 373, 6586, 42980, 10978, 30885, 5488, 1075, 5630, 4605, 2034, 853, 773, 643, 375, 18296, 16444, 59588, 657, 11574, 18296, 41728, 12944, 13452, 657, 59588, 10978, 715, 373, 56794, 730, 8254, 696, 69597, 18296, 41728, 5547, 48199, 855, 3336, 4605, 2257, 56794, 2373, 1060, 24134, 1130, 657, 6034, 696, 1367, 375, 56794, 16444, 59588, 657, 11574, 61559, 41728, 12944, 13452, 657, 59588, 10978, 715, 373, 18296, 715, 4560, 11574, 13203, 4605, 69597, 2263, 1452, 373, 61559, 41728, 59588, 4605, 12944, 22226, 1368, 41281, 11574, 13203, 4605, 8171, 1130, 16519, 7332, 2030, 14885, 14052, 10348, 375, 18296, 16444, 59588, 657, 18296, 41728, 12944, 13452, 1877, 373, 56794, 657, 12944, 3336, 1043, 1374, 657, 643, 375, 2841, 1075, 10978, 715, 6016, 2870, 868, 773, 853, 373, 51359, 2030, 14885, 14052, 22226, 7957, 4605, 11503, 373, 10122, 373, 14829, 2870, 868, 773, 643, 375, 6126, 12291, 905, 56794, 2373, 1060, 12448, 13452, 698, 1145, 1023, 13949, 2373, 7167, 1130, 1877, 373, 18296, 730, 18313, 373, 21497, 1222, 10622, 696, 4703, 22226, 12037, 1075, 3644, 696, 5547, 2870, 868, 773, 643, 375, 56794, 16444, 59588, 657, 61559, 41728, 12944, 13452, 1877, 373, 5255, 730, 56794, 16444, 59588, 657, 20820, 715, 6016, 16524, 643, 375, 18296, 2030, 730, 7514, 2705, 61559, 41728, 3492, 12944, 13452, 8158, 8570, 16352, 634, 1995, 1130, 1877, 373, 7332, 6594, 2373, 24385, 41281, 7667, 2870, 868, 773, 643, 375, 13949, 84890, 95483, 56794, 16444, 59588, 657, 7332, 9231, 730, 10622, 2373, 8673, 41281, 10625, 2870, 868, 773, 643, 375, 560, 375, 98086, 560, 560, 3673, 12550, 560, 560, 95473, 16444, 2030, 56794, 16444, 657, 7135, 730, 42622, 634, 773, 5718, 373, 11574, 4003, 41728, 650, 1546, 2034, 5073, 696, 37816, 7781, 22226, 1821, 1130, 657, 924, 634, 2963, 14010, 375, 13949, 373, 11758, 373, 7332, 4503, 1222, 2841, 1075, 9517, 4605, 6581, 22226, 10252, 1075, 5073, 696, 3329, 1130, 657, 924, 634, 4907, 1965, 798, 11574, 4003, 730, 8771, 10996, 375, 560, 560, 560, 27, 12575, 17005, 11066, 12575, 379, 50189, 10760, 28015, 41861, 24687, 488, 461, 61970, 30176, 488, 613, 10834, 30176, 488, 606, 11066, 4882, 77721, 11066, 30176, 488, 613, 378, 83073, 588, 381, 30176, 488, 613, 10834, 24687, 488, 586, 31708, 30176, 488, 610, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 614, 488, 589, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 560, 560, 27, 16167, 942, 5962, 387, 18296, 37305, 42980, 2373, 2409, 3504, 15887, 582], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:39164 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 22:59:44 engine.py:275] Added request cmpl-22a299411cf642a8b934acd491a8cd9f-0.
INFO 02-16 22:59:44 metrics.py:455] Avg prompt throughput: 468.7 tokens/s, Avg generation throughput: 179.2 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.2%, CPU KV cache usage: 0.0%.
INFO 02-16 22:59:49 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 128.4 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.3%, CPU KV cache usage: 0.0%.
INFO 02-16 23:00:02 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 25.5 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:00:12 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:06:50 launcher.py:59] Shutting down FastAPI HTTP server.
INFO 02-16 23:06:50 multiproc_worker_utils.py:141] Terminating local vLLM worker processes
[1;36m(VllmWorkerProcess pid=3980441)[0;0m INFO 02-16 23:06:50 multiproc_worker_utils.py:253] Worker exiting
[1;36m(VllmWorkerProcess pid=3980439)[0;0m INFO 02-16 23:06:50 multiproc_worker_utils.py:253] Worker exiting
[1;36m(VllmWorkerProcess pid=3980440)[0;0m INFO 02-16 23:06:50 multiproc_worker_utils.py:253] Worker exiting
[rank0]:[W216 23:06:52.786213831 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
INFO:     Shutting down
INFO:     Waiting for application shutdown.
INFO:     Application shutdown complete.
/opt/anaconda3/lib/python3.12/multiprocessing/resource_tracker.py:254: UserWarning: resource_tracker: There appear to be 1 leaked shared_memory objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
INFO 02-16 23:20:35 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 23:20:36 api_server.py:840] vLLM API server version 0.7.2
INFO 02-16 23:20:36 api_server.py:841] args: Namespace(subparser='serve', model_tag='snunlp/bigdata_exaone3_7.8b_fft', config='', host=None, port=8000, uvicorn_log_level='info', allow_credentials=False, allowed_origins=['*'], allowed_methods=['*'], allowed_headers=['*'], api_key='token-snuintern2025', lora_modules=None, prompt_adapters=None, chat_template=None, chat_template_content_format='auto', response_role='assistant', ssl_keyfile=None, ssl_certfile=None, ssl_ca_certs=None, ssl_cert_reqs=0, root_path=None, middleware=[], return_tokens_as_token_ids=False, disable_frontend_multiprocessing=False, enable_request_id_headers=False, enable_auto_tool_choice=False, enable_reasoning=False, reasoning_parser=None, tool_call_parser=None, tool_parser_plugin='', model='snunlp/bigdata_exaone3_7.8b_fft', task='auto', tokenizer=None, skip_tokenizer_init=False, revision=None, code_revision=None, tokenizer_revision=None, tokenizer_mode='auto', trust_remote_code=False, allowed_local_media_path=None, download_dir=None, load_format='auto', config_format=<ConfigFormat.AUTO: 'auto'>, dtype='auto', kv_cache_dtype='auto', max_model_len=None, guided_decoding_backend='xgrammar', logits_processor_pattern=None, model_impl='auto', distributed_executor_backend=None, pipeline_parallel_size=1, tensor_parallel_size=4, max_parallel_loading_workers=None, ray_workers_use_nsight=False, block_size=None, enable_prefix_caching=None, disable_sliding_window=False, use_v2_block_manager=True, num_lookahead_slots=0, seed=0, swap_space=4, cpu_offload_gb=0, gpu_memory_utilization=0.9, num_gpu_blocks_override=None, max_num_batched_tokens=None, max_num_seqs=None, max_logprobs=20, disable_log_stats=False, quantization=None, rope_scaling=None, rope_theta=None, hf_overrides=None, enforce_eager=False, max_seq_len_to_capture=8192, disable_custom_all_reduce=False, tokenizer_pool_size=0, tokenizer_pool_type='ray', tokenizer_pool_extra_config=None, limit_mm_per_prompt=None, mm_processor_kwargs=None, disable_mm_preprocessor_cache=False, enable_lora=False, enable_lora_bias=False, max_loras=1, max_lora_rank=16, lora_extra_vocab_size=256, lora_dtype='auto', long_lora_scaling_factors=None, max_cpu_loras=None, fully_sharded_loras=False, enable_prompt_adapter=False, max_prompt_adapters=1, max_prompt_adapter_token=0, device='auto', num_scheduler_steps=1, multi_step_stream_outputs=True, scheduler_delay_factor=0.0, enable_chunked_prefill=None, speculative_model=None, speculative_model_quantization=None, num_speculative_tokens=None, speculative_disable_mqa_scorer=False, speculative_draft_tensor_parallel_size=None, speculative_max_model_len=None, speculative_disable_by_batch_size=None, ngram_prompt_lookup_max=None, ngram_prompt_lookup_min=None, spec_decoding_acceptance_method='rejection_sampler', typical_acceptance_sampler_posterior_threshold=None, typical_acceptance_sampler_posterior_alpha=None, disable_logprobs_during_spec_decoding=None, model_loader_extra_config=None, ignore_patterns=[], preemption_mode=None, served_model_name=None, qlora_adapter_name_or_path=None, otlp_traces_endpoint=None, collect_detailed_traces=None, disable_async_output_proc=False, scheduling_policy='fcfs', override_neuron_config=None, override_pooler_config=None, compilation_config=None, kv_transfer_config=None, worker_cls='auto', generation_config=None, override_generation_config=None, enable_sleep_mode=False, calculate_kv_scales=False, disable_log_requests=False, max_log_len=None, disable_fastapi_docs=False, enable_prompt_tokens_details=False, dispatch_function=<function serve at 0x7f5eed13bec0>)
INFO 02-16 23:20:36 api_server.py:206] Started engine process with PID 3982768
INFO 02-16 23:20:40 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 23:20:46 config.py:542] This model supports multiple tasks: {'classify', 'embed', 'reward', 'score', 'generate'}. Defaulting to 'generate'.
INFO 02-16 23:20:46 config.py:1401] Defaulting to use mp for distributed inference
INFO 02-16 23:21:01 config.py:542] This model supports multiple tasks: {'embed', 'classify', 'reward', 'score', 'generate'}. Defaulting to 'generate'.
INFO 02-16 23:21:01 config.py:1401] Defaulting to use mp for distributed inference
INFO 02-16 23:21:01 llm_engine.py:234] Initializing a V0 LLM engine (v0.7.2) with config: model='snunlp/bigdata_exaone3_7.8b_fft', speculative_config=None, tokenizer='snunlp/bigdata_exaone3_7.8b_fft', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=4, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=snunlp/bigdata_exaone3_7.8b_fft, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=True, 
WARNING 02-16 23:21:01 multiproc_worker_utils.py:300] Reducing Torch parallelism from 40 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
INFO 02-16 23:21:01 custom_cache_manager.py:19] Setting Triton cache manager to: vllm.triton_utils.custom_cache_manager:CustomCacheManager
INFO 02-16 23:21:03 cuda.py:230] Using Flash Attention backend.
INFO 02-16 23:21:05 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 23:21:06 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 23:21:06 __init__.py:190] Automatically detected platform cuda.
[1;36m(VllmWorkerProcess pid=3983524)[0;0m INFO 02-16 23:21:06 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3983522)[0;0m INFO 02-16 23:21:07 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3983523)[0;0m INFO 02-16 23:21:07 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3983524)[0;0m INFO 02-16 23:21:07 cuda.py:230] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=3983522)[0;0m INFO 02-16 23:21:08 cuda.py:230] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=3983523)[0;0m INFO 02-16 23:21:08 cuda.py:230] Using Flash Attention backend.
INFO 02-16 23:21:09 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3983522)[0;0m INFO 02-16 23:21:09 utils.py:950] Found nccl from library libnccl.so.2
INFO 02-16 23:21:09 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3983524)[0;0m INFO 02-16 23:21:09 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3983523)[0;0m INFO 02-16 23:21:09 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3983524)[0;0m INFO 02-16 23:21:09 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3983523)[0;0m INFO 02-16 23:21:09 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3983522)[0;0m INFO 02-16 23:21:09 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3983524)[0;0m WARNING 02-16 23:21:10 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
WARNING 02-16 23:21:10 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
[1;36m(VllmWorkerProcess pid=3983523)[0;0m WARNING 02-16 23:21:10 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
[1;36m(VllmWorkerProcess pid=3983522)[0;0m WARNING 02-16 23:21:10 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
INFO 02-16 23:21:10 shm_broadcast.py:258] vLLM message queue communication handle: Handle(connect_ip='127.0.0.1', local_reader_ranks=[1, 2, 3], buffer_handle=(3, 4194304, 6, 'psm_5b1e9147'), local_subscribe_port=47693, remote_subscribe_port=None)
INFO 02-16 23:21:10 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3983524)[0;0m INFO 02-16 23:21:10 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3983523)[0;0m INFO 02-16 23:21:10 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3983522)[0;0m INFO 02-16 23:21:10 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
INFO 02-16 23:21:11 weight_utils.py:252] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=3983522)[0;0m INFO 02-16 23:21:11 weight_utils.py:252] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=3983524)[0;0m INFO 02-16 23:21:11 weight_utils.py:252] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=3983523)[0;0m INFO 02-16 23:21:11 weight_utils.py:252] Using model weights format ['*.safetensors']
Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:00<00:01,  2.04it/s]
Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:01<00:01,  1.94it/s]
Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:01<00:00,  3.01it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:01<00:00,  2.54it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:01<00:00,  2.46it/s]

INFO 02-16 23:21:13 model_runner.py:1115] Loading model weights took 3.6422 GB
[1;36m(VllmWorkerProcess pid=3983524)[0;0m INFO 02-16 23:21:13 model_runner.py:1115] Loading model weights took 3.6422 GB
[1;36m(VllmWorkerProcess pid=3983522)[0;0m INFO 02-16 23:21:14 model_runner.py:1115] Loading model weights took 3.6422 GB
[1;36m(VllmWorkerProcess pid=3983523)[0;0m INFO 02-16 23:21:14 model_runner.py:1115] Loading model weights took 3.6422 GB
[1;36m(VllmWorkerProcess pid=3983524)[0;0m INFO 02-16 23:21:18 worker.py:267] Memory profiling takes 3.82 seconds
[1;36m(VllmWorkerProcess pid=3983524)[0;0m INFO 02-16 23:21:18 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3983524)[0;0m INFO 02-16 23:21:18 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.25GiB; the rest of the memory reserved for KV Cache is 31.29GiB.
[1;36m(VllmWorkerProcess pid=3983523)[0;0m INFO 02-16 23:21:19 worker.py:267] Memory profiling takes 3.79 seconds
[1;36m(VllmWorkerProcess pid=3983523)[0;0m INFO 02-16 23:21:19 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3983523)[0;0m INFO 02-16 23:21:19 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.25GiB; the rest of the memory reserved for KV Cache is 31.29GiB.
[1;36m(VllmWorkerProcess pid=3983522)[0;0m INFO 02-16 23:21:19 worker.py:267] Memory profiling takes 3.91 seconds
[1;36m(VllmWorkerProcess pid=3983522)[0;0m INFO 02-16 23:21:19 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3983522)[0;0m INFO 02-16 23:21:19 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.25GiB; the rest of the memory reserved for KV Cache is 31.29GiB.
INFO 02-16 23:21:19 worker.py:267] Memory profiling takes 3.90 seconds
INFO 02-16 23:21:19 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
INFO 02-16 23:21:19 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.97GiB; the rest of the memory reserved for KV Cache is 30.57GiB.
INFO 02-16 23:21:19 executor_base.py:110] # CUDA blocks: 62599, # CPU blocks: 8192
INFO 02-16 23:21:19 executor_base.py:115] Maximum concurrency for 4096 tokens per request: 244.53x
INFO 02-16 23:21:21 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s][1;36m(VllmWorkerProcess pid=3983524)[0;0m INFO 02-16 23:21:21 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=3983522)[0;0m INFO 02-16 23:21:21 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=3983523)[0;0m INFO 02-16 23:21:21 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:23,  1.47it/s]Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:01<00:22,  1.44it/s]Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:02<00:22,  1.44it/s]Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:02<00:20,  1.49it/s]Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:03<00:20,  1.49it/s]Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:04<00:19,  1.49it/s]Capturing CUDA graph shapes:  20%|██        | 7/35 [00:04<00:18,  1.48it/s]Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:05<00:18,  1.48it/s]Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:06<00:17,  1.48it/s]Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:06<00:16,  1.50it/s]Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:07<00:16,  1.50it/s]Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:08<00:15,  1.53it/s]Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:08<00:14,  1.49it/s]Capturing CUDA graph shapes:  40%|████      | 14/35 [00:09<00:13,  1.55it/s]Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:10<00:13,  1.52it/s]Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:10<00:12,  1.54it/s]Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:11<00:11,  1.52it/s]Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:11<00:11,  1.53it/s]Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:12<00:10,  1.56it/s]Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:13<00:09,  1.55it/s]Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:13<00:08,  1.59it/s]Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:14<00:08,  1.58it/s]Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:15<00:07,  1.55it/s]Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:15<00:07,  1.55it/s]Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:16<00:06,  1.59it/s]Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:17<00:05,  1.58it/s]Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:17<00:04,  1.61it/s]Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:18<00:04,  1.63it/s]Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:18<00:03,  1.61it/s]Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:19<00:03,  1.59it/s]Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:20<00:02,  1.62it/s]Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:20<00:01,  1.58it/s]Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:21<00:01,  1.64it/s]Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:21<00:00,  1.62it/s][1;36m(VllmWorkerProcess pid=3983524)[0;0m INFO 02-16 23:21:44 model_runner.py:1562] Graph capturing finished in 23 secs, took 1.21 GiB
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:22<00:00,  1.35it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:22<00:00,  1.52it/s]
INFO 02-16 23:21:44 model_runner.py:1562] Graph capturing finished in 23 secs, took 1.22 GiB
[1;36m(VllmWorkerProcess pid=3983523)[0;0m INFO 02-16 23:21:44 model_runner.py:1562] Graph capturing finished in 23 secs, took 1.21 GiB
[1;36m(VllmWorkerProcess pid=3983522)[0;0m INFO 02-16 23:21:44 model_runner.py:1562] Graph capturing finished in 23 secs, took 1.21 GiB
INFO 02-16 23:21:44 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 29.92 seconds
INFO 02-16 23:21:45 api_server.py:756] Using supplied chat template:
INFO 02-16 23:21:45 api_server.py:756] None
INFO 02-16 23:21:45 launcher.py:21] Available routes are:
INFO 02-16 23:21:45 launcher.py:29] Route: /openapi.json, Methods: GET, HEAD
INFO 02-16 23:21:45 launcher.py:29] Route: /docs, Methods: GET, HEAD
INFO 02-16 23:21:45 launcher.py:29] Route: /docs/oauth2-redirect, Methods: GET, HEAD
INFO 02-16 23:21:45 launcher.py:29] Route: /redoc, Methods: GET, HEAD
INFO 02-16 23:21:45 launcher.py:29] Route: /health, Methods: GET
INFO 02-16 23:21:45 launcher.py:29] Route: /ping, Methods: POST, GET
INFO 02-16 23:21:45 launcher.py:29] Route: /tokenize, Methods: POST
INFO 02-16 23:21:45 launcher.py:29] Route: /detokenize, Methods: POST
INFO 02-16 23:21:45 launcher.py:29] Route: /v1/models, Methods: GET
INFO 02-16 23:21:45 launcher.py:29] Route: /version, Methods: GET
INFO 02-16 23:21:45 launcher.py:29] Route: /v1/chat/completions, Methods: POST
INFO 02-16 23:21:45 launcher.py:29] Route: /v1/completions, Methods: POST
INFO 02-16 23:21:45 launcher.py:29] Route: /v1/embeddings, Methods: POST
INFO 02-16 23:21:45 launcher.py:29] Route: /pooling, Methods: POST
INFO 02-16 23:21:45 launcher.py:29] Route: /score, Methods: POST
INFO 02-16 23:21:45 launcher.py:29] Route: /v1/score, Methods: POST
INFO 02-16 23:21:45 launcher.py:29] Route: /rerank, Methods: POST
INFO 02-16 23:21:45 launcher.py:29] Route: /v1/rerank, Methods: POST
INFO 02-16 23:21:45 launcher.py:29] Route: /v2/rerank, Methods: POST
INFO 02-16 23:21:45 launcher.py:29] Route: /invocations, Methods: POST
INFO:     Started server process [3982612]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
INFO:     127.0.0.1:37078 - "GET /docs HTTP/1.1" 200 OK
/home/hyeznee/.local/lib/python3.12/site-packages/fastapi/openapi/utils.py:225: UserWarning: Duplicate Operation ID ping_ping_post for function ping at /home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/api_server.py
  warnings.warn(message, stacklevel=1)
INFO:     127.0.0.1:37078 - "GET /openapi.json HTTP/1.1" 200 OK
INFO 02-16 23:22:34 chat_utils.py:332] Detected the chat template content format to be 'string'. You can set `--chat-template-content-format` to override this.
INFO 02-16 23:22:34 logger.py:39] Received request chatcmpl-7c0ac199c6ba438cbb1a79d7834f2432: prompt: '[|system|][|endofturn|]\n[|user|]세종대왕에 대해 알려줘.\n[|assistant|]', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4070, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: None, lora_request: None, prompt_adapter_request: None.
INFO 02-16 23:22:34 engine.py:275] Added request chatcmpl-7c0ac199c6ba438cbb1a79d7834f2432.
INFO 02-16 23:22:35 metrics.py:455] Avg prompt throughput: 2.8 tokens/s, Avg generation throughput: 0.1 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO:     127.0.0.1:39140 - "POST /v1/chat/completions HTTP/1.1" 200 OK
INFO 02-16 23:22:48 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 31.3 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:22:50 logger.py:39] Received request cmpl-20befe33e7b04d74afa4d4b2445c1ae9-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.[|system|] 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요.\n4. 하위 쿼리는 최대한 간단한 질문으로 만드세요. (예: "만약 날아다니는 스파게티 괴물이 창작물이나 상상력의 산물이라면, 그 창작물의 출처나 배경 정보 파악" 대신 "날아다니는 스파게티 괴물의 출처 파악"과 같이 간단하게 만드세요.)\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n[|assistant|]\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.[|endofturn|][|example|] 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n[|endofturn|]\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    [|user|] 서버사이드 프로그래밍에 대해 알려줘 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2939, 732, 582, 379, 377, 379, 382, 2171, 582, 377, 379, 2751, 582, 378, 383, 858, 10996, 375, 4484, 657, 582, 379, 377, 379, 382, 2171, 10996, 375, 2626, 1578, 732, 582, 379, 2751, 10996, 15954, 453, 47982, 453, 422, 5998, 732, 7205, 657, 12037, 1075, 5962, 1371, 696, 8019, 1075, 27498, 3644, 13456, 7872, 657, 1736, 2373, 4362, 1727, 1075, 7111, 10996, 375, 560, 378, 375, 24348, 5962, 696, 39380, 41281, 17661, 3644, 13456, 7872, 5847, 375, 560, 379, 375, 2534, 27498, 100048, 657, 1799, 730, 3644, 1043, 13456, 53712, 1481, 375, 7164, 2690, 1823, 730, 3644, 696, 4666, 1130, 698, 14182, 375, 688, 3027, 387, 6873, 2373, 1546, 1208, 2329, 730, 3231, 4605, 4415, 1130, 657, 3644, 1084, 2873, 375, 23784, 1222, 720, 9190, 715, 7135, 5658, 5962, 696, 8890, 37728, 691, 5847, 22442, 560, 380, 375, 582, 380, 1823, 8099, 730, 27498, 100048, 4605, 16769, 1130, 5847, 375, 560, 381, 375, 27498, 100048, 657, 9338, 5488, 1075, 5962, 13456, 5799, 5847, 375, 688, 3027, 387, 738, 20267, 69972, 657, 28874, 30874, 634, 23993, 1113, 37891, 42738, 730, 62058, 634, 17663, 373, 855, 23993, 1113, 730, 10411, 902, 10300, 3231, 7936, 363, 6414, 738, 1945, 1023, 8367, 657, 28874, 30874, 730, 10411, 7936, 363, 1548, 2485, 5488, 1130, 1060, 5799, 5847, 22442, 560, 381, 375, 9556, 732, 4488, 2030, 2485, 15214, 12947, 13456, 1992, 1481, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 20498, 26942, 23454, 1130, 1595, 100048, 582, 378, 9417, 738, 1130, 1595, 100048, 582, 379, 9417, 4377, 10924, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 14182, 375, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 1130, 5847, 375, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 4488, 32604, 4605, 5813, 5414, 9556, 696, 6016, 1130, 5847, 375, 3027, 954, 13385, 387, 11225, 1339, 18295, 657, 7135, 3930, 11966, 2373, 9633, 392, 3136, 1780, 2373, 6930, 5571, 9500, 1162, 696, 698, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 25999, 905, 9633, 657, 11966, 9417, 738, 49065, 905, 9633, 657, 11966, 9417, 738, 25999, 2030, 18295, 1126, 1162, 696, 924, 3093, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 16993, 373, 11819, 373, 5805, 730, 11282, 7460, 732, 3656, 91728, 392, 7135, 730, 3830, 14178, 3090, 18938, 5927, 696, 1821, 48199, 773, 657, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 54529, 730, 11282, 7460, 9417, 738, 22279, 730, 11282, 7460, 9417, 738, 34724, 730, 11282, 7460, 9417, 738, 54529, 373, 11819, 373, 5805, 730, 11282, 7460, 29289, 9417, 738, 54529, 730, 18938, 5927, 9417, 738, 22279, 730, 18938, 5927, 9417, 738, 34724, 730, 18938, 5927, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 11265, 4605, 1747, 657, 924, 634, 3164, 2373, 1104, 732, 905, 392, 11265, 1747, 37817, 1104, 732, 6620, 657, 4083, 798, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 23454, 39190, 1747, 722, 905, 3164, 2373, 11310, 657, 5282, 1996, 722, 9417, 738, 39190, 1747, 37817, 1104, 732, 6620, 1996, 722, 71045, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 41728, 7991, 13456, 713, 657, 40187, 2030, 77348, 13891, 3231, 4605, 5080, 999, 823, 853, 373, 2472, 8570, 1590, 696, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 20715, 40187, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 77348, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 40187, 2030, 77348, 5080, 9417, 560, 23, 363, 8397, 374, 20715, 1601, 1430, 15767, 13891, 834, 3093, 363, 560, 27, 422, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 4113, 1146, 830, 730, 17129, 4747, 1548, 16951, 4747, 696, 3504, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 19, 363, 2839, 1146, 830, 730, 17129, 4747, 9417, 560, 19, 363, 2839, 1254, 830, 730, 16951, 4747, 363, 560, 23, 422, 582, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 2879, 41728, 7646, 999, 13186, 373, 7967, 373, 18066, 4605, 10916, 4817, 76876, 3253, 2870, 3864, 74914, 373, 2534, 2878, 730, 7245, 23512, 2030, 3093, 3501, 696, 3504, 823, 853, 373, 17028, 730, 5346, 19597, 2030, 73414, 696, 5422, 999, 15887, 375, 3662, 5210, 15767, 1590, 1548, 5262, 696, 4666, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 32122, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 32122, 7245, 23512, 9417, 560, 23, 363, 32122, 3093, 3501, 9417, 560, 23, 363, 32122, 374, 23135, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 23135, 7245, 23512, 9417, 560, 23, 363, 23135, 3093, 3501, 9417, 560, 23, 363, 23135, 374, 44868, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 44868, 7245, 23512, 9417, 560, 23, 363, 44868, 3093, 3501, 9417, 560, 23, 363, 44868, 374, 12149, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 12149, 7245, 23512, 9417, 560, 23, 363, 12149, 3093, 3501, 9417, 560, 23, 363, 17793, 3253, 5210, 15767, 1590, 2425, 5262, 363, 560, 27, 422, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 715, 3253, 696, 713, 12438, 691, 15913, 4977, 905, 3835, 34325, 392, 2210, 3835, 732, 23512, 2131, 3093, 999, 15887, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 13225, 2879, 4977, 9417, 560, 23, 363, 8397, 7245, 23512, 363, 560, 27, 422, 560, 27, 454, 560, 361, 560, 560, 6297, 5962, 696, 2690, 78028, 27498, 5962, 13456, 7872, 33413, 5847, 375, 560, 31, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 2373, 2409, 3504, 15887, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43822 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:22:50 engine.py:275] Added request cmpl-20befe33e7b04d74afa4d4b2445c1ae9-0.
INFO 02-16 23:22:50 logger.py:39] Received request cmpl-25925a7aff6e4cca89e82ba182b0edd2-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 정의 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 11476, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43822 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:22:50 engine.py:275] Added request cmpl-25925a7aff6e4cca89e82ba182b0edd2-0.
INFO 02-16 23:22:51 logger.py:39] Received request cmpl-e4ecf1557748443196a660763cadbbb9-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 특징 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 8574, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43822 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:22:51 engine.py:275] Added request cmpl-e4ecf1557748443196a660763cadbbb9-0.
INFO 02-16 23:22:53 metrics.py:455] Avg prompt throughput: 555.8 tokens/s, Avg generation throughput: 69.2 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 23:22:54 logger.py:39] Received request cmpl-6571642bba114d01a883c0a59cfe5b0e-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 장점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 7306, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43822 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:22:54 engine.py:275] Added request cmpl-6571642bba114d01a883c0a59cfe5b0e-0.
INFO 02-16 23:22:57 logger.py:39] Received request cmpl-671e82fe36fa49d68bbe470bd5c49d3a-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 단점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 13263, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43822 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:22:57 engine.py:275] Added request cmpl-671e82fe36fa49d68bbe470bd5c49d3a-0.
INFO 02-16 23:22:58 metrics.py:455] Avg prompt throughput: 355.6 tokens/s, Avg generation throughput: 123.2 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 23:23:01 logger.py:39] Received request cmpl-00940c5aae8d4b0ca48cc4368363fddd-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 사용 사례 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 1821, 8224, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43822 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:23:01 engine.py:275] Added request cmpl-00940c5aae8d4b0ca48cc4368363fddd-0.
INFO 02-16 23:23:05 logger.py:39] Received request cmpl-7a6bdd3f656445e2bb4f3036d8f7b7d4-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        안녕하세요 jju_developer입니다.오늘은제이쿼리 비동기 방식 연동에 대해 설명하다가따로 설명을 드려야 할 것 같은 정보가 있어서!! 글을 정리하여 적어봅니다~책을 읽다보면 서버사이드와 클라이언트 사이드를 많이 접하실텐데요?웹 프로그래밍에서서버 사이드/클라이언트 사이드가 나뉘고,어느 쪽에 중심을 두느냐에 따라 프로젝트의 방향이 달라지게 됩니다.그렇다면 클라이언트 사이드와 서버 사이드는 무엇일까요?1. 클라이언트 사이드(Client-Side)-클라이언트(사용자) 측에서 처리하는 것.클라이언트(사용자)가 입력한 것을 수신해서 HTML로 만들어서 크롬과 같은 애플리케이션에 해석해서 표시합니다.대표적으로 자바스크립트(Javascript)가 있습니다.2. 서버 사이드(Server-Side)-서버(제공자) 측에서 즉시 처리하는 것.서버 사이드는\xa0클라이언트로 보낼\xa0웹 페이지(HTML,\xa0JavaScript 등이 담긴)를\xa0만들며,작업들(사용자 유효성, DB 관련 등)을 수행합니다.대표적인 언어는 Java, PHP, Ruby, Python, Node.js 등이 있습니다.즉,서버와클라이언트는 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.클라이언트 사이드 언어를 다루고 그에 관련된 개발자들을프론트 엔드서버 사이드 언어를 다루고 그에 관련된 개발자를백엔드라 부릅니다.웹사이트를\xa0제작하는데\xa0쓰이는\xa0스크립트는실행되는 위치에 따라 클라이언트 사이드 스크립트와 서버사이드 스크립트로 구분합니다.서버사이드 스크립트는서버에서 해석해서 구동되는 스크립트이고,클라이언트 사이드 스크립트는브라우저에서 해석해서 구동되는 스크립트입니다.서버사이드 스크립트는 DB를 액세스 하는 게 주요 목적이고,클라이언트 사이드 스크립트는 브라우저의 객체를 제어하는데 쓰입니다.서버 사이드와 클라이언트의 데이터 교환은 HTTPS로 하는데요!여기서 HTTP의 한계를 알아보겠습니다.HTTP의 한계HTTP의 뒤 두 글자 Transfer Protocol.HTTP의 대전제는 “URL 및 부가정보를 통해 사용자가 원하는 페이지를 서버에요청한다,그리고 서버는 해당 요청에응답한다”입니다.사용자가 URL을 요청할 때에만!서버에서 해당 페이지를 꺼내주는 식이라는 겁니다.거꾸로\xa0말하자면,\xa0사용자는\xa0서버로부터\xa0새로운\xa0정보를\xa0받아보기\xa0위해서,\xa0반드시,\xa0새로운\xa0URL을\xa0요청해야\xa0한다는\xa0말과\xa0같습니다.예전에 로그인할 때 아이디 중복확인하는 거 해보셨죠?그때 서버에게 중복 검사를 요청하기 위해서 새 페이지를 요청해야만 했었는데,회원 정보 작성 중에는 페이지를 이동할 수 없었기 때문에새로 요청한 페이지를 팝업창으로 띄웠던 것입니다.(요즘 사이트들은 대부분 팝업창 없이 검사가 가능합니다. 이것이 바로\xa0 Ajax를 이용했기 때문이죠!!!)AJAX그 당시에 떠오르기 시작한 구글은 HTTP 규약을 뛰어넘는 방안을 제안합니다.이름하여AJAX입니다.AJAX를 쓰면, 유저는 새로운 HTML을 서버로부터 받는 것이 아닙니다.즉, 유저는 새로운 웹페이지로 이동하는 것이 아닙니다.대신, 동일한 웹페이지 내에서 DOM을 변경하게 됩니다.요청 페이지에서 이름 칸에 ‘쮸’를 쓰고, 내용에 ‘안녕하세요. 쮸입니다’라고 썼다고 해봅시다.사용자의 이벤트로부터 Javascript는 해당 이름과 내용이 쓰인 DOM을 읽습니다.그리고는 XMLHttpRequest 객체를 통해 웹서버에 해당 이름과 내용을 전송합니다.웹서버는 요청을 처리하고 XML, Text 혹은 JSON을 XMLHttpRequest 객체에 전송합니다.그러면, Javascript가 해당 응답 정보를 DOM에 씁니다.그렇게 결과페이지가 만들어집니다.\u200bAJAX를 쓰면 새로운 HTML을 서버로부터 받아야 하는 것이 아닙니다.동일한 페이지의 일부를 수정할 수도 있는 가능성이 생깁니다.결과적으로 사용자 입장에서는페이지 이동이 발생되지 않고 페이지 내부 변화만 일어나게 됩니다.HTML 페이지 전체를 다 바꿔야 하는 것이 아니라 부분만 바꿀 수 있게 되는 것입니다.이렇게 따로 페이지의 이동 없이 페이지 내부에서 검사를 하여 결과를 출력하는 것을 볼 수 있죵?아이디 중복체크하려면 필히 서버 쪽 DB와 통신하기 위해서 웹서버 동작이 필요한데,이때 페이지를 바꾸지 않고 요청 결과만 그대로 가져와서 띄우면 되게 됩니다.그 외에도 비밀번호 강도 확인, 검색어 실시간 추천, 마우스 커서나 스크롤바 위치에 반응하는 그림, 지도 표시 서비스 등등 다양합니다.<정리>Ajax는 웹 페이지 전체를다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있게 해 줍니다.즉 Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분에만 표시할 수 있습니다.이때 서버와는 다음과 같은 다양한 형태의 데이터를 주고받을 수 있습니다.JSONXMLHTML텍스트 파일 등Ajax의 장점Ajax를 이용하면 다음과 같은 장점이 있습니다.\u200b1.웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있습니다.2. 웹 페이지가 로드된 후에 서버로 데이터 요청을 보낼 수 있습니다. (Post를 통해 값을 서버 쪽으로 전달해 처리되고 받아올 수 있음)3. 웹 페이지가 로드된 후에 서버로부터 데이터를 받을 수 있습니다.4. 백그라운드 영역에서 서버로 데이터를 보낼 수 있습니다.Ajax의 단점Ajax를 이용하면 여러 장점을 가지지만, Ajax로도 다음과 같은 일들은 처리할 수 없습니다.\u200b1.Ajax는 클라이언트가 서버에 데이터를 요청하는 클라이언트 풀링 방식(사용자가 직접 요청)을 사용하므로,서버 푸시 방식(푸시알람 같은)의 실시간 서비스는 만들 수 없습니다.2. Ajax로는 바이너리 데이터를 보내거나 받을 수 없습니다.3. Ajax 스크립트가 포함된 서버가 아닌 다른 서버로 Ajax 요청을 보낼 수는 없습니다.4.클라이언트의 PC로 Ajax 요청을 보낼 수는 없습니다.Ajax 구성 요소- 웹 페이지의 표현을 위한HTML과 CSS- 데이터에 접근하거나 화면 구성을 동적으로 조작하기 위해 사용되는DOM 모델- 데이터의 교환을 위한JSON이나 XML- 웹 서버와의 비동기식 통신을 위한XMLHttpRequest 객체- 위에서 언급한 모든 기술을 결합하여 사용자의 작업 흐름을 제어하는 데 사용되는자바스크립트1 : 사용자에 의한 요청 이벤트가 발생합니다. (-> jju240 아이디 생성 요청함)2 : 요청 이벤트가 발생하면 이벤트 핸들러에 의해 자바스크립트가 호출됩니다.3 : 자바스크립트는 XMLHttpRequest 객체를 사용하여 서버로 요청을 보냅니다.이때 웹 브라우저는 요청을 보내고 나서,서버의 응답을 기다릴 필요 없이다른 작업을 처리할 수 있습니다.4 : 서버는 전달받은 XMLHttpRequest 객체를 가지고 Ajax 요청을 처리합니다.5,6 : 서버는 처리한 결과를 HTML, XML 또는 JSON 형태의 데이터로 웹 브라우저에 전달합니다.이때 전달되는 응답은 새 페이지 전부 보내는 것이 아니라 필요한 데이터만을 전달합니다.(->이미사용 중이라는 문구)7 : 서버로부터 전달받은 데이터를 가지고 웹 페이지의 일부분만을 갱신하는 자바스크립트를 호출합니다.8 : 최종으로 웹 페이지의 일부분만이 다시 로딩되어 표시됩니다. (-> 이미 사용 중인 아이디입니다!)XMLHttpRequest 객체Ajax의 가장 핵심적인 구성 요소는 바로 XMLHttpRequest 객체입니다.Ajax에서 XMLHttpRequest 객체는웹 브라우저가 서버와 데이터를 교환할 때 사용됩니다.웹 브라우저가 백그라운드에서 계속해서 서버와 통신할 수 있는 것은 바로 이 객체를 사용하기 때문입니다.let httpRequest = new XMLHttpRequest();이상으로 서버사이드, 클라이언트의 개념과 그 둘이 어떻게 데이터를 교환하는지 알아보았습니다.⭐⭐⭐⭐⭐ 이번 글은 이해하고 적는 것에 초점을 두었기 때문에 시간이 많이 걸렸었는데용\xa0ㅎㅎ😥\\중요한 개념이니 꼭 숙지하시는데 도움이 되었으면 좋겠습니다~!!!그럼 오늘도 수고하셨습니다~참고 웹사이트:http://tcpschool.com/ajax/ajax_intro_works', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 3801, 1130, 5847, 1056, 13238, 424, 50874, 623, 10996, 375, 2939, 732, 37762, 46008, 760, 1202, 50048, 5073, 24108, 2373, 2409, 3328, 1130, 5954, 28837, 3328, 696, 32961, 1051, 924, 1119, 732, 3231, 905, 773, 22556, 3461, 2272, 696, 4892, 22226, 1015, 721, 41065, 455, 2703, 696, 3405, 10816, 838, 18296, 37305, 2030, 56794, 16444, 4605, 1719, 20032, 1332, 6891, 27778, 392, 51257, 42980, 41728, 95473, 16444, 376, 6055, 49544, 16444, 905, 20903, 853, 373, 12258, 3609, 2373, 5696, 696, 1546, 3016, 5133, 2373, 2414, 10902, 730, 6319, 634, 17032, 1060, 2873, 375, 9251, 4767, 56794, 16444, 2030, 18296, 16444, 657, 4262, 858, 4148, 392, 378, 375, 56794, 16444, 369, 16483, 374, 44590, 370, 374, 6055, 49544, 369, 16167, 942, 370, 4387, 41728, 5547, 1130, 657, 924, 375, 6055, 49544, 369, 16167, 942, 370, 905, 13385, 1075, 924, 696, 33278, 5414, 15447, 715, 2069, 22556, 40433, 1548, 1119, 732, 38217, 2373, 11235, 5414, 10269, 14010, 375, 13908, 41281, 47201, 4183, 56386, 369, 403, 1238, 10832, 370, 905, 773, 50747, 375, 379, 375, 18296, 16444, 369, 23423, 374, 44590, 370, 374, 95473, 369, 1050, 40041, 370, 4387, 41728, 16192, 5547, 1130, 657, 924, 375, 95473, 16444, 657, 2926, 31158, 25430, 17681, 11574, 13203, 369, 24961, 373, 20820, 1222, 634, 17206, 370, 4605, 2069, 1877, 373, 21135, 1371, 369, 16167, 942, 24146, 1210, 373, 12847, 3051, 1222, 370, 696, 9425, 14010, 375, 13908, 1965, 798, 10978, 657, 11154, 373, 21479, 373, 30967, 373, 14138, 373, 19206, 375, 12716, 1222, 634, 773, 50747, 375, 18909, 373, 95473, 2030, 6055, 49544, 657, 11574, 13203, 715, 5372, 32906, 696, 3868, 2109, 868, 773, 643, 375, 6055, 49544, 16444, 10978, 4605, 16383, 853, 855, 2373, 3051, 16524, 33468, 1371, 696, 1770, 2024, 1067, 54110, 95473, 16444, 10978, 4605, 16383, 853, 855, 2373, 3051, 16524, 33468, 4605, 3387, 8789, 24835, 60354, 375, 51257, 79184, 4605, 5465, 1130, 15913, 15533, 657, 59588, 657, 1332, 1282, 13452, 657, 3897, 2373, 2414, 56794, 16444, 59588, 2030, 18296, 37305, 12870, 2158, 25430, 11301, 14010, 375, 95473, 37305, 59588, 657, 95473, 41728, 11235, 5414, 35730, 13452, 657, 59588, 634, 853, 373, 6055, 49544, 16444, 59588, 657, 21014, 962, 1415, 41728, 11235, 5414, 35730, 13452, 657, 59588, 10996, 375, 95473, 37305, 59588, 657, 12847, 4605, 92284, 691, 657, 869, 7245, 6801, 634, 853, 373, 6055, 49544, 16444, 59588, 657, 61559, 730, 42225, 4605, 23245, 1130, 15913, 2112, 10996, 375, 95473, 16444, 2030, 56794, 730, 7957, 10547, 732, 60728, 715, 691, 15913, 740, 362, 5429, 712, 17086, 730, 13602, 4605, 5337, 13910, 50747, 375, 64157, 730, 13602, 64157, 730, 2448, 1546, 18302, 31113, 28607, 375, 64157, 730, 7991, 1050, 657, 1488, 20654, 2425, 24688, 33377, 4605, 2364, 7332, 905, 9062, 657, 13203, 4605, 18296, 2373, 740, 1774, 10348, 373, 3011, 18296, 657, 5299, 8254, 2373, 99822, 10348, 9583, 10996, 375, 16167, 942, 905, 3293, 696, 8254, 2870, 1105, 2373, 1043, 362, 95473, 41728, 5299, 13203, 4605, 9596, 823, 657, 23890, 21212, 7356, 375, 1387, 36647, 1216, 1130, 942, 838, 373, 7332, 657, 18296, 715, 4560, 4650, 3231, 4605, 1374, 25539, 722, 4313, 373, 8887, 373, 4650, 3293, 696, 8254, 21046, 4375, 1216, 1548, 1119, 50747, 375, 12926, 2373, 33063, 2870, 1105, 23807, 27013, 9506, 1130, 657, 1022, 67157, 5797, 12099, 392, 16591, 18296, 2373, 1060, 27013, 4830, 4605, 8254, 76766, 4313, 1956, 13203, 4605, 8254, 21046, 1043, 5039, 15913, 373, 35457, 3231, 6016, 1126, 97300, 13203, 4605, 5346, 2870, 868, 1107, 2957, 722, 1668, 2373, 29650, 8254, 1075, 13203, 4605, 32583, 3239, 13456, 9534, 3245, 5623, 924, 10996, 21339, 5438, 8050, 1371, 732, 5255, 32583, 3239, 2705, 4830, 905, 1995, 14010, 375, 4383, 634, 2264, 582, 62632, 4605, 2785, 2662, 722, 1668, 634, 12099, 11258, 370, 75983, 36226, 799, 5569, 2373, 15454, 722, 2104, 1075, 16993, 732, 17086, 87364, 696, 33094, 657, 8800, 696, 11137, 14010, 375, 17787, 22226, 75983, 36226, 10996, 375, 75983, 36226, 4605, 2112, 838, 373, 19589, 657, 4650, 15447, 696, 18296, 715, 4560, 1374, 657, 924, 634, 10454, 375, 18909, 373, 19589, 657, 4650, 11574, 7696, 715, 51034, 657, 924, 634, 10454, 375, 27299, 373, 9725, 1075, 11574, 7696, 1080, 41728, 27591, 696, 8171, 1130, 1060, 2873, 375, 740, 1774, 13203, 41728, 3730, 10940, 2373, 2376, 49854, 18420, 4605, 2112, 853, 373, 3311, 2373, 2376, 3801, 1130, 5847, 375, 58301, 10996, 18420, 3885, 9347, 3401, 844, 64429, 375, 16167, 942, 730, 6594, 715, 4560, 46456, 657, 5299, 3730, 1548, 3311, 634, 44037, 27591, 696, 3405, 50747, 375, 3011, 657, 20100, 88354, 42225, 4605, 2364, 11574, 95473, 2373, 5299, 3730, 1548, 3311, 696, 24134, 14010, 375, 51257, 95473, 657, 8254, 696, 5547, 48199, 20100, 373, 11353, 7597, 15214, 696, 20100, 88354, 42225, 2373, 24134, 14010, 375, 27150, 373, 46456, 905, 5299, 16352, 3231, 4605, 27591, 2373, 35027, 375, 10008, 3336, 7696, 905, 2069, 52232, 76456, 75983, 36226, 4605, 2112, 838, 4650, 15447, 696, 18296, 715, 4560, 69597, 1137, 691, 657, 924, 634, 10454, 375, 74038, 1075, 13203, 730, 5720, 4605, 10122, 2870, 8952, 773, 657, 1995, 35604, 45523, 375, 29635, 41281, 7332, 5106, 41728, 657, 7696, 5346, 634, 3449, 13452, 698, 1145, 853, 13203, 5424, 5005, 1043, 5735, 1060, 2873, 375, 24961, 13203, 4532, 4605, 694, 39655, 691, 657, 924, 634, 1579, 789, 2578, 1043, 20867, 868, 773, 1060, 970, 657, 924, 10996, 375, 5366, 5658, 13203, 730, 5346, 2705, 13203, 5424, 41728, 4830, 4605, 22356, 3336, 4605, 17653, 1130, 657, 924, 696, 2109, 868, 773, 796, 475, 392, 5763, 1689, 27013, 40269, 1130, 38835, 55216, 18296, 3609, 12847, 2030, 7514, 76766, 4313, 11574, 95473, 14288, 634, 2327, 1075, 896, 373, 17540, 13203, 4605, 8766, 698, 1145, 853, 8254, 3336, 1043, 5476, 44700, 49354, 838, 9312, 2873, 375, 799, 2068, 15169, 10239, 63320, 19570, 2927, 373, 47700, 17557, 3093, 373, 25801, 15774, 902, 70806, 1987, 3897, 2373, 7667, 1130, 657, 5124, 373, 6577, 10269, 3670, 7429, 2841, 14010, 39065, 27896, 391, 67884, 1817, 657, 11574, 13203, 4532, 4605, 7237, 86183, 1130, 698, 1145, 94925, 373, 11574, 13203, 730, 47792, 1043, 696, 21522, 2870, 868, 773, 1060, 844, 6916, 375, 18909, 62632, 4605, 2785, 16559, 2599, 33388, 7179, 11693, 41728, 18296, 2030, 7514, 22226, 373, 855, 3336, 4605, 11574, 13203, 730, 47792, 2373, 1043, 10269, 2870, 868, 773, 50747, 375, 17540, 18296, 2030, 657, 2775, 1548, 1119, 732, 2841, 1075, 7075, 730, 7957, 4605, 33052, 696, 868, 773, 50747, 375, 34613, 52991, 24961, 20151, 2754, 11038, 1222, 67884, 1817, 730, 7306, 67884, 1817, 4605, 2785, 16559, 2775, 1548, 1119, 732, 7306, 634, 773, 50747, 76456, 378, 375, 51257, 13203, 4532, 4605, 2257, 86183, 1130, 698, 1145, 94925, 373, 11574, 13203, 730, 47792, 1043, 696, 21522, 2870, 868, 773, 50747, 375, 379, 375, 11574, 13203, 905, 17099, 16524, 1452, 2373, 18296, 715, 7957, 8254, 696, 17681, 868, 773, 50747, 375, 688, 19889, 4605, 2364, 7812, 696, 18296, 3609, 13456, 7820, 999, 5547, 13452, 853, 69597, 3009, 868, 773, 1040, 370, 380, 375, 11574, 13203, 905, 17099, 16524, 1452, 2373, 18296, 715, 4560, 7957, 4605, 1374, 696, 868, 773, 50747, 375, 381, 375, 2599, 33388, 7179, 11693, 41728, 18296, 715, 7957, 4605, 17681, 868, 773, 50747, 375, 67884, 1817, 730, 13263, 67884, 1817, 4605, 2785, 16559, 2690, 7306, 696, 2034, 2597, 373, 62632, 715, 720, 2775, 1548, 1119, 732, 955, 1371, 732, 5547, 2870, 868, 1107, 50747, 76456, 378, 375, 67884, 1817, 657, 56794, 905, 18296, 2373, 7957, 4605, 8254, 1130, 657, 56794, 3320, 3890, 5073, 369, 16167, 942, 905, 3492, 8254, 370, 696, 1821, 1130, 8158, 373, 95473, 83791, 5073, 369, 6953, 954, 5006, 1324, 1119, 732, 370, 730, 17557, 3670, 657, 2069, 868, 1107, 50747, 375, 379, 375, 62632, 715, 657, 5308, 2088, 760, 7957, 4605, 3399, 16519, 1374, 696, 868, 1107, 50747, 375, 380, 375, 62632, 59588, 905, 4666, 16524, 18296, 905, 2993, 2126, 18296, 715, 62632, 8254, 696, 17681, 868, 657, 1107, 50747, 375, 381, 375, 6055, 49544, 730, 4769, 715, 62632, 8254, 696, 17681, 868, 657, 1107, 50747, 375, 67884, 1817, 4394, 9517, 374, 11574, 13203, 730, 5233, 696, 3125, 24961, 1548, 20772, 374, 7957, 2373, 10625, 1130, 16519, 9836, 4394, 696, 1368, 41281, 15597, 76766, 1902, 1821, 13452, 657, 53148, 5927, 374, 7957, 730, 10547, 696, 3125, 34613, 37891, 20100, 374, 11574, 18296, 2030, 730, 1202, 50048, 1286, 7514, 696, 3125, 52991, 88354, 42225, 374, 1144, 41728, 10198, 1075, 2904, 3755, 696, 15581, 22226, 7332, 730, 3644, 11019, 696, 23245, 1130, 657, 1736, 1821, 13452, 657, 942, 1987, 4183, 56386, 378, 756, 7332, 2373, 14095, 8254, 6594, 905, 3449, 14010, 375, 6169, 391, 1056, 13238, 379, 381, 377, 23807, 16769, 8254, 3117, 370, 379, 756, 8254, 6594, 905, 3449, 16559, 6594, 22437, 1030, 2373, 9428, 47201, 4183, 56386, 905, 39038, 837, 1318, 375, 380, 756, 47201, 4183, 56386, 657, 20100, 88354, 42225, 4605, 1821, 22226, 18296, 715, 8254, 696, 63149, 375, 17540, 11574, 61559, 657, 8254, 696, 3399, 853, 11030, 373, 95473, 730, 16352, 696, 30567, 2327, 2705, 6472, 3644, 696, 5547, 2870, 868, 773, 50747, 375, 381, 756, 18296, 657, 7820, 6912, 732, 20100, 88354, 42225, 4605, 2034, 853, 62632, 8254, 696, 5547, 14010, 375, 382, 373, 383, 756, 18296, 657, 5547, 1075, 3336, 4605, 15447, 373, 20100, 4978, 15214, 7075, 730, 7957, 715, 11574, 61559, 2373, 7820, 14010, 375, 17540, 7820, 13452, 657, 16352, 732, 1956, 13203, 7853, 3399, 657, 924, 634, 1579, 789, 2327, 1075, 7957, 1043, 696, 7820, 14010, 21339, 24802, 14360, 16167, 70476, 21212, 15837, 370, 384, 756, 18296, 715, 4560, 7820, 6912, 732, 7957, 4605, 2034, 853, 11574, 13203, 730, 47792, 1043, 696, 21522, 1130, 657, 47201, 4183, 56386, 4605, 39038, 14010, 375, 385, 756, 9350, 13456, 11574, 13203, 730, 47792, 1043, 634, 2257, 86183, 13452, 721, 10269, 837, 1318, 375, 6169, 391, 3519, 1821, 1126, 798, 23807, 10996, 362, 370, 52991, 88354, 42225, 67884, 1817, 730, 2472, 8771, 1965, 798, 4394, 9517, 657, 2264, 20100, 88354, 42225, 10996, 375, 67884, 1817, 41728, 20100, 88354, 42225, 657, 51257, 61559, 905, 18296, 2030, 7957, 4605, 10547, 2870, 1105, 1821, 837, 1318, 375, 51257, 61559, 905, 2599, 33388, 7179, 41728, 3063, 5414, 18296, 2030, 7514, 2870, 868, 773, 657, 924, 732, 2264, 650, 42225, 4605, 1821, 76766, 1668, 10996, 375, 3538, 3825, 13427, 801, 1539, 20100, 88354, 60621, 13766, 13456, 18296, 37305, 373, 56794, 730, 9711, 1548, 855, 3136, 634, 3656, 7957, 4605, 10547, 1130, 59985, 5337, 19850, 50747, 375, 48689, 48689, 48689, 48689, 48689, 2626, 2272, 732, 4630, 48199, 1015, 657, 924, 2373, 18073, 696, 1546, 2957, 722, 1668, 2373, 1590, 634, 1719, 14012, 2957, 15913, 1018, 3301, 11881, 608, 460, 421, 31724, 1075, 9711, 96201, 3102, 4520, 25661, 954, 15913, 3577, 634, 970, 2957, 8235, 1104, 13910, 50747, 455, 11258, 8179, 2247, 720, 16400, 1130, 5797, 50747, 455, 16874, 11574, 79184, 387, 13656, 387, 9413, 14298, 1557, 22662, 375, 3256, 376, 2740, 1817, 376, 2740, 1817, 424, 52062, 424, 7125], lora_request: None, prompt_adapter_request: None.
INFO 02-16 23:23:05 logger.py:39] Received request cmpl-59dcf79620424975a94f3e37a1126388-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        서버 사이드 개발은 웹 애플리케이션의 백엔드 측을 구축하는 프로그래밍 작업으로, 사용자 요청을 처리하고 데이터를 제공하는 역할을 합니다. 이 글에서는 서버 사이드 개발의 개념과 중요성에 대해 알아보고, 백엔드 개발의 주요 내용을 다룰 것입니다.\n서버 사이드 개발의 개념\n서버 사이드 개발은 웹 애플리케이션 또는 다른 네트워크 기반 애플리케이션에서 클라이언트 요청을 처리하고 데이터를 제공하는 부분을 담당하는 개발 프로세스입니다. 서버 사이드 개발은 서버 측에서 실행되며, 클라이언트의 요청에 응답하고 필요한 데이터를 처리하고 반환합니다. 서버 사이드 개발은 다양한 언어와 프레임워크를 사용하여 이루어집니다. 주로 사용되는 언어로는 Java, Python, Ruby, PHP 등이 있으며, 프레임워크로는 Spring, Django, Ruby on Rails, Laravel 등이 있습니다. 이러한 언어와 프레임워크는 개발자가 효율적이고 안정적인 서버 사이드 애플리케이션을 구축할 수 있도록 도와줍니다. 서버 사이드 개발은 다양한 기능과 기술을 다룹니다. 데이터베이스와의 상호작용, 보안 및 인증, 성능 최적화, API 설계, 비즈니스 로직 구현 등이 그중 일부입니다. 또한, 서버 사이드 개발은 확장성과 활용성을 고려하여 서버 아키텍처를 설계하고, 클라이언트와의 효율적인 통신을 위해 RESTful API, 웹 소켓 등과 같은 통신 프로토콜을 사용하기도 합니다.\n백엔드 프로그래밍 언어와 프레임워크\n주로 사용되는 백엔드 프로그래밍 언어로는 Java, Python, Ruby, PHP, Node.js 등이 있습니다. 각 언어마다 특징과 장단점이 있으며, 개발자는 프로젝트의 요구 사항과 성격에 맞는 언어를 선택합니다. Java는 객체지향적이고 안정적인 성능을 제공하며, Python은 가독성이 높고 생산성이 좋습니다. Ruby는 간결하고 유연한 문법을 가지며, PHP는 웹 개발에 특화되어 있습니다. Node.js는 JavaScript 기반으로 동작하며, 비동기식 프로그래밍을 지원하여 높은 처리량과 확장성을 가집니다. 각 백엔드 프로그래밍 언어에는 해당 언어를 활용한 다양한 프레임워크가 존재합니다. 프레임워크는 개발자가 애플리케이션의 핵심 로직에 집중할 수 있도록 기본 구조와 기능을 제공합니다. 예를 들어, Java의 Spring 프레임워크는 의존성 주입(Dependency Injection), MVC 아키텍처 패턴, 데이터베이스 연동 등을 지원하여 개발자가 생산성을 높이고 품질 좋은 애플리케이션을 개발할 수 있도록 도와줍니다. Python의 Django, Ruby의 Ruby on Rails, PHP의 Laravel 등도 마찬가지로 각 언어에 대한 효율적인 개발 환경을 제공합니다.\n데이터베이스와의 연동\n백엔드 프로그래밍에서 데이터베이스와의 연동은 핵심적인 역할을 수행합니다. 데이터베이스는 애플리케이션의 데이터를 저장하고 관리하는 역할을 담당하며, 백엔드 개발자는 데이터베이스와의 연동을 통해 데이터를 읽고 쓰며 애플리케이션의 비즈니스 로직을 구현합니다. 데이터베이스와의 연동을 위해 백엔드 개발자는 SQL(Structured Query Language)을 사용합니다. SQL은 데이터베이스 관리 시스템(DBMS)과 상호 작용하기 위한 표준화된 언어로, 데이터베이스에 쿼리를 전달하고 결과를 받아오는 역할을 수행합니다. SQL을 사용하여 데이터베이스에 테이블을 생성하고 수정하며, 데이터를 삽입, 수정, 삭제하고 조회할 수 있습니다. 데이터베이스와의 연동은 일반적으로 DBMS와의 드라이버를 사용하여 이루어집니다. 백엔드 프로그래밍 언어에는 다양한 DBMS와의 연동을 지원하는 드라이버가 제공되며, 이를 활용하여 데이터베이스에 접속하고 쿼리를 실행합니다. 드라이버를 통해 데이터베이스와의 연결을 설정하고, SQL 문을 실행하여 데이터를 조회하거나 수정할 수 있습니다. 이를 통해 백엔드 개발자는 데이터베이스의 테이블과 컬럼을 활용하여 데이터를 조작하고 필요한 정보를 애플리케이션에 제공할 수 있습니다. 데이터베이스와의 연동은 애플리케이션의 데이터 관리와 동시에 데이터의 일관성, 안전성, 보안성을 보장하는 중요한 요소입니다. 백엔드 개발자는 데이터베이스 스키마 설계, 쿼리의 최적화, 트랜잭션 관리 등을 고려하여 데이터베이스와의 효율적이고 안정적인 연동을 구현해야 합니다. 또한, ORM(Object-Relational Mapping)을 활용하여 객체와 데이터베이스 간의 매핑을 자동화할 수도 있으며, 이를 통해 개발자는 보다 직관적이고 편리한 방식으로 데이터를 다룰 수 있습니다.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 95473, 16444, 4003, 732, 11574, 38217, 730, 2599, 65840, 4387, 696, 9472, 1130, 657, 42980, 3644, 13456, 373, 7332, 8254, 696, 5547, 48199, 7957, 4605, 4078, 1130, 657, 6034, 696, 1481, 375, 650, 2272, 41728, 657, 18296, 16444, 4003, 730, 9711, 1548, 2963, 1210, 2373, 2409, 5337, 853, 373, 2599, 65840, 4003, 730, 7245, 3311, 696, 48149, 924, 10996, 375, 560, 95473, 16444, 4003, 730, 9711, 560, 95473, 16444, 4003, 732, 11574, 38217, 4978, 2126, 15227, 8898, 38217, 41728, 56794, 8254, 696, 5547, 48199, 7957, 4605, 4078, 1130, 657, 2578, 696, 8065, 1130, 657, 4003, 33427, 10996, 375, 18296, 16444, 4003, 732, 18296, 4387, 41728, 12944, 13452, 1877, 373, 56794, 730, 8254, 2373, 16352, 48199, 2327, 1075, 7957, 4605, 5547, 48199, 30824, 14010, 375, 18296, 16444, 4003, 732, 2841, 1075, 10978, 2030, 18286, 13518, 4605, 1821, 22226, 68635, 375, 8011, 1821, 13452, 657, 10978, 715, 657, 11154, 373, 14138, 373, 30967, 373, 21479, 1222, 634, 773, 5718, 373, 18286, 13518, 715, 657, 16934, 373, 38493, 373, 30967, 807, 50760, 373, 82417, 1222, 634, 773, 50747, 375, 4476, 1075, 10978, 2030, 18286, 13518, 657, 33468, 905, 9687, 1965, 634, 853, 5957, 1965, 798, 18296, 16444, 38217, 696, 9472, 2870, 868, 773, 37728, 6153, 24244, 375, 18296, 16444, 4003, 732, 2841, 1075, 4198, 1548, 3755, 696, 694, 6516, 819, 375, 51359, 2030, 730, 14885, 14052, 373, 13949, 2425, 7741, 373, 11758, 64620, 373, 8682, 9449, 373, 18938, 54794, 19495, 1222, 634, 82729, 5720, 10996, 375, 3662, 373, 18296, 16444, 4003, 732, 12472, 1210, 1548, 4703, 1210, 696, 6581, 22226, 18296, 42188, 20151, 2351, 4605, 9449, 48199, 373, 56794, 2030, 730, 9687, 1965, 798, 7514, 696, 1902, 35231, 1993, 8682, 373, 11574, 92194, 1222, 1548, 1119, 732, 7514, 72829, 696, 1821, 1130, 46461, 1481, 375, 560, 3387, 65840, 42980, 10978, 2030, 18286, 13518, 560, 32512, 1821, 13452, 657, 2599, 65840, 42980, 10978, 715, 657, 11154, 373, 14138, 373, 30967, 373, 21479, 373, 19206, 375, 12716, 1222, 634, 773, 50747, 375, 2534, 10978, 34445, 8574, 1548, 42622, 634, 773, 5718, 373, 33468, 657, 10902, 730, 6453, 6318, 1548, 8984, 2373, 1867, 657, 10978, 4605, 3329, 14010, 375, 11154, 657, 42225, 698, 2368, 1965, 634, 853, 5957, 1965, 798, 11758, 696, 4078, 1130, 1877, 373, 14138, 732, 713, 2822, 35604, 2388, 853, 5865, 35604, 1104, 50747, 375, 30967, 657, 48360, 48199, 20211, 1075, 28664, 696, 2034, 1877, 373, 21479, 657, 11574, 4003, 2373, 24778, 13452, 721, 773, 50747, 375, 19206, 375, 12716, 657, 20820, 8898, 13456, 14288, 1130, 1877, 373, 1202, 50048, 1286, 42980, 696, 3157, 22226, 2388, 732, 5547, 1983, 1548, 12472, 1210, 696, 713, 11903, 375, 2534, 2599, 65840, 42980, 10978, 97300, 5299, 10978, 4605, 4703, 1075, 2841, 1075, 18286, 13518, 905, 5582, 14010, 375, 18286, 13518, 657, 33468, 905, 38217, 730, 8771, 54794, 2373, 5359, 2870, 868, 773, 37728, 4214, 5630, 2030, 4198, 696, 4078, 14010, 375, 1288, 4605, 1944, 373, 11154, 730, 16934, 18286, 13518, 657, 20665, 1210, 27218, 369, 97620, 74760, 5445, 49108, 42188, 20151, 2351, 13249, 373, 51359, 24108, 1222, 696, 3157, 22226, 33468, 905, 5865, 1210, 696, 7485, 853, 12326, 1104, 732, 38217, 696, 4003, 2870, 868, 773, 37728, 6153, 24244, 375, 14138, 730, 38493, 373, 30967, 730, 30967, 807, 50760, 373, 21479, 730, 82417, 1222, 720, 9190, 715, 2534, 10978, 2373, 2047, 9687, 1965, 798, 4003, 4576, 696, 4078, 14010, 375, 560, 64766, 35972, 2030, 730, 24108, 560, 3387, 65840, 42980, 41728, 51359, 2030, 730, 24108, 732, 8771, 1965, 798, 6034, 696, 9425, 14010, 375, 51359, 657, 38217, 730, 7957, 4605, 11503, 48199, 2645, 1130, 657, 6034, 696, 8065, 1130, 1877, 373, 2599, 65840, 33468, 657, 51359, 2030, 730, 24108, 696, 2364, 7957, 4605, 3405, 853, 2112, 1877, 38217, 730, 18938, 54794, 696, 19495, 14010, 375, 51359, 2030, 730, 24108, 696, 1902, 2599, 65840, 33468, 657, 14339, 369, 412, 47243, 29796, 20709, 370, 696, 1821, 14010, 375, 14339, 732, 51359, 2645, 5309, 369, 14947, 6865, 370, 1548, 14885, 9368, 76766, 3125, 16203, 1255, 16524, 10978, 715, 373, 51359, 2373, 100048, 4605, 7820, 48199, 3336, 4605, 1374, 40223, 657, 6034, 696, 9425, 14010, 375, 14339, 696, 1821, 22226, 51359, 2373, 6807, 696, 16769, 48199, 10122, 1130, 1877, 373, 7957, 4605, 30599, 373, 10122, 373, 14829, 48199, 20127, 2870, 868, 773, 50747, 375, 51359, 2030, 730, 24108, 732, 4400, 41281, 12847, 6865, 2030, 730, 32179, 4605, 1821, 22226, 68635, 375, 2599, 65840, 42980, 10978, 97300, 2841, 1075, 12847, 6865, 2030, 730, 24108, 696, 3157, 1130, 657, 32179, 905, 4078, 13452, 1877, 373, 38069, 4703, 22226, 51359, 2373, 18979, 48199, 100048, 4605, 12944, 14010, 375, 32179, 4605, 2364, 51359, 2030, 730, 5810, 696, 8587, 48199, 373, 14339, 1451, 696, 12944, 22226, 7957, 4605, 20127, 1130, 16519, 10122, 2870, 868, 773, 50747, 375, 38069, 2364, 2599, 65840, 33468, 657, 51359, 730, 6807, 1548, 82625, 696, 4703, 22226, 7957, 4605, 15597, 48199, 2327, 1075, 3231, 4605, 38217, 2373, 4078, 2870, 868, 773, 50747, 375, 51359, 2030, 730, 24108, 732, 38217, 730, 7957, 2645, 2030, 6873, 2373, 7957, 730, 27883, 1210, 373, 58935, 373, 13949, 1210, 696, 7859, 1130, 657, 2963, 1075, 9517, 10996, 375, 2599, 65840, 33468, 657, 51359, 17722, 1200, 9449, 373, 100048, 730, 64620, 373, 34626, 62345, 2481, 2645, 1222, 696, 6581, 22226, 51359, 2030, 730, 9687, 1965, 634, 853, 5957, 1965, 798, 24108, 696, 19495, 21046, 1481, 375, 3662, 373, 83200, 369, 10913, 374, 16631, 2016, 48808, 370, 696, 4703, 22226, 42225, 2030, 51359, 1682, 730, 1484, 4102, 696, 4440, 1255, 2870, 8952, 773, 5718, 373, 38069, 2364, 33468, 657, 1738, 37846, 1965, 634, 853, 9621, 1075, 5073, 13456, 7957, 4605, 48149, 868, 773, 50747, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48124 - "POST /v1/completions HTTP/1.1" 200 OK
INFO:     127.0.0.1:48130 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:23:05 logger.py:39] Received request cmpl-46e174a43dfb422a88e714894cfef11b-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ### 👉 스크립트란?\n\n---\n\n- 특정 작업을 자동으로 수행하기 위해 작성된 프로그램이나 명령어의 집합\n- 스크립트는 주로 단순 반복 작업이나 일련의 과정을 자동화하기 위해 사용되며, 보통 프로그래밍 언어보다 간단한 구조를 가지고 있음\n- 스크립트는 일반적으로 독립적인 애플리케이션보다는 다른 소프트웨어 환경 내에서 실행\n- 인터프리터를 통해 한 줄씩 실행됨\n\\u003cbr>\n\\u003cbr>\n\n### 👉 서버 사이드 스크립트란?\n\n---\n\n- 웹 서버에서 실행되는 스크립트 언어\n- 클라이언트(웹 브라우저)의 요청을 받아 서버에서 처리하고 그 결과를 다시 클라이언트에게 전송하는 역할\n- 웹 개발에서 널리 사용되고 있음\n- 동적인 웹 페이지 생성, 데이터 처리, 사용자 인증 등 다양한 기능을 구현하는 데 핵심적인 역할을 함\n- 대표적으로는 PHP, Python(Django, Flask), Ruby(Ruby on Rails), Java(JSP) 등이 있음\n\\u003cbr>\n\\u003cbr>\n\n### 👉 서버 사이드 스크립트의 주요 특징\n\n---\n\n- 서버에서 실행\n    - 서버 사이드 스크립트는 웹 서버 내에서 실행되며, 클라이언트는 실행 결과만 받음\n- 다양한 언어 지원\n    - PHP, Python, Ruby, Java 등 다양한 언어로 작성할 수 있음\n- 데이터베이스 연동\n    - 서버 사이드 스크립트는 데이터베이스와 상호작용하여 데이터를 저장, 수정, 삭제할 수 있음\n- 보안성\n    - 소스 코드가 클라이언트에게 노출되지 않아 보안에 유리\n- 서버 자원 활용\n    - 서버의 CPU, 메모리 등 자원을 활용하여 복잡한 작업을 처리할 수 있음\n    \\u003cbr>\n    \\u003cbr>\n\n### 👉 클라이언트 사이드 스크립트란?\n\n---\n\n- 웹 브라우저에서 실행되는 스크립트 언어\n- 서버로부터 웹 페이지를 받아온 후, 브라우저에서 스크립트를 실행하여 동적으로 웹 페이지를 변경하거나 사용자와 상호작용\n- 동적인 웹 페이지 구현, 사용자 인터페이스 개선, 폼 유효성 검사 등 다양한 기능을 구현할 수 있음\n- 웹 개발에서는 일반적으로 서버 사이드 스크립트와 클라이언트 사이드 스크립트를 함께 사용\n- 대표적으로는 JavaScript가 있으며, jQuery, React, AngularJS, Vue.js 등의 라이브러리와 프레임워크가 많이 사용됨\n\\u003cbr>\n\\u003cbr>\n\n### 👉 클라이언트 사이드 스크립트의 주요 특징\n\n---\n\n- 브라우저에서 실행\n    - 클라이언트 사이드 스크립트는 사용자의 웹 브라우저에서 실행됨\n- JavaScript 사용\n    - 대부분의 클라이언트 사이드 스크립트는 JavaScript로 작성됨\n- 빠른 응답성\n    - 서버와의 통신 없이 브라우저에서 직접 실행되므로 빠른 응답이 가능\n- 사용자 상호 작용\n    - 마우스 클릭, 키보드 입력 등 사용자 이벤트에 즉각적으로 반응할 수 있음\n- 제한된 접근권한\n    - 보안상의 이유로 클라이언트 사이드 스크립트는 사용자 컴퓨터의 자원에 제한적으로 접근', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 5941, 76629, 593, 59588, 1868, 392, 560, 560, 4961, 560, 560, 374, 11126, 3644, 696, 4440, 13456, 9425, 76766, 1902, 6016, 16524, 5371, 37891, 62305, 730, 34617, 560, 374, 59588, 657, 8011, 8019, 7930, 3644, 37891, 43699, 730, 3540, 696, 4440, 1255, 76766, 1902, 1821, 13452, 1877, 373, 6586, 42980, 10978, 30885, 5488, 1075, 5630, 4605, 2034, 853, 773, 1040, 560, 374, 59588, 657, 4400, 41281, 12125, 1965, 798, 38217, 1280, 4264, 2126, 22839, 4576, 1080, 41728, 12944, 560, 374, 4517, 23615, 1173, 4605, 2364, 764, 1949, 64101, 12944, 837, 463, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 18296, 16444, 59588, 1868, 392, 560, 560, 4961, 560, 560, 374, 11574, 18296, 41728, 12944, 13452, 657, 59588, 10978, 560, 374, 56794, 369, 51257, 61559, 370, 730, 8254, 696, 69597, 18296, 41728, 5547, 48199, 855, 3336, 4605, 2257, 56794, 2373, 1060, 24134, 1130, 657, 6034, 560, 374, 11574, 4003, 41728, 23487, 1821, 13452, 853, 773, 1040, 560, 374, 84906, 798, 11574, 13203, 16769, 373, 7957, 5547, 373, 7332, 7741, 1222, 2841, 1075, 4198, 696, 19495, 1130, 657, 1736, 8771, 1965, 798, 6034, 696, 1470, 560, 374, 3163, 41281, 657, 21479, 373, 14138, 369, 78680, 10380, 373, 58607, 5445, 30967, 369, 65566, 450, 807, 50760, 5445, 11154, 369, 17770, 409, 370, 1222, 634, 773, 1040, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 18296, 16444, 59588, 730, 7245, 8574, 560, 560, 4961, 560, 560, 374, 18296, 41728, 12944, 560, 31, 374, 18296, 16444, 59588, 657, 11574, 18296, 1080, 41728, 12944, 13452, 1877, 373, 56794, 657, 12944, 3336, 1043, 1374, 1040, 560, 374, 2841, 1075, 10978, 3157, 560, 31, 374, 21479, 373, 14138, 373, 30967, 373, 11154, 1222, 2841, 1075, 10978, 715, 6016, 2870, 868, 773, 1040, 560, 374, 51359, 24108, 560, 31, 374, 18296, 16444, 59588, 657, 51359, 2030, 14885, 14052, 22226, 7957, 4605, 11503, 373, 10122, 373, 14829, 2870, 868, 773, 1040, 560, 374, 13949, 1210, 560, 31, 374, 6126, 12291, 905, 56794, 2373, 1060, 12448, 13452, 698, 1145, 1023, 13949, 2373, 7167, 560, 374, 18296, 10622, 4703, 560, 31, 374, 18296, 730, 18313, 373, 21497, 1222, 10622, 696, 4703, 22226, 12037, 1075, 3644, 696, 5547, 2870, 868, 773, 1040, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 56794, 16444, 59588, 1868, 392, 560, 560, 4961, 560, 560, 374, 11574, 61559, 41728, 12944, 13452, 657, 59588, 10978, 560, 374, 18296, 715, 4560, 11574, 13203, 4605, 69597, 2263, 1452, 373, 61559, 41728, 59588, 4605, 12944, 22226, 1368, 41281, 11574, 13203, 4605, 8171, 1130, 16519, 7332, 2030, 14885, 14052, 560, 374, 84906, 798, 11574, 13203, 19495, 373, 7332, 51299, 4982, 373, 8809, 24146, 1210, 4830, 1222, 2841, 1075, 4198, 696, 19495, 2870, 868, 773, 1040, 560, 374, 11574, 4003, 41728, 657, 4400, 41281, 18296, 16444, 59588, 2030, 56794, 16444, 59588, 4605, 2110, 1821, 560, 374, 3163, 41281, 657, 20820, 905, 773, 5718, 373, 27010, 373, 21676, 373, 43047, 17770, 373, 46552, 375, 12716, 53641, 67175, 2030, 18286, 13518, 905, 1719, 1821, 837, 463, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 56794, 16444, 59588, 730, 7245, 8574, 560, 560, 4961, 560, 560, 374, 61559, 41728, 12944, 560, 31, 374, 56794, 16444, 59588, 657, 7332, 730, 11574, 61559, 41728, 12944, 837, 463, 560, 374, 20820, 1821, 560, 31, 374, 5255, 730, 56794, 16444, 59588, 657, 20820, 715, 6016, 837, 463, 560, 374, 8570, 16352, 1210, 560, 31, 374, 18296, 2030, 730, 7514, 2705, 61559, 41728, 3492, 12944, 13452, 8158, 8570, 16352, 634, 1995, 560, 374, 7332, 14885, 9368, 560, 31, 374, 25801, 9144, 373, 28674, 13385, 1222, 7332, 6594, 2373, 24385, 41281, 7667, 2870, 868, 773, 1040, 560, 374, 8673, 16524, 10625, 1810, 1075, 560, 31, 374, 13949, 84890, 95483, 56794, 16444, 59588, 657, 7332, 9231, 730, 10622, 2373, 8673, 41281, 10625], lora_request: None, prompt_adapter_request: None.
INFO 02-16 23:23:05 engine.py:275] Added request cmpl-7a6bdd3f656445e2bb4f3036d8f7b7d4-0.
INFO 02-16 23:23:05 logger.py:39] Received request cmpl-cc3f7f0355454021aa97559b5e7889d7-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        \n![](https://velog.velcdn.com/images/hope1213/post/54bce33a-07d8-4d3d-96c5-6a99b9d9cdc7/image.png)\n\n웹 개발을 할 때 가장 중요한 결정 중 하나는 어떤 작업을 서버 사이드(Server-side)에서 처리할지, 클라이언트 사이드(Client-side)에서 처리할지를 결정하는 것입니다. 이 글에서는 서버 사이드와 클라이언트 사이드의 차이점, 각 방식의 장단점, 그리고 어떤 상황에서 어떤 방식을 선택해야 하는지에 대해 살펴보겠습니다.\n\n#### 서버 사이드(Server-side)란?\n\n서버 사이드 프로그래밍은 웹 서버에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 클라이언트(사용자의 브라우저)에서 요청을 받을 때 실행됩니다. 서버 사이드 스크립트는 데이터베이스에 접근하고, 데이터를 처리하고, HTML 페이지를 동적으로 생성하는 데 사용됩니다.\n즉 웹에서 서버와 클라이언트는 정해진 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.\n\n\n**주요 언어 및 기술:**\n![](https://velog.velcdn.com/images/hope1213/post/6f8e3e86-7b7d-453a-8684-da3898c25af4/image.png)\n\n- PHP\n- Python (Django, Flask)\n- Ruby (Ruby on Rails)\n- Java (Spring)\n- Node.js\n\n**장점:**\n1. **보안**: 중요한 로직과 데이터베이스 접근이 서버에서 처리되어 클라이언트에서 접근할 수 없습니다.\n2. **데이터베이스 접근**: 서버에서 직접 데이터베이스와 상호작용할 수 있어 데이터 처리와 저장이 용이합니다.\n3. **호환성**: 모든 클라이언트가 동일한 서버 측 코드를 실행하므로 브라우저 호환성 문제를 줄일 수 있습니다.\n\n**단점:**\n1. **서버 부하**: 모든 처리가 서버에서 이루어지기 때문에 서버의 부하가 증가할 수 있습니다.\n2. **응답 시간**: 클라이언트가 요청을 보내고 서버가 응답할 때까지 시간이 걸릴 수 있습니다.\n\n#### 클라이언트 사이드(Client-side)란?\n\n클라이언트 사이드 프로그래밍은 사용자의 브라우저에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 HTML, CSS, JavaScript로 작성되며, 사용자의 인터페이스를 조작하고 사용자와 상호작용합니다.\n\n![](https://velog.velcdn.com/images/hope1213/post/d9319a2f-6c80-477b-987e-2102e2d24bbe/image.png) 일반적으로 Chrome과 같은 웹브라우저는 굉장히 많은 메모리를 차지합니다.\n\n단순히 탐색을 진행했을 뿐인데 다른 프로세스에 비해 굉장히 많은 메모리를 사용한다는 점에서 의문을 가질수 있습니다. 그 이유는 현재 Web쪽에 무거운 처리 대부분은 클라이언트 사이드 언어로 작업하기 때문입니다.\n\n\n**주요 언어 및 기술:**\n- HTML\n- CSS\n- JavaScript (React, Angular, Vue.js)\n\n\n**장점:**\n1. **빠른 응답**: 서버에 요청을 보내지 않고 브라우저에서 바로 처리하므로 응답 속도가 빠릅니다.\n2. **서버 부하 감소**: 많은 작업을 클라이언트에서 처리함으로써 서버의 부담을 줄일 수 있습니다.\n3. **향상된 사용자 경험**: 애니메이션, 실시간 업데이트 등 사용자 인터페이스를 더욱 풍부하게 만들 수 있습니다.\n\n**단점:**\n1. **보안 문제**: 클라이언트 사이드 코드가 브라우저에 노출되므로 보안에 취약할 수 있습니다.\n2. **브라우저 호환성**: 다양한 브라우저에서 동일하게 작동하도록 코드 작성이 어려울 수 있습니다.\n3. **제한된 성능**: 클라이언트의 기기 성능에 따라 처리 속도가 달라질 수 있습니다.\n\n#### 언제 서버 사이드를 선택해야 할까?\n\n- **보안이 중요한 경우**: 민감한 데이터나 중요한 비즈니스 로직이 포함된 경우 서버 사이드 처리가 필요합니다.\n- **데이터베이스 작업**: 데이터베이스와의 상호작용이 빈번하게 이루어질 때 서버 사이드가 적합합니다.\n- **복잡한 처리**: 복잡한 계산이나 대량의 데이터 처리가 필요할 때 서버 측에서 처리하는 것이 좋습니다.\n\n#### 언제 클라이언트 사이드를 선택해야 할까?\n\n- **실시간 상호작용**: 사용자와의 실시간 상호작용이 중요한 경우 클라이언트 사이드 처리가 필요합니다.\n- **인터페이스 동적 처리**: 동적인 사용자 인터페이스, 애니메이션, 실시간 업데이트 등은 클라이언트 사이드에서 처리하는 것이 좋습니다.\n- **서버 부하 분산**: 서버의 부하를 줄이고자 할 때 일부 처리를 클라이언트 사이드로 이동할 수 있습니다.\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 382, 381, 427, 828, 380, 380, 426, 374, 377, 384, 429, 385, 374, 381, 429, 380, 429, 374, 386, 383, 428, 382, 374, 383, 426, 386, 386, 427, 386, 429, 386, 18748, 428, 384, 376, 18958, 375, 441, 2345, 370, 560, 560, 51257, 4003, 696, 1051, 1105, 2472, 2963, 1075, 4024, 1126, 1799, 657, 3090, 3644, 696, 18296, 16444, 369, 23423, 374, 4261, 370, 41728, 5547, 93047, 373, 56794, 16444, 369, 16483, 374, 4261, 370, 41728, 5547, 93047, 4605, 4024, 1130, 657, 924, 10996, 375, 650, 2272, 41728, 657, 18296, 16444, 2030, 56794, 16444, 730, 29289, 373, 2534, 5073, 730, 42622, 373, 2210, 3090, 2876, 41728, 3090, 5073, 696, 3329, 21046, 691, 59985, 2373, 2409, 8926, 13910, 50747, 375, 560, 560, 3673, 18296, 16444, 369, 23423, 374, 4261, 370, 1868, 392, 560, 560, 95473, 16444, 42980, 732, 11574, 18296, 41728, 12944, 13452, 657, 12291, 4605, 6016, 1130, 657, 924, 696, 4536, 14010, 375, 650, 12291, 657, 56794, 369, 16167, 942, 730, 61559, 370, 41728, 8254, 696, 1374, 696, 1105, 12944, 837, 1318, 375, 18296, 16444, 59588, 657, 51359, 2373, 10625, 48199, 373, 7957, 4605, 5547, 48199, 373, 15447, 13203, 4605, 1368, 41281, 16769, 1130, 657, 1736, 1821, 837, 1318, 375, 560, 18909, 11574, 41728, 18296, 2030, 56794, 657, 24730, 11574, 13203, 715, 5372, 32906, 696, 3868, 2109, 868, 773, 643, 375, 560, 560, 560, 2484, 42008, 10978, 2425, 3755, 387, 2484, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 383, 431, 385, 430, 380, 430, 385, 383, 374, 384, 427, 384, 429, 374, 381, 382, 380, 426, 374, 385, 383, 385, 381, 374, 3695, 380, 385, 386, 385, 428, 379, 382, 3543, 381, 376, 18958, 375, 441, 2345, 370, 560, 560, 374, 21479, 560, 374, 14138, 688, 78680, 10380, 373, 58607, 370, 560, 374, 30967, 688, 65566, 450, 807, 50760, 370, 560, 374, 11154, 688, 60192, 370, 560, 374, 19206, 375, 12716, 560, 560, 2484, 50938, 387, 2484, 560, 378, 375, 1316, 1280, 1336, 2484, 387, 2963, 1075, 54794, 1548, 51359, 10625, 634, 18296, 41728, 5547, 13452, 721, 56794, 41728, 10625, 2870, 868, 1107, 50747, 375, 560, 379, 375, 1316, 64766, 35972, 10625, 2484, 387, 18296, 41728, 3492, 51359, 2030, 14885, 14052, 2870, 868, 773, 721, 7957, 5547, 2030, 11503, 634, 26188, 14010, 375, 560, 380, 375, 1316, 1818, 2401, 1210, 2484, 387, 2904, 56794, 905, 9725, 1075, 18296, 4387, 12291, 4605, 12944, 1130, 8158, 61559, 39833, 1210, 2372, 4605, 23006, 868, 773, 50747, 375, 560, 560, 2484, 29376, 387, 2484, 560, 378, 375, 1316, 95473, 33473, 2484, 387, 2904, 5547, 905, 18296, 41728, 14572, 722, 1668, 2373, 18296, 730, 33473, 905, 5010, 2870, 868, 773, 50747, 375, 560, 379, 375, 1316, 99822, 1590, 2484, 387, 56794, 905, 8254, 696, 3399, 853, 18296, 905, 16352, 2870, 1105, 76876, 1590, 634, 20589, 868, 773, 50747, 375, 560, 560, 3673, 56794, 16444, 369, 16483, 374, 4261, 370, 1868, 392, 560, 560, 6055, 49544, 16444, 42980, 732, 7332, 730, 61559, 41728, 12944, 13452, 657, 12291, 4605, 6016, 1130, 657, 924, 696, 4536, 14010, 375, 650, 12291, 657, 15447, 373, 20772, 373, 20820, 715, 6016, 13452, 1877, 373, 7332, 730, 51299, 4605, 15597, 48199, 7332, 2030, 14885, 14052, 14010, 375, 560, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 429, 386, 380, 378, 386, 426, 379, 431, 374, 383, 428, 385, 377, 374, 381, 384, 384, 427, 374, 386, 385, 384, 430, 374, 379, 378, 377, 379, 430, 379, 429, 379, 381, 100800, 376, 18958, 375, 441, 2345, 370, 4400, 41281, 25698, 1548, 1119, 732, 11574, 21014, 962, 80649, 6121, 1180, 732, 21497, 4605, 8145, 14010, 375, 560, 560, 50375, 30694, 696, 2379, 2662, 696, 3075, 74914, 2126, 33427, 2373, 7322, 6121, 1180, 732, 21497, 4605, 1821, 1075, 4264, 1694, 41728, 15539, 696, 17640, 800, 773, 50747, 375, 855, 3071, 657, 3570, 8545, 2155, 2373, 20671, 5547, 5255, 732, 56794, 16444, 10978, 715, 3644, 76766, 1668, 10996, 375, 560, 560, 560, 2484, 42008, 10978, 2425, 3755, 387, 2484, 560, 374, 15447, 560, 374, 20772, 560, 374, 20820, 688, 72936, 373, 43047, 373, 46552, 375, 12716, 370, 560, 560, 560, 2484, 50938, 387, 2484, 560, 378, 375, 1316, 42750, 16352, 2484, 387, 18296, 2373, 8254, 696, 3399, 698, 1145, 853, 61559, 41728, 2264, 5547, 1130, 8158, 16352, 7818, 905, 92987, 375, 560, 379, 375, 1316, 95473, 33473, 7632, 2484, 387, 1180, 732, 3644, 696, 56794, 41728, 5547, 3117, 13456, 2500, 18296, 730, 4649, 696, 23006, 868, 773, 50747, 375, 560, 380, 375, 1316, 2368, 1029, 16524, 7332, 4503, 2484, 387, 25022, 373, 17557, 18240, 1222, 7332, 51299, 4605, 3892, 10482, 1130, 1060, 2069, 868, 773, 50747, 375, 560, 560, 2484, 29376, 387, 2484, 560, 378, 375, 1316, 1280, 1336, 2372, 2484, 387, 56794, 16444, 12291, 905, 61559, 2373, 12448, 13452, 8158, 13949, 2373, 17954, 2870, 868, 773, 50747, 375, 560, 379, 375, 1316, 21014, 962, 1415, 39833, 1210, 2484, 387, 2841, 1075, 61559, 41728, 9725, 1130, 1060, 13981, 1130, 37728, 12291, 6016, 634, 17717, 868, 773, 50747, 375, 560, 380, 375, 1316, 68118, 16524, 11758, 2484, 387, 56794, 730, 11241, 11758, 2373, 2414, 5547, 7818, 905, 27309, 868, 773, 50747, 375, 560, 560, 3673, 4269, 18296, 16444, 4605, 3329, 21046, 8354, 392, 560, 560, 374, 1316, 1280, 1336, 634, 2963, 1075, 2042, 2484, 387, 15480, 1075, 7957, 902, 2963, 1075, 18938, 54794, 634, 4666, 16524, 2042, 18296, 16444, 5547, 905, 2327, 14010, 375, 560, 374, 1316, 64766, 35972, 3644, 2484, 387, 51359, 2030, 730, 14885, 14052, 634, 39765, 1130, 1060, 40711, 1105, 18296, 16444, 905, 13329, 14010, 375, 560, 374, 1316, 67972, 1075, 5547, 2484, 387, 12037, 1075, 9939, 37891, 23536, 730, 7957, 5547, 905, 2327, 2870, 1105, 18296, 4387, 41728, 5547, 1130, 657, 924, 634, 1104, 50747, 375, 560, 560, 3673, 4269, 56794, 16444, 4605, 3329, 21046, 8354, 392, 560, 560, 374, 1316, 91144, 14885, 14052, 2484, 387, 7332, 2030, 730, 17557, 14885, 14052, 634, 2963, 1075, 2042, 56794, 16444, 5547, 905, 2327, 14010, 375, 560, 374, 1316, 17111, 27512, 84906, 5547, 2484, 387, 84906, 798, 7332, 51299, 373, 25022, 373, 17557, 18240, 1222, 732, 56794, 16444, 41728, 5547, 1130, 657, 924, 634, 1104, 50747, 375, 560, 374, 1316, 95473, 33473, 28350, 2484, 387, 18296, 730, 33473, 4605, 10466, 853, 942, 1051, 1105, 5720, 5547, 4605, 56794, 16444, 715, 5346, 2870, 868, 773, 50747, 375, 560], lora_request: None, prompt_adapter_request: None.
INFO 02-16 23:23:05 engine.py:275] Added request cmpl-59dcf79620424975a94f3e37a1126388-0.
INFO:     127.0.0.1:48146 - "POST /v1/completions HTTP/1.1" 200 OK
INFO:     127.0.0.1:48162 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:23:05 engine.py:275] Added request cmpl-46e174a43dfb422a88e714894cfef11b-0.
INFO 02-16 23:23:05 engine.py:275] Added request cmpl-cc3f7f0355454021aa97559b5e7889d7-0.
INFO 02-16 23:23:05 metrics.py:455] Avg prompt throughput: 508.7 tokens/s, Avg generation throughput: 68.3 tokens/s, Running: 4 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.5%, CPU KV cache usage: 0.0%.
INFO 02-16 23:23:06 logger.py:39] Received request cmpl-a96157caaac44d1a884369d12e9e8086-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8d ëª¨ë\x93\x88ì\x97\x90ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dì\x97\x90 ë\x8c\x80í\x95´ ëª\x87 ê°\x80ì§\x80 ê·¼ë³¸ì\xa0\x81ì\x9d¸ ì§\x88ë¬¸ì\x9d\x84 í\x95©ë\x8b\x88ë\x8b¤. â\x80\x94 "ê·¸ê²\x8c ë\xad\x90ì\x95¼?", "í\x81´ë\x9d¼ì\x9d´ì\x96¸í\x8a¸ ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dê³¼ ë\xad\x90ê°\x80 ë\x8b¬ë\x9d¼?", "ì\x99\x9c ì\x93¸ë§\x8cí\x95´?". ì\x97¬ê¸°ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x97¬ë\x9f¬ë¶\x84ì\x9d\x98 ì²« ì\x9b¹ì\x82¬ì\x9d´í\x8a¸ë¥¼ ë§\x8cë\x93\x9cë\x8a\x94 ë\x8d°ì\x97\x90 í\x95\x84ì\x9a\x94í\x95\x9c ê°\x80ì\x9e¥ ì\xa0\x81í\x95©í\x95\x9c í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë¥¼ ì\x96´ë\x96»ê²\x8c ì\xa0\x95í\x95\x98ë\x8a\x94 ì§\x80ì\x97\x90 ë\x8c\x80í\x95\x9c ì\xa0\x81ì\xa0\x88í\x95\x9c ì§\x80ë\x8f\x84ì\x99\x80 í\x95¨ê»\x98 ê°\x80ì\x9e¥ ì\x9d¸ê¸°ì\x9e\x88ë\x8a\x94 ì\x84\x9cë²\x84 ì\x82¬ì\x9d´ë\x93\x9c ì\x9b¹ í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë\x93¤ì\x9d\x98 ê°\x9cì\x9a\x94ë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤. ë\x81\x9dì\x9c¼ë¡\x9c ë\x86\x92ì\x9d\x80 ì\x88\x98ì¤\x80ì\x9d\x98 ì\x9b¹ ì\x84\x9cë²\x84 ë³´ì\x95\x88ì\x97\x90 ë\x8c\x80í\x95\x9c ì\x86\x8cê°\x9cë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 30176, 23681, 36870, 24687, 379, 23681, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 10760, 426, 19407, 24687, 97903, 35427, 30176, 488, 607, 44827, 30176, 23681, 36870, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 23681, 36870, 24687, 379, 23681, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 10834, 10760, 426, 100899, 15924, 41861, 49638, 30176, 20548, 49638, 15924, 17005, 378, 83073, 588, 381, 24687, 380, 11066, 30176, 16687, 30176, 488, 613, 11066, 9289, 20548, 35427, 24687, 61970, 11066, 30176, 488, 613, 23681, 21274, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375, 23076, 49638, 28092, 738, 12575, 17005, 11066, 12575, 379, 50189, 10760, 7452, 44827, 30176, 67176, 378, 83073, 588, 381, 392, 9417, 738, 4882, 488, 585, 10834, 24687, 488, 613, 378, 83073, 588, 381, 30176, 488, 613, 10834, 30176, 488, 606, 11066, 4882, 77721, 11066, 9289, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 12575, 380, 378, 83073, 588, 381, 10760, 7452, 44827, 12575, 41861, 49638, 10760, 488, 595, 61970, 24687, 488, 613, 378, 83073, 588, 381, 392, 9417, 738, 30176, 94485, 36870, 9289, 97903, 11066, 24687, 20548, 50189, 4882, 67176, 10834, 392, 14830, 9289, 488, 607, 61970, 12575, 29291, 470, 30176, 23681, 36870, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 607, 61970, 24687, 488, 615, 61970, 24687, 17558, 23681, 30176, 488, 613, 31708, 9289, 379, 39389, 9289, 488, 611, 378, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 4882, 77721, 11066, 24687, 74674, 378, 83073, 588, 381, 10760, 20548, 50189, 24687, 97903, 36870, 24687, 77721, 28092, 10760, 85395, 41861, 30176, 488, 607, 44827, 21274, 67176, 23681, 30176, 488, 610, 28092, 4882, 67176, 36870, 15924, 41861, 49638, 30176, 488, 614, 74674, 9289, 16687, 4882, 67176, 40057, 4882, 67176, 36870, 21274, 28092, 23681, 24687, 22332, 30176, 488, 614, 23681, 30176, 488, 611, 50189, 4882, 488, 585, 61970, 24687, 74674, 378, 83073, 588, 381, 9289, 488, 606, 10834, 24687, 488, 606, 41973, 12575, 379, 50189, 9289, 18737, 4882, 67176, 31708, 24687, 77721, 28092, 9289, 20548, 49638, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 36870, 9289, 16687, 30176, 22332, 4882, 67176, 36870, 9289, 20548, 49638, 24687, 488, 599, 23681, 30176, 94485, 49638, 21274, 67176, 19407, 12575, 41973, 31708, 15924, 41861, 49638, 30176, 488, 614, 74674, 9289, 488, 613, 11066, 12575, 29291, 470, 30176, 488, 614, 35427, 24687, 77721, 28092, 9289, 23681, 36870, 24687, 379, 23681, 9289, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 9289, 488, 611, 378, 21274, 28092, 23681, 24687, 22332, 30176, 488, 614, 23681, 30176, 488, 611, 50189, 4882, 488, 585, 61970, 24687, 97903, 101270, 30176, 488, 613, 31708, 15924, 41861, 36870, 30176, 488, 610, 28092, 24687, 74674, 378, 83073, 588, 381, 9289, 21301, 12575, 380, 21615, 4882, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375, 10760, 488, 585, 488, 613, 30176, 36870, 378, 83073, 588, 381, 24687, 55971, 36870, 10760, 95517, 488, 602, 30176, 488, 613, 49638, 9289, 35427, 31708, 30176, 101270, 49638, 30176, 488, 613, 31708, 9289, 488, 611, 378, 9289, 23681, 36870, 24687, 379, 23681, 10760, 380, 10834, 30176, 67176, 35427, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 36870, 9289, 95517, 50189, 12575, 41861, 36870, 24687, 74674, 378, 83073, 588, 381, 9289, 21301, 12575, 380, 21615, 4882, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48124 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:23:06 engine.py:275] Added request cmpl-a96157caaac44d1a884369d12e9e8086-0.
INFO 02-16 23:23:08 logger.py:39] Received request cmpl-c0c194858681492c957bae8ff98d9724-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        403 Forbidden\nRequest forbidden by administrative rules.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1024, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 381, 377, 380, 101630, 560, 13427, 37644, 956, 15021, 6827, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48146 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:23:08 engine.py:275] Added request cmpl-c0c194858681492c957bae8ff98d9724-0.
INFO 02-16 23:23:10 metrics.py:455] Avg prompt throughput: 560.8 tokens/s, Avg generation throughput: 366.7 tokens/s, Running: 3 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.5%, CPU KV cache usage: 0.0%.
ERROR 02-16 23:23:15 serving_completion.py:112] Error in preprocessing prompt inputs
ERROR 02-16 23:23:15 serving_completion.py:112] Traceback (most recent call last):
ERROR 02-16 23:23:15 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_completion.py", line 104, in create_completion
ERROR 02-16 23:23:15 serving_completion.py:112]     request_prompts, engine_prompts = await self._preprocess_completion(
ERROR 02-16 23:23:15 serving_completion.py:112]                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 23:23:15 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 349, in _preprocess_completion
ERROR 02-16 23:23:15 serving_completion.py:112]     request_prompts = await self._tokenize_prompt_input_or_inputs_async(
ERROR 02-16 23:23:15 serving_completion.py:112]                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 23:23:15 serving_completion.py:112]   File "/opt/anaconda3/lib/python3.12/concurrent/futures/thread.py", line 58, in run
ERROR 02-16 23:23:15 serving_completion.py:112]     result = self.fn(*self.args, **self.kwargs)
ERROR 02-16 23:23:15 serving_completion.py:112]              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 23:23:15 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 326, in _tokenize_prompt_input_or_inputs
ERROR 02-16 23:23:15 serving_completion.py:112]     self._normalize_prompt_text_to_input(
ERROR 02-16 23:23:15 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 183, in _normalize_prompt_text_to_input
ERROR 02-16 23:23:15 serving_completion.py:112]     return self._validate_input(request, input_ids, input_text)
ERROR 02-16 23:23:15 serving_completion.py:112]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 23:23:15 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 246, in _validate_input
ERROR 02-16 23:23:15 serving_completion.py:112]     raise ValueError(
ERROR 02-16 23:23:15 serving_completion.py:112] ValueError: This model's maximum context length is 4096 tokens. However, you requested 4356 tokens (3332 in the messages, 1024 in the completion). Please reduce the length of the messages or completion.
INFO:     127.0.0.1:40400 - "POST /v1/completions HTTP/1.1" 400 Bad Request
INFO 02-16 23:23:25 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 102.4 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:23:35 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:23:48 logger.py:39] Received request cmpl-46047931f6164276b6eaef5650c19b64-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.[|system|] 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요.\n4. 하위 쿼리는 최대한 간단한 질문으로 만드세요. (예: "만약 날아다니는 스파게티 괴물이 창작물이나 상상력의 산물이라면, 그 창작물의 출처나 배경 정보 파악" 대신 "날아다니는 스파게티 괴물의 출처 파악"과 같이 간단하게 만드세요.)\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n[|assistant|]\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.[|endofturn|][|example|] 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n[|endofturn|]\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    [|user|] 서버사이드 프로그래밍에 대해 알려줘 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2939, 732, 582, 379, 377, 379, 382, 2171, 582, 377, 379, 2751, 582, 378, 383, 858, 10996, 375, 4484, 657, 582, 379, 377, 379, 382, 2171, 10996, 375, 2626, 1578, 732, 582, 379, 2751, 10996, 15954, 453, 47982, 453, 422, 5998, 732, 7205, 657, 12037, 1075, 5962, 1371, 696, 8019, 1075, 27498, 3644, 13456, 7872, 657, 1736, 2373, 4362, 1727, 1075, 7111, 10996, 375, 560, 378, 375, 24348, 5962, 696, 39380, 41281, 17661, 3644, 13456, 7872, 5847, 375, 560, 379, 375, 2534, 27498, 100048, 657, 1799, 730, 3644, 1043, 13456, 53712, 1481, 375, 7164, 2690, 1823, 730, 3644, 696, 4666, 1130, 698, 14182, 375, 688, 3027, 387, 6873, 2373, 1546, 1208, 2329, 730, 3231, 4605, 4415, 1130, 657, 3644, 1084, 2873, 375, 23784, 1222, 720, 9190, 715, 7135, 5658, 5962, 696, 8890, 37728, 691, 5847, 22442, 560, 380, 375, 582, 380, 1823, 8099, 730, 27498, 100048, 4605, 16769, 1130, 5847, 375, 560, 381, 375, 27498, 100048, 657, 9338, 5488, 1075, 5962, 13456, 5799, 5847, 375, 688, 3027, 387, 738, 20267, 69972, 657, 28874, 30874, 634, 23993, 1113, 37891, 42738, 730, 62058, 634, 17663, 373, 855, 23993, 1113, 730, 10411, 902, 10300, 3231, 7936, 363, 6414, 738, 1945, 1023, 8367, 657, 28874, 30874, 730, 10411, 7936, 363, 1548, 2485, 5488, 1130, 1060, 5799, 5847, 22442, 560, 381, 375, 9556, 732, 4488, 2030, 2485, 15214, 12947, 13456, 1992, 1481, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 20498, 26942, 23454, 1130, 1595, 100048, 582, 378, 9417, 738, 1130, 1595, 100048, 582, 379, 9417, 4377, 10924, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 14182, 375, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 1130, 5847, 375, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 4488, 32604, 4605, 5813, 5414, 9556, 696, 6016, 1130, 5847, 375, 3027, 954, 13385, 387, 11225, 1339, 18295, 657, 7135, 3930, 11966, 2373, 9633, 392, 3136, 1780, 2373, 6930, 5571, 9500, 1162, 696, 698, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 25999, 905, 9633, 657, 11966, 9417, 738, 49065, 905, 9633, 657, 11966, 9417, 738, 25999, 2030, 18295, 1126, 1162, 696, 924, 3093, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 16993, 373, 11819, 373, 5805, 730, 11282, 7460, 732, 3656, 91728, 392, 7135, 730, 3830, 14178, 3090, 18938, 5927, 696, 1821, 48199, 773, 657, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 54529, 730, 11282, 7460, 9417, 738, 22279, 730, 11282, 7460, 9417, 738, 34724, 730, 11282, 7460, 9417, 738, 54529, 373, 11819, 373, 5805, 730, 11282, 7460, 29289, 9417, 738, 54529, 730, 18938, 5927, 9417, 738, 22279, 730, 18938, 5927, 9417, 738, 34724, 730, 18938, 5927, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 11265, 4605, 1747, 657, 924, 634, 3164, 2373, 1104, 732, 905, 392, 11265, 1747, 37817, 1104, 732, 6620, 657, 4083, 798, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 23454, 39190, 1747, 722, 905, 3164, 2373, 11310, 657, 5282, 1996, 722, 9417, 738, 39190, 1747, 37817, 1104, 732, 6620, 1996, 722, 71045, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 41728, 7991, 13456, 713, 657, 40187, 2030, 77348, 13891, 3231, 4605, 5080, 999, 823, 853, 373, 2472, 8570, 1590, 696, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 20715, 40187, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 77348, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 40187, 2030, 77348, 5080, 9417, 560, 23, 363, 8397, 374, 20715, 1601, 1430, 15767, 13891, 834, 3093, 363, 560, 27, 422, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 4113, 1146, 830, 730, 17129, 4747, 1548, 16951, 4747, 696, 3504, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 19, 363, 2839, 1146, 830, 730, 17129, 4747, 9417, 560, 19, 363, 2839, 1254, 830, 730, 16951, 4747, 363, 560, 23, 422, 582, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 2879, 41728, 7646, 999, 13186, 373, 7967, 373, 18066, 4605, 10916, 4817, 76876, 3253, 2870, 3864, 74914, 373, 2534, 2878, 730, 7245, 23512, 2030, 3093, 3501, 696, 3504, 823, 853, 373, 17028, 730, 5346, 19597, 2030, 73414, 696, 5422, 999, 15887, 375, 3662, 5210, 15767, 1590, 1548, 5262, 696, 4666, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 32122, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 32122, 7245, 23512, 9417, 560, 23, 363, 32122, 3093, 3501, 9417, 560, 23, 363, 32122, 374, 23135, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 23135, 7245, 23512, 9417, 560, 23, 363, 23135, 3093, 3501, 9417, 560, 23, 363, 23135, 374, 44868, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 44868, 7245, 23512, 9417, 560, 23, 363, 44868, 3093, 3501, 9417, 560, 23, 363, 44868, 374, 12149, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 12149, 7245, 23512, 9417, 560, 23, 363, 12149, 3093, 3501, 9417, 560, 23, 363, 17793, 3253, 5210, 15767, 1590, 2425, 5262, 363, 560, 27, 422, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 715, 3253, 696, 713, 12438, 691, 15913, 4977, 905, 3835, 34325, 392, 2210, 3835, 732, 23512, 2131, 3093, 999, 15887, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 13225, 2879, 4977, 9417, 560, 23, 363, 8397, 7245, 23512, 363, 560, 27, 422, 560, 27, 454, 560, 361, 560, 560, 6297, 5962, 696, 2690, 78028, 27498, 5962, 13456, 7872, 33413, 5847, 375, 560, 31, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 2373, 2409, 3504, 15887, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:38090 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:23:48 engine.py:275] Added request cmpl-46047931f6164276b6eaef5650c19b64-0.
INFO 02-16 23:23:48 logger.py:39] Received request cmpl-e2fa7617b11249beab7d16c2848f594b-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 정의 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 11476, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:38090 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:23:48 engine.py:275] Added request cmpl-e2fa7617b11249beab7d16c2848f594b-0.
INFO 02-16 23:23:49 logger.py:39] Received request cmpl-17029e37ac2447d7881cd5304c092ed4-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 주요 개념 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 7245, 9711, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:38090 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:23:49 engine.py:275] Added request cmpl-17029e37ac2447d7881cd5304c092ed4-0.
INFO 02-16 23:23:50 metrics.py:455] Avg prompt throughput: 555.6 tokens/s, Avg generation throughput: 34.8 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 23:23:50 logger.py:39] Received request cmpl-cd26297c6cc14b5795204627448aefc6-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 장점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 7306, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:38090 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:23:50 engine.py:275] Added request cmpl-cd26297c6cc14b5795204627448aefc6-0.
INFO 02-16 23:23:52 logger.py:39] Received request cmpl-ebca6cf7db4c49f7bafe76cb954987c9-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 단점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 13263, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:38090 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:23:52 engine.py:275] Added request cmpl-ebca6cf7db4c49f7bafe76cb954987c9-0.
INFO 02-16 23:23:53 logger.py:39] Received request cmpl-66c5e735dc864277bc43de0aa487a8f3-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 활용 분야 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 4703, 6105, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:38090 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:23:53 engine.py:275] Added request cmpl-66c5e735dc864277bc43de0aa487a8f3-0.
INFO 02-16 23:23:55 metrics.py:455] Avg prompt throughput: 533.6 tokens/s, Avg generation throughput: 119.4 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 23:24:00 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 128.6 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.2%, CPU KV cache usage: 0.0%.
INFO 02-16 23:24:02 logger.py:39] Received request cmpl-2f3ec4c5ec194f099dbf48918d4a3776-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8d ëª¨ë\x93\x88ì\x97\x90ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dì\x97\x90 ë\x8c\x80í\x95´ ëª\x87 ê°\x80ì§\x80 ê·¼ë³¸ì\xa0\x81ì\x9d¸ ì§\x88ë¬¸ì\x9d\x84 í\x95©ë\x8b\x88ë\x8b¤. â\x80\x94 "ê·¸ê²\x8c ë\xad\x90ì\x95¼?", "í\x81´ë\x9d¼ì\x9d´ì\x96¸í\x8a¸ ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dê³¼ ë\xad\x90ê°\x80 ë\x8b¬ë\x9d¼?", "ì\x99\x9c ì\x93¸ë§\x8cí\x95´?". ì\x97¬ê¸°ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x97¬ë\x9f¬ë¶\x84ì\x9d\x98 ì²« ì\x9b¹ì\x82¬ì\x9d´í\x8a¸ë¥¼ ë§\x8cë\x93\x9cë\x8a\x94 ë\x8d°ì\x97\x90 í\x95\x84ì\x9a\x94í\x95\x9c ê°\x80ì\x9e¥ ì\xa0\x81í\x95©í\x95\x9c í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë¥¼ ì\x96´ë\x96»ê²\x8c ì\xa0\x95í\x95\x98ë\x8a\x94 ì§\x80ì\x97\x90 ë\x8c\x80í\x95\x9c ì\xa0\x81ì\xa0\x88í\x95\x9c ì§\x80ë\x8f\x84ì\x99\x80 í\x95¨ê»\x98 ê°\x80ì\x9e¥ ì\x9d¸ê¸°ì\x9e\x88ë\x8a\x94 ì\x84\x9cë²\x84 ì\x82¬ì\x9d´ë\x93\x9c ì\x9b¹ í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë\x93¤ì\x9d\x98 ê°\x9cì\x9a\x94ë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤. ë\x81\x9dì\x9c¼ë¡\x9c ë\x86\x92ì\x9d\x80 ì\x88\x98ì¤\x80ì\x9d\x98 ì\x9b¹ ì\x84\x9cë²\x84 ë³´ì\x95\x88ì\x97\x90 ë\x8c\x80í\x95\x9c ì\x86\x8cê°\x9cë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 30176, 23681, 36870, 24687, 379, 23681, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 10760, 426, 19407, 24687, 97903, 35427, 30176, 488, 607, 44827, 30176, 23681, 36870, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 23681, 36870, 24687, 379, 23681, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 10834, 10760, 426, 100899, 15924, 41861, 49638, 30176, 20548, 49638, 15924, 17005, 378, 83073, 588, 381, 24687, 380, 11066, 30176, 16687, 30176, 488, 613, 11066, 9289, 20548, 35427, 24687, 61970, 11066, 30176, 488, 613, 23681, 21274, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375, 23076, 49638, 28092, 738, 12575, 17005, 11066, 12575, 379, 50189, 10760, 7452, 44827, 30176, 67176, 378, 83073, 588, 381, 392, 9417, 738, 4882, 488, 585, 10834, 24687, 488, 613, 378, 83073, 588, 381, 30176, 488, 613, 10834, 30176, 488, 606, 11066, 4882, 77721, 11066, 9289, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 12575, 380, 378, 83073, 588, 381, 10760, 7452, 44827, 12575, 41861, 49638, 10760, 488, 595, 61970, 24687, 488, 613, 378, 83073, 588, 381, 392, 9417, 738, 30176, 94485, 36870, 9289, 97903, 11066, 24687, 20548, 50189, 4882, 67176, 10834, 392, 14830, 9289, 488, 607, 61970, 12575, 29291, 470, 30176, 23681, 36870, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 607, 61970, 24687, 488, 615, 61970, 24687, 17558, 23681, 30176, 488, 613, 31708, 9289, 379, 39389, 9289, 488, 611, 378, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 4882, 77721, 11066, 24687, 74674, 378, 83073, 588, 381, 10760, 20548, 50189, 24687, 97903, 36870, 24687, 77721, 28092, 10760, 85395, 41861, 30176, 488, 607, 44827, 21274, 67176, 23681, 30176, 488, 610, 28092, 4882, 67176, 36870, 15924, 41861, 49638, 30176, 488, 614, 74674, 9289, 16687, 4882, 67176, 40057, 4882, 67176, 36870, 21274, 28092, 23681, 24687, 22332, 30176, 488, 614, 23681, 30176, 488, 611, 50189, 4882, 488, 585, 61970, 24687, 74674, 378, 83073, 588, 381, 9289, 488, 606, 10834, 24687, 488, 606, 41973, 12575, 379, 50189, 9289, 18737, 4882, 67176, 31708, 24687, 77721, 28092, 9289, 20548, 49638, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 36870, 9289, 16687, 30176, 22332, 4882, 67176, 36870, 9289, 20548, 49638, 24687, 488, 599, 23681, 30176, 94485, 49638, 21274, 67176, 19407, 12575, 41973, 31708, 15924, 41861, 49638, 30176, 488, 614, 74674, 9289, 488, 613, 11066, 12575, 29291, 470, 30176, 488, 614, 35427, 24687, 77721, 28092, 9289, 23681, 36870, 24687, 379, 23681, 9289, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 9289, 488, 611, 378, 21274, 28092, 23681, 24687, 22332, 30176, 488, 614, 23681, 30176, 488, 611, 50189, 4882, 488, 585, 61970, 24687, 97903, 101270, 30176, 488, 613, 31708, 15924, 41861, 36870, 30176, 488, 610, 28092, 24687, 74674, 378, 83073, 588, 381, 9289, 21301, 12575, 380, 21615, 4882, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375, 10760, 488, 585, 488, 613, 30176, 36870, 378, 83073, 588, 381, 24687, 55971, 36870, 10760, 95517, 488, 602, 30176, 488, 613, 49638, 9289, 35427, 31708, 30176, 101270, 49638, 30176, 488, 613, 31708, 9289, 488, 611, 378, 9289, 23681, 36870, 24687, 379, 23681, 10760, 380, 10834, 30176, 67176, 35427, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 36870, 9289, 95517, 50189, 12575, 41861, 36870, 24687, 74674, 378, 83073, 588, 381, 9289, 21301, 12575, 380, 21615, 4882, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:57926 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:24:02 engine.py:275] Added request cmpl-2f3ec4c5ec194f099dbf48918d4a3776-0.
INFO 02-16 23:24:02 logger.py:39] Received request cmpl-e4e93462da5248f7a792b1b98d5976b8-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        안녕하세요 jju_developer입니다.오늘은제이쿼리 비동기 방식 연동에 대해 설명하다가따로 설명을 드려야 할 것 같은 정보가 있어서!! 글을 정리하여 적어봅니다~책을 읽다보면 서버사이드와 클라이언트 사이드를 많이 접하실텐데요?웹 프로그래밍에서서버 사이드/클라이언트 사이드가 나뉘고,어느 쪽에 중심을 두느냐에 따라 프로젝트의 방향이 달라지게 됩니다.그렇다면 클라이언트 사이드와 서버 사이드는 무엇일까요?1. 클라이언트 사이드(Client-Side)-클라이언트(사용자) 측에서 처리하는 것.클라이언트(사용자)가 입력한 것을 수신해서 HTML로 만들어서 크롬과 같은 애플리케이션에 해석해서 표시합니다.대표적으로 자바스크립트(Javascript)가 있습니다.2. 서버 사이드(Server-Side)-서버(제공자) 측에서 즉시 처리하는 것.서버 사이드는\xa0클라이언트로 보낼\xa0웹 페이지(HTML,\xa0JavaScript 등이 담긴)를\xa0만들며,작업들(사용자 유효성, DB 관련 등)을 수행합니다.대표적인 언어는 Java, PHP, Ruby, Python, Node.js 등이 있습니다.즉,서버와클라이언트는 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.클라이언트 사이드 언어를 다루고 그에 관련된 개발자들을프론트 엔드서버 사이드 언어를 다루고 그에 관련된 개발자를백엔드라 부릅니다.웹사이트를\xa0제작하는데\xa0쓰이는\xa0스크립트는실행되는 위치에 따라 클라이언트 사이드 스크립트와 서버사이드 스크립트로 구분합니다.서버사이드 스크립트는서버에서 해석해서 구동되는 스크립트이고,클라이언트 사이드 스크립트는브라우저에서 해석해서 구동되는 스크립트입니다.서버사이드 스크립트는 DB를 액세스 하는 게 주요 목적이고,클라이언트 사이드 스크립트는 브라우저의 객체를 제어하는데 쓰입니다.서버 사이드와 클라이언트의 데이터 교환은 HTTPS로 하는데요!여기서 HTTP의 한계를 알아보겠습니다.HTTP의 한계HTTP의 뒤 두 글자 Transfer Protocol.HTTP의 대전제는 “URL 및 부가정보를 통해 사용자가 원하는 페이지를 서버에요청한다,그리고 서버는 해당 요청에응답한다”입니다.사용자가 URL을 요청할 때에만!서버에서 해당 페이지를 꺼내주는 식이라는 겁니다.거꾸로\xa0말하자면,\xa0사용자는\xa0서버로부터\xa0새로운\xa0정보를\xa0받아보기\xa0위해서,\xa0반드시,\xa0새로운\xa0URL을\xa0요청해야\xa0한다는\xa0말과\xa0같습니다.예전에 로그인할 때 아이디 중복확인하는 거 해보셨죠?그때 서버에게 중복 검사를 요청하기 위해서 새 페이지를 요청해야만 했었는데,회원 정보 작성 중에는 페이지를 이동할 수 없었기 때문에새로 요청한 페이지를 팝업창으로 띄웠던 것입니다.(요즘 사이트들은 대부분 팝업창 없이 검사가 가능합니다. 이것이 바로\xa0 Ajax를 이용했기 때문이죠!!!)AJAX그 당시에 떠오르기 시작한 구글은 HTTP 규약을 뛰어넘는 방안을 제안합니다.이름하여AJAX입니다.AJAX를 쓰면, 유저는 새로운 HTML을 서버로부터 받는 것이 아닙니다.즉, 유저는 새로운 웹페이지로 이동하는 것이 아닙니다.대신, 동일한 웹페이지 내에서 DOM을 변경하게 됩니다.요청 페이지에서 이름 칸에 ‘쮸’를 쓰고, 내용에 ‘안녕하세요. 쮸입니다’라고 썼다고 해봅시다.사용자의 이벤트로부터 Javascript는 해당 이름과 내용이 쓰인 DOM을 읽습니다.그리고는 XMLHttpRequest 객체를 통해 웹서버에 해당 이름과 내용을 전송합니다.웹서버는 요청을 처리하고 XML, Text 혹은 JSON을 XMLHttpRequest 객체에 전송합니다.그러면, Javascript가 해당 응답 정보를 DOM에 씁니다.그렇게 결과페이지가 만들어집니다.\u200bAJAX를 쓰면 새로운 HTML을 서버로부터 받아야 하는 것이 아닙니다.동일한 페이지의 일부를 수정할 수도 있는 가능성이 생깁니다.결과적으로 사용자 입장에서는페이지 이동이 발생되지 않고 페이지 내부 변화만 일어나게 됩니다.HTML 페이지 전체를 다 바꿔야 하는 것이 아니라 부분만 바꿀 수 있게 되는 것입니다.이렇게 따로 페이지의 이동 없이 페이지 내부에서 검사를 하여 결과를 출력하는 것을 볼 수 있죵?아이디 중복체크하려면 필히 서버 쪽 DB와 통신하기 위해서 웹서버 동작이 필요한데,이때 페이지를 바꾸지 않고 요청 결과만 그대로 가져와서 띄우면 되게 됩니다.그 외에도 비밀번호 강도 확인, 검색어 실시간 추천, 마우스 커서나 스크롤바 위치에 반응하는 그림, 지도 표시 서비스 등등 다양합니다.<정리>Ajax는 웹 페이지 전체를다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있게 해 줍니다.즉 Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분에만 표시할 수 있습니다.이때 서버와는 다음과 같은 다양한 형태의 데이터를 주고받을 수 있습니다.JSONXMLHTML텍스트 파일 등Ajax의 장점Ajax를 이용하면 다음과 같은 장점이 있습니다.\u200b1.웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있습니다.2. 웹 페이지가 로드된 후에 서버로 데이터 요청을 보낼 수 있습니다. (Post를 통해 값을 서버 쪽으로 전달해 처리되고 받아올 수 있음)3. 웹 페이지가 로드된 후에 서버로부터 데이터를 받을 수 있습니다.4. 백그라운드 영역에서 서버로 데이터를 보낼 수 있습니다.Ajax의 단점Ajax를 이용하면 여러 장점을 가지지만, Ajax로도 다음과 같은 일들은 처리할 수 없습니다.\u200b1.Ajax는 클라이언트가 서버에 데이터를 요청하는 클라이언트 풀링 방식(사용자가 직접 요청)을 사용하므로,서버 푸시 방식(푸시알람 같은)의 실시간 서비스는 만들 수 없습니다.2. Ajax로는 바이너리 데이터를 보내거나 받을 수 없습니다.3. Ajax 스크립트가 포함된 서버가 아닌 다른 서버로 Ajax 요청을 보낼 수는 없습니다.4.클라이언트의 PC로 Ajax 요청을 보낼 수는 없습니다.Ajax 구성 요소- 웹 페이지의 표현을 위한HTML과 CSS- 데이터에 접근하거나 화면 구성을 동적으로 조작하기 위해 사용되는DOM 모델- 데이터의 교환을 위한JSON이나 XML- 웹 서버와의 비동기식 통신을 위한XMLHttpRequest 객체- 위에서 언급한 모든 기술을 결합하여 사용자의 작업 흐름을 제어하는 데 사용되는자바스크립트1 : 사용자에 의한 요청 이벤트가 발생합니다. (-> jju240 아이디 생성 요청함)2 : 요청 이벤트가 발생하면 이벤트 핸들러에 의해 자바스크립트가 호출됩니다.3 : 자바스크립트는 XMLHttpRequest 객체를 사용하여 서버로 요청을 보냅니다.이때 웹 브라우저는 요청을 보내고 나서,서버의 응답을 기다릴 필요 없이다른 작업을 처리할 수 있습니다.4 : 서버는 전달받은 XMLHttpRequest 객체를 가지고 Ajax 요청을 처리합니다.5,6 : 서버는 처리한 결과를 HTML, XML 또는 JSON 형태의 데이터로 웹 브라우저에 전달합니다.이때 전달되는 응답은 새 페이지 전부 보내는 것이 아니라 필요한 데이터만을 전달합니다.(->이미사용 중이라는 문구)7 : 서버로부터 전달받은 데이터를 가지고 웹 페이지의 일부분만을 갱신하는 자바스크립트를 호출합니다.8 : 최종으로 웹 페이지의 일부분만이 다시 로딩되어 표시됩니다. (-> 이미 사용 중인 아이디입니다!)XMLHttpRequest 객체Ajax의 가장 핵심적인 구성 요소는 바로 XMLHttpRequest 객체입니다.Ajax에서 XMLHttpRequest 객체는웹 브라우저가 서버와 데이터를 교환할 때 사용됩니다.웹 브라우저가 백그라운드에서 계속해서 서버와 통신할 수 있는 것은 바로 이 객체를 사용하기 때문입니다.let httpRequest = new XMLHttpRequest();이상으로 서버사이드, 클라이언트의 개념과 그 둘이 어떻게 데이터를 교환하는지 알아보았습니다.⭐⭐⭐⭐⭐ 이번 글은 이해하고 적는 것에 초점을 두었기 때문에 시간이 많이 걸렸었는데용\xa0ㅎㅎ😥\\중요한 개념이니 꼭 숙지하시는데 도움이 되었으면 좋겠습니다~!!!그럼 오늘도 수고하셨습니다~참고 웹사이트:http://tcpschool.com/ajax/ajax_intro_works', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 3801, 1130, 5847, 1056, 13238, 424, 50874, 623, 10996, 375, 2939, 732, 37762, 46008, 760, 1202, 50048, 5073, 24108, 2373, 2409, 3328, 1130, 5954, 28837, 3328, 696, 32961, 1051, 924, 1119, 732, 3231, 905, 773, 22556, 3461, 2272, 696, 4892, 22226, 1015, 721, 41065, 455, 2703, 696, 3405, 10816, 838, 18296, 37305, 2030, 56794, 16444, 4605, 1719, 20032, 1332, 6891, 27778, 392, 51257, 42980, 41728, 95473, 16444, 376, 6055, 49544, 16444, 905, 20903, 853, 373, 12258, 3609, 2373, 5696, 696, 1546, 3016, 5133, 2373, 2414, 10902, 730, 6319, 634, 17032, 1060, 2873, 375, 9251, 4767, 56794, 16444, 2030, 18296, 16444, 657, 4262, 858, 4148, 392, 378, 375, 56794, 16444, 369, 16483, 374, 44590, 370, 374, 6055, 49544, 369, 16167, 942, 370, 4387, 41728, 5547, 1130, 657, 924, 375, 6055, 49544, 369, 16167, 942, 370, 905, 13385, 1075, 924, 696, 33278, 5414, 15447, 715, 2069, 22556, 40433, 1548, 1119, 732, 38217, 2373, 11235, 5414, 10269, 14010, 375, 13908, 41281, 47201, 4183, 56386, 369, 403, 1238, 10832, 370, 905, 773, 50747, 375, 379, 375, 18296, 16444, 369, 23423, 374, 44590, 370, 374, 95473, 369, 1050, 40041, 370, 4387, 41728, 16192, 5547, 1130, 657, 924, 375, 95473, 16444, 657, 2926, 31158, 25430, 17681, 11574, 13203, 369, 24961, 373, 20820, 1222, 634, 17206, 370, 4605, 2069, 1877, 373, 21135, 1371, 369, 16167, 942, 24146, 1210, 373, 12847, 3051, 1222, 370, 696, 9425, 14010, 375, 13908, 1965, 798, 10978, 657, 11154, 373, 21479, 373, 30967, 373, 14138, 373, 19206, 375, 12716, 1222, 634, 773, 50747, 375, 18909, 373, 95473, 2030, 6055, 49544, 657, 11574, 13203, 715, 5372, 32906, 696, 3868, 2109, 868, 773, 643, 375, 6055, 49544, 16444, 10978, 4605, 16383, 853, 855, 2373, 3051, 16524, 33468, 1371, 696, 1770, 2024, 1067, 54110, 95473, 16444, 10978, 4605, 16383, 853, 855, 2373, 3051, 16524, 33468, 4605, 3387, 8789, 24835, 60354, 375, 51257, 79184, 4605, 5465, 1130, 15913, 15533, 657, 59588, 657, 1332, 1282, 13452, 657, 3897, 2373, 2414, 56794, 16444, 59588, 2030, 18296, 37305, 12870, 2158, 25430, 11301, 14010, 375, 95473, 37305, 59588, 657, 95473, 41728, 11235, 5414, 35730, 13452, 657, 59588, 634, 853, 373, 6055, 49544, 16444, 59588, 657, 21014, 962, 1415, 41728, 11235, 5414, 35730, 13452, 657, 59588, 10996, 375, 95473, 37305, 59588, 657, 12847, 4605, 92284, 691, 657, 869, 7245, 6801, 634, 853, 373, 6055, 49544, 16444, 59588, 657, 61559, 730, 42225, 4605, 23245, 1130, 15913, 2112, 10996, 375, 95473, 16444, 2030, 56794, 730, 7957, 10547, 732, 60728, 715, 691, 15913, 740, 362, 5429, 712, 17086, 730, 13602, 4605, 5337, 13910, 50747, 375, 64157, 730, 13602, 64157, 730, 2448, 1546, 18302, 31113, 28607, 375, 64157, 730, 7991, 1050, 657, 1488, 20654, 2425, 24688, 33377, 4605, 2364, 7332, 905, 9062, 657, 13203, 4605, 18296, 2373, 740, 1774, 10348, 373, 3011, 18296, 657, 5299, 8254, 2373, 99822, 10348, 9583, 10996, 375, 16167, 942, 905, 3293, 696, 8254, 2870, 1105, 2373, 1043, 362, 95473, 41728, 5299, 13203, 4605, 9596, 823, 657, 23890, 21212, 7356, 375, 1387, 36647, 1216, 1130, 942, 838, 373, 7332, 657, 18296, 715, 4560, 4650, 3231, 4605, 1374, 25539, 722, 4313, 373, 8887, 373, 4650, 3293, 696, 8254, 21046, 4375, 1216, 1548, 1119, 50747, 375, 12926, 2373, 33063, 2870, 1105, 23807, 27013, 9506, 1130, 657, 1022, 67157, 5797, 12099, 392, 16591, 18296, 2373, 1060, 27013, 4830, 4605, 8254, 76766, 4313, 1956, 13203, 4605, 8254, 21046, 1043, 5039, 15913, 373, 35457, 3231, 6016, 1126, 97300, 13203, 4605, 5346, 2870, 868, 1107, 2957, 722, 1668, 2373, 29650, 8254, 1075, 13203, 4605, 32583, 3239, 13456, 9534, 3245, 5623, 924, 10996, 21339, 5438, 8050, 1371, 732, 5255, 32583, 3239, 2705, 4830, 905, 1995, 14010, 375, 4383, 634, 2264, 582, 62632, 4605, 2785, 2662, 722, 1668, 634, 12099, 11258, 370, 75983, 36226, 799, 5569, 2373, 15454, 722, 2104, 1075, 16993, 732, 17086, 87364, 696, 33094, 657, 8800, 696, 11137, 14010, 375, 17787, 22226, 75983, 36226, 10996, 375, 75983, 36226, 4605, 2112, 838, 373, 19589, 657, 4650, 15447, 696, 18296, 715, 4560, 1374, 657, 924, 634, 10454, 375, 18909, 373, 19589, 657, 4650, 11574, 7696, 715, 51034, 657, 924, 634, 10454, 375, 27299, 373, 9725, 1075, 11574, 7696, 1080, 41728, 27591, 696, 8171, 1130, 1060, 2873, 375, 740, 1774, 13203, 41728, 3730, 10940, 2373, 2376, 49854, 18420, 4605, 2112, 853, 373, 3311, 2373, 2376, 3801, 1130, 5847, 375, 58301, 10996, 18420, 3885, 9347, 3401, 844, 64429, 375, 16167, 942, 730, 6594, 715, 4560, 46456, 657, 5299, 3730, 1548, 3311, 634, 44037, 27591, 696, 3405, 50747, 375, 3011, 657, 20100, 88354, 42225, 4605, 2364, 11574, 95473, 2373, 5299, 3730, 1548, 3311, 696, 24134, 14010, 375, 51257, 95473, 657, 8254, 696, 5547, 48199, 20100, 373, 11353, 7597, 15214, 696, 20100, 88354, 42225, 2373, 24134, 14010, 375, 27150, 373, 46456, 905, 5299, 16352, 3231, 4605, 27591, 2373, 35027, 375, 10008, 3336, 7696, 905, 2069, 52232, 76456, 75983, 36226, 4605, 2112, 838, 4650, 15447, 696, 18296, 715, 4560, 69597, 1137, 691, 657, 924, 634, 10454, 375, 74038, 1075, 13203, 730, 5720, 4605, 10122, 2870, 8952, 773, 657, 1995, 35604, 45523, 375, 29635, 41281, 7332, 5106, 41728, 657, 7696, 5346, 634, 3449, 13452, 698, 1145, 853, 13203, 5424, 5005, 1043, 5735, 1060, 2873, 375, 24961, 13203, 4532, 4605, 694, 39655, 691, 657, 924, 634, 1579, 789, 2578, 1043, 20867, 868, 773, 1060, 970, 657, 924, 10996, 375, 5366, 5658, 13203, 730, 5346, 2705, 13203, 5424, 41728, 4830, 4605, 22356, 3336, 4605, 17653, 1130, 657, 924, 696, 2109, 868, 773, 796, 475, 392, 5763, 1689, 27013, 40269, 1130, 38835, 55216, 18296, 3609, 12847, 2030, 7514, 76766, 4313, 11574, 95473, 14288, 634, 2327, 1075, 896, 373, 17540, 13203, 4605, 8766, 698, 1145, 853, 8254, 3336, 1043, 5476, 44700, 49354, 838, 9312, 2873, 375, 799, 2068, 15169, 10239, 63320, 19570, 2927, 373, 47700, 17557, 3093, 373, 25801, 15774, 902, 70806, 1987, 3897, 2373, 7667, 1130, 657, 5124, 373, 6577, 10269, 3670, 7429, 2841, 14010, 39065, 27896, 391, 67884, 1817, 657, 11574, 13203, 4532, 4605, 7237, 86183, 1130, 698, 1145, 94925, 373, 11574, 13203, 730, 47792, 1043, 696, 21522, 2870, 868, 773, 1060, 844, 6916, 375, 18909, 62632, 4605, 2785, 16559, 2599, 33388, 7179, 11693, 41728, 18296, 2030, 7514, 22226, 373, 855, 3336, 4605, 11574, 13203, 730, 47792, 2373, 1043, 10269, 2870, 868, 773, 50747, 375, 17540, 18296, 2030, 657, 2775, 1548, 1119, 732, 2841, 1075, 7075, 730, 7957, 4605, 33052, 696, 868, 773, 50747, 375, 34613, 52991, 24961, 20151, 2754, 11038, 1222, 67884, 1817, 730, 7306, 67884, 1817, 4605, 2785, 16559, 2775, 1548, 1119, 732, 7306, 634, 773, 50747, 76456, 378, 375, 51257, 13203, 4532, 4605, 2257, 86183, 1130, 698, 1145, 94925, 373, 11574, 13203, 730, 47792, 1043, 696, 21522, 2870, 868, 773, 50747, 375, 379, 375, 11574, 13203, 905, 17099, 16524, 1452, 2373, 18296, 715, 7957, 8254, 696, 17681, 868, 773, 50747, 375, 688, 19889, 4605, 2364, 7812, 696, 18296, 3609, 13456, 7820, 999, 5547, 13452, 853, 69597, 3009, 868, 773, 1040, 370, 380, 375, 11574, 13203, 905, 17099, 16524, 1452, 2373, 18296, 715, 4560, 7957, 4605, 1374, 696, 868, 773, 50747, 375, 381, 375, 2599, 33388, 7179, 11693, 41728, 18296, 715, 7957, 4605, 17681, 868, 773, 50747, 375, 67884, 1817, 730, 13263, 67884, 1817, 4605, 2785, 16559, 2690, 7306, 696, 2034, 2597, 373, 62632, 715, 720, 2775, 1548, 1119, 732, 955, 1371, 732, 5547, 2870, 868, 1107, 50747, 76456, 378, 375, 67884, 1817, 657, 56794, 905, 18296, 2373, 7957, 4605, 8254, 1130, 657, 56794, 3320, 3890, 5073, 369, 16167, 942, 905, 3492, 8254, 370, 696, 1821, 1130, 8158, 373, 95473, 83791, 5073, 369, 6953, 954, 5006, 1324, 1119, 732, 370, 730, 17557, 3670, 657, 2069, 868, 1107, 50747, 375, 379, 375, 62632, 715, 657, 5308, 2088, 760, 7957, 4605, 3399, 16519, 1374, 696, 868, 1107, 50747, 375, 380, 375, 62632, 59588, 905, 4666, 16524, 18296, 905, 2993, 2126, 18296, 715, 62632, 8254, 696, 17681, 868, 657, 1107, 50747, 375, 381, 375, 6055, 49544, 730, 4769, 715, 62632, 8254, 696, 17681, 868, 657, 1107, 50747, 375, 67884, 1817, 4394, 9517, 374, 11574, 13203, 730, 5233, 696, 3125, 24961, 1548, 20772, 374, 7957, 2373, 10625, 1130, 16519, 9836, 4394, 696, 1368, 41281, 15597, 76766, 1902, 1821, 13452, 657, 53148, 5927, 374, 7957, 730, 10547, 696, 3125, 34613, 37891, 20100, 374, 11574, 18296, 2030, 730, 1202, 50048, 1286, 7514, 696, 3125, 52991, 88354, 42225, 374, 1144, 41728, 10198, 1075, 2904, 3755, 696, 15581, 22226, 7332, 730, 3644, 11019, 696, 23245, 1130, 657, 1736, 1821, 13452, 657, 942, 1987, 4183, 56386, 378, 756, 7332, 2373, 14095, 8254, 6594, 905, 3449, 14010, 375, 6169, 391, 1056, 13238, 379, 381, 377, 23807, 16769, 8254, 3117, 370, 379, 756, 8254, 6594, 905, 3449, 16559, 6594, 22437, 1030, 2373, 9428, 47201, 4183, 56386, 905, 39038, 837, 1318, 375, 380, 756, 47201, 4183, 56386, 657, 20100, 88354, 42225, 4605, 1821, 22226, 18296, 715, 8254, 696, 63149, 375, 17540, 11574, 61559, 657, 8254, 696, 3399, 853, 11030, 373, 95473, 730, 16352, 696, 30567, 2327, 2705, 6472, 3644, 696, 5547, 2870, 868, 773, 50747, 375, 381, 756, 18296, 657, 7820, 6912, 732, 20100, 88354, 42225, 4605, 2034, 853, 62632, 8254, 696, 5547, 14010, 375, 382, 373, 383, 756, 18296, 657, 5547, 1075, 3336, 4605, 15447, 373, 20100, 4978, 15214, 7075, 730, 7957, 715, 11574, 61559, 2373, 7820, 14010, 375, 17540, 7820, 13452, 657, 16352, 732, 1956, 13203, 7853, 3399, 657, 924, 634, 1579, 789, 2327, 1075, 7957, 1043, 696, 7820, 14010, 21339, 24802, 14360, 16167, 70476, 21212, 15837, 370, 384, 756, 18296, 715, 4560, 7820, 6912, 732, 7957, 4605, 2034, 853, 11574, 13203, 730, 47792, 1043, 696, 21522, 1130, 657, 47201, 4183, 56386, 4605, 39038, 14010, 375, 385, 756, 9350, 13456, 11574, 13203, 730, 47792, 1043, 634, 2257, 86183, 13452, 721, 10269, 837, 1318, 375, 6169, 391, 3519, 1821, 1126, 798, 23807, 10996, 362, 370, 52991, 88354, 42225, 67884, 1817, 730, 2472, 8771, 1965, 798, 4394, 9517, 657, 2264, 20100, 88354, 42225, 10996, 375, 67884, 1817, 41728, 20100, 88354, 42225, 657, 51257, 61559, 905, 18296, 2030, 7957, 4605, 10547, 2870, 1105, 1821, 837, 1318, 375, 51257, 61559, 905, 2599, 33388, 7179, 41728, 3063, 5414, 18296, 2030, 7514, 2870, 868, 773, 657, 924, 732, 2264, 650, 42225, 4605, 1821, 76766, 1668, 10996, 375, 3538, 3825, 13427, 801, 1539, 20100, 88354, 60621, 13766, 13456, 18296, 37305, 373, 56794, 730, 9711, 1548, 855, 3136, 634, 3656, 7957, 4605, 10547, 1130, 59985, 5337, 19850, 50747, 375, 48689, 48689, 48689, 48689, 48689, 2626, 2272, 732, 4630, 48199, 1015, 657, 924, 2373, 18073, 696, 1546, 2957, 722, 1668, 2373, 1590, 634, 1719, 14012, 2957, 15913, 1018, 3301, 11881, 608, 460, 421, 31724, 1075, 9711, 96201, 3102, 4520, 25661, 954, 15913, 3577, 634, 970, 2957, 8235, 1104, 13910, 50747, 455, 11258, 8179, 2247, 720, 16400, 1130, 5797, 50747, 455, 16874, 11574, 79184, 387, 13656, 387, 9413, 14298, 1557, 22662, 375, 3256, 376, 2740, 1817, 376, 2740, 1817, 424, 52062, 424, 7125], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:57932 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:24:02 logger.py:39] Received request cmpl-368524c583e44c969e9e9532ce52225d-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        \n![](https://velog.velcdn.com/images/hope1213/post/54bce33a-07d8-4d3d-96c5-6a99b9d9cdc7/image.png)\n\n웹 개발을 할 때 가장 중요한 결정 중 하나는 어떤 작업을 서버 사이드(Server-side)에서 처리할지, 클라이언트 사이드(Client-side)에서 처리할지를 결정하는 것입니다. 이 글에서는 서버 사이드와 클라이언트 사이드의 차이점, 각 방식의 장단점, 그리고 어떤 상황에서 어떤 방식을 선택해야 하는지에 대해 살펴보겠습니다.\n\n#### 서버 사이드(Server-side)란?\n\n서버 사이드 프로그래밍은 웹 서버에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 클라이언트(사용자의 브라우저)에서 요청을 받을 때 실행됩니다. 서버 사이드 스크립트는 데이터베이스에 접근하고, 데이터를 처리하고, HTML 페이지를 동적으로 생성하는 데 사용됩니다.\n즉 웹에서 서버와 클라이언트는 정해진 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.\n\n\n**주요 언어 및 기술:**\n![](https://velog.velcdn.com/images/hope1213/post/6f8e3e86-7b7d-453a-8684-da3898c25af4/image.png)\n\n- PHP\n- Python (Django, Flask)\n- Ruby (Ruby on Rails)\n- Java (Spring)\n- Node.js\n\n**장점:**\n1. **보안**: 중요한 로직과 데이터베이스 접근이 서버에서 처리되어 클라이언트에서 접근할 수 없습니다.\n2. **데이터베이스 접근**: 서버에서 직접 데이터베이스와 상호작용할 수 있어 데이터 처리와 저장이 용이합니다.\n3. **호환성**: 모든 클라이언트가 동일한 서버 측 코드를 실행하므로 브라우저 호환성 문제를 줄일 수 있습니다.\n\n**단점:**\n1. **서버 부하**: 모든 처리가 서버에서 이루어지기 때문에 서버의 부하가 증가할 수 있습니다.\n2. **응답 시간**: 클라이언트가 요청을 보내고 서버가 응답할 때까지 시간이 걸릴 수 있습니다.\n\n#### 클라이언트 사이드(Client-side)란?\n\n클라이언트 사이드 프로그래밍은 사용자의 브라우저에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 HTML, CSS, JavaScript로 작성되며, 사용자의 인터페이스를 조작하고 사용자와 상호작용합니다.\n\n![](https://velog.velcdn.com/images/hope1213/post/d9319a2f-6c80-477b-987e-2102e2d24bbe/image.png) 일반적으로 Chrome과 같은 웹브라우저는 굉장히 많은 메모리를 차지합니다.\n\n단순히 탐색을 진행했을 뿐인데 다른 프로세스에 비해 굉장히 많은 메모리를 사용한다는 점에서 의문을 가질수 있습니다. 그 이유는 현재 Web쪽에 무거운 처리 대부분은 클라이언트 사이드 언어로 작업하기 때문입니다.\n\n\n**주요 언어 및 기술:**\n- HTML\n- CSS\n- JavaScript (React, Angular, Vue.js)\n\n\n**장점:**\n1. **빠른 응답**: 서버에 요청을 보내지 않고 브라우저에서 바로 처리하므로 응답 속도가 빠릅니다.\n2. **서버 부하 감소**: 많은 작업을 클라이언트에서 처리함으로써 서버의 부담을 줄일 수 있습니다.\n3. **향상된 사용자 경험**: 애니메이션, 실시간 업데이트 등 사용자 인터페이스를 더욱 풍부하게 만들 수 있습니다.\n\n**단점:**\n1. **보안 문제**: 클라이언트 사이드 코드가 브라우저에 노출되므로 보안에 취약할 수 있습니다.\n2. **브라우저 호환성**: 다양한 브라우저에서 동일하게 작동하도록 코드 작성이 어려울 수 있습니다.\n3. **제한된 성능**: 클라이언트의 기기 성능에 따라 처리 속도가 달라질 수 있습니다.\n\n#### 언제 서버 사이드를 선택해야 할까?\n\n- **보안이 중요한 경우**: 민감한 데이터나 중요한 비즈니스 로직이 포함된 경우 서버 사이드 처리가 필요합니다.\n- **데이터베이스 작업**: 데이터베이스와의 상호작용이 빈번하게 이루어질 때 서버 사이드가 적합합니다.\n- **복잡한 처리**: 복잡한 계산이나 대량의 데이터 처리가 필요할 때 서버 측에서 처리하는 것이 좋습니다.\n\n#### 언제 클라이언트 사이드를 선택해야 할까?\n\n- **실시간 상호작용**: 사용자와의 실시간 상호작용이 중요한 경우 클라이언트 사이드 처리가 필요합니다.\n- **인터페이스 동적 처리**: 동적인 사용자 인터페이스, 애니메이션, 실시간 업데이트 등은 클라이언트 사이드에서 처리하는 것이 좋습니다.\n- **서버 부하 분산**: 서버의 부하를 줄이고자 할 때 일부 처리를 클라이언트 사이드로 이동할 수 있습니다.\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 382, 381, 427, 828, 380, 380, 426, 374, 377, 384, 429, 385, 374, 381, 429, 380, 429, 374, 386, 383, 428, 382, 374, 383, 426, 386, 386, 427, 386, 429, 386, 18748, 428, 384, 376, 18958, 375, 441, 2345, 370, 560, 560, 51257, 4003, 696, 1051, 1105, 2472, 2963, 1075, 4024, 1126, 1799, 657, 3090, 3644, 696, 18296, 16444, 369, 23423, 374, 4261, 370, 41728, 5547, 93047, 373, 56794, 16444, 369, 16483, 374, 4261, 370, 41728, 5547, 93047, 4605, 4024, 1130, 657, 924, 10996, 375, 650, 2272, 41728, 657, 18296, 16444, 2030, 56794, 16444, 730, 29289, 373, 2534, 5073, 730, 42622, 373, 2210, 3090, 2876, 41728, 3090, 5073, 696, 3329, 21046, 691, 59985, 2373, 2409, 8926, 13910, 50747, 375, 560, 560, 3673, 18296, 16444, 369, 23423, 374, 4261, 370, 1868, 392, 560, 560, 95473, 16444, 42980, 732, 11574, 18296, 41728, 12944, 13452, 657, 12291, 4605, 6016, 1130, 657, 924, 696, 4536, 14010, 375, 650, 12291, 657, 56794, 369, 16167, 942, 730, 61559, 370, 41728, 8254, 696, 1374, 696, 1105, 12944, 837, 1318, 375, 18296, 16444, 59588, 657, 51359, 2373, 10625, 48199, 373, 7957, 4605, 5547, 48199, 373, 15447, 13203, 4605, 1368, 41281, 16769, 1130, 657, 1736, 1821, 837, 1318, 375, 560, 18909, 11574, 41728, 18296, 2030, 56794, 657, 24730, 11574, 13203, 715, 5372, 32906, 696, 3868, 2109, 868, 773, 643, 375, 560, 560, 560, 2484, 42008, 10978, 2425, 3755, 387, 2484, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 383, 431, 385, 430, 380, 430, 385, 383, 374, 384, 427, 384, 429, 374, 381, 382, 380, 426, 374, 385, 383, 385, 381, 374, 3695, 380, 385, 386, 385, 428, 379, 382, 3543, 381, 376, 18958, 375, 441, 2345, 370, 560, 560, 374, 21479, 560, 374, 14138, 688, 78680, 10380, 373, 58607, 370, 560, 374, 30967, 688, 65566, 450, 807, 50760, 370, 560, 374, 11154, 688, 60192, 370, 560, 374, 19206, 375, 12716, 560, 560, 2484, 50938, 387, 2484, 560, 378, 375, 1316, 1280, 1336, 2484, 387, 2963, 1075, 54794, 1548, 51359, 10625, 634, 18296, 41728, 5547, 13452, 721, 56794, 41728, 10625, 2870, 868, 1107, 50747, 375, 560, 379, 375, 1316, 64766, 35972, 10625, 2484, 387, 18296, 41728, 3492, 51359, 2030, 14885, 14052, 2870, 868, 773, 721, 7957, 5547, 2030, 11503, 634, 26188, 14010, 375, 560, 380, 375, 1316, 1818, 2401, 1210, 2484, 387, 2904, 56794, 905, 9725, 1075, 18296, 4387, 12291, 4605, 12944, 1130, 8158, 61559, 39833, 1210, 2372, 4605, 23006, 868, 773, 50747, 375, 560, 560, 2484, 29376, 387, 2484, 560, 378, 375, 1316, 95473, 33473, 2484, 387, 2904, 5547, 905, 18296, 41728, 14572, 722, 1668, 2373, 18296, 730, 33473, 905, 5010, 2870, 868, 773, 50747, 375, 560, 379, 375, 1316, 99822, 1590, 2484, 387, 56794, 905, 8254, 696, 3399, 853, 18296, 905, 16352, 2870, 1105, 76876, 1590, 634, 20589, 868, 773, 50747, 375, 560, 560, 3673, 56794, 16444, 369, 16483, 374, 4261, 370, 1868, 392, 560, 560, 6055, 49544, 16444, 42980, 732, 7332, 730, 61559, 41728, 12944, 13452, 657, 12291, 4605, 6016, 1130, 657, 924, 696, 4536, 14010, 375, 650, 12291, 657, 15447, 373, 20772, 373, 20820, 715, 6016, 13452, 1877, 373, 7332, 730, 51299, 4605, 15597, 48199, 7332, 2030, 14885, 14052, 14010, 375, 560, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 429, 386, 380, 378, 386, 426, 379, 431, 374, 383, 428, 385, 377, 374, 381, 384, 384, 427, 374, 386, 385, 384, 430, 374, 379, 378, 377, 379, 430, 379, 429, 379, 381, 100800, 376, 18958, 375, 441, 2345, 370, 4400, 41281, 25698, 1548, 1119, 732, 11574, 21014, 962, 80649, 6121, 1180, 732, 21497, 4605, 8145, 14010, 375, 560, 560, 50375, 30694, 696, 2379, 2662, 696, 3075, 74914, 2126, 33427, 2373, 7322, 6121, 1180, 732, 21497, 4605, 1821, 1075, 4264, 1694, 41728, 15539, 696, 17640, 800, 773, 50747, 375, 855, 3071, 657, 3570, 8545, 2155, 2373, 20671, 5547, 5255, 732, 56794, 16444, 10978, 715, 3644, 76766, 1668, 10996, 375, 560, 560, 560, 2484, 42008, 10978, 2425, 3755, 387, 2484, 560, 374, 15447, 560, 374, 20772, 560, 374, 20820, 688, 72936, 373, 43047, 373, 46552, 375, 12716, 370, 560, 560, 560, 2484, 50938, 387, 2484, 560, 378, 375, 1316, 42750, 16352, 2484, 387, 18296, 2373, 8254, 696, 3399, 698, 1145, 853, 61559, 41728, 2264, 5547, 1130, 8158, 16352, 7818, 905, 92987, 375, 560, 379, 375, 1316, 95473, 33473, 7632, 2484, 387, 1180, 732, 3644, 696, 56794, 41728, 5547, 3117, 13456, 2500, 18296, 730, 4649, 696, 23006, 868, 773, 50747, 375, 560, 380, 375, 1316, 2368, 1029, 16524, 7332, 4503, 2484, 387, 25022, 373, 17557, 18240, 1222, 7332, 51299, 4605, 3892, 10482, 1130, 1060, 2069, 868, 773, 50747, 375, 560, 560, 2484, 29376, 387, 2484, 560, 378, 375, 1316, 1280, 1336, 2372, 2484, 387, 56794, 16444, 12291, 905, 61559, 2373, 12448, 13452, 8158, 13949, 2373, 17954, 2870, 868, 773, 50747, 375, 560, 379, 375, 1316, 21014, 962, 1415, 39833, 1210, 2484, 387, 2841, 1075, 61559, 41728, 9725, 1130, 1060, 13981, 1130, 37728, 12291, 6016, 634, 17717, 868, 773, 50747, 375, 560, 380, 375, 1316, 68118, 16524, 11758, 2484, 387, 56794, 730, 11241, 11758, 2373, 2414, 5547, 7818, 905, 27309, 868, 773, 50747, 375, 560, 560, 3673, 4269, 18296, 16444, 4605, 3329, 21046, 8354, 392, 560, 560, 374, 1316, 1280, 1336, 634, 2963, 1075, 2042, 2484, 387, 15480, 1075, 7957, 902, 2963, 1075, 18938, 54794, 634, 4666, 16524, 2042, 18296, 16444, 5547, 905, 2327, 14010, 375, 560, 374, 1316, 64766, 35972, 3644, 2484, 387, 51359, 2030, 730, 14885, 14052, 634, 39765, 1130, 1060, 40711, 1105, 18296, 16444, 905, 13329, 14010, 375, 560, 374, 1316, 67972, 1075, 5547, 2484, 387, 12037, 1075, 9939, 37891, 23536, 730, 7957, 5547, 905, 2327, 2870, 1105, 18296, 4387, 41728, 5547, 1130, 657, 924, 634, 1104, 50747, 375, 560, 560, 3673, 4269, 56794, 16444, 4605, 3329, 21046, 8354, 392, 560, 560, 374, 1316, 91144, 14885, 14052, 2484, 387, 7332, 2030, 730, 17557, 14885, 14052, 634, 2963, 1075, 2042, 56794, 16444, 5547, 905, 2327, 14010, 375, 560, 374, 1316, 17111, 27512, 84906, 5547, 2484, 387, 84906, 798, 7332, 51299, 373, 25022, 373, 17557, 18240, 1222, 732, 56794, 16444, 41728, 5547, 1130, 657, 924, 634, 1104, 50747, 375, 560, 374, 1316, 95473, 33473, 28350, 2484, 387, 18296, 730, 33473, 4605, 10466, 853, 942, 1051, 1105, 5720, 5547, 4605, 56794, 16444, 715, 5346, 2870, 868, 773, 50747, 375, 560], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:57940 - "POST /v1/completions HTTP/1.1" 200 OK
ERROR 02-16 23:24:02 serving_completion.py:112] Error in preprocessing prompt inputs
ERROR 02-16 23:24:02 serving_completion.py:112] Traceback (most recent call last):
ERROR 02-16 23:24:02 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_completion.py", line 104, in create_completion
ERROR 02-16 23:24:02 serving_completion.py:112]     request_prompts, engine_prompts = await self._preprocess_completion(
ERROR 02-16 23:24:02 serving_completion.py:112]                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 23:24:02 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 349, in _preprocess_completion
ERROR 02-16 23:24:02 serving_completion.py:112]     request_prompts = await self._tokenize_prompt_input_or_inputs_async(
ERROR 02-16 23:24:02 serving_completion.py:112]                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 23:24:02 serving_completion.py:112]   File "/opt/anaconda3/lib/python3.12/concurrent/futures/thread.py", line 58, in run
ERROR 02-16 23:24:02 serving_completion.py:112]     result = self.fn(*self.args, **self.kwargs)
ERROR 02-16 23:24:02 serving_completion.py:112]              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 23:24:02 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 326, in _tokenize_prompt_input_or_inputs
ERROR 02-16 23:24:02 serving_completion.py:112]     self._normalize_prompt_text_to_input(
ERROR 02-16 23:24:02 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 183, in _normalize_prompt_text_to_input
ERROR 02-16 23:24:02 serving_completion.py:112]     return self._validate_input(request, input_ids, input_text)
ERROR 02-16 23:24:02 serving_completion.py:112]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR 02-16 23:24:02 serving_completion.py:112]   File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/entrypoints/openai/serving_engine.py", line 246, in _validate_input
ERROR 02-16 23:24:02 serving_completion.py:112]     raise ValueError(
ERROR 02-16 23:24:02 serving_completion.py:112] ValueError: This model's maximum context length is 4096 tokens. However, you requested 7424 tokens (6424 in the messages, 1000 in the completion). Please reduce the length of the messages or completion.
INFO:     127.0.0.1:57950 - "POST /v1/completions HTTP/1.1" 400 Bad Request
INFO 02-16 23:24:02 engine.py:275] Added request cmpl-e4e93462da5248f7a792b1b98d5976b8-0.
INFO 02-16 23:24:02 engine.py:275] Added request cmpl-368524c583e44c969e9e9532ce52225d-0.
INFO 02-16 23:24:02 engine.py:293] Aborted request cmpl-e4e93462da5248f7a792b1b98d5976b8-0.
INFO 02-16 23:24:02 engine.py:293] Aborted request cmpl-2f3ec4c5ec194f099dbf48918d4a3776-0.
INFO 02-16 23:24:02 engine.py:293] Aborted request cmpl-368524c583e44c969e9e9532ce52225d-0.
INFO 02-16 23:24:12 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 65.7 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:24:22 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:25:35 logger.py:39] Received request cmpl-83d8024d619945f4bbbd13573a52eb01-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.[|system|] 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요.\n4. 하위 쿼리는 최대한 간단한 질문으로 만드세요. (예: "만약 날아다니는 스파게티 괴물이 창작물이나 상상력의 산물이라면, 그 창작물의 출처나 배경 정보 파악" 대신 "날아다니는 스파게티 괴물의 출처 파악"과 같이 간단하게 만드세요.)\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n[|assistant|]\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.[|endofturn|][|example|] 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n[|endofturn|]\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    [|user|] 서버사이드 프로그래밍에 대해 알려줘 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2939, 732, 582, 379, 377, 379, 382, 2171, 582, 377, 379, 2751, 582, 378, 383, 858, 10996, 375, 4484, 657, 582, 379, 377, 379, 382, 2171, 10996, 375, 2626, 1578, 732, 582, 379, 2751, 10996, 15954, 453, 47982, 453, 422, 5998, 732, 7205, 657, 12037, 1075, 5962, 1371, 696, 8019, 1075, 27498, 3644, 13456, 7872, 657, 1736, 2373, 4362, 1727, 1075, 7111, 10996, 375, 560, 378, 375, 24348, 5962, 696, 39380, 41281, 17661, 3644, 13456, 7872, 5847, 375, 560, 379, 375, 2534, 27498, 100048, 657, 1799, 730, 3644, 1043, 13456, 53712, 1481, 375, 7164, 2690, 1823, 730, 3644, 696, 4666, 1130, 698, 14182, 375, 688, 3027, 387, 6873, 2373, 1546, 1208, 2329, 730, 3231, 4605, 4415, 1130, 657, 3644, 1084, 2873, 375, 23784, 1222, 720, 9190, 715, 7135, 5658, 5962, 696, 8890, 37728, 691, 5847, 22442, 560, 380, 375, 582, 380, 1823, 8099, 730, 27498, 100048, 4605, 16769, 1130, 5847, 375, 560, 381, 375, 27498, 100048, 657, 9338, 5488, 1075, 5962, 13456, 5799, 5847, 375, 688, 3027, 387, 738, 20267, 69972, 657, 28874, 30874, 634, 23993, 1113, 37891, 42738, 730, 62058, 634, 17663, 373, 855, 23993, 1113, 730, 10411, 902, 10300, 3231, 7936, 363, 6414, 738, 1945, 1023, 8367, 657, 28874, 30874, 730, 10411, 7936, 363, 1548, 2485, 5488, 1130, 1060, 5799, 5847, 22442, 560, 381, 375, 9556, 732, 4488, 2030, 2485, 15214, 12947, 13456, 1992, 1481, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 20498, 26942, 23454, 1130, 1595, 100048, 582, 378, 9417, 738, 1130, 1595, 100048, 582, 379, 9417, 4377, 10924, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 14182, 375, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 1130, 5847, 375, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 4488, 32604, 4605, 5813, 5414, 9556, 696, 6016, 1130, 5847, 375, 3027, 954, 13385, 387, 11225, 1339, 18295, 657, 7135, 3930, 11966, 2373, 9633, 392, 3136, 1780, 2373, 6930, 5571, 9500, 1162, 696, 698, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 25999, 905, 9633, 657, 11966, 9417, 738, 49065, 905, 9633, 657, 11966, 9417, 738, 25999, 2030, 18295, 1126, 1162, 696, 924, 3093, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 16993, 373, 11819, 373, 5805, 730, 11282, 7460, 732, 3656, 91728, 392, 7135, 730, 3830, 14178, 3090, 18938, 5927, 696, 1821, 48199, 773, 657, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 54529, 730, 11282, 7460, 9417, 738, 22279, 730, 11282, 7460, 9417, 738, 34724, 730, 11282, 7460, 9417, 738, 54529, 373, 11819, 373, 5805, 730, 11282, 7460, 29289, 9417, 738, 54529, 730, 18938, 5927, 9417, 738, 22279, 730, 18938, 5927, 9417, 738, 34724, 730, 18938, 5927, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 11265, 4605, 1747, 657, 924, 634, 3164, 2373, 1104, 732, 905, 392, 11265, 1747, 37817, 1104, 732, 6620, 657, 4083, 798, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 23454, 39190, 1747, 722, 905, 3164, 2373, 11310, 657, 5282, 1996, 722, 9417, 738, 39190, 1747, 37817, 1104, 732, 6620, 1996, 722, 71045, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 41728, 7991, 13456, 713, 657, 40187, 2030, 77348, 13891, 3231, 4605, 5080, 999, 823, 853, 373, 2472, 8570, 1590, 696, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 20715, 40187, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 77348, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 40187, 2030, 77348, 5080, 9417, 560, 23, 363, 8397, 374, 20715, 1601, 1430, 15767, 13891, 834, 3093, 363, 560, 27, 422, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 4113, 1146, 830, 730, 17129, 4747, 1548, 16951, 4747, 696, 3504, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 19, 363, 2839, 1146, 830, 730, 17129, 4747, 9417, 560, 19, 363, 2839, 1254, 830, 730, 16951, 4747, 363, 560, 23, 422, 582, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 2879, 41728, 7646, 999, 13186, 373, 7967, 373, 18066, 4605, 10916, 4817, 76876, 3253, 2870, 3864, 74914, 373, 2534, 2878, 730, 7245, 23512, 2030, 3093, 3501, 696, 3504, 823, 853, 373, 17028, 730, 5346, 19597, 2030, 73414, 696, 5422, 999, 15887, 375, 3662, 5210, 15767, 1590, 1548, 5262, 696, 4666, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 32122, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 32122, 7245, 23512, 9417, 560, 23, 363, 32122, 3093, 3501, 9417, 560, 23, 363, 32122, 374, 23135, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 23135, 7245, 23512, 9417, 560, 23, 363, 23135, 3093, 3501, 9417, 560, 23, 363, 23135, 374, 44868, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 44868, 7245, 23512, 9417, 560, 23, 363, 44868, 3093, 3501, 9417, 560, 23, 363, 44868, 374, 12149, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 12149, 7245, 23512, 9417, 560, 23, 363, 12149, 3093, 3501, 9417, 560, 23, 363, 17793, 3253, 5210, 15767, 1590, 2425, 5262, 363, 560, 27, 422, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 715, 3253, 696, 713, 12438, 691, 15913, 4977, 905, 3835, 34325, 392, 2210, 3835, 732, 23512, 2131, 3093, 999, 15887, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 13225, 2879, 4977, 9417, 560, 23, 363, 8397, 7245, 23512, 363, 560, 27, 422, 560, 27, 454, 560, 361, 560, 560, 6297, 5962, 696, 2690, 78028, 27498, 5962, 13456, 7872, 33413, 5847, 375, 560, 31, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 2373, 2409, 3504, 15887, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43118 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:25:35 engine.py:275] Added request cmpl-83d8024d619945f4bbbd13573a52eb01-0.
INFO 02-16 23:25:35 logger.py:39] Received request cmpl-791fcbb709c14fb68235a0c049e09314-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 정의 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 11476, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43118 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:25:35 engine.py:275] Added request cmpl-791fcbb709c14fb68235a0c049e09314-0.
INFO 02-16 23:25:36 logger.py:39] Received request cmpl-0124e2ee13b447a1b0aca4286f906892-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 특징 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 8574, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43118 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:25:36 engine.py:275] Added request cmpl-0124e2ee13b447a1b0aca4286f906892-0.
INFO 02-16 23:25:37 logger.py:39] Received request cmpl-77749a5ea1404d7da79e98c2a4bbe117-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 장단점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 42622, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43118 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:25:37 engine.py:275] Added request cmpl-77749a5ea1404d7da79e98c2a4bbe117-0.
INFO 02-16 23:25:37 metrics.py:455] Avg prompt throughput: 733.6 tokens/s, Avg generation throughput: 53.2 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 23:25:40 logger.py:39] Received request cmpl-a6fa32e1bf1a4fa7bf92da68c3d297ae-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍 언어 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 10978, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43118 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:25:40 engine.py:275] Added request cmpl-a6fa32e1bf1a4fa7bf92da68c3d297ae-0.
INFO 02-16 23:25:40 logger.py:39] Received request cmpl-c1789e36cf20474db81129a1009c13ee-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 사용 사례 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 1821, 8224, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:43118 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:25:40 engine.py:275] Added request cmpl-c1789e36cf20474db81129a1009c13ee-0.
INFO 02-16 23:25:42 metrics.py:455] Avg prompt throughput: 355.3 tokens/s, Avg generation throughput: 123.3 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 23:25:45 logger.py:39] Received request cmpl-965a264c515a4b9f89eec13472ef6baa-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        안녕하세요 jju_developer입니다.오늘은제이쿼리 비동기 방식 연동에 대해 설명하다가따로 설명을 드려야 할 것 같은 정보가 있어서!! 글을 정리하여 적어봅니다~책을 읽다보면 서버사이드와 클라이언트 사이드를 많이 접하실텐데요?웹 프로그래밍에서서버 사이드/클라이언트 사이드가 나뉘고,어느 쪽에 중심을 두느냐에 따라 프로젝트의 방향이 달라지게 됩니다.그렇다면 클라이언트 사이드와 서버 사이드는 무엇일까요?1. 클라이언트 사이드(Client-Side)-클라이언트(사용자) 측에서 처리하는 것.클라이언트(사용자)가 입력한 것을 수신해서 HTML로 만들어서 크롬과 같은 애플리케이션에 해석해서 표시합니다.대표적으로 자바스크립트(Javascript)가 있습니다.2. 서버 사이드(Server-Side)-서버(제공자) 측에서 즉시 처리하는 것.서버 사이드는\xa0클라이언트로 보낼\xa0웹 페이지(HTML,\xa0JavaScript 등이 담긴)를\xa0만들며,작업들(사용자 유효성, DB 관련 등)을 수행합니다.대표적인 언어는 Java, PHP, Ruby, Python, Node.js 등이 있습니다.즉,서버와클라이언트는 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.클라이언트 사이드 언어를 다루고 그에 관련된 개발자들을프론트 엔드서버 사이드 언어를 다루고 그에 관련된 개발자를백엔드라 부릅니다.웹사이트를\xa0제작하는데\xa0쓰이는\xa0스크립트는실행되는 위치에 따라 클라이언트 사이드 스크립트와 서버사이드 스크립트로 구분합니다.서버사이드 스크립트는서버에서 해석해서 구동되는 스크립트이고,클라이언트 사이드 스크립트는브라우저에서 해석해서 구동되는 스크립트입니다.서버사이드 스크립트는 DB를 액세스 하는 게 주요 목적이고,클라이언트 사이드 스크립트는 브라우저의 객체를 제어하는데 쓰입니다.서버 사이드와 클라이언트의 데이터 교환은 HTTPS로 하는데요!여기서 HTTP의 한계를 알아보겠습니다.HTTP의 한계HTTP의 뒤 두 글자 Transfer Protocol.HTTP의 대전제는 “URL 및 부가정보를 통해 사용자가 원하는 페이지를 서버에요청한다,그리고 서버는 해당 요청에응답한다”입니다.사용자가 URL을 요청할 때에만!서버에서 해당 페이지를 꺼내주는 식이라는 겁니다.거꾸로\xa0말하자면,\xa0사용자는\xa0서버로부터\xa0새로운\xa0정보를\xa0받아보기\xa0위해서,\xa0반드시,\xa0새로운\xa0URL을\xa0요청해야\xa0한다는\xa0말과\xa0같습니다.예전에 로그인할 때 아이디 중복확인하는 거 해보셨죠?그때 서버에게 중복 검사를 요청하기 위해서 새 페이지를 요청해야만 했었는데,회원 정보 작성 중에는 페이지를 이동할 수 없었기 때문에새로 요청한 페이지를 팝업창으로 띄웠던 것입니다.(요즘 사이트들은 대부분 팝업창 없이 검사가 가능합니다. 이것이 바로\xa0 Ajax를 이용했기 때문이죠!!!)AJAX그 당시에 떠오르기 시작한 구글은 HTTP 규약을 뛰어넘는 방안을 제안합니다.이름하여AJAX입니다.AJAX를 쓰면, 유저는 새로운 HTML을 서버로부터 받는 것이 아닙니다.즉, 유저는 새로운 웹페이지로 이동하는 것이 아닙니다.대신, 동일한 웹페이지 내에서 DOM을 변경하게 됩니다.요청 페이지에서 이름 칸에 ‘쮸’를 쓰고, 내용에 ‘안녕하세요. 쮸입니다’라고 썼다고 해봅시다.사용자의 이벤트로부터 Javascript는 해당 이름과 내용이 쓰인 DOM을 읽습니다.그리고는 XMLHttpRequest 객체를 통해 웹서버에 해당 이름과 내용을 전송합니다.웹서버는 요청을 처리하고 XML, Text 혹은 JSON을 XMLHttpRequest 객체에 전송합니다.그러면, Javascript가 해당 응답 정보를 DOM에 씁니다.그렇게 결과페이지가 만들어집니다.\u200bAJAX를 쓰면 새로운 HTML을 서버로부터 받아야 하는 것이 아닙니다.동일한 페이지의 일부를 수정할 수도 있는 가능성이 생깁니다.결과적으로 사용자 입장에서는페이지 이동이 발생되지 않고 페이지 내부 변화만 일어나게 됩니다.HTML 페이지 전체를 다 바꿔야 하는 것이 아니라 부분만 바꿀 수 있게 되는 것입니다.이렇게 따로 페이지의 이동 없이 페이지 내부에서 검사를 하여 결과를 출력하는 것을 볼 수 있죵?아이디 중복체크하려면 필히 서버 쪽 DB와 통신하기 위해서 웹서버 동작이 필요한데,이때 페이지를 바꾸지 않고 요청 결과만 그대로 가져와서 띄우면 되게 됩니다.그 외에도 비밀번호 강도 확인, 검색어 실시간 추천, 마우스 커서나 스크롤바 위치에 반응하는 그림, 지도 표시 서비스 등등 다양합니다.<정리>Ajax는 웹 페이지 전체를다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있게 해 줍니다.즉 Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분에만 표시할 수 있습니다.이때 서버와는 다음과 같은 다양한 형태의 데이터를 주고받을 수 있습니다.JSONXMLHTML텍스트 파일 등Ajax의 장점Ajax를 이용하면 다음과 같은 장점이 있습니다.\u200b1.웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있습니다.2. 웹 페이지가 로드된 후에 서버로 데이터 요청을 보낼 수 있습니다. (Post를 통해 값을 서버 쪽으로 전달해 처리되고 받아올 수 있음)3. 웹 페이지가 로드된 후에 서버로부터 데이터를 받을 수 있습니다.4. 백그라운드 영역에서 서버로 데이터를 보낼 수 있습니다.Ajax의 단점Ajax를 이용하면 여러 장점을 가지지만, Ajax로도 다음과 같은 일들은 처리할 수 없습니다.\u200b1.Ajax는 클라이언트가 서버에 데이터를 요청하는 클라이언트 풀링 방식(사용자가 직접 요청)을 사용하므로,서버 푸시 방식(푸시알람 같은)의 실시간 서비스는 만들 수 없습니다.2. Ajax로는 바이너리 데이터를 보내거나 받을 수 없습니다.3. Ajax 스크립트가 포함된 서버가 아닌 다른 서버로 Ajax 요청을 보낼 수는 없습니다.4.클라이언트의 PC로 Ajax 요청을 보낼 수는 없습니다.Ajax 구성 요소- 웹 페이지의 표현을 위한HTML과 CSS- 데이터에 접근하거나 화면 구성을 동적으로 조작하기 위해 사용되는DOM 모델- 데이터의 교환을 위한JSON이나 XML- 웹 서버와의 비동기식 통신을 위한XMLHttpRequest 객체- 위에서 언급한 모든 기술을 결합하여 사용자의 작업 흐름을 제어하는 데 사용되는자바스크립트1 : 사용자에 의한 요청 이벤트가 발생합니다. (-> jju240 아이디 생성 요청함)2 : 요청 이벤트가 발생하면 이벤트 핸들러에 의해 자바스크립트가 호출됩니다.3 : 자바스크립트는 XMLHttpRequest 객체를 사용하여 서버로 요청을 보냅니다.이때 웹 브라우저는 요청을 보내고 나서,서버의 응답을 기다릴 필요 없이다른 작업을 처리할 수 있습니다.4 : 서버는 전달받은 XMLHttpRequest 객체를 가지고 Ajax 요청을 처리합니다.5,6 : 서버는 처리한 결과를 HTML, XML 또는 JSON 형태의 데이터로 웹 브라우저에 전달합니다.이때 전달되는 응답은 새 페이지 전부 보내는 것이 아니라 필요한 데이터만을 전달합니다.(->이미사용 중이라는 문구)7 : 서버로부터 전달받은 데이터를 가지고 웹 페이지의 일부분만을 갱신하는 자바스크립트를 호출합니다.8 : 최종으로 웹 페이지의 일부분만이 다시 로딩되어 표시됩니다. (-> 이미 사용 중인 아이디입니다!)XMLHttpRequest 객체Ajax의 가장 핵심적인 구성 요소는 바로 XMLHttpRequest 객체입니다.Ajax에서 XMLHttpRequest 객체는웹 브라우저가 서버와 데이터를 교환할 때 사용됩니다.웹 브라우저가 백그라운드에서 계속해서 서버와 통신할 수 있는 것은 바로 이 객체를 사용하기 때문입니다.let httpRequest = new XMLHttpRequest();이상으로 서버사이드, 클라이언트의 개념과 그 둘이 어떻게 데이터를 교환하는지 알아보았습니다.⭐⭐⭐⭐⭐ 이번 글은 이해하고 적는 것에 초점을 두었기 때문에 시간이 많이 걸렸었는데용\xa0ㅎㅎ😥\\중요한 개념이니 꼭 숙지하시는데 도움이 되었으면 좋겠습니다~!!!그럼 오늘도 수고하셨습니다~참고 웹사이트:http://tcpschool.com/ajax/ajax_intro_works', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 3801, 1130, 5847, 1056, 13238, 424, 50874, 623, 10996, 375, 2939, 732, 37762, 46008, 760, 1202, 50048, 5073, 24108, 2373, 2409, 3328, 1130, 5954, 28837, 3328, 696, 32961, 1051, 924, 1119, 732, 3231, 905, 773, 22556, 3461, 2272, 696, 4892, 22226, 1015, 721, 41065, 455, 2703, 696, 3405, 10816, 838, 18296, 37305, 2030, 56794, 16444, 4605, 1719, 20032, 1332, 6891, 27778, 392, 51257, 42980, 41728, 95473, 16444, 376, 6055, 49544, 16444, 905, 20903, 853, 373, 12258, 3609, 2373, 5696, 696, 1546, 3016, 5133, 2373, 2414, 10902, 730, 6319, 634, 17032, 1060, 2873, 375, 9251, 4767, 56794, 16444, 2030, 18296, 16444, 657, 4262, 858, 4148, 392, 378, 375, 56794, 16444, 369, 16483, 374, 44590, 370, 374, 6055, 49544, 369, 16167, 942, 370, 4387, 41728, 5547, 1130, 657, 924, 375, 6055, 49544, 369, 16167, 942, 370, 905, 13385, 1075, 924, 696, 33278, 5414, 15447, 715, 2069, 22556, 40433, 1548, 1119, 732, 38217, 2373, 11235, 5414, 10269, 14010, 375, 13908, 41281, 47201, 4183, 56386, 369, 403, 1238, 10832, 370, 905, 773, 50747, 375, 379, 375, 18296, 16444, 369, 23423, 374, 44590, 370, 374, 95473, 369, 1050, 40041, 370, 4387, 41728, 16192, 5547, 1130, 657, 924, 375, 95473, 16444, 657, 2926, 31158, 25430, 17681, 11574, 13203, 369, 24961, 373, 20820, 1222, 634, 17206, 370, 4605, 2069, 1877, 373, 21135, 1371, 369, 16167, 942, 24146, 1210, 373, 12847, 3051, 1222, 370, 696, 9425, 14010, 375, 13908, 1965, 798, 10978, 657, 11154, 373, 21479, 373, 30967, 373, 14138, 373, 19206, 375, 12716, 1222, 634, 773, 50747, 375, 18909, 373, 95473, 2030, 6055, 49544, 657, 11574, 13203, 715, 5372, 32906, 696, 3868, 2109, 868, 773, 643, 375, 6055, 49544, 16444, 10978, 4605, 16383, 853, 855, 2373, 3051, 16524, 33468, 1371, 696, 1770, 2024, 1067, 54110, 95473, 16444, 10978, 4605, 16383, 853, 855, 2373, 3051, 16524, 33468, 4605, 3387, 8789, 24835, 60354, 375, 51257, 79184, 4605, 5465, 1130, 15913, 15533, 657, 59588, 657, 1332, 1282, 13452, 657, 3897, 2373, 2414, 56794, 16444, 59588, 2030, 18296, 37305, 12870, 2158, 25430, 11301, 14010, 375, 95473, 37305, 59588, 657, 95473, 41728, 11235, 5414, 35730, 13452, 657, 59588, 634, 853, 373, 6055, 49544, 16444, 59588, 657, 21014, 962, 1415, 41728, 11235, 5414, 35730, 13452, 657, 59588, 10996, 375, 95473, 37305, 59588, 657, 12847, 4605, 92284, 691, 657, 869, 7245, 6801, 634, 853, 373, 6055, 49544, 16444, 59588, 657, 61559, 730, 42225, 4605, 23245, 1130, 15913, 2112, 10996, 375, 95473, 16444, 2030, 56794, 730, 7957, 10547, 732, 60728, 715, 691, 15913, 740, 362, 5429, 712, 17086, 730, 13602, 4605, 5337, 13910, 50747, 375, 64157, 730, 13602, 64157, 730, 2448, 1546, 18302, 31113, 28607, 375, 64157, 730, 7991, 1050, 657, 1488, 20654, 2425, 24688, 33377, 4605, 2364, 7332, 905, 9062, 657, 13203, 4605, 18296, 2373, 740, 1774, 10348, 373, 3011, 18296, 657, 5299, 8254, 2373, 99822, 10348, 9583, 10996, 375, 16167, 942, 905, 3293, 696, 8254, 2870, 1105, 2373, 1043, 362, 95473, 41728, 5299, 13203, 4605, 9596, 823, 657, 23890, 21212, 7356, 375, 1387, 36647, 1216, 1130, 942, 838, 373, 7332, 657, 18296, 715, 4560, 4650, 3231, 4605, 1374, 25539, 722, 4313, 373, 8887, 373, 4650, 3293, 696, 8254, 21046, 4375, 1216, 1548, 1119, 50747, 375, 12926, 2373, 33063, 2870, 1105, 23807, 27013, 9506, 1130, 657, 1022, 67157, 5797, 12099, 392, 16591, 18296, 2373, 1060, 27013, 4830, 4605, 8254, 76766, 4313, 1956, 13203, 4605, 8254, 21046, 1043, 5039, 15913, 373, 35457, 3231, 6016, 1126, 97300, 13203, 4605, 5346, 2870, 868, 1107, 2957, 722, 1668, 2373, 29650, 8254, 1075, 13203, 4605, 32583, 3239, 13456, 9534, 3245, 5623, 924, 10996, 21339, 5438, 8050, 1371, 732, 5255, 32583, 3239, 2705, 4830, 905, 1995, 14010, 375, 4383, 634, 2264, 582, 62632, 4605, 2785, 2662, 722, 1668, 634, 12099, 11258, 370, 75983, 36226, 799, 5569, 2373, 15454, 722, 2104, 1075, 16993, 732, 17086, 87364, 696, 33094, 657, 8800, 696, 11137, 14010, 375, 17787, 22226, 75983, 36226, 10996, 375, 75983, 36226, 4605, 2112, 838, 373, 19589, 657, 4650, 15447, 696, 18296, 715, 4560, 1374, 657, 924, 634, 10454, 375, 18909, 373, 19589, 657, 4650, 11574, 7696, 715, 51034, 657, 924, 634, 10454, 375, 27299, 373, 9725, 1075, 11574, 7696, 1080, 41728, 27591, 696, 8171, 1130, 1060, 2873, 375, 740, 1774, 13203, 41728, 3730, 10940, 2373, 2376, 49854, 18420, 4605, 2112, 853, 373, 3311, 2373, 2376, 3801, 1130, 5847, 375, 58301, 10996, 18420, 3885, 9347, 3401, 844, 64429, 375, 16167, 942, 730, 6594, 715, 4560, 46456, 657, 5299, 3730, 1548, 3311, 634, 44037, 27591, 696, 3405, 50747, 375, 3011, 657, 20100, 88354, 42225, 4605, 2364, 11574, 95473, 2373, 5299, 3730, 1548, 3311, 696, 24134, 14010, 375, 51257, 95473, 657, 8254, 696, 5547, 48199, 20100, 373, 11353, 7597, 15214, 696, 20100, 88354, 42225, 2373, 24134, 14010, 375, 27150, 373, 46456, 905, 5299, 16352, 3231, 4605, 27591, 2373, 35027, 375, 10008, 3336, 7696, 905, 2069, 52232, 76456, 75983, 36226, 4605, 2112, 838, 4650, 15447, 696, 18296, 715, 4560, 69597, 1137, 691, 657, 924, 634, 10454, 375, 74038, 1075, 13203, 730, 5720, 4605, 10122, 2870, 8952, 773, 657, 1995, 35604, 45523, 375, 29635, 41281, 7332, 5106, 41728, 657, 7696, 5346, 634, 3449, 13452, 698, 1145, 853, 13203, 5424, 5005, 1043, 5735, 1060, 2873, 375, 24961, 13203, 4532, 4605, 694, 39655, 691, 657, 924, 634, 1579, 789, 2578, 1043, 20867, 868, 773, 1060, 970, 657, 924, 10996, 375, 5366, 5658, 13203, 730, 5346, 2705, 13203, 5424, 41728, 4830, 4605, 22356, 3336, 4605, 17653, 1130, 657, 924, 696, 2109, 868, 773, 796, 475, 392, 5763, 1689, 27013, 40269, 1130, 38835, 55216, 18296, 3609, 12847, 2030, 7514, 76766, 4313, 11574, 95473, 14288, 634, 2327, 1075, 896, 373, 17540, 13203, 4605, 8766, 698, 1145, 853, 8254, 3336, 1043, 5476, 44700, 49354, 838, 9312, 2873, 375, 799, 2068, 15169, 10239, 63320, 19570, 2927, 373, 47700, 17557, 3093, 373, 25801, 15774, 902, 70806, 1987, 3897, 2373, 7667, 1130, 657, 5124, 373, 6577, 10269, 3670, 7429, 2841, 14010, 39065, 27896, 391, 67884, 1817, 657, 11574, 13203, 4532, 4605, 7237, 86183, 1130, 698, 1145, 94925, 373, 11574, 13203, 730, 47792, 1043, 696, 21522, 2870, 868, 773, 1060, 844, 6916, 375, 18909, 62632, 4605, 2785, 16559, 2599, 33388, 7179, 11693, 41728, 18296, 2030, 7514, 22226, 373, 855, 3336, 4605, 11574, 13203, 730, 47792, 2373, 1043, 10269, 2870, 868, 773, 50747, 375, 17540, 18296, 2030, 657, 2775, 1548, 1119, 732, 2841, 1075, 7075, 730, 7957, 4605, 33052, 696, 868, 773, 50747, 375, 34613, 52991, 24961, 20151, 2754, 11038, 1222, 67884, 1817, 730, 7306, 67884, 1817, 4605, 2785, 16559, 2775, 1548, 1119, 732, 7306, 634, 773, 50747, 76456, 378, 375, 51257, 13203, 4532, 4605, 2257, 86183, 1130, 698, 1145, 94925, 373, 11574, 13203, 730, 47792, 1043, 696, 21522, 2870, 868, 773, 50747, 375, 379, 375, 11574, 13203, 905, 17099, 16524, 1452, 2373, 18296, 715, 7957, 8254, 696, 17681, 868, 773, 50747, 375, 688, 19889, 4605, 2364, 7812, 696, 18296, 3609, 13456, 7820, 999, 5547, 13452, 853, 69597, 3009, 868, 773, 1040, 370, 380, 375, 11574, 13203, 905, 17099, 16524, 1452, 2373, 18296, 715, 4560, 7957, 4605, 1374, 696, 868, 773, 50747, 375, 381, 375, 2599, 33388, 7179, 11693, 41728, 18296, 715, 7957, 4605, 17681, 868, 773, 50747, 375, 67884, 1817, 730, 13263, 67884, 1817, 4605, 2785, 16559, 2690, 7306, 696, 2034, 2597, 373, 62632, 715, 720, 2775, 1548, 1119, 732, 955, 1371, 732, 5547, 2870, 868, 1107, 50747, 76456, 378, 375, 67884, 1817, 657, 56794, 905, 18296, 2373, 7957, 4605, 8254, 1130, 657, 56794, 3320, 3890, 5073, 369, 16167, 942, 905, 3492, 8254, 370, 696, 1821, 1130, 8158, 373, 95473, 83791, 5073, 369, 6953, 954, 5006, 1324, 1119, 732, 370, 730, 17557, 3670, 657, 2069, 868, 1107, 50747, 375, 379, 375, 62632, 715, 657, 5308, 2088, 760, 7957, 4605, 3399, 16519, 1374, 696, 868, 1107, 50747, 375, 380, 375, 62632, 59588, 905, 4666, 16524, 18296, 905, 2993, 2126, 18296, 715, 62632, 8254, 696, 17681, 868, 657, 1107, 50747, 375, 381, 375, 6055, 49544, 730, 4769, 715, 62632, 8254, 696, 17681, 868, 657, 1107, 50747, 375, 67884, 1817, 4394, 9517, 374, 11574, 13203, 730, 5233, 696, 3125, 24961, 1548, 20772, 374, 7957, 2373, 10625, 1130, 16519, 9836, 4394, 696, 1368, 41281, 15597, 76766, 1902, 1821, 13452, 657, 53148, 5927, 374, 7957, 730, 10547, 696, 3125, 34613, 37891, 20100, 374, 11574, 18296, 2030, 730, 1202, 50048, 1286, 7514, 696, 3125, 52991, 88354, 42225, 374, 1144, 41728, 10198, 1075, 2904, 3755, 696, 15581, 22226, 7332, 730, 3644, 11019, 696, 23245, 1130, 657, 1736, 1821, 13452, 657, 942, 1987, 4183, 56386, 378, 756, 7332, 2373, 14095, 8254, 6594, 905, 3449, 14010, 375, 6169, 391, 1056, 13238, 379, 381, 377, 23807, 16769, 8254, 3117, 370, 379, 756, 8254, 6594, 905, 3449, 16559, 6594, 22437, 1030, 2373, 9428, 47201, 4183, 56386, 905, 39038, 837, 1318, 375, 380, 756, 47201, 4183, 56386, 657, 20100, 88354, 42225, 4605, 1821, 22226, 18296, 715, 8254, 696, 63149, 375, 17540, 11574, 61559, 657, 8254, 696, 3399, 853, 11030, 373, 95473, 730, 16352, 696, 30567, 2327, 2705, 6472, 3644, 696, 5547, 2870, 868, 773, 50747, 375, 381, 756, 18296, 657, 7820, 6912, 732, 20100, 88354, 42225, 4605, 2034, 853, 62632, 8254, 696, 5547, 14010, 375, 382, 373, 383, 756, 18296, 657, 5547, 1075, 3336, 4605, 15447, 373, 20100, 4978, 15214, 7075, 730, 7957, 715, 11574, 61559, 2373, 7820, 14010, 375, 17540, 7820, 13452, 657, 16352, 732, 1956, 13203, 7853, 3399, 657, 924, 634, 1579, 789, 2327, 1075, 7957, 1043, 696, 7820, 14010, 21339, 24802, 14360, 16167, 70476, 21212, 15837, 370, 384, 756, 18296, 715, 4560, 7820, 6912, 732, 7957, 4605, 2034, 853, 11574, 13203, 730, 47792, 1043, 696, 21522, 1130, 657, 47201, 4183, 56386, 4605, 39038, 14010, 375, 385, 756, 9350, 13456, 11574, 13203, 730, 47792, 1043, 634, 2257, 86183, 13452, 721, 10269, 837, 1318, 375, 6169, 391, 3519, 1821, 1126, 798, 23807, 10996, 362, 370, 52991, 88354, 42225, 67884, 1817, 730, 2472, 8771, 1965, 798, 4394, 9517, 657, 2264, 20100, 88354, 42225, 10996, 375, 67884, 1817, 41728, 20100, 88354, 42225, 657, 51257, 61559, 905, 18296, 2030, 7957, 4605, 10547, 2870, 1105, 1821, 837, 1318, 375, 51257, 61559, 905, 2599, 33388, 7179, 41728, 3063, 5414, 18296, 2030, 7514, 2870, 868, 773, 657, 924, 732, 2264, 650, 42225, 4605, 1821, 76766, 1668, 10996, 375, 3538, 3825, 13427, 801, 1539, 20100, 88354, 60621, 13766, 13456, 18296, 37305, 373, 56794, 730, 9711, 1548, 855, 3136, 634, 3656, 7957, 4605, 10547, 1130, 59985, 5337, 19850, 50747, 375, 48689, 48689, 48689, 48689, 48689, 2626, 2272, 732, 4630, 48199, 1015, 657, 924, 2373, 18073, 696, 1546, 2957, 722, 1668, 2373, 1590, 634, 1719, 14012, 2957, 15913, 1018, 3301, 11881, 608, 460, 421, 31724, 1075, 9711, 96201, 3102, 4520, 25661, 954, 15913, 3577, 634, 970, 2957, 8235, 1104, 13910, 50747, 455, 11258, 8179, 2247, 720, 16400, 1130, 5797, 50747, 455, 16874, 11574, 79184, 387, 13656, 387, 9413, 14298, 1557, 22662, 375, 3256, 376, 2740, 1817, 376, 2740, 1817, 424, 52062, 424, 7125], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53816 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:25:45 engine.py:275] Added request cmpl-965a264c515a4b9f89eec13472ef6baa-0.
INFO 02-16 23:25:45 logger.py:39] Received request cmpl-4ac26d51b7454e7e8044acf75362763f-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        \n![](https://velog.velcdn.com/images/hope1213/post/54bce33a-07d8-4d3d-96c5-6a99b9d9cdc7/image.png)\n\n웹 개발을 할 때 가장 중요한 결정 중 하나는 어떤 작업을 서버 사이드(Server-side)에서 처리할지, 클라이언트 사이드(Client-side)에서 처리할지를 결정하는 것입니다. 이 글에서는 서버 사이드와 클라이언트 사이드의 차이점, 각 방식의 장단점, 그리고 어떤 상황에서 어떤 방식을 선택해야 하는지에 대해 살펴보겠습니다.\n\n#### 서버 사이드(Server-side)란?\n\n서버 사이드 프로그래밍은 웹 서버에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 클라이언트(사용자의 브라우저)에서 요청을 받을 때 실행됩니다. 서버 사이드 스크립트는 데이터베이스에 접근하고, 데이터를 처리하고, HTML 페이지를 동적으로 생성하는 데 사용됩니다.\n즉 웹에서 서버와 클라이언트는 정해진 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.\n\n\n**주요 언어 및 기술:**\n![](https://velog.velcdn.com/images/hope1213/post/6f8e3e86-7b7d-453a-8684-da3898c25af4/image.png)\n\n- PHP\n- Python (Django, Flask)\n- Ruby (Ruby on Rails)\n- Java (Spring)\n- Node.js\n\n**장점:**\n1. **보안**: 중요한 로직과 데이터베이스 접근이 서버에서 처리되어 클라이언트에서 접근할 수 없습니다.\n2. **데이터베이스 접근**: 서버에서 직접 데이터베이스와 상호작용할 수 있어 데이터 처리와 저장이 용이합니다.\n3. **호환성**: 모든 클라이언트가 동일한 서버 측 코드를 실행하므로 브라우저 호환성 문제를 줄일 수 있습니다.\n\n**단점:**\n1. **서버 부하**: 모든 처리가 서버에서 이루어지기 때문에 서버의 부하가 증가할 수 있습니다.\n2. **응답 시간**: 클라이언트가 요청을 보내고 서버가 응답할 때까지 시간이 걸릴 수 있습니다.\n\n#### 클라이언트 사이드(Client-side)란?\n\n클라이언트 사이드 프로그래밍은 사용자의 브라우저에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 HTML, CSS, JavaScript로 작성되며, 사용자의 인터페이스를 조작하고 사용자와 상호작용합니다.\n\n![](https://velog.velcdn.com/images/hope1213/post/d9319a2f-6c80-477b-987e-2102e2d24bbe/image.png) 일반적으로 Chrome과 같은 웹브라우저는 굉장히 많은 메모리를 차지합니다.\n\n단순히 탐색을 진행했을 뿐인데 다른 프로세스에 비해 굉장히 많은 메모리를 사용한다는 점에서 의문을 가질수 있습니다. 그 이유는 현재 Web쪽에 무거운 처리 대부분은 클라이언트 사이드 언어로 작업하기 때문입니다.\n\n\n**주요 언어 및 기술:**\n- HTML\n- CSS\n- JavaScript (React, Angular, Vue.js)\n\n\n**장점:**\n1. **빠른 응답**: 서버에 요청을 보내지 않고 브라우저에서 바로 처리하므로 응답 속도가 빠릅니다.\n2. **서버 부하 감소**: 많은 작업을 클라이언트에서 처리함으로써 서버의 부담을 줄일 수 있습니다.\n3. **향상된 사용자 경험**: 애니메이션, 실시간 업데이트 등 사용자 인터페이스를 더욱 풍부하게 만들 수 있습니다.\n\n**단점:**\n1. **보안 문제**: 클라이언트 사이드 코드가 브라우저에 노출되므로 보안에 취약할 수 있습니다.\n2. **브라우저 호환성**: 다양한 브라우저에서 동일하게 작동하도록 코드 작성이 어려울 수 있습니다.\n3. **제한된 성능**: 클라이언트의 기기 성능에 따라 처리 속도가 달라질 수 있습니다.\n\n#### 언제 서버 사이드를 선택해야 할까?\n\n- **보안이 중요한 경우**: 민감한 데이터나 중요한 비즈니스 로직이 포함된 경우 서버 사이드 처리가 필요합니다.\n- **데이터베이스 작업**: 데이터베이스와의 상호작용이 빈번하게 이루어질 때 서버 사이드가 적합합니다.\n- **복잡한 처리**: 복잡한 계산이나 대량의 데이터 처리가 필요할 때 서버 측에서 처리하는 것이 좋습니다.\n\n#### 언제 클라이언트 사이드를 선택해야 할까?\n\n- **실시간 상호작용**: 사용자와의 실시간 상호작용이 중요한 경우 클라이언트 사이드 처리가 필요합니다.\n- **인터페이스 동적 처리**: 동적인 사용자 인터페이스, 애니메이션, 실시간 업데이트 등은 클라이언트 사이드에서 처리하는 것이 좋습니다.\n- **서버 부하 분산**: 서버의 부하를 줄이고자 할 때 일부 처리를 클라이언트 사이드로 이동할 수 있습니다.\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 382, 381, 427, 828, 380, 380, 426, 374, 377, 384, 429, 385, 374, 381, 429, 380, 429, 374, 386, 383, 428, 382, 374, 383, 426, 386, 386, 427, 386, 429, 386, 18748, 428, 384, 376, 18958, 375, 441, 2345, 370, 560, 560, 51257, 4003, 696, 1051, 1105, 2472, 2963, 1075, 4024, 1126, 1799, 657, 3090, 3644, 696, 18296, 16444, 369, 23423, 374, 4261, 370, 41728, 5547, 93047, 373, 56794, 16444, 369, 16483, 374, 4261, 370, 41728, 5547, 93047, 4605, 4024, 1130, 657, 924, 10996, 375, 650, 2272, 41728, 657, 18296, 16444, 2030, 56794, 16444, 730, 29289, 373, 2534, 5073, 730, 42622, 373, 2210, 3090, 2876, 41728, 3090, 5073, 696, 3329, 21046, 691, 59985, 2373, 2409, 8926, 13910, 50747, 375, 560, 560, 3673, 18296, 16444, 369, 23423, 374, 4261, 370, 1868, 392, 560, 560, 95473, 16444, 42980, 732, 11574, 18296, 41728, 12944, 13452, 657, 12291, 4605, 6016, 1130, 657, 924, 696, 4536, 14010, 375, 650, 12291, 657, 56794, 369, 16167, 942, 730, 61559, 370, 41728, 8254, 696, 1374, 696, 1105, 12944, 837, 1318, 375, 18296, 16444, 59588, 657, 51359, 2373, 10625, 48199, 373, 7957, 4605, 5547, 48199, 373, 15447, 13203, 4605, 1368, 41281, 16769, 1130, 657, 1736, 1821, 837, 1318, 375, 560, 18909, 11574, 41728, 18296, 2030, 56794, 657, 24730, 11574, 13203, 715, 5372, 32906, 696, 3868, 2109, 868, 773, 643, 375, 560, 560, 560, 2484, 42008, 10978, 2425, 3755, 387, 2484, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 383, 431, 385, 430, 380, 430, 385, 383, 374, 384, 427, 384, 429, 374, 381, 382, 380, 426, 374, 385, 383, 385, 381, 374, 3695, 380, 385, 386, 385, 428, 379, 382, 3543, 381, 376, 18958, 375, 441, 2345, 370, 560, 560, 374, 21479, 560, 374, 14138, 688, 78680, 10380, 373, 58607, 370, 560, 374, 30967, 688, 65566, 450, 807, 50760, 370, 560, 374, 11154, 688, 60192, 370, 560, 374, 19206, 375, 12716, 560, 560, 2484, 50938, 387, 2484, 560, 378, 375, 1316, 1280, 1336, 2484, 387, 2963, 1075, 54794, 1548, 51359, 10625, 634, 18296, 41728, 5547, 13452, 721, 56794, 41728, 10625, 2870, 868, 1107, 50747, 375, 560, 379, 375, 1316, 64766, 35972, 10625, 2484, 387, 18296, 41728, 3492, 51359, 2030, 14885, 14052, 2870, 868, 773, 721, 7957, 5547, 2030, 11503, 634, 26188, 14010, 375, 560, 380, 375, 1316, 1818, 2401, 1210, 2484, 387, 2904, 56794, 905, 9725, 1075, 18296, 4387, 12291, 4605, 12944, 1130, 8158, 61559, 39833, 1210, 2372, 4605, 23006, 868, 773, 50747, 375, 560, 560, 2484, 29376, 387, 2484, 560, 378, 375, 1316, 95473, 33473, 2484, 387, 2904, 5547, 905, 18296, 41728, 14572, 722, 1668, 2373, 18296, 730, 33473, 905, 5010, 2870, 868, 773, 50747, 375, 560, 379, 375, 1316, 99822, 1590, 2484, 387, 56794, 905, 8254, 696, 3399, 853, 18296, 905, 16352, 2870, 1105, 76876, 1590, 634, 20589, 868, 773, 50747, 375, 560, 560, 3673, 56794, 16444, 369, 16483, 374, 4261, 370, 1868, 392, 560, 560, 6055, 49544, 16444, 42980, 732, 7332, 730, 61559, 41728, 12944, 13452, 657, 12291, 4605, 6016, 1130, 657, 924, 696, 4536, 14010, 375, 650, 12291, 657, 15447, 373, 20772, 373, 20820, 715, 6016, 13452, 1877, 373, 7332, 730, 51299, 4605, 15597, 48199, 7332, 2030, 14885, 14052, 14010, 375, 560, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 429, 386, 380, 378, 386, 426, 379, 431, 374, 383, 428, 385, 377, 374, 381, 384, 384, 427, 374, 386, 385, 384, 430, 374, 379, 378, 377, 379, 430, 379, 429, 379, 381, 100800, 376, 18958, 375, 441, 2345, 370, 4400, 41281, 25698, 1548, 1119, 732, 11574, 21014, 962, 80649, 6121, 1180, 732, 21497, 4605, 8145, 14010, 375, 560, 560, 50375, 30694, 696, 2379, 2662, 696, 3075, 74914, 2126, 33427, 2373, 7322, 6121, 1180, 732, 21497, 4605, 1821, 1075, 4264, 1694, 41728, 15539, 696, 17640, 800, 773, 50747, 375, 855, 3071, 657, 3570, 8545, 2155, 2373, 20671, 5547, 5255, 732, 56794, 16444, 10978, 715, 3644, 76766, 1668, 10996, 375, 560, 560, 560, 2484, 42008, 10978, 2425, 3755, 387, 2484, 560, 374, 15447, 560, 374, 20772, 560, 374, 20820, 688, 72936, 373, 43047, 373, 46552, 375, 12716, 370, 560, 560, 560, 2484, 50938, 387, 2484, 560, 378, 375, 1316, 42750, 16352, 2484, 387, 18296, 2373, 8254, 696, 3399, 698, 1145, 853, 61559, 41728, 2264, 5547, 1130, 8158, 16352, 7818, 905, 92987, 375, 560, 379, 375, 1316, 95473, 33473, 7632, 2484, 387, 1180, 732, 3644, 696, 56794, 41728, 5547, 3117, 13456, 2500, 18296, 730, 4649, 696, 23006, 868, 773, 50747, 375, 560, 380, 375, 1316, 2368, 1029, 16524, 7332, 4503, 2484, 387, 25022, 373, 17557, 18240, 1222, 7332, 51299, 4605, 3892, 10482, 1130, 1060, 2069, 868, 773, 50747, 375, 560, 560, 2484, 29376, 387, 2484, 560, 378, 375, 1316, 1280, 1336, 2372, 2484, 387, 56794, 16444, 12291, 905, 61559, 2373, 12448, 13452, 8158, 13949, 2373, 17954, 2870, 868, 773, 50747, 375, 560, 379, 375, 1316, 21014, 962, 1415, 39833, 1210, 2484, 387, 2841, 1075, 61559, 41728, 9725, 1130, 1060, 13981, 1130, 37728, 12291, 6016, 634, 17717, 868, 773, 50747, 375, 560, 380, 375, 1316, 68118, 16524, 11758, 2484, 387, 56794, 730, 11241, 11758, 2373, 2414, 5547, 7818, 905, 27309, 868, 773, 50747, 375, 560, 560, 3673, 4269, 18296, 16444, 4605, 3329, 21046, 8354, 392, 560, 560, 374, 1316, 1280, 1336, 634, 2963, 1075, 2042, 2484, 387, 15480, 1075, 7957, 902, 2963, 1075, 18938, 54794, 634, 4666, 16524, 2042, 18296, 16444, 5547, 905, 2327, 14010, 375, 560, 374, 1316, 64766, 35972, 3644, 2484, 387, 51359, 2030, 730, 14885, 14052, 634, 39765, 1130, 1060, 40711, 1105, 18296, 16444, 905, 13329, 14010, 375, 560, 374, 1316, 67972, 1075, 5547, 2484, 387, 12037, 1075, 9939, 37891, 23536, 730, 7957, 5547, 905, 2327, 2870, 1105, 18296, 4387, 41728, 5547, 1130, 657, 924, 634, 1104, 50747, 375, 560, 560, 3673, 4269, 56794, 16444, 4605, 3329, 21046, 8354, 392, 560, 560, 374, 1316, 91144, 14885, 14052, 2484, 387, 7332, 2030, 730, 17557, 14885, 14052, 634, 2963, 1075, 2042, 56794, 16444, 5547, 905, 2327, 14010, 375, 560, 374, 1316, 17111, 27512, 84906, 5547, 2484, 387, 84906, 798, 7332, 51299, 373, 25022, 373, 17557, 18240, 1222, 732, 56794, 16444, 41728, 5547, 1130, 657, 924, 634, 1104, 50747, 375, 560, 374, 1316, 95473, 33473, 28350, 2484, 387, 18296, 730, 33473, 4605, 10466, 853, 942, 1051, 1105, 5720, 5547, 4605, 56794, 16444, 715, 5346, 2870, 868, 773, 50747, 375, 560], lora_request: None, prompt_adapter_request: None.
INFO 02-16 23:25:45 logger.py:39] Received request cmpl-9666249c71d84734b65184b4fce4826d-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        403 Forbidden\nRequest forbidden by administrative rules.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 381, 377, 380, 101630, 560, 13427, 37644, 956, 15021, 6827, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53822 - "POST /v1/completions HTTP/1.1" 200 OK
INFO:     127.0.0.1:53826 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:25:45 logger.py:39] Received request cmpl-27269a7b69474016b6e15d094eac8987-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8d ëª¨ë\x93\x88ì\x97\x90ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dì\x97\x90 ë\x8c\x80í\x95´ ëª\x87 ê°\x80ì§\x80 ê·¼ë³¸ì\xa0\x81ì\x9d¸ ì§\x88ë¬¸ì\x9d\x84 í\x95©ë\x8b\x88ë\x8b¤. â\x80\x94 "ê·¸ê²\x8c ë\xad\x90ì\x95¼?", "í\x81´ë\x9d¼ì\x9d´ì\x96¸í\x8a¸ ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dê³¼ ë\xad\x90ê°\x80 ë\x8b¬ë\x9d¼?", "ì\x99\x9c ì\x93¸ë§\x8cí\x95´?". ì\x97¬ê¸°ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x97¬ë\x9f¬ë¶\x84ì\x9d\x98 ì²« ì\x9b¹ì\x82¬ì\x9d´í\x8a¸ë¥¼ ë§\x8cë\x93\x9cë\x8a\x94 ë\x8d°ì\x97\x90 í\x95\x84ì\x9a\x94í\x95\x9c ê°\x80ì\x9e¥ ì\xa0\x81í\x95©í\x95\x9c í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë¥¼ ì\x96´ë\x96»ê²\x8c ì\xa0\x95í\x95\x98ë\x8a\x94 ì§\x80ì\x97\x90 ë\x8c\x80í\x95\x9c ì\xa0\x81ì\xa0\x88í\x95\x9c ì§\x80ë\x8f\x84ì\x99\x80 í\x95¨ê»\x98 ê°\x80ì\x9e¥ ì\x9d¸ê¸°ì\x9e\x88ë\x8a\x94 ì\x84\x9cë²\x84 ì\x82¬ì\x9d´ë\x93\x9c ì\x9b¹ í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë\x93¤ì\x9d\x98 ê°\x9cì\x9a\x94ë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤. ë\x81\x9dì\x9c¼ë¡\x9c ë\x86\x92ì\x9d\x80 ì\x88\x98ì¤\x80ì\x9d\x98 ì\x9b¹ ì\x84\x9cë²\x84 ë³´ì\x95\x88ì\x97\x90 ë\x8c\x80í\x95\x9c ì\x86\x8cê°\x9cë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 30176, 23681, 36870, 24687, 379, 23681, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 10760, 426, 19407, 24687, 97903, 35427, 30176, 488, 607, 44827, 30176, 23681, 36870, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 23681, 36870, 24687, 379, 23681, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 10834, 10760, 426, 100899, 15924, 41861, 49638, 30176, 20548, 49638, 15924, 17005, 378, 83073, 588, 381, 24687, 380, 11066, 30176, 16687, 30176, 488, 613, 11066, 9289, 20548, 35427, 24687, 61970, 11066, 30176, 488, 613, 23681, 21274, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375, 23076, 49638, 28092, 738, 12575, 17005, 11066, 12575, 379, 50189, 10760, 7452, 44827, 30176, 67176, 378, 83073, 588, 381, 392, 9417, 738, 4882, 488, 585, 10834, 24687, 488, 613, 378, 83073, 588, 381, 30176, 488, 613, 10834, 30176, 488, 606, 11066, 4882, 77721, 11066, 9289, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 12575, 380, 378, 83073, 588, 381, 10760, 7452, 44827, 12575, 41861, 49638, 10760, 488, 595, 61970, 24687, 488, 613, 378, 83073, 588, 381, 392, 9417, 738, 30176, 94485, 36870, 9289, 97903, 11066, 24687, 20548, 50189, 4882, 67176, 10834, 392, 14830, 9289, 488, 607, 61970, 12575, 29291, 470, 30176, 23681, 36870, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 607, 61970, 24687, 488, 615, 61970, 24687, 17558, 23681, 30176, 488, 613, 31708, 9289, 379, 39389, 9289, 488, 611, 378, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 4882, 77721, 11066, 24687, 74674, 378, 83073, 588, 381, 10760, 20548, 50189, 24687, 97903, 36870, 24687, 77721, 28092, 10760, 85395, 41861, 30176, 488, 607, 44827, 21274, 67176, 23681, 30176, 488, 610, 28092, 4882, 67176, 36870, 15924, 41861, 49638, 30176, 488, 614, 74674, 9289, 16687, 4882, 67176, 40057, 4882, 67176, 36870, 21274, 28092, 23681, 24687, 22332, 30176, 488, 614, 23681, 30176, 488, 611, 50189, 4882, 488, 585, 61970, 24687, 74674, 378, 83073, 588, 381, 9289, 488, 606, 10834, 24687, 488, 606, 41973, 12575, 379, 50189, 9289, 18737, 4882, 67176, 31708, 24687, 77721, 28092, 9289, 20548, 49638, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 36870, 9289, 16687, 30176, 22332, 4882, 67176, 36870, 9289, 20548, 49638, 24687, 488, 599, 23681, 30176, 94485, 49638, 21274, 67176, 19407, 12575, 41973, 31708, 15924, 41861, 49638, 30176, 488, 614, 74674, 9289, 488, 613, 11066, 12575, 29291, 470, 30176, 488, 614, 35427, 24687, 77721, 28092, 9289, 23681, 36870, 24687, 379, 23681, 9289, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 9289, 488, 611, 378, 21274, 28092, 23681, 24687, 22332, 30176, 488, 614, 23681, 30176, 488, 611, 50189, 4882, 488, 585, 61970, 24687, 97903, 101270, 30176, 488, 613, 31708, 15924, 41861, 36870, 30176, 488, 610, 28092, 24687, 74674, 378, 83073, 588, 381, 9289, 21301, 12575, 380, 21615, 4882, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375, 10760, 488, 585, 488, 613, 30176, 36870, 378, 83073, 588, 381, 24687, 55971, 36870, 10760, 95517, 488, 602, 30176, 488, 613, 49638, 9289, 35427, 31708, 30176, 101270, 49638, 30176, 488, 613, 31708, 9289, 488, 611, 378, 9289, 23681, 36870, 24687, 379, 23681, 10760, 380, 10834, 30176, 67176, 35427, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 36870, 9289, 95517, 50189, 12575, 41861, 36870, 24687, 74674, 378, 83073, 588, 381, 9289, 21301, 12575, 380, 21615, 4882, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53836 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:25:46 engine.py:275] Added request cmpl-4ac26d51b7454e7e8044acf75362763f-0.
INFO 02-16 23:25:46 engine.py:275] Added request cmpl-9666249c71d84734b65184b4fce4826d-0.
INFO 02-16 23:25:46 engine.py:275] Added request cmpl-27269a7b69474016b6e15d094eac8987-0.
INFO 02-16 23:25:46 logger.py:39] Received request cmpl-fb3f31dd6a1b4d1f8eabb40119cf50f8-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        서버 사이드 렌더링과 클라이언트 사이드 렌더링의 기본 개념\n웹 개발에서 페이지를 렌더링하는 방식은 크게 서버 사이드 렌더링(SSR)과 클라이언트 사이드 렌더링(CSR)으로 나뉩니다. 서버 사이드 렌더링은 서버에서 HTML을 생성하여 클라이언트로 전송하는 방식이며, 클라이언트 사이드 렌더링은 클라이언트에서 JavaScript를 사용하여 동적으로 HTML을 생성하는 방식입니다.\n왜냐하면 서버 사이드 렌더링은 초기 로딩 속도가 빠르고 SEO에 유리한 반면, 클라이언트 사이드 렌더링은 사용자 인터랙션에 따른 페이지 업데이트가 빠르다는 장점이 있기 때문입니다.\n서버 사이드 렌더링의 장점과 단점\n서버 사이드 렌더링의 가장 큰 장점은 초기 페이지 로딩 속도가 빠르다는 것입니다. 이는 검색 엔진 최적화(SEO)에 매우 유리하며, 사용자가 첫 화면을 빠르게 볼 수 있도록 합니다.\n왜냐하면 서버에서 미리 페이지를 렌더링하여 클라이언트로 전송하기 때문에, 클라이언트는 받은 HTML을 바로 렌더링할 수 있기 때문입니다.\n클라이언트 사이드 렌더링의 장점과 단점\n클라이언트 사이드 렌더링의 가장 큰 장점은 동적인 페이지 업데이트가 가능하다는 것입니다. 사용자의 인터랙션에 따라 필요한 부분만을 업데이트할 수 있어, 전체 페이지를 새로 불러오지 않아도 됩니다.\n왜냐하면 JavaScript를 사용하여 클라이언트 측에서 페이지의 일부만을 동적으로 렌더링할 수 있기 때문입니다.\n서버 사이드 렌더링과 클라이언트 사이드 렌더링의 적용 사례\n실제 프로젝트에서는 서버 사이드 렌더링과 클라이언트 사이드 렌더링을 상황에 맞게 선택하여 사용합니다. 예를 들어, SEO가 중요한 랜딩 페이지나 블로그 페이지는 서버 사이드 렌더링을 사용하는 것이 좋습니다.\n왜냐하면 이러한 페이지들은 초기 로딩 속도와 검색 엔진에서의 노출이 중요하기 때문입니다.\n결론\n서버 사이드 렌더링과 클라이언트 사이드 렌더링은 각각의 장단점이 있으며, 프로젝트의 요구 사항과 목표에 따라 적절히 선택하여 사용해야 합니다. 초기 로딩 속도와 SEO를 중시한다면 서버 사이드 렌더링을, 동적인 페이지 업데이트와 사용자 경험을 중시한다면 클라이언트 사이드 렌더링을 선택하는 것이 좋습니다.\n왜냐하면 각 렌더링 방식은 웹 애플리케이션의 성능과 사용자 경험에 직접적인 영향을 미치기 때문입니다.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 95473, 16444, 6064, 87346, 1548, 56794, 16444, 6064, 87346, 730, 4214, 9711, 560, 51257, 4003, 41728, 13203, 4605, 6064, 87346, 1130, 657, 5073, 732, 1883, 1060, 18296, 16444, 6064, 87346, 369, 5976, 411, 370, 1548, 56794, 16444, 6064, 87346, 369, 15559, 411, 370, 13456, 101070, 375, 18296, 16444, 6064, 87346, 732, 18296, 41728, 15447, 696, 16769, 22226, 2926, 31158, 25430, 24134, 1130, 657, 5073, 634, 1877, 373, 56794, 16444, 6064, 87346, 732, 56794, 41728, 20820, 4605, 1821, 22226, 1368, 41281, 15447, 696, 16769, 1130, 657, 5073, 10996, 375, 560, 42018, 18296, 16444, 6064, 87346, 732, 9377, 86183, 7818, 905, 5955, 853, 30235, 2373, 7167, 1075, 11065, 373, 56794, 16444, 6064, 87346, 732, 7332, 4517, 5840, 2481, 2373, 7408, 13203, 18240, 905, 5955, 4264, 7306, 634, 773, 722, 1668, 10996, 375, 560, 95473, 16444, 6064, 87346, 730, 7306, 1548, 13263, 560, 95473, 16444, 6064, 87346, 730, 2472, 2491, 7306, 732, 9377, 13203, 86183, 7818, 905, 5955, 4264, 924, 10996, 375, 650, 657, 6276, 12068, 64620, 369, 8562, 408, 370, 2373, 4679, 7167, 1130, 1877, 373, 7332, 905, 3257, 9836, 696, 5955, 1060, 2109, 868, 773, 37728, 1481, 375, 560, 42018, 18296, 41728, 5722, 13203, 4605, 6064, 87346, 22226, 2926, 31158, 25430, 24134, 76766, 1668, 2373, 373, 56794, 657, 1374, 732, 15447, 696, 2264, 6064, 87346, 2870, 868, 773, 722, 1668, 10996, 375, 560, 6055, 49544, 16444, 6064, 87346, 730, 7306, 1548, 13263, 560, 6055, 49544, 16444, 6064, 87346, 730, 2472, 2491, 7306, 732, 84906, 798, 13203, 18240, 905, 1995, 1130, 4264, 924, 10996, 375, 7332, 730, 4517, 5840, 2481, 2373, 2414, 2327, 1075, 2578, 1043, 696, 18240, 2870, 868, 773, 721, 373, 4532, 13203, 4605, 3643, 57102, 698, 1145, 1023, 720, 2873, 375, 560, 42018, 20820, 4605, 1821, 22226, 56794, 4387, 41728, 13203, 730, 5720, 1043, 696, 1368, 41281, 6064, 87346, 2870, 868, 773, 722, 1668, 10996, 375, 560, 95473, 16444, 6064, 87346, 1548, 56794, 16444, 6064, 87346, 730, 5552, 8224, 560, 13838, 10902, 41728, 657, 18296, 16444, 6064, 87346, 1548, 56794, 16444, 6064, 87346, 696, 2876, 2373, 1867, 1060, 3329, 22226, 1821, 14010, 375, 1288, 4605, 1944, 373, 30235, 905, 2963, 1075, 59323, 13203, 902, 5001, 13203, 657, 18296, 16444, 6064, 87346, 696, 1821, 1130, 657, 924, 634, 1104, 50747, 375, 560, 42018, 4476, 1075, 13203, 1371, 732, 9377, 86183, 7818, 2030, 6276, 12068, 41728, 730, 12448, 634, 2963, 76766, 1668, 10996, 375, 560, 29358, 560, 95473, 16444, 6064, 87346, 1548, 56794, 16444, 6064, 87346, 732, 7135, 730, 42622, 634, 773, 5718, 373, 10902, 730, 6453, 6318, 1548, 5999, 2373, 2414, 37816, 3329, 22226, 1821, 21046, 1481, 375, 9377, 86183, 7818, 2030, 30235, 4605, 34162, 1075, 4767, 18296, 16444, 6064, 87346, 696, 373, 84906, 798, 13203, 18240, 2030, 7332, 4503, 696, 34162, 1075, 4767, 56794, 16444, 6064, 87346, 696, 3329, 1130, 657, 924, 634, 1104, 50747, 375, 560, 42018, 2534, 6064, 87346, 5073, 732, 11574, 38217, 730, 11758, 1548, 7332, 4503, 2373, 3492, 1965, 798, 5282, 696, 11310, 722, 1668, 10996, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:53826 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:25:46 engine.py:275] Added request cmpl-fb3f31dd6a1b4d1f8eabb40119cf50f8-0.
INFO 02-16 23:25:47 metrics.py:455] Avg prompt throughput: 900.9 tokens/s, Avg generation throughput: 93.5 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-16 23:25:52 logger.py:39] Received request cmpl-f5e7399bdad04263b39210368b3f9455-0: prompt: '아래 정보에 기반하여, 사용자의 질문에 답하세요.\n        .php\n\n#### 결론\n\n서버 사이드와 클라이언트 사이드의 선택은 프로젝트의 특성, 요구사항, 그리고 기술적 제약에 따라 달라질 수 있습니다. 보안과 데이터 처리가 중요한 경우 서버 사이드가 적합하고, 빠른 응답과 사용자 경험이 중요한 경우 클라이언트 사이드가 유리합니다.\n\n이 글을 통해 웹 개발에서 서버 사이드와 클라이언트 사이드의 차이점을 이해하고, 어떤 상황에서 어떤 방식을 선택해야 하는지에 대한 명확한 방향성을 얻을 수 있기를 바랍니다.\n\n\n        \n        ê· ̧ê2\x8c ë\xad\x90ì\x951⁄4?\n        \n        ë°\x94ì\x9d ́í�\x88 ë3 ́í\x86їë1⁄4ë\x82 ́ì\x9d ́ì\x96 ̧í\x8a ̧ ëa\x8fì\x9d1⁄4ë\x82 ́ì\x9e\x90ë© ́, 2012년 6월 28일에 출시된 Ì\x82¬ì\x9d ́ë\x93\x9cì\x9d1⁄4ë°©ë°©ì\x9d ́ë\x82\x98ì\x9a\x94ì\x97\x90ì\x84\x9c, 2013년 5월 22일에 출시된 Ì\x82¬ì\x9d ́ë\x93\x9cì\x9d1⁄4ë°©ë°©ì\x9d ́ë\x82\x98ì\x9a\x94ì\x97\x90ì\x84\x9c, 2013년 12월 24일에 출시된 Ì\x82¬ì\x9d ́ë\x93\x9cì\x9d1⁄4ë°©ë°©ì\x9d ́ë\x82\x98ì\x9a\x94ì\x97\x90ì\x84\x9c, 2014년 1월 16일에 출시된 Ì\x82¬ì\x9d ́ë\x93\x9cì\x9d1⁄4ë°©ë°©ì\x9d ́ë\x82\x98ì\x9a\x94ì\x97\x90ì\x84\x9c, 2014년 11월 19일에 출시된 Ì\x82¬ì\x9d ́ë\x93\x9cì\x9d1⁄4ë°©ë°©ì\x9d ́ë\x82\x98ì\x9a\x94ì\x97\x90ì\x84\x9c, 2015년 1월 15일에 출시된 Ì\x82¬ì\x9d ́ë\x93\x9cì\x9d1⁄4ë°©ë°©ì\x9d ́ë\x82\x98ì\x9a\x94ì\x97\x90ì\x84\x9c, 2015년 11월 19일에 출시된 Ì\x82¬ì\x9d ́ë\x93\x9cì\x9d1⁄4ë°©ë°©ì\x9d ́ë\x82\x98ì\x9a\x94ì\x97\x90ì\x84\x9c, 2016년 1월 14일에 출시된 Ì\x82¬ì\x9d ́ë\x93\x9cì\x9d1⁄4ë°©ë°©ì\x9d ́ë\x82\x98ì\x9a\x94ì\x97\x90ì\x84\x9c, 2016년 11월 24일에 출시된 Ì\x82¬ì\x9d ́ë\x93\x9cì\x9d1⁄4ë°©ë°©ì\x9d ́ë\x82\x98ì\x9a\x94ì\x97\x90ì\x84\x9c, 2017년 1월 12일에 출시된 Ì\x82¬ì\x9d ́ë\x93\x9cì\x9d1⁄4ë°©ë°©ì\x9d ́ë\x82\x98ì\x9a\x94ì\x97\x90ì\x84\x9c, 2017년 11월 16일에 출시된 Ì\x82¬ì\x9d ́ë\x93\x9cì\x9d1⁄4ë°©ë°©ì\x9d ́ë\x82\x98ì\x9a\x94ì\x97\x90ì\x84\x9c, 2018년 1월\n\n        사용자 질문: 서버사이드 프로그래밍에 대해 알려줘 ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [13696, 3231, 2373, 8898, 22226, 373, 7332, 730, 5962, 2373, 3455, 1130, 5847, 375, 560, 27, 375, 98086, 560, 560, 3673, 12550, 560, 560, 95473, 16444, 2030, 56794, 16444, 730, 3329, 732, 10902, 730, 10116, 373, 80802, 373, 2210, 3755, 1965, 16550, 2373, 2414, 27309, 868, 773, 50747, 375, 13949, 1548, 7957, 5547, 905, 2963, 1075, 2042, 18296, 16444, 905, 13329, 48199, 373, 8570, 16352, 1548, 7332, 4503, 634, 2963, 1075, 2042, 56794, 16444, 905, 7167, 14010, 375, 560, 560, 634, 2272, 696, 2364, 11574, 4003, 41728, 18296, 16444, 2030, 56794, 16444, 730, 29289, 696, 4630, 48199, 373, 3090, 2876, 41728, 3090, 5073, 696, 3329, 21046, 691, 59985, 2373, 2047, 16248, 1075, 6319, 1210, 696, 4573, 696, 868, 773, 722, 4605, 6196, 375, 560, 560, 560, 27, 560, 27, 12575, 17005, 11066, 12575, 379, 50189, 10760, 7452, 44827, 30176, 67176, 378, 83073, 588, 381, 392, 560, 27, 560, 27, 24687, 41861, 28092, 30176, 488, 613, 10834, 4882, 28015, 35427, 10760, 380, 10834, 4882, 95517, 67461, 24687, 378, 83073, 588, 381, 24687, 488, 586, 10834, 30176, 488, 613, 10834, 30176, 488, 606, 11066, 4882, 77721, 11066, 10760, 426, 488, 599, 30176, 488, 613, 378, 83073, 588, 381, 24687, 488, 586, 10834, 30176, 488, 614, 44827, 24687, 40057, 10834, 373, 582, 379, 377, 378, 379, 2171, 582, 383, 2751, 582, 379, 385, 858, 2373, 7625, 16524, 1635, 596, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 30176, 488, 613, 378, 83073, 588, 381, 24687, 41861, 40057, 24687, 41861, 40057, 30176, 488, 613, 10834, 24687, 488, 586, 31708, 30176, 488, 610, 28092, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 582, 379, 377, 378, 380, 2171, 582, 382, 2751, 582, 379, 379, 858, 2373, 7625, 16524, 1635, 596, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 30176, 488, 613, 378, 83073, 588, 381, 24687, 41861, 40057, 24687, 41861, 40057, 30176, 488, 613, 10834, 24687, 488, 586, 31708, 30176, 488, 610, 28092, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 582, 379, 377, 378, 380, 2171, 582, 378, 379, 2751, 582, 379, 381, 858, 2373, 7625, 16524, 1635, 596, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 30176, 488, 613, 378, 83073, 588, 381, 24687, 41861, 40057, 24687, 41861, 40057, 30176, 488, 613, 10834, 24687, 488, 586, 31708, 30176, 488, 610, 28092, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 582, 379, 377, 378, 381, 2171, 582, 378, 2751, 582, 378, 383, 858, 2373, 7625, 16524, 1635, 596, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 30176, 488, 613, 378, 83073, 588, 381, 24687, 41861, 40057, 24687, 41861, 40057, 30176, 488, 613, 10834, 24687, 488, 586, 31708, 30176, 488, 610, 28092, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 582, 379, 377, 378, 381, 2171, 582, 378, 378, 2751, 582, 378, 386, 858, 2373, 7625, 16524, 1635, 596, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 30176, 488, 613, 378, 83073, 588, 381, 24687, 41861, 40057, 24687, 41861, 40057, 30176, 488, 613, 10834, 24687, 488, 586, 31708, 30176, 488, 610, 28092, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 582, 379, 377, 378, 382, 2171, 582, 378, 2751, 582, 378, 382, 858, 2373, 7625, 16524, 1635, 596, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 30176, 488, 613, 378, 83073, 588, 381, 24687, 41861, 40057, 24687, 41861, 40057, 30176, 488, 613, 10834, 24687, 488, 586, 31708, 30176, 488, 610, 28092, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 582, 379, 377, 378, 382, 2171, 582, 378, 378, 2751, 582, 378, 386, 858, 2373, 7625, 16524, 1635, 596, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 30176, 488, 613, 378, 83073, 588, 381, 24687, 41861, 40057, 24687, 41861, 40057, 30176, 488, 613, 10834, 24687, 488, 586, 31708, 30176, 488, 610, 28092, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 582, 379, 377, 378, 383, 2171, 582, 378, 2751, 582, 378, 381, 858, 2373, 7625, 16524, 1635, 596, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 30176, 488, 613, 378, 83073, 588, 381, 24687, 41861, 40057, 24687, 41861, 40057, 30176, 488, 613, 10834, 24687, 488, 586, 31708, 30176, 488, 610, 28092, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 582, 379, 377, 378, 383, 2171, 582, 378, 378, 2751, 582, 379, 381, 858, 2373, 7625, 16524, 1635, 596, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 30176, 488, 613, 378, 83073, 588, 381, 24687, 41861, 40057, 24687, 41861, 40057, 30176, 488, 613, 10834, 24687, 488, 586, 31708, 30176, 488, 610, 28092, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 582, 379, 377, 378, 384, 2171, 582, 378, 2751, 582, 378, 379, 858, 2373, 7625, 16524, 1635, 596, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 30176, 488, 613, 378, 83073, 588, 381, 24687, 41861, 40057, 24687, 41861, 40057, 30176, 488, 613, 10834, 24687, 488, 586, 31708, 30176, 488, 610, 28092, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 582, 379, 377, 378, 384, 2171, 582, 378, 378, 2751, 582, 378, 383, 858, 2373, 7625, 16524, 1635, 596, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 30176, 488, 613, 378, 83073, 588, 381, 24687, 41861, 40057, 24687, 41861, 40057, 30176, 488, 613, 10834, 24687, 488, 586, 31708, 30176, 488, 610, 28092, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 582, 379, 377, 378, 385, 2171, 582, 378, 2751, 560, 560, 27, 16167, 942, 5962, 387, 18296, 37305, 42980, 2373, 2409, 3504, 15887, 582], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:54788 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:25:52 engine.py:275] Added request cmpl-f5e7399bdad04263b39210368b3f9455-0.
INFO 02-16 23:26:02 metrics.py:455] Avg prompt throughput: 61.8 tokens/s, Avg generation throughput: 40.3 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:26:12 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:27:33 launcher.py:59] Shutting down FastAPI HTTP server.
INFO 02-16 23:27:33 multiproc_worker_utils.py:141] Terminating local vLLM worker processes
[1;36m(VllmWorkerProcess pid=3983522)[0;0m INFO 02-16 23:27:33 multiproc_worker_utils.py:253] Worker exiting
[1;36m(VllmWorkerProcess pid=3983523)[0;0m INFO 02-16 23:27:33 multiproc_worker_utils.py:253] Worker exiting
[1;36m(VllmWorkerProcess pid=3983524)[0;0m INFO 02-16 23:27:33 multiproc_worker_utils.py:253] Worker exiting
[rank0]:[W216 23:27:35.714603250 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
INFO:     Shutting down
INFO:     Waiting for application shutdown.
INFO:     Application shutdown complete.
/opt/anaconda3/lib/python3.12/multiprocessing/resource_tracker.py:254: UserWarning: resource_tracker: There appear to be 1 leaked shared_memory objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
INFO 02-16 23:28:04 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 23:28:05 api_server.py:840] vLLM API server version 0.7.2
INFO 02-16 23:28:05 api_server.py:841] args: Namespace(subparser='serve', model_tag='snunlp/bigdata_gemma2_9b_dora', config='', host=None, port=8000, uvicorn_log_level='info', allow_credentials=False, allowed_origins=['*'], allowed_methods=['*'], allowed_headers=['*'], api_key='token-snuintern2025', lora_modules=None, prompt_adapters=None, chat_template=None, chat_template_content_format='auto', response_role='assistant', ssl_keyfile=None, ssl_certfile=None, ssl_ca_certs=None, ssl_cert_reqs=0, root_path=None, middleware=[], return_tokens_as_token_ids=False, disable_frontend_multiprocessing=False, enable_request_id_headers=False, enable_auto_tool_choice=False, enable_reasoning=False, reasoning_parser=None, tool_call_parser=None, tool_parser_plugin='', model='snunlp/bigdata_gemma2_9b_dora', task='auto', tokenizer=None, skip_tokenizer_init=False, revision=None, code_revision=None, tokenizer_revision=None, tokenizer_mode='auto', trust_remote_code=False, allowed_local_media_path=None, download_dir=None, load_format='auto', config_format=<ConfigFormat.AUTO: 'auto'>, dtype='auto', kv_cache_dtype='auto', max_model_len=None, guided_decoding_backend='xgrammar', logits_processor_pattern=None, model_impl='auto', distributed_executor_backend=None, pipeline_parallel_size=1, tensor_parallel_size=4, max_parallel_loading_workers=None, ray_workers_use_nsight=False, block_size=None, enable_prefix_caching=None, disable_sliding_window=False, use_v2_block_manager=True, num_lookahead_slots=0, seed=0, swap_space=4, cpu_offload_gb=0, gpu_memory_utilization=0.9, num_gpu_blocks_override=None, max_num_batched_tokens=None, max_num_seqs=None, max_logprobs=20, disable_log_stats=False, quantization=None, rope_scaling=None, rope_theta=None, hf_overrides=None, enforce_eager=False, max_seq_len_to_capture=8192, disable_custom_all_reduce=False, tokenizer_pool_size=0, tokenizer_pool_type='ray', tokenizer_pool_extra_config=None, limit_mm_per_prompt=None, mm_processor_kwargs=None, disable_mm_preprocessor_cache=False, enable_lora=False, enable_lora_bias=False, max_loras=1, max_lora_rank=16, lora_extra_vocab_size=256, lora_dtype='auto', long_lora_scaling_factors=None, max_cpu_loras=None, fully_sharded_loras=False, enable_prompt_adapter=False, max_prompt_adapters=1, max_prompt_adapter_token=0, device='auto', num_scheduler_steps=1, multi_step_stream_outputs=True, scheduler_delay_factor=0.0, enable_chunked_prefill=None, speculative_model=None, speculative_model_quantization=None, num_speculative_tokens=None, speculative_disable_mqa_scorer=False, speculative_draft_tensor_parallel_size=None, speculative_max_model_len=None, speculative_disable_by_batch_size=None, ngram_prompt_lookup_max=None, ngram_prompt_lookup_min=None, spec_decoding_acceptance_method='rejection_sampler', typical_acceptance_sampler_posterior_threshold=None, typical_acceptance_sampler_posterior_alpha=None, disable_logprobs_during_spec_decoding=None, model_loader_extra_config=None, ignore_patterns=[], preemption_mode=None, served_model_name=None, qlora_adapter_name_or_path=None, otlp_traces_endpoint=None, collect_detailed_traces=None, disable_async_output_proc=False, scheduling_policy='fcfs', override_neuron_config=None, override_pooler_config=None, compilation_config=None, kv_transfer_config=None, worker_cls='auto', generation_config=None, override_generation_config=None, enable_sleep_mode=False, calculate_kv_scales=False, disable_log_requests=False, max_log_len=None, disable_fastapi_docs=False, enable_prompt_tokens_details=False, dispatch_function=<function serve at 0x7f9b6916bec0>)
INFO 02-16 23:28:05 api_server.py:206] Started engine process with PID 3986199
INFO 02-16 23:28:09 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 23:28:15 config.py:542] This model supports multiple tasks: {'embed', 'reward', 'score', 'classify', 'generate'}. Defaulting to 'generate'.
INFO 02-16 23:28:15 config.py:1401] Defaulting to use mp for distributed inference
INFO 02-16 23:28:20 config.py:542] This model supports multiple tasks: {'embed', 'reward', 'score', 'generate', 'classify'}. Defaulting to 'generate'.
INFO 02-16 23:28:20 config.py:1401] Defaulting to use mp for distributed inference
INFO 02-16 23:28:20 llm_engine.py:234] Initializing a V0 LLM engine (v0.7.2) with config: model='snunlp/bigdata_gemma2_9b_dora', speculative_config=None, tokenizer='snunlp/bigdata_gemma2_9b_dora', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=4, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=snunlp/bigdata_gemma2_9b_dora, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=True, 
WARNING 02-16 23:28:21 multiproc_worker_utils.py:300] Reducing Torch parallelism from 40 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
INFO 02-16 23:28:21 custom_cache_manager.py:19] Setting Triton cache manager to: vllm.triton_utils.custom_cache_manager:CustomCacheManager
INFO 02-16 23:28:23 cuda.py:230] Using Flash Attention backend.
INFO 02-16 23:28:25 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 23:28:25 __init__.py:190] Automatically detected platform cuda.
INFO 02-16 23:28:25 __init__.py:190] Automatically detected platform cuda.
[1;36m(VllmWorkerProcess pid=3986724)[0;0m INFO 02-16 23:28:26 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3986726)[0;0m INFO 02-16 23:28:26 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3986725)[0;0m INFO 02-16 23:28:27 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3986724)[0;0m INFO 02-16 23:28:27 cuda.py:230] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=3986726)[0;0m INFO 02-16 23:28:27 cuda.py:230] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=3986725)[0;0m INFO 02-16 23:28:28 cuda.py:230] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=3986725)[0;0m INFO 02-16 23:28:29 utils.py:950] Found nccl from library libnccl.so.2
INFO 02-16 23:28:29 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3986724)[0;0m INFO 02-16 23:28:29 utils.py:950] Found nccl from library libnccl.so.2
INFO 02-16 23:28:29 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3986725)[0;0m INFO 02-16 23:28:29 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3986724)[0;0m INFO 02-16 23:28:29 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3986726)[0;0m INFO 02-16 23:28:29 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3986726)[0;0m INFO 02-16 23:28:29 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3986726)[0;0m WARNING 02-16 23:28:30 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
[1;36m(VllmWorkerProcess pid=3986725)[0;0m WARNING 02-16 23:28:30 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
WARNING 02-16 23:28:30 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
[1;36m(VllmWorkerProcess pid=3986724)[0;0m WARNING 02-16 23:28:30 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
INFO 02-16 23:28:30 shm_broadcast.py:258] vLLM message queue communication handle: Handle(connect_ip='127.0.0.1', local_reader_ranks=[1, 2, 3], buffer_handle=(3, 4194304, 6, 'psm_dbf045e8'), local_subscribe_port=51527, remote_subscribe_port=None)
INFO 02-16 23:28:30 model_runner.py:1110] Starting to load model snunlp/bigdata_gemma2_9b_dora...
[1;36m(VllmWorkerProcess pid=3986724)[0;0m INFO 02-16 23:28:30 model_runner.py:1110] Starting to load model snunlp/bigdata_gemma2_9b_dora...
[1;36m(VllmWorkerProcess pid=3986726)[0;0m INFO 02-16 23:28:30 model_runner.py:1110] Starting to load model snunlp/bigdata_gemma2_9b_dora...
[1;36m(VllmWorkerProcess pid=3986725)[0;0m INFO 02-16 23:28:30 model_runner.py:1110] Starting to load model snunlp/bigdata_gemma2_9b_dora...
[1;36m(VllmWorkerProcess pid=3986725)[0;0m INFO 02-16 23:28:30 weight_utils.py:252] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=3986726)[0;0m INFO 02-16 23:28:30 weight_utils.py:252] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=3986724)[0;0m INFO 02-16 23:28:30 weight_utils.py:252] Using model weights format ['*.safetensors']
INFO 02-16 23:28:30 weight_utils.py:252] Using model weights format ['*.safetensors']
Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:00<00:01,  2.15it/s]
[1;36m(VllmWorkerProcess pid=3986725)[0;0m INFO 02-16 23:28:33 model_runner.py:1115] Loading model weights took 4.3518 GB
Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:01<00:01,  1.93it/s]
[1;36m(VllmWorkerProcess pid=3986726)[0;0m INFO 02-16 23:28:34 model_runner.py:1115] Loading model weights took 4.3518 GB
Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:01<00:00,  2.08it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:02<00:00,  1.96it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:02<00:00,  1.98it/s]

INFO 02-16 23:28:35 model_runner.py:1115] Loading model weights took 4.3518 GB
[1;36m(VllmWorkerProcess pid=3986724)[0;0m INFO 02-16 23:28:35 model_runner.py:1115] Loading model weights took 4.3518 GB
[1;36m(VllmWorkerProcess pid=3986725)[0;0m INFO 02-16 23:28:41 worker.py:267] Memory profiling takes 5.23 seconds
[1;36m(VllmWorkerProcess pid=3986725)[0;0m INFO 02-16 23:28:41 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3986725)[0;0m INFO 02-16 23:28:41 worker.py:267] model weights take 4.35GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.50GiB; the rest of the memory reserved for KV Cache is 30.32GiB.
[1;36m(VllmWorkerProcess pid=3986726)[0;0m INFO 02-16 23:28:41 worker.py:267] Memory profiling takes 5.24 seconds
[1;36m(VllmWorkerProcess pid=3986726)[0;0m INFO 02-16 23:28:41 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3986726)[0;0m INFO 02-16 23:28:41 worker.py:267] model weights take 4.35GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.50GiB; the rest of the memory reserved for KV Cache is 30.32GiB.
[1;36m(VllmWorkerProcess pid=3986724)[0;0m INFO 02-16 23:28:41 worker.py:267] Memory profiling takes 5.28 seconds
[1;36m(VllmWorkerProcess pid=3986724)[0;0m INFO 02-16 23:28:41 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3986724)[0;0m INFO 02-16 23:28:41 worker.py:267] model weights take 4.35GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.50GiB; the rest of the memory reserved for KV Cache is 30.32GiB.
INFO 02-16 23:28:41 worker.py:267] Memory profiling takes 5.36 seconds
INFO 02-16 23:28:41 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
INFO 02-16 23:28:41 worker.py:267] model weights take 4.35GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 2.38GiB; the rest of the memory reserved for KV Cache is 28.44GiB.
INFO 02-16 23:28:41 executor_base.py:110] # CUDA blocks: 22188, # CPU blocks: 3120
INFO 02-16 23:28:41 executor_base.py:115] Maximum concurrency for 8192 tokens per request: 43.34x
[1;36m(VllmWorkerProcess pid=3986725)[0;0m INFO 02-16 23:28:44 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 02-16 23:28:44 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s][1;36m(VllmWorkerProcess pid=3986724)[0;0m INFO 02-16 23:28:44 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=3986726)[0;0m INFO 02-16 23:28:44 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:01<00:49,  1.46s/it]Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:02<00:34,  1.06s/it]Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:02<00:28,  1.12it/s]Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:03<00:25,  1.22it/s]Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:04<00:23,  1.25it/s]Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:05<00:22,  1.30it/s]Capturing CUDA graph shapes:  20%|██        | 7/35 [00:05<00:20,  1.35it/s]Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:06<00:19,  1.37it/s]Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:07<00:19,  1.35it/s]Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:07<00:18,  1.38it/s]Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:08<00:17,  1.37it/s]Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:09<00:16,  1.40it/s]Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:10<00:15,  1.39it/s]Capturing CUDA graph shapes:  40%|████      | 14/35 [00:10<00:14,  1.40it/s]Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:11<00:14,  1.39it/s]Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:12<00:13,  1.41it/s]Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:12<00:12,  1.41it/s]Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:13<00:11,  1.43it/s]Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:14<00:11,  1.41it/s]Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:15<00:10,  1.42it/s]Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:15<00:09,  1.42it/s]Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:16<00:09,  1.40it/s]Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:17<00:08,  1.42it/s]Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:17<00:07,  1.42it/s]Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:18<00:07,  1.42it/s]Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:19<00:06,  1.42it/s]Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:19<00:05,  1.42it/s]Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:20<00:04,  1.42it/s]Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:21<00:04,  1.42it/s]Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:22<00:03,  1.40it/s]Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:22<00:02,  1.41it/s]Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:23<00:02,  1.41it/s]Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:24<00:01,  1.40it/s]Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:24<00:00,  1.42it/s][1;36m(VllmWorkerProcess pid=3986725)[0;0m INFO 02-16 23:29:11 model_runner.py:1562] Graph capturing finished in 27 secs, took 1.72 GiB
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:26<00:00,  1.09s/it]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:26<00:00,  1.30it/s]
INFO 02-16 23:29:11 model_runner.py:1562] Graph capturing finished in 27 secs, took 1.72 GiB
[1;36m(VllmWorkerProcess pid=3986724)[0;0m INFO 02-16 23:29:11 model_runner.py:1562] Graph capturing finished in 27 secs, took 1.72 GiB
[1;36m(VllmWorkerProcess pid=3986726)[0;0m INFO 02-16 23:29:11 model_runner.py:1562] Graph capturing finished in 27 secs, took 1.72 GiB
INFO 02-16 23:29:11 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 35.94 seconds
INFO 02-16 23:29:12 api_server.py:756] Using supplied chat template:
INFO 02-16 23:29:12 api_server.py:756] None
INFO 02-16 23:29:12 launcher.py:21] Available routes are:
INFO 02-16 23:29:12 launcher.py:29] Route: /openapi.json, Methods: HEAD, GET
INFO 02-16 23:29:12 launcher.py:29] Route: /docs, Methods: HEAD, GET
INFO 02-16 23:29:12 launcher.py:29] Route: /docs/oauth2-redirect, Methods: HEAD, GET
INFO 02-16 23:29:12 launcher.py:29] Route: /redoc, Methods: HEAD, GET
INFO 02-16 23:29:12 launcher.py:29] Route: /health, Methods: GET
INFO 02-16 23:29:12 launcher.py:29] Route: /ping, Methods: GET, POST
INFO 02-16 23:29:12 launcher.py:29] Route: /tokenize, Methods: POST
INFO 02-16 23:29:12 launcher.py:29] Route: /detokenize, Methods: POST
INFO 02-16 23:29:12 launcher.py:29] Route: /v1/models, Methods: GET
INFO 02-16 23:29:12 launcher.py:29] Route: /version, Methods: GET
INFO 02-16 23:29:12 launcher.py:29] Route: /v1/chat/completions, Methods: POST
INFO 02-16 23:29:12 launcher.py:29] Route: /v1/completions, Methods: POST
INFO 02-16 23:29:12 launcher.py:29] Route: /v1/embeddings, Methods: POST
INFO 02-16 23:29:12 launcher.py:29] Route: /pooling, Methods: POST
INFO 02-16 23:29:12 launcher.py:29] Route: /score, Methods: POST
INFO 02-16 23:29:12 launcher.py:29] Route: /v1/score, Methods: POST
INFO 02-16 23:29:12 launcher.py:29] Route: /rerank, Methods: POST
INFO 02-16 23:29:12 launcher.py:29] Route: /v1/rerank, Methods: POST
INFO 02-16 23:29:12 launcher.py:29] Route: /v2/rerank, Methods: POST
INFO 02-16 23:29:12 launcher.py:29] Route: /invocations, Methods: POST
INFO:     Started server process [3986030]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
ERROR 02-16 23:29:44 serving_chat.py:126] Error with model object='error' message='The model `snunlp/bigdata_exaone3_7.8b_fft` does not exist.' type='NotFoundError' param=None code=404
INFO:     127.0.0.1:45920 - "POST /v1/chat/completions HTTP/1.1" 404 Not Found
INFO 02-16 23:30:28 chat_utils.py:332] Detected the chat template content format to be 'string'. You can set `--chat-template-content-format` to override this.
INFO 02-16 23:30:28 logger.py:39] Received request chatcmpl-b623eaec8fff46f19096237a6405f795: prompt: '<bos><start_of_turn>user\n세종대왕에 대해 알려줘.<end_of_turn>\n<start_of_turn>model\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=8173, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: None, lora_request: None, prompt_adapter_request: None.
INFO 02-16 23:30:28 engine.py:275] Added request chatcmpl-b623eaec8fff46f19096237a6405f795.
INFO 02-16 23:30:28 metrics.py:455] Avg prompt throughput: 2.9 tokens/s, Avg generation throughput: 0.2 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:30:33 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 95.8 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO:     127.0.0.1:55132 - "POST /v1/chat/completions HTTP/1.1" 200 OK
INFO 02-16 23:30:44 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 7.7 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:30:54 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:31:12 logger.py:39] Received request cmpl-b38c3d13a0cc4e149f48d20c8be7c8aa-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 서버사이드 프로그래밍에 대해 알려줘 <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236179, 142192, 78183, 238994, 244669, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:34344 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:31:12 engine.py:275] Added request cmpl-b38c3d13a0cc4e149f48d20c8be7c8aa-0.
INFO 02-16 23:31:13 metrics.py:455] Avg prompt throughput: 148.7 tokens/s, Avg generation throughput: 0.1 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.3%, CPU KV cache usage: 0.0%.
INFO 02-16 23:31:24 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 8.6 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:31:34 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:32:54 logger.py:39] Received request cmpl-6d4da6551598494dbbb936929e7cafb5-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 서버사이드 프로그래밍에 대해 알려줘 <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236179, 142192, 78183, 238994, 244669, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:39306 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:32:54 engine.py:275] Added request cmpl-6d4da6551598494dbbb936929e7cafb5-0.
INFO 02-16 23:32:54 metrics.py:455] Avg prompt throughput: 122.1 tokens/s, Avg generation throughput: 0.1 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.3%, CPU KV cache usage: 0.0%.
INFO 02-16 23:32:55 logger.py:39] Received request cmpl-8aacfecd6aa444c5b9d8d7d712020d4e-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 23:32:55 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍의 정의 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235304, 235292, 235304, 235284, 235292, 235308, 235308, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236137, 35467, 236137, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:39306 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:32:55 engine.py:275] Added request cmpl-8aacfecd6aa444c5b9d8d7d712020d4e-0.
INFO 02-16 23:32:56 logger.py:39] Received request cmpl-d7fe8394fa1d4585ae1892c5d351f2f3-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 23:32:55 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍 언어 예시 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235304, 235292, 235304, 235284, 235292, 235308, 235308, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 171754, 236770, 71277, 236569, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:39306 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:32:56 engine.py:275] Added request cmpl-d7fe8394fa1d4585ae1892c5d351f2f3-0.
INFO 02-16 23:32:56 logger.py:39] Received request cmpl-7d11515908824a808cfcc8d27e543fe4-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 23:32:56 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍의 장단점 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235304, 235292, 235304, 235284, 235292, 235308, 235318, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236137, 60318, 238335, 239158, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:39306 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:32:56 engine.py:275] Added request cmpl-7d11515908824a808cfcc8d27e543fe4-0.
INFO 02-16 23:32:57 logger.py:39] Received request cmpl-5e636e847bf04baea0a3e8afe8e0e999-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 23:32:57 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍의 예시 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235304, 235292, 235304, 235284, 235292, 235308, 235324, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236137, 71277, 236569, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:39306 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:32:57 engine.py:275] Added request cmpl-5e636e847bf04baea0a3e8afe8e0e999-0.
INFO 02-16 23:33:00 logger.py:39] Received request cmpl-3d533808daea4ed0a25fe0e8451337f3-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        웹 프로그래밍에서서버 사이드/클리아언트 사이드는 엄청난 의미를 가진다.왜냐하면 어느쪽에 중심을 두느냐에 따라 프로젝트의 방향이 완전히 다르기때문이다.1. 클라이언트 사이드(Client-Side)-클라이언트(사용자) 측에서 처리하는 것.클라이언트가 입력한것을 수신해서 HTML로 만들어서 크롬과 같은 어플리케이션에 해석해서 표시.대표적으로 자바스크립트(Javascript)이 있다.2. 서버 사이드(Server-Side)-서버(제공자) 측에서 즉시 처리하는 것.서버 사이드는클라이언트로 보낼\xa0웹 페이지(HTML,\xa0JavaScript 등이 담긴)를\xa0만들며,정말 중요한 작업들(사용자 유효성, DB 관련 등)을 수행한다.대표적인 언어는 Java, PHP, Ruby, Python, Node.js 등을 언급할 수 있다.즉,서버와클라이언트는 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.클라이언트 사이드 언어를 다루고 그에 관련된 개발자를= 프론트 엔드서버 사이드 언어를 다루고 그에 관련된 개발자= 백엔드라 부른다.Recommand Posting For you Guys* PHP란 대체 무엇인가..?* 프론트 개발자가 알아야할 기술이 뭐지?* 프로토컬, IP, 도메인네임 그게 다 뭔데?* JSON 대체 뭐하는 애야..?', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 237941, 58510, 93674, 238608, 243903, 22803, 236554, 238364, 160590, 237135, 235283, 239483, 140801, 239753, 236859, 160590, 237135, 236214, 235248, 241490, 239151, 240198, 223616, 236791, 23248, 237589, 236039, 235265, 242940, 243383, 123472, 53355, 241039, 240734, 236179, 47250, 239308, 236392, 93828, 241039, 243383, 236179, 156976, 132880, 242989, 236859, 236137, 51806, 240112, 235832, 123248, 232523, 32048, 238500, 236386, 238740, 237465, 61742, 235265, 235274, 235265, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 7817, 239483, 122717, 239753, 236859, 235278, 236417, 237545, 236645, 235275, 235248, 241656, 22803, 168788, 40284, 29599, 235265, 239483, 122717, 239753, 236859, 236361, 120618, 236511, 237506, 236392, 22618, 237502, 206666, 19319, 236375, 128047, 236770, 236554, 94177, 244875, 237233, 132929, 53355, 239135, 236432, 239814, 146689, 236179, 56787, 239465, 206666, 100280, 236569, 235265, 236800, 238946, 90621, 34103, 238131, 161615, 239837, 236859, 235278, 95661, 235275, 235832, 69581, 235265, 235284, 235265, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 7817, 236554, 238364, 235278, 236939, 237495, 236645, 235275, 235248, 241656, 22803, 235248, 242579, 236569, 168788, 40284, 29599, 235265, 236554, 238364, 160590, 237135, 236214, 239483, 122717, 239753, 236859, 236375, 29283, 245186, 236338, 237941, 106191, 235278, 11271, 235269, 236338, 44980, 73143, 235832, 205799, 241615, 235275, 236791, 236338, 237598, 237290, 238986, 235269, 236864, 238989, 215134, 236511, 211896, 237290, 235278, 236417, 237545, 236645, 46355, 241078, 237154, 235269, 13986, 187003, 73143, 235275, 236392, 22618, 238356, 78949, 235265, 236800, 238946, 85024, 171754, 236770, 236214, 12071, 235269, 29617, 235269, 39671, 235269, 21237, 235269, 13116, 235265, 2833, 73143, 236392, 171754, 240115, 238080, 22618, 69581, 235265, 242579, 235269, 236554, 238364, 237807, 239483, 122717, 239753, 236859, 236214, 31288, 106191, 236375, 55154, 236375, 134512, 242780, 236405, 239814, 146689, 236392, 153422, 236464, 181539, 22618, 69581, 235265, 239483, 122717, 239753, 236859, 160590, 237135, 171754, 236770, 236791, 32048, 238949, 236464, 20350, 236179, 187003, 238602, 227613, 236645, 236791, 235293, 58510, 240405, 236859, 209560, 237135, 236554, 238364, 160590, 237135, 171754, 236770, 236791, 32048, 238949, 236464, 20350, 236179, 187003, 238602, 227613, 236645, 235293, 124559, 241167, 237135, 236950, 43761, 239296, 236039, 235265, 987, 6000, 121514, 1699, 692, 36836, 235287, 29617, 240136, 26801, 238308, 60331, 242513, 236589, 236361, 95879, 235287, 58510, 240405, 236859, 227613, 184819, 78183, 236655, 238305, 238080, 213222, 235832, 235248, 245365, 236183, 158757, 132880, 238772, 241725, 235269, 9790, 235269, 50316, 238519, 236589, 239156, 238700, 20350, 237458, 32048, 235248, 247291, 238266, 158757, 11384, 26801, 238308, 235248, 245365, 40284, 122096, 238305, 95879], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:38010 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:00 engine.py:275] Added request cmpl-3d533808daea4ed0a25fe0e8451337f3-0.
INFO 02-16 23:33:00 logger.py:39] Received request cmpl-ec48ed51942c4ce4b5f6326b2c91500e-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        \n![](https://velog.velcdn.com/images/hope1213/post/54bce33a-07d8-4d3d-96c5-6a99b9d9cdc7/image.png)\n\n웹 개발을 할 때 가장 중요한 결정 중 하나는 어떤 작업을 서버 사이드(Server-side)에서 처리할지, 클라이언트 사이드(Client-side)에서 처리할지를 결정하는 것입니다. 이 글에서는 서버 사이드와 클라이언트 사이드의 차이점, 각 방식의 장단점, 그리고 어떤 상황에서 어떤 방식을 선택해야 하는지에 대해 살펴보겠습니다.\n\n#### 서버 사이드(Server-side)란?\n\n서버 사이드 프로그래밍은 웹 서버에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 클라이언트(사용자의 브라우저)에서 요청을 받을 때 실행됩니다. 서버 사이드 스크립트는 데이터베이스에 접근하고, 데이터를 처리하고, HTML 페이지를 동적으로 생성하는 데 사용됩니다.\n즉 웹에서 서버와 클라이언트는 정해진 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.\n\n\n**주요 언어 및 기술:**\n![](https://velog.velcdn.com/images/hope1213/post/6f8e3e86-7b7d-453a-8684-da3898c25af4/image.png)\n\n- PHP\n- Python (Django, Flask)\n- Ruby (Ruby on Rails)\n- Java (Spring)\n- Node.js\n\n**장점:**\n1. **보안**: 중요한 로직과 데이터베이스 접근이 서버에서 처리되어 클라이언트에서 접근할 수 없습니다.\n2. **데이터베이스 접근**: 서버에서 직접 데이터베이스와 상호작용할 수 있어 데이터 처리와 저장이 용이합니다.\n3. **호환성**: 모든 클라이언트가 동일한 서버 측 코드를 실행하므로 브라우저 호환성 문제를 줄일 수 있습니다.\n\n**단점:**\n1. **서버 부하**: 모든 처리가 서버에서 이루어지기 때문에 서버의 부하가 증가할 수 있습니다.\n2. **응답 시간**: 클라이언트가 요청을 보내고 서버가 응답할 때까지 시간이 걸릴 수 있습니다.\n\n#### 클라이언트 사이드(Client-side)란?\n\n클라이언트 사이드 프로그래밍은 사용자의 브라우저에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 HTML, CSS, JavaScript로 작성되며, 사용자의 인터페이스를 조작하고 사용자와 상호작용합니다.\n\n![](https://velog.velcdn.com/images/hope1213/post/d9319a2f-6c80-477b-987e-2102e2d24bbe/image.png) 일반적으로 Chrome과 같은 웹브라우저는 굉장히 많은 메모리를 차지합니다.\n\n단순히 탐색을 진행했을 뿐인데 다른 프로세스에 비해 굉장히 많은 메모리를 사용한다는 점에서 의문을 가질수 있습니다. 그 이유는 현재 Web쪽에 무거운 처리 대부분은 클라이언트 사이드 언어로 작업하기 때문입니다.\n\n\n**주요 언어 및 기술:**\n- HTML\n- CSS\n- JavaScript (React, Angular, Vue.js)\n\n\n**장점:**\n1. **빠른 응답**: 서버에 요청을 보내지 않고 브라우저에서 바로 처리하므로 응답 속도가 빠릅니다.\n2. **서버 부하 감소**: 많은 작업을 클라이언트에서 처리함으로써 서버의 부담을 줄일 수 있습니다.\n3. **향상된 사용자 경험**: 애니메이션, 실시간 업데이트 등 사용자 인터페이스를 더욱 풍부하게 만들 수 있습니다.\n\n**단점:**\n1. **보안 문제**: 클라이언트 사이드 코드가 브라우저에 노출되므로 보안에 취약할 수 있습니다.\n2. **브라우저 호환성**: 다양한 브라우저에서 동일하게 작동하도록 코드 작성이 어려울 수 있습니다.\n3. **제한된 성능**: 클라이언트의 기기 성능에 따라 처리 속도가 달라질 수 있습니다.\n\n#### 언제 서버 사이드를 선택해야 할까?\n\n- **보안이 중요한 경우**: 민감한 데이터나 중요한 비즈니스 로직이 포함된 경우 서버 사이드 처리가 필요합니다.\n- **데이터베이스 작업**: 데이터베이스와의 상호작용이 빈번하게 이루어질 때 서버 사이드가 적합합니다.\n- **복잡한 처리**: 복잡한 계산이나 대량의 데이터 처리가 필요할 때 서버 측에서 처리하는 것이 좋습니다.\n\n#### 언제 클라이언트 사이드를 선택해야 할까?\n\n- **실시간 상호작용**: 사용자와의 실시간 상호작용이 중요한 경우 클라이언트 사이드 처리가 필요합니다.\n- **인터페이스 동적 처리**: 동적인 사용자 인터페이스, 애니메이션, 실시간 업데이트 등은 클라이언트 사이드에서 처리하는 것이 좋습니다.\n- **서버 부하 분산**: 서버의 부하를 줄이고자 할 때 일부 처리를 클라이언트 사이드로 이동할 수 있습니다.\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 32463, 235274, 235284, 235274, 235304, 235283, 2729, 235283, 235308, 235310, 235268, 532, 235304, 235304, 235250, 235290, 235276, 235324, 235258, 235321, 235290, 235310, 235258, 235304, 235258, 235290, 235315, 235318, 235260, 235308, 235290, 235318, 235250, 235315, 235315, 235268, 235315, 235258, 235315, 88911, 235324, 235283, 2502, 235265, 7424, 235275, 109, 237941, 227613, 236392, 69225, 54715, 126277, 215134, 236511, 72510, 236864, 47250, 113859, 236214, 53355, 242251, 211896, 236392, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 2043, 235275, 22803, 168788, 238080, 236183, 235269, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 2043, 235275, 22803, 168788, 238080, 231588, 72510, 236864, 40284, 121393, 235265, 11464, 153818, 180860, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 91292, 235832, 239158, 235269, 163558, 51806, 238186, 236137, 60318, 238335, 239158, 235269, 213512, 53355, 242251, 36203, 240054, 22803, 53355, 242251, 51806, 238186, 236392, 134472, 149735, 109976, 236183, 236179, 142192, 130412, 245435, 237036, 241716, 21743, 235265, 109, 3308, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 2043, 235275, 240136, 235336, 109, 236554, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 31288, 55154, 238364, 22803, 191754, 156610, 215441, 236791, 198766, 40284, 109241, 223616, 43395, 235265, 11464, 215441, 236214, 91940, 122717, 239753, 236859, 235278, 236417, 237545, 236645, 236137, 129669, 236950, 237312, 238721, 235275, 22803, 227038, 236392, 101260, 236392, 54715, 191754, 129090, 235265, 55154, 238364, 160590, 237135, 32275, 237611, 239837, 236859, 236214, 112762, 239571, 131006, 236179, 165866, 239969, 48060, 235269, 112762, 236791, 168788, 48060, 235269, 19319, 106191, 236791, 49697, 90621, 116518, 40284, 65503, 61943, 129090, 235265, 108, 242579, 31288, 22803, 55154, 238364, 237807, 91940, 122717, 239753, 236859, 236214, 35467, 237138, 237589, 31288, 106191, 236375, 55154, 236375, 134512, 242780, 236405, 239814, 146689, 236392, 153422, 236464, 181539, 22618, 69581, 235265, 110, 688, 237014, 237526, 171754, 236770, 60709, 213222, 66058, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 32463, 235274, 235284, 235274, 235304, 235283, 2729, 235283, 235318, 235266, 235321, 235249, 235304, 235249, 235321, 235318, 235290, 235324, 235268, 235324, 235258, 235290, 235310, 235308, 235304, 235250, 235290, 235321, 235318, 235321, 235310, 235290, 1335, 235304, 235321, 235315, 235321, 235260, 235284, 235308, 2518, 235310, 235283, 2502, 235265, 7424, 235275, 109, 235290, 29617, 108, 235290, 21237, 591, 125068, 235269, 57155, 235275, 108, 235290, 39671, 591, 53481, 611, 88887, 235275, 108, 235290, 12071, 591, 13198, 235275, 108, 235290, 13116, 235265, 2833, 109, 688, 237199, 239158, 66058, 108, 235274, 235265, 5231, 237036, 238179, 95573, 215134, 236511, 54868, 239385, 237233, 112762, 239571, 131006, 165866, 239969, 235832, 55154, 238364, 22803, 168788, 141048, 91940, 122717, 239753, 236859, 22803, 165866, 239969, 238080, 22618, 176124, 235265, 108, 235284, 235265, 5231, 238266, 90081, 239571, 131006, 165866, 239969, 95573, 55154, 238364, 22803, 143636, 240449, 112762, 239571, 131006, 237807, 36203, 238033, 238115, 237545, 238080, 22618, 215995, 112762, 168788, 237807, 143077, 235832, 120340, 235832, 43395, 235265, 108, 235304, 235265, 5231, 238033, 239457, 237154, 95573, 87997, 91940, 122717, 239753, 236859, 236361, 49697, 236666, 236511, 55154, 238364, 235248, 241656, 215441, 236791, 191754, 236345, 212026, 129669, 236950, 237312, 238721, 83942, 239457, 237154, 132793, 236791, 184434, 236666, 22618, 55496, 235265, 109, 688, 238335, 239158, 66058, 108, 235274, 235265, 5231, 236554, 238364, 43761, 236345, 95573, 87997, 168788, 236361, 55154, 238364, 22803, 11464, 238949, 236770, 236183, 236386, 147801, 55154, 238364, 236137, 43761, 236345, 236361, 160284, 236361, 238080, 22618, 55496, 235265, 108, 235284, 235265, 5231, 240981, 241305, 118058, 95573, 91940, 122717, 239753, 236859, 236361, 227038, 236392, 29283, 238151, 236464, 55154, 238364, 236361, 224047, 241305, 238080, 54715, 109535, 118058, 235832, 180850, 241949, 22618, 55496, 235265, 109, 3308, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 2043, 235275, 240136, 235336, 109, 239483, 122717, 239753, 236859, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 61943, 236645, 236137, 129669, 236950, 237312, 238721, 22803, 191754, 156610, 215441, 236791, 198766, 40284, 109241, 223616, 43395, 235265, 11464, 215441, 236214, 19319, 235269, 26862, 235269, 22978, 236375, 198766, 238070, 238986, 235269, 61943, 236645, 236137, 227397, 67650, 236354, 236791, 42916, 238115, 48060, 61943, 236645, 237807, 36203, 238033, 238115, 237545, 43395, 235265, 109, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 32463, 235274, 235284, 235274, 235304, 235283, 2729, 235283, 235258, 235315, 235304, 235274, 235315, 235250, 235284, 235266, 235290, 235318, 235260, 235321, 235276, 235290, 235310, 235324, 235324, 235268, 235290, 235315, 235321, 235324, 235249, 235290, 235284, 235274, 235276, 235284, 235249, 235284, 235258, 235284, 235310, 12479, 235283, 2502, 235265, 7424, 235275, 234541, 90621, 23133, 237233, 132929, 31288, 238997, 236950, 237312, 238721, 236214, 235248, 250016, 237199, 239055, 139148, 75630, 237551, 176947, 91292, 236183, 43395, 235265, 109, 238335, 239937, 239055, 235248, 242850, 238931, 236392, 83453, 238356, 238267, 236392, 235248, 242591, 236589, 238266, 102708, 132880, 237533, 236354, 236179, 51732, 237138, 235248, 250016, 237199, 239055, 139148, 75630, 237551, 176947, 61943, 78949, 236214, 131901, 22803, 23594, 237465, 236392, 23248, 239574, 236669, 55496, 235265, 20350, 11464, 237766, 236214, 200944, 4556, 240734, 236179, 60331, 238154, 238138, 168788, 26801, 237092, 238304, 236648, 91940, 122717, 239753, 236859, 160590, 237135, 171754, 236770, 236375, 211896, 72159, 119518, 47555, 235265, 110, 688, 237014, 237526, 171754, 236770, 60709, 213222, 66058, 108, 235290, 19319, 108, 235290, 26862, 108, 235290, 22978, 591, 22469, 235269, 62173, 235269, 38244, 235265, 2833, 235275, 110, 688, 237199, 239158, 66058, 108, 235274, 235265, 5231, 241632, 239296, 224047, 241305, 95573, 55154, 238364, 236179, 227038, 236392, 29283, 238151, 236183, 48682, 236464, 129669, 236950, 237312, 238721, 22803, 55393, 236375, 168788, 236345, 212026, 224047, 241305, 125507, 236840, 236361, 235119, 245257, 12957, 235265, 108, 235284, 235265, 5231, 236554, 238364, 43761, 236345, 99091, 237433, 95573, 139148, 211896, 236392, 91940, 122717, 239753, 236859, 22803, 168788, 238467, 26291, 242974, 55154, 238364, 236137, 43761, 240599, 236392, 184434, 236666, 22618, 55496, 235265, 108, 235304, 235265, 5231, 240112, 237047, 238602, 61943, 236645, 43033, 240521, 95573, 122096, 221570, 235269, 61928, 210450, 142995, 238266, 78749, 73143, 61943, 236645, 227397, 67650, 236354, 236791, 70231, 243093, 209727, 237092, 101969, 128047, 22618, 55496, 235265, 109, 688, 238335, 239158, 66058, 108, 235274, 235265, 5231, 237036, 238179, 132793, 95573, 91940, 122717, 239753, 236859, 160590, 237135, 215441, 236361, 129669, 236950, 237312, 238721, 236179, 61138, 238483, 238070, 212026, 29283, 238179, 236179, 174375, 239618, 238080, 22618, 55496, 235265, 108, 235284, 235265, 5231, 238997, 236950, 237312, 238721, 83942, 239457, 237154, 95573, 32048, 238780, 236511, 129669, 236950, 237312, 238721, 22803, 49697, 236666, 101969, 63806, 237358, 236345, 153145, 215441, 198766, 235832, 53355, 238994, 239254, 22618, 55496, 235265, 108, 235304, 235265, 5231, 236939, 236511, 238602, 64301, 239474, 95573, 91940, 122717, 239753, 236859, 236137, 28693, 236386, 64301, 239474, 236179, 156976, 168788, 125507, 236840, 236361, 123083, 236950, 239574, 22618, 55496, 235265, 109, 3308, 171754, 236939, 55154, 238364, 160590, 237135, 236791, 134472, 149735, 69225, 239303, 235336, 109, 235290, 5231, 237036, 238179, 235832, 215134, 236511, 95917, 95573, 153107, 239199, 236511, 112762, 236915, 215134, 236511, 51732, 238894, 236405, 236354, 54868, 239385, 235832, 157329, 238602, 95917, 55154, 238364, 160590, 237135, 168788, 236361, 126942, 43395, 235265, 108, 235290, 5231, 238266, 90081, 239571, 131006, 211896, 95573, 112762, 239571, 131006, 237807, 236137, 36203, 238033, 238115, 237545, 235832, 235248, 241266, 238628, 101969, 11464, 238949, 236770, 239574, 54715, 55154, 238364, 160590, 237135, 236361, 99797, 237961, 43395, 235265, 108, 235290, 5231, 239205, 241533, 236511, 168788, 95573, 122447, 241533, 236511, 74715, 238325, 180521, 26801, 240833, 236137, 112762, 168788, 236361, 126942, 238080, 54715, 55154, 238364, 235248, 241656, 22803, 168788, 40284, 93205, 106509, 21743, 235265, 109, 3308, 171754, 236939, 91940, 122717, 239753, 236859, 160590, 237135, 236791, 134472, 149735, 69225, 239303, 235336, 109, 235290, 5231, 238146, 210450, 36203, 238033, 238115, 237545, 95573, 61943, 236645, 237807, 236137, 61928, 210450, 36203, 238033, 238115, 237545, 235832, 215134, 236511, 95917, 91940, 122717, 239753, 236859, 160590, 237135, 168788, 236361, 126942, 43395, 235265, 108, 235290, 5231, 236589, 237524, 67650, 236354, 49697, 237603, 168788, 95573, 49697, 85024, 61943, 236645, 227397, 67650, 236354, 235269, 122096, 221570, 235269, 61928, 210450, 142995, 238266, 78749, 73143, 236648, 91940, 122717, 239753, 236859, 160590, 237135, 22803, 168788, 40284, 93205, 106509, 21743, 235265, 108, 235290, 5231, 236554, 238364, 43761, 236345, 70754, 238325, 95573, 55154, 238364, 236137, 43761, 236345, 236791, 184434, 224907, 236645, 69225, 54715, 32929, 237092, 168788, 236791, 91940, 122717, 239753, 236859, 160590, 237135, 236375, 195532, 238080, 22618, 55496, 235265, 108], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:38016 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:00 logger.py:39] Received request cmpl-04697570ecd74e71833b08c9afdcec9b-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8d ëª¨ë\x93\x88ì\x97\x90ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dì\x97\x90 ë\x8c\x80í\x95´ ëª\x87 ê°\x80ì§\x80 ê·¼ë³¸ì\xa0\x81ì\x9d¸ ì§\x88ë¬¸ì\x9d\x84 í\x95©ë\x8b\x88ë\x8b¤. â\x80\x94 "ê·¸ê²\x8c ë\xad\x90ì\x95¼?", "í\x81´ë\x9d¼ì\x9d´ì\x96¸í\x8a¸ ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dê³¼ ë\xad\x90ê°\x80 ë\x8b¬ë\x9d¼?", "ì\x99\x9c ì\x93¸ë§\x8cí\x95´?". ì\x97¬ê¸°ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x97¬ë\x9f¬ë¶\x84ì\x9d\x98 ì²« ì\x9b¹ì\x82¬ì\x9d´í\x8a¸ë¥¼ ë§\x8cë\x93\x9cë\x8a\x94 ë\x8d°ì\x97\x90 í\x95\x84ì\x9a\x94í\x95\x9c ê°\x80ì\x9e¥ ì\xa0\x81í\x95©í\x95\x9c í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë¥¼ ì\x96´ë\x96»ê²\x8c ì\xa0\x95í\x95\x98ë\x8a\x94 ì§\x80ì\x97\x90 ë\x8c\x80í\x95\x9c ì\xa0\x81ì\xa0\x88í\x95\x9c ì§\x80ë\x8f\x84ì\x99\x80 í\x95¨ê»\x98 ê°\x80ì\x9e¥ ì\x9d¸ê¸°ì\x9e\x88ë\x8a\x94 ì\x84\x9cë²\x84 ì\x82¬ì\x9d´ë\x93\x9c ì\x9b¹ í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë\x93¤ì\x9d\x98 ê°\x9cì\x9a\x94ë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤. ë\x81\x9dì\x9c¼ë¡\x9c ë\x86\x92ì\x9d\x80 ì\x88\x98ì¤\x80ì\x9d\x98 ì\x9b¹ ì\x84\x9cë²\x84 ë³´ì\x95\x88ì\x97\x90 ë\x8c\x80í\x95\x9c ì\x86\x8cê°\x9cë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 235703, 251918, 252469, 235979, 236212, 251918, 235703, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 18198, 251316, 251918, 235979, 236048, 252469, 235442, 235611, 239189, 235979, 254473, 252690, 235979, 235657, 250064, 189966, 237301, 239335, 235979, 251699, 251732, 235703, 249966, 250043, 235703, 251918, 252469, 187197, 253615, 235657, 235979, 239434, 237361, 235979, 252233, 251316, 187197, 251918, 252469, 235979, 236212, 251918, 235703, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 18198, 251316, 251918, 235979, 236048, 252469, 235442, 235611, 239189, 235979, 254473, 252690, 235979, 235657, 250064, 235703, 249966, 250043, 189966, 251336, 249616, 235367, 253114, 236728, 189966, 237301, 253045, 52724, 235657, 249616, 235703, 236067, 249616, 52724, 235611, 238512, 235979, 237429, 239189, 235703, 236338, 247790, 235703, 248215, 239189, 187197, 236067, 251732, 235979, 237361, 239189, 235703, 248215, 251918, 18198, 253114, 236011, 235979, 252151, 251732, 235979, 252151, 238900, 235265, 21221, 249616, 251316, 664, 235442, 235611, 239189, 235442, 236212, 251336, 189966, 236591, 250043, 235703, 253114, 238512, 46062, 664, 235367, 247790, 236728, 235979, 248215, 238512, 235703, 248215, 236728, 235703, 248806, 239189, 235367, 252233, 239189, 187197, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 18198, 251316, 251918, 235979, 236048, 252469, 235442, 235611, 239189, 235979, 254473, 252690, 235979, 235657, 250064, 235442, 237429, 238512, 189966, 236591, 250043, 235442, 235657, 249616, 189966, 252151, 237361, 235979, 248215, 238512, 46062, 664, 235703, 251642, 252469, 187197, 251699, 239189, 235979, 236067, 251336, 235367, 253114, 236728, 100269, 187197, 249966, 237361, 235442, 239189, 235657, 235703, 251918, 252469, 187197, 253615, 235657, 235979, 239434, 237361, 235979, 252233, 251316, 187197, 249966, 237361, 235979, 251845, 237361, 235979, 237478, 251918, 235703, 248215, 252690, 187197, 236212, 235496, 187197, 254276, 236775, 235703, 247204, 237361, 235703, 248215, 236728, 235367, 252233, 239189, 235979, 238103, 238512, 189966, 236067, 251336, 235979, 251699, 252469, 235979, 252233, 251316, 189966, 250064, 235657, 235703, 249966, 250043, 18198, 253114, 251918, 235703, 253615, 251316, 235367, 253114, 252469, 52724, 235657, 249616, 235703, 254473, 238103, 187197, 236338, 247790, 235367, 253114, 236011, 235367, 253114, 252469, 18198, 251316, 251918, 235979, 236338, 251732, 235703, 254473, 251918, 235703, 254276, 251336, 235367, 247790, 237361, 235979, 238103, 238512, 187197, 248806, 236728, 235979, 248806, 235481, 235442, 236212, 251336, 187197, 236338, 253114, 235367, 253114, 252690, 235979, 252233, 251316, 187197, 236067, 249616, 235703, 249966, 250043, 189966, 251336, 249616, 235367, 253114, 252469, 187197, 236338, 247790, 235703, 236338, 251732, 235367, 253114, 252469, 187197, 236067, 249616, 235979, 249583, 251918, 235703, 251642, 249616, 18198, 253114, 239335, 235442, 235481, 252690, 52724, 235657, 249616, 235703, 254473, 238103, 187197, 248215, 239189, 235442, 239189, 235657, 235703, 254473, 251732, 235979, 252233, 251316, 187197, 251918, 252469, 235979, 236212, 251918, 187197, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 187197, 254276, 236775, 18198, 251316, 251918, 235979, 236338, 251732, 235703, 254473, 251918, 235703, 254276, 251336, 235367, 247790, 237361, 235979, 251699, 238900, 235703, 248215, 252690, 52724, 235657, 252469, 235703, 253615, 251316, 235979, 238103, 238512, 187197, 236338, 252469, 235442, 237429, 237612, 235367, 253114, 236011, 235979, 252151, 251732, 235979, 252151, 238900, 235265, 189966, 247790, 248215, 235703, 252469, 238512, 235979, 236048, 252469, 189966, 253913, 250677, 235703, 248215, 249616, 187197, 251732, 252690, 235703, 238900, 249616, 235703, 248215, 252690, 187197, 254276, 236775, 187197, 251918, 252469, 235979, 236212, 251918, 189966, 237429, 236728, 235703, 253114, 251732, 235703, 249966, 250043, 189966, 251336, 249616, 235367, 253114, 252469, 187197, 253913, 251336, 235442, 235657, 252469, 235979, 238103, 238512, 187197, 236338, 252469, 235442, 237429, 237612, 235367, 253114, 236011, 235979, 252151, 251732, 235979, 252151, 238900, 235265], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:38020 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:00 logger.py:39] Received request cmpl-51ba001f9c0b4176919afbc730fad17a-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        서버사이드스크립트언ㅇ, JSP , ASP, PHP의 차이점은?\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\nJSP, ASP, PHP는 서버사이드스크립트언어의 대표적인 언어들입니다. 스크립트언어란, SW를 직접적으로 개발하는 일반적인 프로그래밍 언어와 달리 이미 만들어진 SW를 제어하는 용도로 사용됩니다.\n\u200b\n\u200b\n예를 들어 일반적인 사용자를 클라이언트라 불르고 서버와 클라이언트는 서로 통신합니다. 클라이언트가 특정 웹사이트에 접속하려고하면 클라이언트에서 보낸 요청이 서버로 가고 서버에서 클라이언트로 응답합니다. 이때 서버측에 있는 프로그램을 서버사이드 프로그램이라고 합니다. 반대의 개념으로는 클라이언트사이드언어와 클라이언트사이드가 있습니다.\n\u200b\n\u200b\n언어별 차이점은?\n\u200b\n\u200b\n\u200b\n현재 우리나라는 JAVA의 점유율이 압도적으로 높은데요. 자바의 점유율을 높인 것이 바로 JSP입니다. JSP는 원래 Java Server Page의 약자였지만 오픈소스이기 때문에 오라클사의 상표권문제로 Jakarta server page로 이름 바꿔 여전히 JSP라 불립니다. JSP는 주로 대규모 기업용 시스템 구축에 사용됩니다. 안정적이고 유지보수가 쉽기 때문입니다.\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\nPHP는 Personal Home Page Tools로 웹 페이지 제작시 기본적으로 웹관련 함수들이 많아 생산성이 높다는 점을 장점으로 많이 사용하고 있습니다. 개발속도가 빠르고 배포가 간편해서 주로 쇼핑몰같은 가볍고 규모가 작은 웹페이지에서 많이 사용됩니다.\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\nASP는 Active Server Pages의 약자이며, 마이크로소프트가 제작한 서버사이드스크립트엔진입니다. 국내에선 사용자가 적은데 이유는 윈도우서버에서 강점을 보이며 리눅스환경에서는 다른 서버사이드언어들의 점유율이 높기 때문입니다. 국내서버환경은 비용문제로 리눅스의 점유율이 높기 때문에 국내에서의 점유율은 높지 않습니다. 다만 윈도우환경에서는 압도적인 강점을 보이며 PHP와 JSP는 제한된 언어에서 구동되지만 ASP는 윈도우에서 지원하는 모든 언어를 웹에서 쓸 수 있도록 하는 장점이 있습니다.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 236554, 238364, 236417, 217534, 161615, 239837, 236859, 239753, 241805, 235269, 196371, 1688, 48623, 235269, 29617, 236137, 91292, 235832, 239158, 236648, 235336, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 187655, 235269, 48623, 235269, 29617, 236214, 55154, 238364, 236417, 217534, 161615, 239837, 236859, 239753, 236770, 236137, 26801, 238946, 85024, 171754, 236770, 237290, 47555, 235265, 32275, 237611, 239837, 236859, 239753, 236770, 240136, 235269, 13179, 236791, 143636, 240449, 90621, 227613, 40284, 234541, 85024, 58510, 93674, 238608, 243903, 171754, 236770, 237807, 123083, 236432, 22573, 128047, 236770, 237589, 13179, 236791, 31850, 236770, 40284, 120340, 236840, 236375, 61943, 129090, 235265, 108, 235421, 108, 235421, 108, 238748, 236791, 153935, 234541, 85024, 61943, 236645, 236791, 91940, 122717, 239753, 236859, 236950, 83133, 238500, 236464, 55154, 238364, 237807, 91940, 122717, 239753, 236859, 236214, 55154, 236375, 83160, 237502, 43395, 235265, 91940, 122717, 239753, 236859, 236361, 94492, 236864, 31288, 236417, 78749, 236179, 165866, 238982, 227860, 236464, 123472, 91940, 122717, 239753, 236859, 22803, 29283, 243927, 227038, 235832, 55154, 238364, 236375, 23248, 236464, 55154, 238364, 22803, 91940, 122717, 239753, 236859, 236375, 224047, 241305, 43395, 235265, 11464, 238740, 55154, 238364, 241656, 236179, 72941, 226417, 236392, 55154, 238364, 236417, 217534, 226417, 235832, 112778, 179694, 235265, 78821, 236800, 236137, 49532, 241631, 26291, 236214, 91940, 122717, 239753, 236859, 236417, 217534, 239753, 236770, 237807, 91940, 122717, 239753, 236859, 236417, 217534, 236361, 55496, 235265, 108, 235421, 108, 235421, 108, 239753, 236770, 239793, 91292, 235832, 239158, 236648, 235336, 108, 235421, 108, 235421, 108, 235421, 108, 238513, 238360, 93241, 236915, 139978, 160705, 236137, 131901, 237766, 241938, 235832, 235248, 242189, 236840, 90621, 187800, 236648, 238266, 237526, 235265, 34103, 238131, 236137, 131901, 237766, 241938, 236392, 187800, 236589, 93205, 55393, 236375, 196371, 47555, 235265, 196371, 236214, 68586, 238608, 12071, 13506, 6974, 236137, 151245, 236645, 239867, 95091, 44245, 244142, 237433, 236354, 235832, 236386, 147801, 44245, 236950, 239483, 236417, 236137, 36203, 238946, 239765, 237465, 236939, 236375, 35285, 6934, 2602, 236375, 145887, 55393, 246974, 41896, 232523, 196371, 236950, 83133, 239837, 12957, 235265, 196371, 236214, 40712, 236375, 26801, 240753, 237551, 28693, 238391, 237545, 27941, 202429, 49061, 240130, 236179, 61943, 129090, 235265, 70685, 236864, 237603, 224907, 46355, 236183, 237036, 236669, 236361, 235248, 243274, 236386, 119518, 47555, 235265, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 29697, 236214, 15103, 4566, 6974, 20506, 236375, 31288, 106191, 31850, 238115, 236569, 28693, 238744, 90621, 31288, 237956, 240429, 200901, 94525, 99805, 236655, 50390, 238325, 237154, 235832, 187800, 161509, 131901, 236392, 60318, 239158, 26291, 99805, 235832, 61943, 48060, 55496, 235265, 227613, 238982, 236840, 236361, 235119, 238500, 236464, 50548, 238199, 236361, 127149, 239813, 206666, 40712, 236375, 235248, 241830, 241496, 242515, 239012, 236648, 23248, 249270, 236464, 235248, 240753, 237551, 236361, 63806, 236648, 31288, 83137, 22803, 99805, 235832, 61943, 129090, 235265, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 235421, 108, 47263, 236214, 19380, 13506, 27779, 236137, 151245, 236645, 225022, 235269, 41645, 227195, 236375, 237433, 237964, 236859, 236361, 31850, 238115, 236511, 55154, 238364, 236417, 217534, 161615, 239837, 236859, 241167, 237589, 47555, 235265, 74116, 238151, 236179, 237700, 61943, 184819, 99797, 236648, 238266, 11464, 237766, 236214, 235248, 242984, 236840, 237312, 236554, 238364, 22803, 84608, 239158, 236392, 29283, 225022, 63102, 250412, 236354, 239457, 237392, 180860, 102708, 55154, 238364, 236417, 217534, 239753, 236770, 132642, 131901, 237766, 241938, 235832, 187800, 236386, 119518, 47555, 235265, 74116, 238151, 236554, 238364, 239457, 237392, 236648, 51732, 237545, 237465, 236939, 236375, 63102, 250412, 236354, 236137, 131901, 237766, 241938, 235832, 187800, 236386, 147801, 74116, 238151, 22803, 236137, 131901, 237766, 241938, 236648, 187800, 236183, 187132, 235265, 32048, 237598, 235248, 242984, 236840, 237312, 239457, 237392, 180860, 235248, 242189, 236840, 85024, 84608, 239158, 236392, 29283, 225022, 29617, 237807, 196371, 236214, 31850, 236511, 238602, 171754, 236770, 22803, 49061, 237358, 238070, 95091, 48623, 236214, 235248, 242984, 236840, 237312, 22803, 224790, 40284, 87997, 171754, 236770, 236791, 31288, 22803, 235248, 245471, 22618, 21167, 153145, 109976, 60318, 239158, 235832, 55496, 235265], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:38028 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:00 engine.py:275] Added request cmpl-ec48ed51942c4ce4b5f6326b2c91500e-0.
INFO 02-16 23:33:00 engine.py:275] Added request cmpl-04697570ecd74e71833b08c9afdcec9b-0.
INFO 02-16 23:33:00 engine.py:275] Added request cmpl-51ba001f9c0b4176919afbc730fad17a-0.
INFO 02-16 23:33:00 metrics.py:455] Avg prompt throughput: 388.1 tokens/s, Avg generation throughput: 53.9 tokens/s, Running: 4 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:33:04 logger.py:39] Received request cmpl-b1338ad2093f44f1b2265b07558dd0f0-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        02장 서버 사이드 언어 소개\n널리 쓰이고 있는 PHP로 간단히 알아 보겠습니다.\n2.1 PHP 서버 사이드 언어 소개:\nPHP는 가장 널리 사용되는 서버 사이드 스크립트 언어 중 하나입니다.\n웹 서버에서 실행되며, HTML 코드 안에 삽입하여 동적인 웹 페이지를 생성하는 데 사용됩니다.\nPHP는 무료이고 오픈 소스이며, 유연하고 사용하기 쉬운 언어로 인해 웹 개발에 널리 사용됩니다.\n주로 데이터베이스와의 상호작용, 폼 처리, 쿠키 및 세션 관리 등에 활용됩니다.\n이 예제는 간단한 PHP 코드를 이용하여 웹 페이지에 현재 시간을 표시하는 예제입니다.\nPHP 코드는 <?php와 ?> 태그로 감싸며, 이 사이에 PHP 코드를 작성합니다.\ndate() 함수를 사용하여 현재 시간을 가져오고, echo를 사용하여 해당 시간을 웹 페이지에 출력합니다.\n웹 브라우저에서 이 예제를 실행하면, 웹 페이지에 "현재 시간은 2023년 07월 07일 12시 34분 56초"와 같은 형태로 현재 시간이 표시될 것입니다.\n이렇게 PHP를 활용하면 웹 페이지에 동적인 내용을 표시하거나 웹 애플리케이션을 구현하는 데 유용하게 사용할 수 있습니다.\n<?php\n// 아래는 PHP 코드로, 웹서버에서 동작합니다.\n// PHP 코드는 <?php와 ?> 사이에 작성합니다.\n\n// 사용자로부터 입력받은 이름을 가져오기\n$name = $_GET[\'name\'];\n\n// 이름이 비어있지 않다면 환영 메시지 출력\nif (!empty($name)) {\n  echo "안녕하세요, " . $name . "님!";\n} else {\n  echo "이름을 입력해주세요.";\n}\n?>\n2.2 다른 언어의 특징과 사용 사례 설명:\nPython: 간결하고 가독성이 높은 언어로 웹 개발 외에 데이터 분석, 인공지능 등 다양한 분야에서 사용됩니다.\nNode.js (JavaScript): 클라이언트와 서버 모두에서 JavaScript를 사용할 수 있는 플랫폼으로, 실시간 웹 애플리케이션에 적합합니다.\nRuby: Ruby on Rails 프레임워크와 함께 사용되며, 웹 개발 생산성을 높이는 데 주로 사용됩니다.\nJava: 대규모 웹 애플리케이션 개발에 적합하며, 안정성과 확장성을 갖추고 있습니다.\n2.3 선택 시 고려사항과 차이점:\n언어 선택은 프로젝트의 목적과 요구사항에 따라 결정되어야 합니다.\nPHP는 웹 개발을 시작하는 데 접근하기 쉬우며, 다양한 호스팅 환경에서 지원됩니다.\nPython은 데이터 분석과 인공지능 분야에서 강력하며, 웹 개발에도 사용됩니다.\nNode.js는 실시간 웹 애플리케이션과 이벤트 기반 애플리케이션에 적합합니다.\nRuby는 Ruby on Rails 프레임워크를 통해 빠른 웹 애플리케이션 개발이 가능합니다.\nJava는 대규모 애플리케이션 및 기업용 시스템에 적합한 언어로, 안정성과 확장성이 뛰어납니다.\n개발 팀의 경험과 선호도, 프로젝트 규모, 기술 요구사항을 고려하여 적합한 언어를 선택해야 합니다.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 235276, 235284, 237199, 55154, 238364, 160590, 237135, 171754, 236770, 44997, 237936, 108, 241518, 236432, 198670, 224907, 72941, 29617, 236375, 127149, 238335, 239055, 78183, 236655, 29283, 241716, 21743, 235265, 108, 235284, 235265, 235274, 29617, 55154, 238364, 160590, 237135, 171754, 236770, 44997, 237936, 235292, 108, 29697, 236214, 126277, 235248, 241518, 236432, 61943, 156610, 55154, 238364, 160590, 237135, 32275, 237611, 239837, 236859, 171754, 236770, 47250, 113859, 47555, 235265, 108, 237941, 55154, 238364, 22803, 191754, 238070, 238986, 235269, 19319, 215441, 70685, 236179, 235248, 243886, 237707, 72494, 49697, 85024, 31288, 106191, 236791, 116518, 40284, 65503, 61943, 129090, 235265, 108, 29697, 236214, 60331, 239077, 224907, 44245, 244142, 44997, 236354, 225022, 235269, 46355, 237794, 48060, 61943, 72159, 235248, 242454, 238138, 171754, 236770, 236375, 30743, 237138, 31288, 227613, 236179, 235248, 241518, 236432, 61943, 129090, 235265, 108, 237014, 236375, 112762, 239571, 131006, 237807, 236137, 36203, 238033, 238115, 237545, 235269, 235248, 243751, 168788, 235269, 222330, 238705, 60709, 48740, 239109, 159838, 73143, 236179, 147226, 237545, 129090, 235265, 108, 235832, 71277, 236939, 236214, 127149, 238335, 236511, 29617, 215441, 236791, 208134, 72494, 31288, 106191, 236179, 200944, 118058, 236392, 100280, 236569, 40284, 71277, 236939, 47555, 235265, 108, 29697, 215441, 236214, 30631, 1556, 237807, 6123, 143401, 236671, 236375, 99091, 242686, 238986, 235269, 11464, 160590, 236179, 29617, 215441, 236791, 198766, 43395, 235265, 108, 1545, 645, 200901, 236791, 61943, 72494, 200944, 118058, 236392, 174538, 237410, 236464, 235269, 8163, 236791, 61943, 72494, 56787, 238272, 118058, 236392, 31288, 106191, 236179, 182260, 43395, 235265, 108, 237941, 129669, 236950, 237312, 238721, 22803, 11464, 71277, 236939, 236791, 191754, 123472, 235269, 31288, 106191, 236179, 664, 238513, 238360, 118058, 236648, 235248, 235284, 235276, 235284, 235304, 237029, 235248, 235276, 235324, 237699, 235248, 235276, 235324, 236666, 235248, 235274, 235284, 236569, 235248, 235304, 235310, 238304, 235248, 235308, 235318, 238950, 235281, 237807, 132929, 112507, 239190, 236375, 200944, 118058, 235832, 100280, 236569, 241093, 121393, 235265, 108, 235832, 241838, 237458, 29617, 236791, 147226, 237545, 123472, 31288, 106191, 236179, 49697, 85024, 196582, 236392, 100280, 236569, 236345, 160696, 31288, 122096, 239135, 236432, 239814, 146689, 236392, 49061, 238513, 40284, 65503, 46355, 237545, 101969, 61943, 238080, 22618, 55496, 235265, 108, 1689, 1556, 108, 634, 23745, 238608, 236214, 29617, 215441, 236375, 235269, 31288, 236554, 238364, 22803, 49697, 238115, 43395, 235265, 108, 634, 29617, 215441, 236214, 30631, 1556, 237807, 6123, 160590, 236179, 198766, 43395, 235265, 109, 634, 61943, 236645, 236375, 124431, 120618, 239824, 236648, 145887, 236392, 174538, 237410, 236386, 108, 235323, 1067, 589, 5021, 6041, 1829, 1067, 7867, 109, 634, 145887, 235832, 51732, 236770, 237056, 236183, 48682, 236039, 237722, 161409, 237759, 75630, 236569, 236183, 182260, 108, 648, 2883, 7480, 1777, 1067, 1269, 612, 108, 139, 4298, 664, 238179, 243415, 204551, 235269, 664, 954, 697, 1067, 954, 664, 239957, 66119, 108, 235270, 1354, 612, 108, 139, 4298, 664, 235832, 239295, 236392, 120618, 237138, 237014, 96673, 41562, 108, 235270, 108, 2144, 108, 235284, 235265, 235284, 102708, 171754, 236770, 236137, 94492, 241330, 237233, 61943, 17309, 241569, 220596, 235292, 108, 27922, 235292, 127149, 238665, 48060, 23248, 239821, 237154, 235832, 187800, 236648, 171754, 236770, 236375, 31288, 227613, 136201, 236179, 112762, 211558, 235269, 30743, 237495, 236183, 239474, 73143, 32048, 238780, 236511, 70754, 238305, 22803, 61943, 129090, 235265, 108, 3432, 235265, 2833, 591, 44980, 1245, 91940, 122717, 239753, 236859, 237807, 55154, 238364, 189364, 22803, 22978, 236791, 61943, 238080, 22618, 72941, 117904, 243792, 243751, 26291, 235269, 61928, 210450, 31288, 122096, 239135, 236432, 239814, 146689, 236179, 99797, 237961, 43395, 235265, 108, 53481, 235292, 39671, 611, 88887, 58510, 237990, 238700, 239779, 237611, 237807, 135132, 61943, 238070, 238986, 235269, 31288, 227613, 50390, 238325, 237154, 236392, 187800, 206367, 65503, 40712, 236375, 61943, 129090, 235265, 108, 16488, 235292, 26801, 240753, 237551, 31288, 122096, 239135, 236432, 239814, 146689, 227613, 236179, 99797, 237961, 206716, 235269, 70685, 236864, 237154, 237233, 69781, 237199, 237154, 236392, 235248, 243165, 239043, 236464, 55496, 235265, 108, 235284, 235265, 235304, 134472, 27941, 46749, 238994, 236417, 239383, 237233, 91292, 235832, 239158, 235292, 108, 239753, 236770, 134472, 236648, 132880, 242989, 236859, 236137, 86040, 237603, 237233, 73713, 237302, 236417, 239383, 236179, 156976, 72510, 236864, 141048, 238305, 179694, 235265, 108, 29697, 236214, 31288, 227613, 236392, 106793, 40284, 65503, 165866, 239969, 72159, 235248, 242454, 237312, 238986, 235269, 32048, 238780, 236511, 83942, 236354, 240880, 161409, 237392, 22803, 224790, 129090, 235265, 108, 27922, 236648, 112762, 211558, 237233, 30743, 237495, 236183, 239474, 70754, 238305, 22803, 84608, 238365, 206716, 235269, 31288, 227613, 209929, 61943, 129090, 235265, 108, 3432, 235265, 2833, 236214, 61928, 210450, 31288, 122096, 239135, 236432, 239814, 146689, 237233, 11464, 231415, 28693, 238559, 122096, 239135, 236432, 239814, 146689, 236179, 99797, 237961, 43395, 235265, 108, 53481, 236214, 39671, 611, 88887, 58510, 237990, 238700, 239779, 237611, 236791, 187118, 235119, 239296, 31288, 122096, 239135, 236432, 239814, 146689, 227613, 235832, 153728, 43395, 235265, 108, 16488, 236214, 26801, 240753, 237551, 122096, 239135, 236432, 239814, 146689, 60709, 28693, 238391, 237545, 27941, 202429, 236179, 99797, 237961, 236511, 171754, 236770, 236375, 235269, 70685, 236864, 237154, 237233, 69781, 237199, 237154, 235832, 235248, 244258, 236770, 243017, 12957, 235265, 108, 237936, 238526, 235248, 241452, 236137, 43033, 240521, 237233, 51914, 238033, 236840, 235269, 132880, 242989, 236859, 235248, 240753, 237551, 235269, 213222, 73713, 237302, 236417, 239383, 236392, 46749, 238994, 72494, 99797, 237961, 236511, 171754, 236770, 236791, 134472, 149735, 179694, 235265], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:38010 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:04 engine.py:275] Added request cmpl-b1338ad2093f44f1b2265b07558dd0f0-0.
INFO 02-16 23:33:04 logger.py:39] Received request cmpl-3f96159841d945049cb3b6d6d4cb1357-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        MDN의 초심자용 서버 사이드 프로그래밍에 대한 기사를 읽고 그에 대한 공부를 해볼 예정이다.\n여기서 서버 측 프로그래밍이 무엇이고, 어떤 일을 할 수 있는지, 클라이언트 프로그래밍과 어떤 점이 다른지에 대해 배워볼 것이다.\n\n현대의 전 세계 웹 개발자들은 서버측 개발을 공부하는 것을 권고 하고 있다. 대부분의 큰 사이트들은 동적으로 보여주기 위한 다양한 데이터가 필요할 때 서버측의 코드를 사용한다.\n일반적으로 서버에 있는 데이터베이스에 저장된 데이터를 빼내서 일부 코드를 통해 보일 수 있도록 클라이언트(HTML 또는 JavaScript)에게 송신한다.\n서버측 코드의 큰 장점은 개별 사용자를 위한 맞춤 웹사이트 컨텐츠를 제공한다는 것이다. 동적 웹사이트는 사용자의 선호도 및 습관에 따라 더 관련성 높은 컨텐츠를 강조 표시할 수 있다.\n또한 이것은 사이트를 저장된 개인 선호와 정보를 사용하기 쉽게 만들어 준다.\n\n### 서버사이드 웹사이트 프로그래밍이 무엇인가?\n웹 서버와 통신하는 웹 브라우저는 HyperText Transport Protocol(HTTP)을 사용하고 있다.\n우리가 웹페이지의 링크를 클릭하거나 폼을 전송하거나 검색을 시작할 때 우리의 웹 브라우저는 HTTP request를 목적 서버에 전달한다. 요청에는 영향을 받는 리소스를 식별하는 URL, 필요 작업을 정의하는 메서드가 포함된다.\n(메소드의 예시로는 리소스를 가져오거나, 삭제하거나 게시하는 것이 있다.\n그리고 URL 매개변수(query 문자열 통해 전송된 값-쌍으로 이루어진 객체), POST 데이터(HTTP POST 메소드에 의해 전송된 데이터), 관련 쿠키 파일을 이용해 인코딩된 추가 정보를 포함할 수 있다.\n\n웹 서버는 클라이언트의 요청이 오길 기다리고, 요청이 도착하면 작업을 진행해, 웹 브라우저에 \\u003cstrong>HTTP 응답 메세지\\u003c/strong>를 보낸다. 그 응답은 요청이 성공 또는 실패를 지시하는 상태 라인을 포함하고 있다.\n요청에 대한 응답이 성공적이라면 본문은 요청 리소스를 포함할 것이고 이는 웹 브라우저에 보여질 수 있다.\n\n\n#### 정적 웹 사이트 (Static Website)\n아래 그림은 정적 웹 사이트의 기본 웹 구조를 보여준다. (정적 웹 사이트는 특별한 리소스 요청이 들어올 때 서버에서 하드 코딩된 동일 컨텐츠를 반환한다.)\n사용자가 페이지를 탐색하거나, 브라우저가 지정된 URL에 HTTP \\"GET\\" 요청을 보낼 때 서버는 파일 시스템에서 요청한 문서를 검색하고 문서과 `success status`를 포함한 HTTP 응답을 반환한다.\n만일 어떠한 이유 때문에 파일을 검색 할 수 없는 경우 `error status`가 반환된다.\n![](https://velog.velcdn.com/images/lmyno/post/ccf3fe62-5d7d-48b3-a397-abe391546c1b/image.png)\n\n#### 동적 웹사이트 (Dynamic Website)\n동적 웹사이트는 필요할 때마다 동적으로 응답 컨텐츠가 생성된다.\n동적 웹사이트의 웹페이지는 보통 HTML 템플릿에 있는 자리 표시자에 데이터베이스에서 가져온 데이터를 넣어 생성된다. (이 방법은 많은 양의 컨텐츠를 저장하기에 정적 웹사이트를 이용하는 것보다 효과적이다.)\n동적 웹사이트는 사용자 또는 저장된 환경을 기반으로 URL에 대해 다른 데이터를 반환할 수 있고, 응답을 반환하는 과정에서 다른 작업을 수행할 수 있다.\n\n동적 웹사이트를 지원하는 코드는 서버에서 실행되어야 한다. 이러한 코드를 만드는 것을 \\u003cspan style=\\"font-size: 150%\\">\\"sever-side programming\\"\\u003c/span>이라 알려져 있다. (또는 \\u003cspan style=\\"font-size: 150%\\">\\"back-end scripting\\"\\u003c/span>이라고도 불린다.)\n\n아래 그림은 동적 웹사이트의 간단한 구조를 보여주고 있다.\n정적 웹사이트와 같이 브라우저는 HTTP 요청을 서버에 보내고, 서버는 요청을 처리하고 적절한 HTTP 응답을 반환한다. 정적 리소스의 요청은 정적 사이트에서의 방법과 같은 방법으로 처리한다. (정적 리소스, 파일은 변하지 않는 파일로 일반적으로 CSS, JS, Image 등등이 있다.)\n![](https://velog.velcdn.com/images/lmyno/post/d971cb86-b6ee-4361-b7b6-be5f03d9f499/image.png)\n\n동적 리소스를 위한 요청은 ② 서버측 코드에 대신 전달(위 그림에서 웹 애플리케이션으로 보이는 부분), ③\\"동적 응답\\"을 위해 서버는 응답을 해석해 필요한 정보를 데이터베이스에서 읽고, ④탐색한 데이터와 HTML 템플릿을 결합하고, ⑤⑥생성된 HTML을 포함한 응답을 다시 보내준다.\n\n서버 사이드와 클라이언트 사이드의 프로그래밍은 같은가?\n이전으로 돌아와서 서버 측에 관여하는 코드와 클라이언트 측에 관여하는 코드를 살펴 보자.\n각각의 케이스마다 코드는 명확히 다른데, 두 사이드의 차이를 보면\n> 1) 그들의 목적과 고민이 서로 다르다.\n2) 일반적으로 같은 프로그래밍 언어를 쓰지 않는다. (JS는 예외적으로 서버와 클라이언트 사이드 둘 다 사용 가능하다.)\n3) 그들은 다른 운영체제 환경에서 수행된다.\n\n브라우저에서 실행되는 코드는 `client-side code`로 알려져 있다. `client-side code`의 주 관심사는 렌더링된 웹페이지의 모양과 행동을 개선시키는 것이다.\n이것은 UI 구성요소 선택 및 스타일 지정, 레이아웃 만들기, 탐색, 양식 유효성 검사 등을 포함하고 있다. 대조적으로, server-side 웹 사이트 프로그래밍은 대부분 브라우저의 요청에 대한 응답으로 어떤 컨텐츠를 반환하는 지 선택하는 것을 포함한다. server-side code는 제출된 데이터 및 요청의 유효성 검사, 데이터 저장 및 검색을 위한 데이터베이스 사용, 필요에 따라 올바른 데이터 전송과 같은 작업을 처리한다.\n\n클라이언트 측 코드는 HTML, CSS, 그리고 JS로 작성된다.\n이것들은 웹 브라우저 안에서 실행되고 기본 운영체제와 연결되지 않거나 아주 약간 연결된다. (파일 시스템의 연결의 제한이 포함되어 있다.) 웹 개발자는 모든 사용자가 웹사이트를 보는 데 사용할 수 있는 브라우저를 조작할 수 없다.\n브라우저는 클라이언트 측 코드 기능과 일관성 없는 수준의 호환성을 제공해, 클라이언트 측 프로그래밍의 어려움은 브라우저 지원의 차이를 정상적으로 처리하는 것이다.\n\n서버측 코드는 다양한 프로그래밍 언어로 작성 가능하다.\n대중적인 서버측 웹 언어를 포함한 예시로 PHP, Python, Ruby, 그리고 C#이 있다. 서버측 코드는 서버의 운영체제와 모든 접속 권한을 가지고, 개발자는 그들이 원하는 프로그래밍 언어를 사용 가능하다.\n\n개발자는 일반적으로 \\u003cstrong>web frameworks(웹 프레임워크)\\u003c/strong>를 이용해 코드를 작성한다. 웹 프레임워크는 일반적인 문제를 해결하고 개발 속도를 높이며 특정 도메인에서 직면하는 다양한 유형의 작업을 단순화하기 위해 설계된 함수, 객체, 규칙 및 기타 코드 구성 요소의 모음이다.\n다시 말하면 클라이언트와 서버 사이드 코드 둘 다 프레임워크를 사용하지만 도메인은 다르지 때문에 프레임워크도 다르다. 클라이언트 측 웹 프레임워크는 레이아웃 및 프레젠테이션 작업을 단순화하는 반면 서버 측 웹 프레임워크는 직접 구현해야 하는 많은 \\"공통\\" 웹 서버 기능을 제공한다.\n(서버 측 공통 웹 서버 기능으로 세션 지원, 사용자와 인증을 지원, 데이터베이스와 쉬운 연결 등등이 있다.)\n\n>참고\n클라이언트 측 프레임워크는 때때로 클라이언트 측 코드를 개발하는 속도를 올릴 수 있게 도와주도록 사용하지만, 우리는 모든 코드를 직접 작성할 수도 있다. **사실 우리가 작고 간단한 사이트의 UI를 만든다면 우리가 직접 작성하는 코드가 더 빠르고 효과적일 수 있다.**\n이와 대조적으로, 우리가 서버측 웹 애플리케이션의 컴포넌트를 **프레임워크 없이 작성하는 것은 거의 생각하기 어려울 것**이다. (Python에서 HTTP 서버와 같은 중요한 기능 구현을 처음부터 하는 것은 어렵지만 Django와 같은 Python 웹 프레임워크는 다른 유용한 도구와 함께 즉시 사용할 수 있는 도구를 제공한다.)\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 11603, 235300, 236137, 87634, 239308, 236645, 237545, 55154, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236179, 71100, 28693, 236417, 236791, 229288, 236464, 20350, 236179, 71100, 41388, 237092, 236791, 56787, 241100, 71277, 236864, 61742, 235265, 108, 237386, 236386, 236554, 55154, 238364, 235248, 241656, 58510, 93674, 238608, 243903, 235832, 60331, 242513, 224907, 235269, 53355, 242251, 32929, 236392, 69225, 22618, 72941, 236183, 235269, 91940, 122717, 239753, 236859, 58510, 93674, 238608, 243903, 237233, 53355, 242251, 131901, 235832, 102708, 236183, 236179, 142192, 50548, 239779, 241100, 170613, 235265, 109, 238513, 236800, 236137, 31087, 154094, 31288, 227613, 236645, 84551, 55154, 238364, 241656, 227613, 236392, 41388, 237092, 40284, 109241, 155280, 236464, 197022, 69581, 235265, 26801, 237092, 238304, 236137, 185075, 17309, 78749, 84551, 49697, 90621, 29283, 237386, 237014, 236386, 168947, 32048, 238780, 236511, 112762, 236361, 126942, 238080, 54715, 55154, 238364, 241656, 236137, 215441, 236791, 61943, 78949, 235265, 108, 236666, 238559, 90621, 55154, 238364, 236179, 72941, 112762, 239571, 131006, 236179, 143077, 238602, 112762, 236791, 235248, 245122, 238151, 236554, 32929, 237092, 215441, 236791, 187118, 29283, 236666, 22618, 21167, 153145, 91940, 122717, 239753, 236859, 235278, 11271, 132879, 22978, 235275, 70471, 235248, 239673, 237502, 78949, 235265, 108, 236554, 238364, 241656, 215441, 236137, 185075, 60318, 239158, 236648, 49532, 239793, 61943, 236645, 236791, 168947, 207221, 244417, 31288, 236417, 78749, 235248, 241996, 164594, 236791, 110308, 78949, 236214, 170613, 235265, 49697, 237603, 31288, 236417, 78749, 236214, 61943, 236645, 236137, 51914, 238033, 236840, 60709, 235248, 237152, 237956, 236179, 156976, 70231, 187003, 237154, 187800, 236648, 235248, 241996, 164594, 236791, 84608, 237602, 100280, 236569, 238080, 22618, 69581, 235265, 108, 239607, 236511, 11464, 139988, 17309, 78749, 236791, 143077, 238602, 49532, 236589, 51914, 238033, 237807, 104569, 236791, 61943, 72159, 235248, 243274, 237458, 128047, 236770, 166422, 236039, 235265, 109, 6176, 55154, 238364, 236417, 217534, 31288, 236417, 78749, 58510, 93674, 238608, 243903, 235832, 60331, 242513, 236589, 236361, 235336, 108, 237941, 55154, 238364, 237807, 83160, 237502, 40284, 31288, 129669, 236950, 237312, 238721, 236214, 27808, 1637, 13426, 33209, 235278, 20672, 235275, 236392, 61943, 48060, 69581, 235265, 108, 237312, 228773, 31288, 83137, 236137, 76326, 236791, 91940, 240356, 236345, 160696, 235248, 243751, 236392, 31087, 239673, 236345, 160696, 203755, 236392, 106793, 238080, 54715, 93241, 236137, 31288, 129669, 236950, 237312, 238721, 236214, 24493, 3853, 236791, 86040, 237603, 55154, 238364, 236179, 31087, 239522, 78949, 235265, 227038, 96564, 52604, 240112, 236392, 101260, 236214, 63102, 237433, 236354, 236791, 130886, 239793, 40284, 10822, 235269, 126942, 211896, 236392, 35467, 236137, 40284, 75630, 236554, 237135, 236361, 157329, 238602, 236039, 235265, 108, 235278, 238519, 237433, 237135, 236137, 71277, 236569, 236375, 236214, 63102, 237433, 236354, 236791, 174538, 237410, 160696, 235269, 155718, 236345, 160696, 219687, 40284, 93205, 69581, 235265, 108, 186223, 10822, 80431, 237936, 239042, 236669, 235278, 3630, 45980, 236645, 239375, 187118, 31087, 239673, 238602, 147342, 235290, 244444, 26291, 11464, 238949, 236770, 237589, 209611, 823, 19124, 112762, 235278, 20672, 19124, 75630, 237433, 237135, 236179, 23594, 237138, 31087, 239673, 238602, 112762, 823, 187003, 222330, 238705, 145240, 236392, 208134, 237138, 30743, 238494, 241103, 238602, 133818, 104569, 236791, 157329, 238080, 22618, 69581, 235265, 109, 237941, 55154, 238364, 236214, 91940, 122717, 239753, 236859, 236137, 227038, 235832, 44245, 240373, 28693, 236039, 102536, 235269, 227038, 235832, 50316, 241293, 123472, 211896, 236392, 83453, 238356, 237138, 235269, 31288, 129669, 236950, 237312, 238721, 236179, 730, 235261, 235276, 235276, 235304, 235260, 19265, 235313, 20672, 224047, 241305, 75630, 237533, 236183, 235286, 235261, 235276, 235276, 235304, 235260, 235283, 19265, 235313, 236791, 29283, 243927, 236039, 235265, 20350, 224047, 241305, 236648, 227038, 235832, 192111, 132879, 234661, 236791, 34805, 236569, 40284, 209975, 79871, 236589, 236392, 157329, 48060, 69581, 235265, 108, 237526, 239151, 236179, 71100, 224047, 241305, 235832, 192111, 237603, 235832, 236950, 237722, 138720, 237465, 236648, 227038, 63102, 237433, 236354, 236791, 157329, 238080, 93205, 236464, 11464, 236214, 31288, 129669, 236950, 237312, 238721, 236179, 29283, 237386, 239574, 22618, 69581, 235265, 110, 3308, 35467, 237603, 31288, 17309, 78749, 591, 22555, 13683, 235275, 108, 236655, 238608, 142479, 236648, 35467, 237603, 31288, 17309, 78749, 236137, 28693, 238744, 31288, 49061, 237602, 236791, 29283, 237386, 239558, 236039, 235265, 591, 236864, 237603, 31288, 17309, 78749, 236214, 94492, 239793, 236511, 63102, 237433, 236354, 227038, 235832, 153935, 240256, 54715, 55154, 238364, 22803, 30181, 237135, 76230, 241103, 238602, 49697, 236666, 235248, 241996, 164594, 236791, 78821, 239457, 78949, 2330, 108, 236417, 237545, 184819, 106191, 236791, 235248, 242850, 238931, 236345, 160696, 235269, 129669, 236950, 237312, 238721, 236361, 34805, 236864, 238602, 10822, 236179, 24493, 30044, 6041, 13663, 227038, 236392, 29283, 245186, 54715, 55154, 238364, 236214, 145240, 27941, 202429, 22803, 227038, 236511, 133889, 236791, 203755, 48060, 133889, 237233, 4103, 6550, 4938, 235376, 236791, 157329, 236511, 24493, 224047, 241305, 236392, 78821, 239457, 78949, 235265, 108, 237598, 236666, 53355, 242664, 236511, 11464, 237766, 147801, 145240, 236392, 203755, 69225, 22618, 233473, 95917, 4103, 1761, 4938, 235376, 236361, 78821, 239457, 238602, 236039, 235265, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 235257, 1723, 956, 235283, 2729, 235283, 229802, 235304, 1039, 235318, 235284, 235290, 235308, 235258, 235324, 235258, 235290, 235310, 235321, 235268, 235304, 235290, 235250, 235304, 235315, 235324, 235290, 51071, 235304, 235315, 235274, 235308, 235310, 235318, 235260, 235274, 235268, 235283, 2502, 235265, 7424, 235275, 109, 3308, 49697, 237603, 31288, 236417, 78749, 591, 28500, 13683, 235275, 108, 237358, 237603, 31288, 236417, 78749, 236214, 126942, 238080, 54715, 237354, 236039, 49697, 90621, 224047, 241305, 235248, 241996, 164594, 236361, 116518, 238602, 236039, 235265, 108, 237358, 237603, 31288, 236417, 78749, 236137, 31288, 83137, 236214, 29283, 238693, 19319, 235248, 240940, 239135, 241982, 236179, 72941, 34103, 236432, 100280, 236569, 236645, 236179, 112762, 239571, 131006, 22803, 174538, 239956, 112762, 236791, 235248, 242665, 236770, 116518, 238602, 236039, 235265, 591, 235832, 130059, 236648, 139148, 119452, 236137, 235248, 241996, 164594, 236791, 143077, 72159, 236179, 35467, 237603, 31288, 236417, 78749, 236791, 208134, 40284, 29599, 180677, 207092, 237233, 237603, 61742, 2330, 108, 237358, 237603, 31288, 236417, 78749, 236214, 61943, 236645, 132879, 143077, 238602, 161409, 237392, 236392, 28693, 238559, 26291, 10822, 236179, 142192, 102708, 112762, 236791, 78821, 239457, 238080, 22618, 21167, 236464, 235269, 224047, 241305, 236392, 78821, 239457, 40284, 65084, 236864, 22803, 102708, 211896, 236392, 22618, 238356, 238080, 22618, 69581, 235265, 109, 237358, 237603, 31288, 236417, 78749, 236791, 224790, 40284, 215441, 236214, 55154, 238364, 22803, 191754, 141048, 238305, 153422, 235265, 11464, 174287, 215441, 236791, 49427, 237135, 236214, 109241, 730, 235261, 235276, 235276, 235304, 235260, 1432, 3411, 14001, 4274, 235290, 1934, 235292, 235248, 235274, 235308, 235276, 10149, 768, 13663, 27169, 235290, 2043, 19991, 86170, 235261, 235276, 235276, 235304, 235260, 235283, 1432, 235313, 235832, 236950, 78183, 238994, 240586, 69581, 235265, 591, 239607, 236214, 730, 235261, 235276, 235276, 235304, 235260, 1432, 3411, 14001, 4274, 235290, 1934, 235292, 235248, 235274, 235308, 235276, 10149, 768, 13663, 1811, 235290, 615, 141988, 86170, 235261, 235276, 235276, 235304, 235260, 235283, 1432, 235313, 235832, 112778, 236840, 83133, 239263, 236039, 2330, 109, 236655, 238608, 142479, 236648, 49697, 237603, 31288, 236417, 78749, 236137, 127149, 238335, 236511, 49061, 237602, 236791, 29283, 237386, 237014, 236464, 69581, 235265, 108, 236864, 237603, 31288, 236417, 78749, 237807, 81673, 235832, 129669, 236950, 237312, 238721, 236214, 24493, 227038, 236392, 55154, 238364, 236179, 29283, 238151, 236464, 235269, 55154, 238364, 236214, 227038, 236392, 168788, 48060, 99797, 240046, 236511, 24493, 224047, 241305, 236392, 78821, 239457, 78949, 235265, 35467, 237603, 63102, 237433, 236354, 236137, 227038, 236648, 35467, 237603, 17309, 78749, 22803, 236137, 130059, 237233, 132929, 130059, 26291, 168788, 78949, 235265, 591, 236864, 237603, 63102, 237433, 236354, 235269, 145240, 236648, 75980, 74860, 186830, 145240, 236375, 234541, 90621, 26862, 235269, 31302, 235269, 8092, 73143, 238650, 235832, 69581, 2330, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 235257, 1723, 956, 235283, 2729, 235283, 235258, 235315, 235324, 235274, 9359, 235321, 235318, 235290, 235268, 235318, 1537, 235290, 235310, 235304, 235318, 235274, 235290, 235268, 235324, 235268, 235318, 235290, 555, 235308, 235266, 235276, 235304, 235258, 235315, 235266, 235310, 235315, 235315, 235283, 2502, 235265, 7424, 235275, 109, 237358, 237603, 63102, 237433, 236354, 236791, 168947, 227038, 236648, 93552, 55154, 238364, 241656, 215441, 236179, 26801, 237502, 31087, 239522, 235278, 237601, 142479, 22803, 31288, 122096, 239135, 236432, 239814, 146689, 26291, 29283, 206367, 43761, 238304, 823, 159545, 13663, 237358, 237603, 224047, 241305, 13663, 236392, 93806, 55154, 238364, 236214, 224047, 241305, 236392, 56787, 239465, 237138, 126942, 236511, 104569, 236791, 112762, 239571, 131006, 22803, 229288, 236464, 235269, 235248, 239221, 242850, 238931, 236511, 112762, 237807, 19319, 235248, 240940, 239135, 241982, 236392, 72510, 237961, 48060, 235269, 235248, 240104, 240967, 237889, 237154, 238602, 19319, 236392, 157329, 236511, 224047, 241305, 236392, 171167, 29283, 238151, 239558, 236039, 235265, 109, 236554, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 58510, 93674, 238608, 243903, 236648, 132929, 236361, 235336, 108, 235832, 237045, 26291, 138153, 236655, 237807, 236554, 55154, 238364, 235248, 241656, 236179, 55526, 237386, 40284, 215441, 237807, 91940, 122717, 239753, 236859, 235248, 241656, 236179, 55526, 237386, 40284, 215441, 236791, 130412, 245435, 29283, 236645, 235265, 108, 238316, 238316, 236137, 170609, 131006, 237354, 236039, 215441, 236214, 95165, 239131, 239055, 102708, 238266, 235269, 93828, 160590, 237135, 236137, 91292, 235832, 236791, 29283, 237722, 108, 235313, 235248, 235274, 235275, 20350, 132642, 86040, 237603, 237233, 46749, 238754, 235832, 55154, 236375, 32048, 238500, 236039, 235265, 108, 235284, 235275, 234541, 90621, 132929, 58510, 93674, 238608, 243903, 171754, 236770, 236791, 198670, 236183, 186830, 236039, 235265, 591, 16436, 236214, 71277, 238643, 90621, 55154, 238364, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 235248, 242870, 32048, 61943, 153728, 188898, 2330, 108, 235304, 235275, 20350, 84551, 102708, 118566, 237759, 238308, 236939, 161409, 237392, 22803, 22618, 238356, 238602, 236039, 235265, 109, 238997, 236950, 237312, 238721, 22803, 191754, 156610, 215441, 236214, 4103, 5251, 235290, 2043, 3409, 235376, 236375, 78183, 238994, 240586, 69581, 235265, 4103, 5251, 235290, 2043, 3409, 235376, 236137, 40712, 55526, 239308, 236417, 236214, 235248, 241486, 238589, 239074, 238602, 31288, 83137, 236137, 34459, 238780, 237233, 105560, 237358, 236392, 49532, 237700, 236569, 238705, 236214, 170613, 235265, 108, 235832, 139988, 13566, 220641, 237526, 237433, 134472, 60709, 233186, 34805, 236864, 235269, 161882, 236655, 241736, 128047, 236386, 235269, 235248, 242850, 238931, 235269, 119452, 238186, 46355, 241078, 237154, 102890, 236417, 73143, 236392, 157329, 48060, 69581, 235265, 26801, 237602, 90621, 235269, 6934, 235290, 2043, 31288, 17309, 78749, 58510, 93674, 238608, 243903, 236648, 26801, 237092, 238304, 129669, 236950, 237312, 238721, 236137, 227038, 236179, 71100, 224047, 241305, 26291, 53355, 242251, 235248, 241996, 164594, 236791, 78821, 239457, 40284, 34805, 134472, 40284, 109241, 157329, 78949, 235265, 6934, 235290, 2043, 3409, 236214, 31850, 238483, 238602, 112762, 60709, 227038, 236137, 46355, 241078, 237154, 102890, 236417, 235269, 112762, 143077, 60709, 203755, 236392, 168947, 112762, 239571, 131006, 61943, 235269, 126942, 236179, 156976, 133057, 238131, 239296, 112762, 31087, 239673, 237233, 132929, 211896, 236392, 168788, 78949, 235265, 109, 239483, 122717, 239753, 236859, 235248, 241656, 215441, 236214, 19319, 235269, 26862, 235269, 213512, 31302, 236375, 198766, 238602, 236039, 235265, 108, 235832, 237506, 84551, 31288, 129669, 236950, 237312, 238721, 70685, 22803, 191754, 238070, 236464, 28693, 238744, 118566, 237759, 238308, 236939, 237807, 197054, 234654, 48682, 160696, 23745, 237014, 151245, 238264, 197054, 238602, 236039, 235265, 591, 173331, 27941, 202429, 236137, 197054, 236137, 31850, 236511, 235832, 157329, 141048, 69581, 2330, 31288, 227613, 236645, 236214, 87997, 61943, 184819, 31288, 236417, 78749, 236791, 29283, 236214, 65503, 61943, 238080, 22618, 72941, 129669, 236950, 237312, 238721, 236791, 42916, 238115, 238080, 22618, 56341, 236039, 235265, 108, 238997, 236950, 237312, 238721, 236214, 91940, 122717, 239753, 236859, 235248, 241656, 215441, 201619, 237233, 32929, 237956, 237154, 233473, 22618, 239558, 236137, 83942, 239457, 237154, 236392, 110308, 237138, 235269, 91940, 122717, 239753, 236859, 235248, 241656, 58510, 93674, 238608, 243903, 236137, 53355, 238994, 240520, 236648, 129669, 236950, 237312, 238721, 224790, 236137, 91292, 235832, 236791, 35467, 237047, 90621, 168788, 40284, 170613, 235265, 109, 236554, 238364, 241656, 215441, 236214, 32048, 238780, 236511, 58510, 93674, 238608, 243903, 171754, 236770, 236375, 198766, 153728, 188898, 235265, 108, 236800, 237935, 85024, 55154, 238364, 241656, 31288, 171754, 236770, 236791, 157329, 236511, 71277, 236569, 236375, 29617, 235269, 21237, 235269, 39671, 235269, 213512, 585, 235345, 235832, 69581, 235265, 55154, 238364, 241656, 215441, 236214, 55154, 238364, 236137, 118566, 237759, 238308, 236939, 237807, 87997, 165866, 238982, 155280, 236511, 236392, 128753, 236464, 235269, 227613, 236645, 236214, 20350, 94525, 68586, 40284, 58510, 93674, 238608, 243903, 171754, 236770, 236791, 61943, 153728, 188898, 235265, 109, 237936, 238526, 236645, 236214, 234541, 90621, 730, 235261, 235276, 235276, 235304, 235260, 19265, 235313, 4405, 70774, 235278, 237941, 58510, 237990, 238700, 239779, 237611, 6596, 235261, 235276, 235276, 235304, 235260, 235283, 19265, 235313, 236791, 208134, 237138, 215441, 236791, 198766, 78949, 235265, 31288, 58510, 237990, 238700, 239779, 237611, 236214, 234541, 85024, 132793, 236791, 56787, 238665, 48060, 227613, 125507, 236840, 236791, 187800, 225022, 94492, 236864, 50316, 238519, 236589, 22803, 143636, 237722, 40284, 32048, 238780, 236511, 46355, 238867, 236137, 211896, 236392, 80289, 239937, 236817, 72159, 93806, 65952, 238002, 238602, 200901, 235269, 209611, 235269, 235248, 240753, 242930, 60709, 28693, 237986, 215441, 220641, 73713, 237433, 236137, 34459, 238036, 61742, 235265, 108, 236039, 236569, 72163, 123472, 91940, 122717, 239753, 236859, 237807, 55154, 238364, 160590, 237135, 215441, 235248, 242870, 32048, 58510, 237990, 238700, 239779, 237611, 236791, 61943, 74860, 237598, 50316, 238519, 236589, 236648, 32048, 238500, 236183, 147801, 58510, 237990, 238700, 239779, 237611, 236840, 32048, 238500, 236039, 235265, 91940, 122717, 239753, 236859, 235248, 241656, 31288, 58510, 237990, 238700, 239779, 237611, 236214, 161882, 236655, 241736, 60709, 58510, 237990, 244179, 239060, 146689, 211896, 236392, 80289, 239937, 236817, 40284, 78821, 237722, 55154, 238364, 235248, 241656, 31288, 58510, 237990, 238700, 239779, 237611, 236214, 143636, 240449, 49061, 238513, 149735, 109976, 139148, 30044, 237495, 238693, 13663, 31288, 55154, 238364, 201619, 236392, 110308, 78949, 235265, 108, 235278, 236554, 238364, 235248, 241656, 41388, 238693, 31288, 55154, 238364, 201619, 26291, 48740, 239109, 224790, 235269, 61943, 236645, 237807, 30743, 239907, 236392, 224790, 235269, 112762, 239571, 131006, 237807, 235248, 242454, 238138, 197054, 73143, 238650, 235832, 69581, 2330, 109, 235313, 189764, 108, 239483, 122717, 239753, 236859, 235248, 241656, 58510, 237990, 238700, 239779, 237611, 236214, 54715, 238740, 236375, 91940, 122717, 239753, 236859, 235248, 241656, 215441, 236791, 227613, 40284, 125507, 236840, 236791, 133057, 241949, 22618, 21167, 237458, 50316, 237807, 237014, 153145, 61943, 74860, 237598, 235269, 93241, 236214, 87997, 215441, 236791, 143636, 240449, 198766, 238080, 22618, 236840, 69581, 235265, 5231, 236417, 238146, 93241, 236361, 63806, 236464, 127149, 238335, 236511, 17309, 78749, 236137, 13566, 236791, 49427, 239227, 236039, 237722, 93241, 236361, 143636, 240449, 198766, 40284, 215441, 236361, 70231, 235119, 238500, 236464, 207092, 237233, 237603, 236666, 22618, 69581, 116742, 108, 235832, 237807, 26801, 237602, 90621, 235269, 93241, 236361, 55154, 238364, 241656, 31288, 122096, 239135, 236432, 239814, 146689, 236137, 235248, 241897, 238199, 245310, 236859, 236791, 5231, 237964, 237990, 238700, 239779, 237611, 56341, 235832, 198766, 40284, 143613, 73523, 236137, 142882, 72159, 53355, 238994, 239254, 29599, 688, 61742, 235265, 591, 27922, 22803, 24493, 55154, 238364, 237807, 132929, 215134, 236511, 201619, 49061, 238513, 236392, 106204, 238036, 124431, 109976, 143613, 53355, 244597, 95091, 95945, 237807, 132929, 21237, 31288, 58510, 237990, 238700, 239779, 237611, 236214, 102708, 46355, 237545, 236511, 50316, 237302, 237807, 135132, 235248, 242579, 236569, 61943, 238080, 22618, 72941, 50316, 237302, 236791, 110308, 78949, 2330, 108], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:38020 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:04 engine.py:275] Added request cmpl-3f96159841d945049cb3b6d6d4cb1357-0.
INFO 02-16 23:33:05 logger.py:39] Received request cmpl-dcd4098b9382468ca44c452aa60cefe2-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        웹/앱 외주 개발 시 꼭 알아야 하는 IT용어 - 웹\n이 작업을 위해 서버에서 사용하는 개발 언어들이 있는데요. 대표적인 개발 언어(서버사이드 스크립트 언어)로는 PHP, 파이썬(Python), 노드(Node.js), 루비(Ruby) 등이 있습니다. 앱/웹 서비스의 모든 비즈니스 로직은 서버 쪽 언어를 통해 구현되고 있지', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 237941, 235283, 243582, 136201, 237014, 227613, 27941, 235248, 245267, 78183, 236655, 238305, 109976, 6349, 237545, 236770, 728, 31288, 108, 235832, 211896, 236392, 93806, 55154, 238364, 22803, 61943, 40284, 227613, 171754, 236770, 94525, 72941, 238266, 237526, 235265, 26801, 238946, 85024, 227613, 171754, 236770, 235278, 236554, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 171754, 236770, 235275, 236375, 236214, 29617, 235269, 59994, 235832, 246881, 235278, 27922, 823, 61138, 237135, 235278, 3432, 235265, 2833, 823, 200936, 237584, 235278, 53481, 235275, 73143, 235832, 55496, 235265, 235248, 243582, 235283, 237941, 206586, 236137, 87997, 51732, 238894, 236405, 236354, 54868, 239385, 236648, 55154, 238364, 235248, 240734, 171754, 236770, 236791, 187118, 49061, 238513, 238070, 236464, 21167, 236183], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:38028 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:05 engine.py:275] Added request cmpl-dcd4098b9382468ca44c452aa60cefe2-0.
INFO 02-16 23:33:05 metrics.py:455] Avg prompt throughput: 1252.6 tokens/s, Avg generation throughput: 259.0 tokens/s, Running: 4 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.6%, CPU KV cache usage: 0.0%.
INFO 02-16 23:33:10 metrics.py:455] Avg prompt throughput: 46.3 tokens/s, Avg generation throughput: 207.3 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.8%, CPU KV cache usage: 0.0%.
INFO 02-16 23:33:12 logger.py:39] Received request cmpl-314309e16b7b4675bc1416f85e76bfa5-0: prompt: '아래 정보에 기반하여, 사용자의 질문에 답하세요.\n        \n\n**## 웹 프로그래밍에서 서버 사이드와 클라이언트 사이드의 중요성**\n\n본 텍스트는 웹 프로그래밍에서 서버 사이드와 클라이언트 사이드의 개념과 중요성을 설명합니다. \n\n**핵심 내용은 다음과 같습니다.**\n\n* **클라이언트 사이드:** 사용자 측에서 실행되는 부분으로, 사용자 입력을 받아 HTML로 변환하여 브라우저에 표시합니다. 자바스크립트가 대표적인 언어입니다. \n* **서버 사이드:** 서버 측에서 실행되는 부분으로, 웹 페이지를 생성하고, 사용자 인증, 데이터베이스 연동 등 중요한 작업을 수행합니다. Java, PHP, Ruby, Python, Node.js 등이 대표적인 언어입니다.\n\n서버와 클라이언트는 웹 페이지를 통해 상호 작용하며, 클라이언트 사이드 개발자를 프론트엔드, 서버 사이드 개발자를 백엔드라고 부릅니다.\n\n\n\n- **빠른 응답**: 빠른 응답 속도가 중요한 경우 클라이언트 사이드 처리를 고려할 수 있습니다.\n\n\n\n\n\n## 웹 개발에서 서버 사이드 vs 클라이언트 사이드: 장단점과 적절한 선택\n\n본 글은 웹 개발에서 서버 사이드와 클라이언트 사이드의 차이점, 각 방식의 장단점, 그리고 적절한 선택 기준을 제시합니다. \n\n**서버 사이드**는 웹 서버에서 실행되는 코드로, 데이터베이스 접근, 데이터 처리, HTML 페이지 생성 등을 담당합니다. **장점은 보안성, 데이터베이스 접근 용이성, 호환성**이 있으며, **단점은 서버 부하 증가와 응답 시간 지연**입니다. 주요 언어는 PHP, Python, Ruby, Java, Node.js입니다.\n\n**클라이언트 사이드**는 사용자의 브라우저에서 실행되는 HTML, CSS, JavaScript로 작성된 코드로, 사용자 인터페이스 조작, 상호작용 등을 담당합니다. **장점은 빠른 응답 속도, 서버 부하 감소, 향상된 사용자 경험**이며, **단점은 보안 취약성, 브라우저 호환성 문제, 성능 제한**입니다.\n\n**어떤 방식을 선택해야 할까요?**\n\n* **보안이 중요하고 데이터베이스 작업이 많다면 서버 사이드**를 선택하세요.\n* **실시간 상호작용, 동적 인터페이스, 빠른 응답 속도가 중요하다면 클라이언트 사이드**를 선택하세요.\n\n어떤 방식이 가장 적합한지는 웹 애플리케이션의 구체적인 요구 사항에 따라 결정됩니다. \n\n\n\n \n\n\n## 요약문\n\n본 텍스트는 독자에게 몇 가지 질문을 던져 궁금증을 유발하고, 이러한 질문에 대한 답을 찾기 위해 탐구를 독려하는 데 목적이 있습니다. \n\n핵심 내용으로는 "ê·¸ê²\x8c ë\xad\x90ì\x95¼?", "í\x81´ë\x9d¼ì\x9d´ì\x96¸í\x8a¸ ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dê³¼ ë\xad\x90ê°\x80 ë\x8b¬ë\x9d¼?", "ì\x99\x9c ì\x93¸ë§\x8cí\x95´?"와 같은 질문들이 제시되며, 이러한 질문들은 독자들이 주변 세계와 자신을 더 깊이 이해하고 성찰할 수 있도록 격려합니다. \n\n결론적으로, 본 텍스트는 독자들에게 깊이 있는 사고와 성찰을 유도하며, 스스로의 답을 찾아가도록 격려하는 메시지를 전달합니다. \n\n\n\n\n\n## 서버사이드 스크립트 언어 (JSP, ASP, PHP) 비교 요약\n\n본 문서는 JSP, ASP, PHP 세 가지 서버사이드 스크립트 언어의 특징과 차이점을 비교 분석합니다. \n\n**핵심 내용:**\n\n* **JSP (JavaServer Pages):**  \n    * Java 기반으로, 대규모 기업용 시스템 구축에 적합.\n    * 안정적이고 유지보수가 용이하며, 현재 국내에서 가장 높은 점유율을 자랑.\n* **PHP (Personal Home Page Tools):**\n    * 웹 개발에 필요한 함수들이 많아 생산성이 높음.\n    * 개발 속도가 빠르고 배포가 간편하여 쇼핑몰 등 소규모 웹사이트에 주로 사용.\n* **ASP (Active Server Pages):**\n    * 마이크로소프트가 개발한 서버사이드 스크립트 엔진.\n    * 윈도우 서버 환경에서 강점을 보이지만, 리눅스 환경에서는 점유율이 낮음.\n    * 윈도우에서 모든 언어를 웹에서 사용할 수 있도록 지원하는 장점.\n\n**결론:**\n\n각 언어는 장단점이 있으며, 웹사이트의 규모, 목적, 환경 등에 따라 적합한 언어가 다릅니다. \n\n\n\n\n\n\n## 서버 사이드 언어 소개: PHP 및 기타 언어 비교\n\n본 챕터는 웹 개발에서 사용되는 서버 사이드 언어 중 하나인 **PHP**를 소개하고, 다른 주요 언어들의 특징과 사용 사례를 비교 분석합니다.\n\n**PHP**는 **무료**하고 **오픈 소스**이며, **웹 서버에서 실행**되어 **HTML 코드 안에 삽입**되어 동적인 웹 페이지를 생성합니다. \n\n* 데이터베이스 연동, 폼 처리, 쿠키 및 세션 관리 등 다양한 기능을 수행합니다. \n* 본문에서는 간단한 PHP 코드 예시를 통해 현재 시간을 웹 페이지에 표시하는 방법을 보여줍니다.\n\n다른 주요 서버 사이드 언어들과 그 특징은 다음과 같습니다:\n\n* **Python**: 간결하고 가독성이 높아 웹 개발 외에도 데이터 분석, 인공지능 등 다양한 분야에서 사용됩니다.\n* **Node.js (JavaScript)**: 클라이언트와 서버 모두에서 JavaScript를 사용할 수 있는 플랫폼으로, 실시간 웹 애플리케이션에 적합합니다.\n* **Ruby**: Ruby on Rails 프레임워크와 함께 사용되어 웹 개발 생산성을 높이는 데 주로 사용됩니다.\n* **Java**: 대규모 웹 애플리케이션 개발에 적합하며, 안정성과 확장성을 갖추고 있습니다.\n\n언어 선택은 **프로젝트 목적, 요구사항, 개발 팀의 경험 및 선호도 등을 고려**하여 결정해야 합니다. \n\n\n\n클라이언트 측 프레임워크는 때때로 클라이언트 측 코드를 개발하는 속도를 올릴 수 있게 도와주도록 사용하지만, 우리는 모든 코드를 직접 작성할 수도 있다. **사실 우리가 작고 간단한 사이트의 UI를 만든다면 우리가 직접 작성하는 코드가 더 빠르고 효과적일 수 있다.**\n이와 대조적으로, 우리가 서버측 웹 애플리케이션의 컴포넌트를 **프레임워크 없이 작성하는 것은 거의 생각하기 어려울 것**이다. (Python에서 HTTP 서버와 같은 중요한 기능 구현을 처음부터 하는 것은 어렵지만 Django와 같은 Python 웹 프레임워크는 다른 유용한 도구와 함께 즉시 사용할 수 있는 도구를 제공한다.)\n\n\n\n### 결론\n서버 측 프로그래밍은 웹 개발에서 중요한 역할을 한다.\n동적 웹사이트를 구축하고 사용자에게 맞춤형 콘텐츠를 제공하는 데 필수적이다.\n서버 측 프로그래밍은 클라이언트 측 프로그래밍과는 다른 목적과 환경에서 작동하며, 특정 프로그래밍 언어와 웹 프레임워크를 사용한다.\n\n##\n\n##\n\n##\n\n이 텍스트는 서버 사이드 프로그래밍의 기본 개념을 설명하고 있습니다. \n\n## 주요 내용 요약:\n\n* **서버 사이드 프로그래밍의 목적:** 웹 서버에서 실행되는 코드로, 사용자에게 맞춤형 웹 콘텐츠를 제공하고 동적 웹사이트를 구축하는 데 사용됩니다.\n* **동적 웹사이트:** 사용자의 요청에 따라 데이터베이스에서 데이터를 가져와 HTML 템플릿에 삽입하여 다양한 콘텐츠를 생성합니다.\n* **서버 사이드 프로그래밍과 클라이언트 사이드 프로그래밍의 차이점:**\n    * 목적: 서버 사이드는 응답 컨텐츠를 생성하고, 클라이언트 사이드는 웹페이지의 표현과 행동을 제어합니다.\n    * 프로그래밍 언어: 서버 사이드는 PHP, Python, Ruby 등 다양한 언어를 사용하며, 클라이언트 사이드는 주로 JavaScript를 사용합니다.\n    * 실행 환경: 서버 사이드는 서버에서, 클라이언트 사이드는 사용자의 브라우저에서 실행됩니다.\n* **웹 프레임워크:** 서버 사이드 프로그래밍을 위한 도구로, 일반적인 웹 서버 기능을 제공하여 개발 속도를 높입니다.\n\n* **결론:** 서버 사이드 프로그래밍은 웹 개발에서 필수적인 역할을 하며, 동적 웹사이트 구축 및 사용자 맞춤형 콘텐츠 제공에 중요합니다.\n\n\n\n요.\n\n웹 개발의 경우, 프론트엔드와 백엔드로 나누어 개발됩니다. 프론트엔드는 사용자가 직접 접촉하는 웹 페이지의 디자인과 인터페이스를 담당하며, 백엔드는 웹 페이지의 기능과 데이터 처리를 담당합니다. 프론트엔드는 HTML, CSS, JavaScript를 사용하여 개발되며, 백엔드는 서버사이드 스크립트 언어와 데이터베이스를 사용하여 개발됩니다.\n\n웹 개발 프로젝트를 진행할 때, 프론트엔드와 백엔드 개발자 간의 소통이 매우 중요합니다. 프론트엔드 개발자는 백엔드 개발자에게 필요한 데이터 구조와 API를 요청하고, 백엔드 개발자는 프론트엔드 개발자에게 데이터를 제공하는 API를 구현합니다.\n\n웹 개발 프로젝트는 단순히 웹 페이지를 만드는 것 이상으로, 사용자에게 편리하고 유용한 서비스를 제공하기 위해 다양한 기술과 개념을 이해하고 활용해야 합니다.\n\n\n\n\n        사용자 질문: 서버사이드 프로그래밍에 대해 알려줘 ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236655, 238608, 104569, 236179, 28693, 238559, 72494, 235269, 61943, 236645, 236137, 160587, 237465, 236179, 235248, 241305, 204551, 235265, 108, 145, 109, 688, 1620, 31288, 58510, 93674, 238608, 243903, 22803, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 215134, 237154, 688, 109, 238744, 235248, 242756, 50691, 236214, 31288, 58510, 93674, 238608, 243903, 22803, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 49532, 241631, 237233, 215134, 237154, 236392, 220596, 43395, 235265, 235248, 109, 688, 244073, 239308, 196582, 236648, 115049, 237233, 81673, 21743, 116742, 109, 235287, 5231, 239483, 122717, 239753, 236859, 160590, 237135, 66058, 61943, 236645, 235248, 241656, 22803, 191754, 156610, 43761, 238304, 26291, 235269, 61943, 236645, 120618, 236392, 101260, 236655, 19319, 236375, 75980, 239457, 72494, 129669, 236950, 237312, 238721, 236179, 100280, 236569, 43395, 235265, 34103, 238131, 161615, 239837, 236859, 236361, 26801, 238946, 85024, 171754, 236770, 47555, 235265, 235248, 108, 235287, 5231, 236554, 238364, 160590, 237135, 66058, 55154, 238364, 235248, 241656, 22803, 191754, 156610, 43761, 238304, 26291, 235269, 31288, 106191, 236791, 116518, 48060, 235269, 61943, 236645, 30743, 239907, 235269, 112762, 239571, 131006, 50833, 237358, 73143, 215134, 236511, 211896, 236392, 22618, 238356, 43395, 235265, 12071, 235269, 29617, 235269, 39671, 235269, 21237, 235269, 13116, 235265, 2833, 73143, 235832, 26801, 238946, 85024, 171754, 236770, 47555, 235265, 109, 236554, 238364, 237807, 91940, 122717, 239753, 236859, 236214, 31288, 106191, 236791, 187118, 36203, 238033, 63806, 237545, 206716, 235269, 91940, 122717, 239753, 236859, 160590, 237135, 227613, 236645, 236791, 58510, 240405, 236859, 241167, 237135, 235269, 55154, 238364, 160590, 237135, 227613, 236645, 236791, 124559, 241167, 237135, 112778, 43761, 245257, 12957, 235265, 111, 235290, 5231, 241632, 239296, 224047, 241305, 95573, 235119, 239296, 224047, 241305, 125507, 236840, 236361, 215134, 236511, 95917, 91940, 122717, 239753, 236859, 160590, 237135, 168788, 236791, 46749, 238994, 238080, 22618, 55496, 235265, 113, 1620, 31288, 227613, 22803, 55154, 238364, 160590, 237135, 5135, 91940, 122717, 239753, 236859, 160590, 237135, 235292, 60318, 238335, 239158, 237233, 99797, 240046, 236511, 134472, 109, 238744, 153818, 236648, 31288, 227613, 22803, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 91292, 235832, 239158, 235269, 163558, 51806, 238186, 236137, 60318, 238335, 239158, 235269, 213512, 99797, 240046, 236511, 134472, 28693, 239558, 236392, 31850, 236569, 43395, 235265, 235248, 109, 688, 236554, 238364, 160590, 237135, 688, 236214, 31288, 55154, 238364, 22803, 191754, 156610, 215441, 236375, 235269, 112762, 239571, 131006, 165866, 239969, 235269, 112762, 168788, 235269, 19319, 106191, 116518, 73143, 236392, 205799, 238272, 43395, 235265, 5231, 237199, 239158, 236648, 29283, 238179, 237154, 235269, 112762, 239571, 131006, 165866, 239969, 120340, 235832, 237154, 235269, 83942, 239457, 237154, 688, 235832, 218631, 235269, 5231, 238335, 239158, 236648, 55154, 238364, 43761, 236345, 160284, 236361, 237807, 224047, 241305, 118058, 34805, 237794, 688, 47555, 235265, 40712, 237526, 171754, 236770, 236214, 29617, 235269, 21237, 235269, 39671, 235269, 12071, 235269, 13116, 235265, 2833, 47555, 235265, 109, 688, 239483, 122717, 239753, 236859, 160590, 237135, 688, 236214, 61943, 236645, 236137, 129669, 236950, 237312, 238721, 22803, 191754, 156610, 19319, 235269, 26862, 235269, 22978, 236375, 198766, 238602, 215441, 236375, 235269, 61943, 236645, 227397, 67650, 236354, 42916, 238115, 235269, 36203, 238033, 238115, 237545, 73143, 236392, 205799, 238272, 43395, 235265, 5231, 237199, 239158, 236648, 235119, 239296, 224047, 241305, 125507, 236840, 235269, 55154, 238364, 43761, 236345, 99091, 237433, 235269, 220234, 237047, 238602, 61943, 236645, 43033, 240521, 688, 225022, 235269, 5231, 238335, 239158, 236648, 29283, 238179, 174375, 239618, 237154, 235269, 129669, 236950, 237312, 238721, 83942, 239457, 237154, 132793, 235269, 64301, 239474, 31850, 236511, 688, 47555, 235265, 109, 688, 236770, 242251, 51806, 238186, 236392, 134472, 149735, 69225, 239303, 237526, 235336, 688, 109, 235287, 5231, 237036, 238179, 235832, 215134, 48060, 112762, 239571, 131006, 211896, 235832, 99805, 236039, 237722, 55154, 238364, 160590, 237135, 688, 236791, 134472, 204551, 235265, 108, 235287, 5231, 238146, 210450, 36203, 238033, 238115, 237545, 235269, 49697, 237603, 227397, 67650, 236354, 235269, 235119, 239296, 224047, 241305, 125507, 236840, 236361, 215134, 188898, 237722, 91940, 122717, 239753, 236859, 160590, 237135, 688, 236791, 134472, 204551, 235265, 109, 236770, 242251, 51806, 238186, 235832, 126277, 99797, 237961, 236511, 194255, 31288, 122096, 239135, 236432, 239814, 146689, 236137, 49061, 238308, 85024, 73713, 237302, 17309, 239383, 236179, 156976, 72510, 236864, 129090, 235265, 235248, 111, 235248, 110, 1620, 73713, 239618, 237465, 109, 238744, 235248, 242756, 50691, 236214, 149598, 236645, 70471, 235248, 242394, 128753, 160587, 237465, 236392, 235248, 240080, 240586, 235248, 242383, 239079, 239907, 236392, 46355, 238526, 48060, 235269, 11464, 174287, 160587, 237465, 236179, 71100, 235248, 241305, 236392, 134498, 236386, 93806, 235248, 242850, 237302, 236791, 149598, 238994, 40284, 65503, 86040, 237603, 235832, 55496, 235265, 235248, 109, 244073, 239308, 196582, 26291, 236214, 664, 235442, 235611, 239189, 235442, 236212, 251336, 189966, 236591, 250043, 235703, 253114, 238512, 46062, 664, 235367, 247790, 236728, 235979, 248215, 238512, 235703, 248215, 236728, 235703, 248806, 239189, 235367, 252233, 239189, 187197, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 18198, 251316, 251918, 235979, 236048, 252469, 235442, 235611, 239189, 235979, 254473, 252690, 235979, 235657, 250064, 235442, 237429, 238512, 189966, 236591, 250043, 235442, 235657, 249616, 189966, 252151, 237361, 235979, 248215, 238512, 46062, 664, 235703, 251642, 252469, 187197, 251699, 239189, 235979, 236067, 251336, 235367, 253114, 236728, 3595, 237807, 132929, 160587, 237465, 94525, 31850, 236569, 238070, 238986, 235269, 11464, 174287, 160587, 237465, 84551, 149598, 236645, 94525, 40712, 239042, 154094, 237807, 127637, 236392, 70231, 235248, 243890, 235832, 201194, 48060, 64301, 241831, 238080, 22618, 21167, 153145, 235248, 239862, 238994, 43395, 235265, 235248, 109, 238665, 240405, 90621, 235269, 138720, 235248, 242756, 50691, 236214, 149598, 236645, 215895, 235248, 243890, 235832, 72941, 17309, 236464, 237807, 64301, 241831, 236392, 46355, 236840, 206716, 235269, 32275, 236354, 236375, 236137, 235248, 241305, 236392, 134498, 236655, 236361, 153145, 235248, 239862, 238994, 40284, 75630, 236569, 231588, 31087, 239522, 43395, 235265, 235248, 113, 1620, 55154, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 171754, 236770, 591, 187655, 235269, 48623, 235269, 29617, 235275, 51732, 237905, 73713, 239618, 109, 238744, 133889, 236214, 196371, 235269, 48623, 235269, 29617, 48740, 128753, 55154, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 171754, 236770, 236137, 94492, 241330, 237233, 91292, 235832, 239158, 236392, 51732, 237905, 211558, 43395, 235265, 235248, 109, 688, 244073, 239308, 196582, 66058, 109, 235287, 5231, 187655, 591, 16488, 7538, 27779, 1245, 688, 139, 108, 141, 235287, 12071, 28693, 238559, 26291, 235269, 26801, 240753, 237551, 28693, 238391, 237545, 27941, 202429, 49061, 240130, 236179, 99797, 237961, 235265, 108, 141, 235287, 70685, 236864, 237603, 224907, 46355, 236183, 237036, 236669, 236361, 120340, 235832, 206716, 235269, 200944, 74116, 238151, 22803, 126277, 187800, 236648, 131901, 237766, 241938, 236392, 34103, 239566, 235265, 108, 235287, 5231, 29697, 591, 16557, 4566, 6974, 20506, 1245, 688, 108, 141, 235287, 31288, 227613, 236179, 126942, 236511, 200901, 94525, 99805, 236655, 50390, 238325, 237154, 235832, 187800, 238036, 235265, 108, 141, 235287, 227613, 125507, 236840, 236361, 235119, 238500, 236464, 50548, 238199, 236361, 127149, 239813, 72494, 235248, 241830, 241496, 242515, 73143, 44997, 240753, 237551, 31288, 236417, 78749, 236179, 40712, 236375, 61943, 235265, 108, 235287, 5231, 47263, 591, 9440, 13506, 27779, 1245, 688, 108, 141, 235287, 41645, 227195, 236375, 237433, 237964, 236859, 236361, 227613, 236511, 55154, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 209560, 237589, 235265, 108, 141, 235287, 235248, 242984, 236840, 237312, 55154, 238364, 161409, 237392, 22803, 84608, 239158, 236392, 29283, 235832, 95091, 235269, 63102, 250412, 236354, 161409, 237392, 180860, 131901, 237766, 241938, 235832, 235248, 243937, 238036, 235265, 108, 141, 235287, 235248, 242984, 236840, 237312, 22803, 87997, 171754, 236770, 236791, 31288, 22803, 61943, 238080, 22618, 21167, 153145, 224790, 40284, 60318, 239158, 235265, 109, 688, 238665, 240405, 66058, 109, 238316, 171754, 236770, 236214, 60318, 238335, 239158, 235832, 218631, 235269, 31288, 236417, 78749, 236137, 235248, 240753, 237551, 235269, 86040, 237603, 235269, 161409, 237392, 73143, 236179, 156976, 99797, 237961, 236511, 171754, 236770, 236361, 32048, 245257, 12957, 235265, 235248, 114, 1620, 55154, 238364, 160590, 237135, 171754, 236770, 44997, 237936, 235292, 29617, 60709, 28693, 237986, 171754, 236770, 51732, 237905, 109, 238744, 235248, 251424, 237524, 236214, 31288, 227613, 22803, 61943, 156610, 55154, 238364, 160590, 237135, 171754, 236770, 47250, 113859, 236589, 5231, 29697, 688, 236791, 44997, 237936, 48060, 235269, 102708, 40712, 237526, 171754, 236770, 132642, 94492, 241330, 237233, 61943, 17309, 241569, 236791, 51732, 237905, 211558, 43395, 235265, 109, 688, 29697, 688, 236214, 5231, 237908, 239077, 688, 48060, 5231, 237410, 244142, 44997, 236354, 688, 225022, 235269, 5231, 237941, 55154, 238364, 22803, 191754, 688, 141048, 5231, 11271, 215441, 70685, 236179, 235248, 243886, 237707, 688, 141048, 49697, 85024, 31288, 106191, 236791, 116518, 43395, 235265, 235248, 109, 235287, 112762, 239571, 131006, 50833, 237358, 235269, 235248, 243751, 168788, 235269, 222330, 238705, 60709, 48740, 239109, 159838, 73143, 32048, 238780, 236511, 201619, 236392, 22618, 238356, 43395, 235265, 235248, 108, 235287, 138720, 237465, 180860, 127149, 238335, 236511, 29617, 215441, 71277, 236569, 236791, 187118, 200944, 118058, 236392, 31288, 106191, 236179, 100280, 236569, 40284, 130059, 236392, 29283, 237386, 244557, 12957, 235265, 109, 236039, 239296, 40712, 237526, 55154, 238364, 160590, 237135, 171754, 236770, 237290, 237233, 20350, 94492, 241330, 236648, 115049, 237233, 81673, 21743, 235292, 109, 235287, 5231, 27922, 95573, 127149, 238665, 48060, 23248, 239821, 237154, 235832, 187800, 236655, 31288, 227613, 136201, 209929, 112762, 211558, 235269, 30743, 237495, 236183, 239474, 73143, 32048, 238780, 236511, 70754, 238305, 22803, 61943, 129090, 235265, 108, 235287, 5231, 3432, 235265, 2833, 591, 44980, 77056, 235292, 91940, 122717, 239753, 236859, 237807, 55154, 238364, 189364, 22803, 22978, 236791, 61943, 238080, 22618, 72941, 117904, 243792, 243751, 26291, 235269, 61928, 210450, 31288, 122096, 239135, 236432, 239814, 146689, 236179, 99797, 237961, 43395, 235265, 108, 235287, 5231, 53481, 95573, 39671, 611, 88887, 58510, 237990, 238700, 239779, 237611, 237807, 135132, 61943, 141048, 31288, 227613, 50390, 238325, 237154, 236392, 187800, 206367, 65503, 40712, 236375, 61943, 129090, 235265, 108, 235287, 5231, 16488, 95573, 26801, 240753, 237551, 31288, 122096, 239135, 236432, 239814, 146689, 227613, 236179, 99797, 237961, 206716, 235269, 70685, 236864, 237154, 237233, 69781, 237199, 237154, 236392, 235248, 243165, 239043, 236464, 55496, 235265, 109, 239753, 236770, 134472, 236648, 5231, 237964, 236375, 242989, 236859, 86040, 237603, 235269, 73713, 237302, 236417, 239383, 235269, 227613, 235248, 241452, 236137, 43033, 240521, 60709, 51914, 238033, 236840, 73143, 236392, 46749, 238994, 688, 72494, 72510, 236864, 149735, 179694, 235265, 235248, 111, 239483, 122717, 239753, 236859, 235248, 241656, 58510, 237990, 238700, 239779, 237611, 236214, 54715, 238740, 236375, 91940, 122717, 239753, 236859, 235248, 241656, 215441, 236791, 227613, 40284, 125507, 236840, 236791, 133057, 241949, 22618, 21167, 237458, 50316, 237807, 237014, 153145, 61943, 74860, 237598, 235269, 93241, 236214, 87997, 215441, 236791, 143636, 240449, 198766, 238080, 22618, 236840, 69581, 235265, 5231, 236417, 238146, 93241, 236361, 63806, 236464, 127149, 238335, 236511, 17309, 78749, 236137, 13566, 236791, 49427, 239227, 236039, 237722, 93241, 236361, 143636, 240449, 198766, 40284, 215441, 236361, 70231, 235119, 238500, 236464, 207092, 237233, 237603, 236666, 22618, 69581, 116742, 108, 235832, 237807, 26801, 237602, 90621, 235269, 93241, 236361, 55154, 238364, 241656, 31288, 122096, 239135, 236432, 239814, 146689, 236137, 235248, 241897, 238199, 245310, 236859, 236791, 5231, 237964, 237990, 238700, 239779, 237611, 56341, 235832, 198766, 40284, 143613, 73523, 236137, 142882, 72159, 53355, 238994, 239254, 29599, 688, 61742, 235265, 591, 27922, 22803, 24493, 55154, 238364, 237807, 132929, 215134, 236511, 201619, 49061, 238513, 236392, 106204, 238036, 124431, 109976, 143613, 53355, 244597, 95091, 95945, 237807, 132929, 21237, 31288, 58510, 237990, 238700, 239779, 237611, 236214, 102708, 46355, 237545, 236511, 50316, 237302, 237807, 135132, 235248, 242579, 236569, 61943, 238080, 22618, 72941, 50316, 237302, 236791, 110308, 78949, 2330, 111, 6176, 72510, 240405, 108, 236554, 238364, 235248, 241656, 58510, 93674, 238608, 243903, 236648, 31288, 227613, 22803, 215134, 236511, 61169, 238080, 236392, 153422, 235265, 108, 237358, 237603, 31288, 236417, 78749, 236791, 49061, 240130, 48060, 61943, 236645, 70471, 207221, 244417, 238867, 176427, 236791, 110308, 40284, 65503, 88036, 236669, 237603, 61742, 235265, 108, 236554, 238364, 235248, 241656, 58510, 93674, 238608, 243903, 236648, 91940, 122717, 239753, 236859, 235248, 241656, 58510, 93674, 238608, 243903, 237233, 236214, 102708, 86040, 237603, 237233, 161409, 237392, 22803, 63806, 237358, 206716, 235269, 94492, 236864, 58510, 93674, 238608, 243903, 171754, 236770, 237807, 31288, 58510, 237990, 238700, 239779, 237611, 236791, 61943, 78949, 235265, 109, 1620, 109, 1620, 109, 1620, 109, 235832, 235248, 242756, 50691, 236214, 55154, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236137, 28693, 238744, 49532, 241631, 236392, 220596, 48060, 55496, 235265, 235248, 109, 1620, 40712, 237526, 196582, 73713, 239618, 235292, 109, 235287, 5231, 236554, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236137, 86040, 237603, 66058, 31288, 55154, 238364, 22803, 191754, 156610, 215441, 236375, 235269, 61943, 236645, 70471, 207221, 244417, 238867, 31288, 176427, 236791, 110308, 48060, 49697, 237603, 31288, 236417, 78749, 236791, 49061, 240130, 40284, 65503, 61943, 129090, 235265, 108, 235287, 5231, 237358, 237603, 31288, 236417, 78749, 66058, 61943, 236645, 236137, 227038, 236179, 156976, 112762, 239571, 131006, 22803, 112762, 236791, 174538, 237807, 19319, 235248, 240940, 239135, 241982, 236179, 235248, 243886, 237707, 72494, 32048, 238780, 236511, 176427, 236791, 116518, 43395, 235265, 108, 235287, 5231, 236554, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 237233, 91940, 122717, 239753, 236859, 160590, 237135, 58510, 93674, 238608, 243903, 236137, 91292, 235832, 239158, 66058, 108, 141, 235287, 86040, 237603, 235292, 55154, 238364, 160590, 237135, 236214, 224047, 241305, 235248, 241996, 164594, 236791, 116518, 48060, 235269, 91940, 122717, 239753, 236859, 160590, 237135, 236214, 31288, 83137, 236137, 100280, 238513, 237233, 105560, 237358, 236392, 31850, 236770, 43395, 235265, 108, 141, 235287, 58510, 93674, 238608, 243903, 171754, 236770, 235292, 55154, 238364, 160590, 237135, 236214, 29617, 235269, 21237, 235269, 39671, 73143, 32048, 238780, 236511, 171754, 236770, 236791, 61943, 206716, 235269, 91940, 122717, 239753, 236859, 160590, 237135, 236214, 40712, 236375, 22978, 236791, 61943, 43395, 235265, 108, 141, 235287, 191754, 161409, 237392, 235292, 55154, 238364, 160590, 237135, 236214, 55154, 238364, 22803, 235269, 91940, 122717, 239753, 236859, 160590, 237135, 236214, 61943, 236645, 236137, 129669, 236950, 237312, 238721, 22803, 191754, 129090, 235265, 108, 235287, 5231, 237941, 58510, 237990, 238700, 239779, 237611, 66058, 55154, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236392, 168947, 50316, 237302, 236375, 235269, 234541, 85024, 31288, 55154, 238364, 201619, 236392, 110308, 72494, 227613, 125507, 236840, 236791, 187800, 47555, 235265, 109, 235287, 5231, 238665, 240405, 66058, 55154, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 31288, 227613, 22803, 88036, 236669, 85024, 61169, 238080, 236392, 30181, 238986, 235269, 49697, 237603, 31288, 236417, 78749, 49061, 240130, 60709, 61943, 236645, 207221, 244417, 238867, 176427, 110308, 236179, 215134, 43395, 235265, 111, 237526, 235265, 109, 237941, 227613, 236137, 95917, 235269, 58510, 240405, 236859, 241167, 237135, 237807, 124559, 241167, 237135, 236375, 38585, 240265, 236770, 227613, 129090, 235265, 58510, 240405, 236859, 241167, 237135, 236214, 61943, 184819, 143636, 240449, 165866, 244316, 40284, 31288, 106191, 236137, 146315, 237233, 227397, 67650, 236354, 236791, 205799, 238272, 206716, 235269, 124559, 241167, 237135, 236214, 31288, 106191, 236137, 201619, 237233, 112762, 168788, 236791, 205799, 238272, 43395, 235265, 58510, 240405, 236859, 241167, 237135, 236214, 19319, 235269, 26862, 235269, 22978, 236791, 61943, 72494, 227613, 238070, 238986, 235269, 124559, 241167, 237135, 236214, 55154, 238364, 236417, 217534, 32275, 237611, 239837, 236859, 171754, 236770, 237807, 112762, 239571, 131006, 236791, 61943, 72494, 227613, 129090, 235265, 109, 237941, 227613, 132880, 242989, 236859, 236791, 83453, 238356, 238080, 54715, 235269, 58510, 240405, 236859, 241167, 237135, 237807, 124559, 241167, 237135, 227613, 236645, 127149, 236137, 44997, 238693, 235832, 195531, 215134, 43395, 235265, 58510, 240405, 236859, 241167, 237135, 227613, 236645, 236214, 124559, 241167, 237135, 227613, 236645, 70471, 126942, 236511, 112762, 49061, 237602, 237807, 10665, 236791, 227038, 48060, 235269, 124559, 241167, 237135, 227613, 236645, 236214, 58510, 240405, 236859, 241167, 237135, 227613, 236645, 70471, 112762, 236791, 110308, 40284, 10665, 236791, 49061, 238513, 43395, 235265, 109, 237941, 227613, 132880, 242989, 236859, 236214, 80289, 239937, 239055, 31288, 106191, 236791, 49427, 237135, 236214, 29599, 159798, 26291, 235269, 61943, 236645, 70471, 136188, 236432, 48060, 46355, 237545, 236511, 206586, 236791, 110308, 72159, 93806, 32048, 238780, 236511, 213222, 237233, 49532, 241631, 236392, 201194, 48060, 147226, 237545, 149735, 179694, 235265, 112, 145, 236417, 237545, 236645, 160587, 237465, 235292, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236179, 142192, 78183, 238994, 244669, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:59142 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:12 engine.py:275] Added request cmpl-314309e16b7b4675bc1416f85e76bfa5-0.
INFO 02-16 23:33:22 metrics.py:455] Avg prompt throughput: 208.3 tokens/s, Avg generation throughput: 13.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:33:32 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:33:52 logger.py:39] Received request cmpl-d963e20f97144056bfeb7775bb3bcaab-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 서버사이드 프로그래밍에 대해 알려줘 <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236179, 142192, 78183, 238994, 244669, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:54204 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:52 engine.py:275] Added request cmpl-d963e20f97144056bfeb7775bb3bcaab-0.
INFO 02-16 23:33:52 metrics.py:455] Avg prompt throughput: 128.6 tokens/s, Avg generation throughput: 0.1 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.3%, CPU KV cache usage: 0.0%.
INFO 02-16 23:33:53 logger.py:39] Received request cmpl-a3eef7301a994f06ae98a9485c3ee4ce-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 23:33:53 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍이란 무엇인가 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235304, 235292, 235304, 235304, 235292, 235308, 235304, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 235832, 240136, 60331, 242513, 236589, 236361, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:54204 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:53 engine.py:275] Added request cmpl-a3eef7301a994f06ae98a9485c3ee4ce-0.
INFO 02-16 23:33:54 logger.py:39] Received request cmpl-4c881cec94ac4160af6241a983ad38cd-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 23:33:54 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍의 역할 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235304, 235292, 235304, 235304, 235292, 235308, 235310, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236137, 61169, 238080, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:54204 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:54 engine.py:275] Added request cmpl-4c881cec94ac4160af6241a983ad38cd-0.
INFO 02-16 23:33:54 logger.py:39] Received request cmpl-f7eb77ee3a834ef9a08695e7ce34c395-0: prompt: '<start_of_turn>system \n주어진 쿼리에 대답하기 위해, 인터넷 정보 검색이 필요한지 판단해야 한다.\n\n검색 실행 여부에 대한 판단 기준은 다음과 같다:\n1. 질문 유형: 질문이 사고를 요구하는가, 정보를 요구하는가?\n2. 맥락: 질문에 포함된 정보만으로 답변을 구성할 수 있는가?\n\n인터넷 검색 간 판단 기준은 다음과 같다:\n1. 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n2. 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n3. 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n4. 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n\n답변은 오직 아래 예시와 같은 JSON 형식으로 해야 하며, 다른 코드나 내용을 포함해서는 안 된다.\nrouting은 인터넷 검색의 필요 여부를 나타낸다. (필요한 경우 "web", 아닐 경우 "none")\n{"subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보를 필요로 합니다."}\n{"subquery": "지난 주 있었던 지진에 대해 알려줘", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보를 필요로 합니다."},\n{"subquery": "2x + 4 = 0에서 x는?", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않습니다."}\n\n    현재 시각: 2025-02-16 23:33:54 <end_of_turn>\n\n    <start_of_turn>user 서버사이드 프로그래밍의 예시 <end_of_turn>\n\n    <start_of_turn>model ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 106, 9020, 235248, 108, 237014, 236770, 237589, 235248, 244489, 236432, 236179, 26801, 241305, 72159, 93806, 235269, 227397, 242319, 104569, 203755, 235832, 126942, 236511, 236183, 135101, 238335, 149735, 153422, 235265, 109, 239740, 238931, 191754, 41896, 237092, 236179, 71100, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 160587, 237465, 46355, 238867, 235292, 160587, 237465, 235832, 17309, 236464, 236791, 73713, 237302, 40284, 236361, 235269, 104569, 236791, 73713, 237302, 40284, 236361, 235336, 108, 235284, 235265, 235248, 242435, 241155, 235292, 160587, 237465, 236179, 157329, 238602, 104569, 237598, 26291, 235248, 241305, 239042, 236392, 220641, 238080, 22618, 72941, 236361, 235336, 109, 236589, 237524, 242319, 203755, 127149, 135101, 238335, 28693, 239558, 236648, 115049, 237233, 81673, 236039, 235292, 108, 235274, 235265, 27941, 236137, 237154, 235292, 40712, 236939, 236361, 75500, 237502, 104569, 237807, 187003, 235832, 72941, 236361, 235336, 75500, 237502, 104569, 236361, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 108, 235284, 235265, 35467, 240533, 237154, 235292, 235248, 241305, 239042, 236392, 220641, 72159, 93806, 49061, 238308, 237603, 224907, 35467, 239131, 236511, 104569, 236361, 126942, 236511, 236361, 235336, 108, 235304, 235265, 31087, 237465, 237154, 235292, 160587, 237465, 236137, 40712, 236939, 236361, 31087, 237465, 34805, 238186, 180521, 235248, 243853, 238335, 195363, 237807, 187003, 235832, 72941, 236361, 235336, 108, 235310, 235265, 60057, 244066, 237154, 235292, 235248, 75259, 203177, 236791, 83160, 236511, 75985, 238597, 239740, 239907, 235832, 235248, 241305, 239042, 236137, 160587, 236392, 220234, 237047, 236569, 238705, 236214, 236361, 235336, 109, 241305, 239042, 236648, 44245, 239385, 23745, 238608, 71277, 236569, 237807, 132929, 11384, 112507, 238186, 26291, 56787, 238305, 30181, 238986, 235269, 102708, 215441, 236915, 196582, 236392, 157329, 206666, 236214, 70685, 95622, 236039, 235265, 108, 60905, 236648, 227397, 242319, 203755, 236137, 126942, 41896, 237092, 236791, 211491, 243927, 236039, 235265, 591, 239498, 237526, 236511, 95917, 664, 4405, 824, 23745, 244604, 95917, 664, 10763, 1388, 108, 9766, 1558, 3630, 1192, 664, 236800, 237045, 40712, 237526, 55526, 239830, 236183, 75943, 239250, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236800, 237045, 236137, 40712, 237526, 55526, 239830, 194255, 27941, 236137, 237154, 235832, 94177, 236464, 60057, 244066, 237154, 235832, 215134, 236345, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 235270, 108, 9766, 1558, 3630, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236179, 142192, 78183, 238994, 244669, 824, 664, 60905, 1192, 664, 4405, 824, 664, 21248, 574, 1192, 664, 236183, 240198, 40712, 21167, 238220, 240080, 34805, 237589, 236648, 27941, 236137, 237154, 235832, 94177, 212026, 235269, 235248, 75259, 104569, 236791, 126942, 236375, 179694, 1464, 789, 108, 9766, 1558, 3630, 1192, 664, 235284, 235297, 963, 235248, 235310, 589, 235248, 235276, 22803, 1141, 236214, 46062, 664, 60905, 1192, 664, 10763, 824, 664, 21248, 574, 1192, 664, 236666, 238597, 238037, 236864, 238186, 236137, 235248, 242003, 206367, 235248, 75259, 104569, 236791, 126942, 236375, 30181, 236183, 187132, 1464, 235270, 109, 141, 238513, 238360, 27941, 238316, 235292, 235248, 235284, 235276, 235284, 235308, 235290, 235276, 235284, 235290, 235274, 235318, 235248, 235284, 235304, 235292, 235304, 235304, 235292, 235308, 235310, 235248, 107, 109, 141, 106, 1645, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236137, 71277, 236569, 235248, 107, 109, 141, 106, 2516, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:54204 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:54 engine.py:275] Added request cmpl-f7eb77ee3a834ef9a08695e7ce34c395-0.
INFO 02-16 23:33:57 logger.py:39] Received request cmpl-cb80ea9a993f400d85e3c7f2d0ab17ac-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        \n![](https://velog.velcdn.com/images/hope1213/post/54bce33a-07d8-4d3d-96c5-6a99b9d9cdc7/image.png)\n\n웹 개발을 할 때 가장 중요한 결정 중 하나는 어떤 작업을 서버 사이드(Server-side)에서 처리할지, 클라이언트 사이드(Client-side)에서 처리할지를 결정하는 것입니다. 이 글에서는 서버 사이드와 클라이언트 사이드의 차이점, 각 방식의 장단점, 그리고 어떤 상황에서 어떤 방식을 선택해야 하는지에 대해 살펴보겠습니다.\n\n#### 서버 사이드(Server-side)란?\n\n서버 사이드 프로그래밍은 웹 서버에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 클라이언트(사용자의 브라우저)에서 요청을 받을 때 실행됩니다. 서버 사이드 스크립트는 데이터베이스에 접근하고, 데이터를 처리하고, HTML 페이지를 동적으로 생성하는 데 사용됩니다.\n즉 웹에서 서버와 클라이언트는 정해진 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.\n\n\n**주요 언어 및 기술:**\n![](https://velog.velcdn.com/images/hope1213/post/6f8e3e86-7b7d-453a-8684-da3898c25af4/image.png)\n\n- PHP\n- Python (Django, Flask)\n- Ruby (Ruby on Rails)\n- Java (Spring)\n- Node.js\n\n**장점:**\n1. **보안**: 중요한 로직과 데이터베이스 접근이 서버에서 처리되어 클라이언트에서 접근할 수 없습니다.\n2. **데이터베이스 접근**: 서버에서 직접 데이터베이스와 상호작용할 수 있어 데이터 처리와 저장이 용이합니다.\n3. **호환성**: 모든 클라이언트가 동일한 서버 측 코드를 실행하므로 브라우저 호환성 문제를 줄일 수 있습니다.\n\n**단점:**\n1. **서버 부하**: 모든 처리가 서버에서 이루어지기 때문에 서버의 부하가 증가할 수 있습니다.\n2. **응답 시간**: 클라이언트가 요청을 보내고 서버가 응답할 때까지 시간이 걸릴 수 있습니다.\n\n#### 클라이언트 사이드(Client-side)란?\n\n클라이언트 사이드 프로그래밍은 사용자의 브라우저에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 HTML, CSS, JavaScript로 작성되며, 사용자의 인터페이스를 조작하고 사용자와 상호작용합니다.\n\n![](https://velog.velcdn.com/images/hope1213/post/d9319a2f-6c80-477b-987e-2102e2d24bbe/image.png) 일반적으로 Chrome과 같은 웹브라우저는 굉장히 많은 메모리를 차지합니다.\n\n단순히 탐색을 진행했을 뿐인데 다른 프로세스에 비해 굉장히 많은 메모리를 사용한다는 점에서 의문을 가질수 있습니다. 그 이유는 현재 Web쪽에 무거운 처리 대부분은 클라이언트 사이드 언어로 작업하기 때문입니다.\n\n\n**주요 언어 및 기술:**\n- HTML\n- CSS\n- JavaScript (React, Angular, Vue.js)\n\n\n**장점:**\n1. **빠른 응답**: 서버에 요청을 보내지 않고 브라우저에서 바로 처리하므로 응답 속도가 빠릅니다.\n2. **서버 부하 감소**: 많은 작업을 클라이언트에서 처리함으로써 서버의 부담을 줄일 수 있습니다.\n3. **향상된 사용자 경험**: 애니메이션, 실시간 업데이트 등 사용자 인터페이스를 더욱 풍부하게 만들 수 있습니다.\n\n**단점:**\n1. **보안 문제**: 클라이언트 사이드 코드가 브라우저에 노출되므로 보안에 취약할 수 있습니다.\n2. **브라우저 호환성**: 다양한 브라우저에서 동일하게 작동하도록 코드 작성이 어려울 수 있습니다.\n3. **제한된 성능**: 클라이언트의 기기 성능에 따라 처리 속도가 달라질 수 있습니다.\n\n#### 언제 서버 사이드를 선택해야 할까?\n\n- **보안이 중요한 경우**: 민감한 데이터나 중요한 비즈니스 로직이 포함된 경우 서버 사이드 처리가 필요합니다.\n- **데이터베이스 작업**: 데이터베이스와의 상호작용이 빈번하게 이루어질 때 서버 사이드가 적합합니다.\n- **복잡한 처리**: 복잡한 계산이나 대량의 데이터 처리가 필요할 때 서버 측에서 처리하는 것이 좋습니다.\n\n#### 언제 클라이언트 사이드를 선택해야 할까?\n\n- **실시간 상호작용**: 사용자와의 실시간 상호작용이 중요한 경우 클라이언트 사이드 처리가 필요합니다.\n- **인터페이스 동적 처리**: 동적인 사용자 인터페이스, 애니메이션, 실시간 업데이트 등은 클라이언트 사이드에서 처리하는 것이 좋습니다.\n- **서버 부하 분산**: 서버의 부하를 줄이고자 할 때 일부 처리를 클라이언트 사이드로 이동할 수 있습니다.\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 32463, 235274, 235284, 235274, 235304, 235283, 2729, 235283, 235308, 235310, 235268, 532, 235304, 235304, 235250, 235290, 235276, 235324, 235258, 235321, 235290, 235310, 235258, 235304, 235258, 235290, 235315, 235318, 235260, 235308, 235290, 235318, 235250, 235315, 235315, 235268, 235315, 235258, 235315, 88911, 235324, 235283, 2502, 235265, 7424, 235275, 109, 237941, 227613, 236392, 69225, 54715, 126277, 215134, 236511, 72510, 236864, 47250, 113859, 236214, 53355, 242251, 211896, 236392, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 2043, 235275, 22803, 168788, 238080, 236183, 235269, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 2043, 235275, 22803, 168788, 238080, 231588, 72510, 236864, 40284, 121393, 235265, 11464, 153818, 180860, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 91292, 235832, 239158, 235269, 163558, 51806, 238186, 236137, 60318, 238335, 239158, 235269, 213512, 53355, 242251, 36203, 240054, 22803, 53355, 242251, 51806, 238186, 236392, 134472, 149735, 109976, 236183, 236179, 142192, 130412, 245435, 237036, 241716, 21743, 235265, 109, 3308, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 2043, 235275, 240136, 235336, 109, 236554, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 31288, 55154, 238364, 22803, 191754, 156610, 215441, 236791, 198766, 40284, 109241, 223616, 43395, 235265, 11464, 215441, 236214, 91940, 122717, 239753, 236859, 235278, 236417, 237545, 236645, 236137, 129669, 236950, 237312, 238721, 235275, 22803, 227038, 236392, 101260, 236392, 54715, 191754, 129090, 235265, 55154, 238364, 160590, 237135, 32275, 237611, 239837, 236859, 236214, 112762, 239571, 131006, 236179, 165866, 239969, 48060, 235269, 112762, 236791, 168788, 48060, 235269, 19319, 106191, 236791, 49697, 90621, 116518, 40284, 65503, 61943, 129090, 235265, 108, 242579, 31288, 22803, 55154, 238364, 237807, 91940, 122717, 239753, 236859, 236214, 35467, 237138, 237589, 31288, 106191, 236375, 55154, 236375, 134512, 242780, 236405, 239814, 146689, 236392, 153422, 236464, 181539, 22618, 69581, 235265, 110, 688, 237014, 237526, 171754, 236770, 60709, 213222, 66058, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 32463, 235274, 235284, 235274, 235304, 235283, 2729, 235283, 235318, 235266, 235321, 235249, 235304, 235249, 235321, 235318, 235290, 235324, 235268, 235324, 235258, 235290, 235310, 235308, 235304, 235250, 235290, 235321, 235318, 235321, 235310, 235290, 1335, 235304, 235321, 235315, 235321, 235260, 235284, 235308, 2518, 235310, 235283, 2502, 235265, 7424, 235275, 109, 235290, 29617, 108, 235290, 21237, 591, 125068, 235269, 57155, 235275, 108, 235290, 39671, 591, 53481, 611, 88887, 235275, 108, 235290, 12071, 591, 13198, 235275, 108, 235290, 13116, 235265, 2833, 109, 688, 237199, 239158, 66058, 108, 235274, 235265, 5231, 237036, 238179, 95573, 215134, 236511, 54868, 239385, 237233, 112762, 239571, 131006, 165866, 239969, 235832, 55154, 238364, 22803, 168788, 141048, 91940, 122717, 239753, 236859, 22803, 165866, 239969, 238080, 22618, 176124, 235265, 108, 235284, 235265, 5231, 238266, 90081, 239571, 131006, 165866, 239969, 95573, 55154, 238364, 22803, 143636, 240449, 112762, 239571, 131006, 237807, 36203, 238033, 238115, 237545, 238080, 22618, 215995, 112762, 168788, 237807, 143077, 235832, 120340, 235832, 43395, 235265, 108, 235304, 235265, 5231, 238033, 239457, 237154, 95573, 87997, 91940, 122717, 239753, 236859, 236361, 49697, 236666, 236511, 55154, 238364, 235248, 241656, 215441, 236791, 191754, 236345, 212026, 129669, 236950, 237312, 238721, 83942, 239457, 237154, 132793, 236791, 184434, 236666, 22618, 55496, 235265, 109, 688, 238335, 239158, 66058, 108, 235274, 235265, 5231, 236554, 238364, 43761, 236345, 95573, 87997, 168788, 236361, 55154, 238364, 22803, 11464, 238949, 236770, 236183, 236386, 147801, 55154, 238364, 236137, 43761, 236345, 236361, 160284, 236361, 238080, 22618, 55496, 235265, 108, 235284, 235265, 5231, 240981, 241305, 118058, 95573, 91940, 122717, 239753, 236859, 236361, 227038, 236392, 29283, 238151, 236464, 55154, 238364, 236361, 224047, 241305, 238080, 54715, 109535, 118058, 235832, 180850, 241949, 22618, 55496, 235265, 109, 3308, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 2043, 235275, 240136, 235336, 109, 239483, 122717, 239753, 236859, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 61943, 236645, 236137, 129669, 236950, 237312, 238721, 22803, 191754, 156610, 215441, 236791, 198766, 40284, 109241, 223616, 43395, 235265, 11464, 215441, 236214, 19319, 235269, 26862, 235269, 22978, 236375, 198766, 238070, 238986, 235269, 61943, 236645, 236137, 227397, 67650, 236354, 236791, 42916, 238115, 48060, 61943, 236645, 237807, 36203, 238033, 238115, 237545, 43395, 235265, 109, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 32463, 235274, 235284, 235274, 235304, 235283, 2729, 235283, 235258, 235315, 235304, 235274, 235315, 235250, 235284, 235266, 235290, 235318, 235260, 235321, 235276, 235290, 235310, 235324, 235324, 235268, 235290, 235315, 235321, 235324, 235249, 235290, 235284, 235274, 235276, 235284, 235249, 235284, 235258, 235284, 235310, 12479, 235283, 2502, 235265, 7424, 235275, 234541, 90621, 23133, 237233, 132929, 31288, 238997, 236950, 237312, 238721, 236214, 235248, 250016, 237199, 239055, 139148, 75630, 237551, 176947, 91292, 236183, 43395, 235265, 109, 238335, 239937, 239055, 235248, 242850, 238931, 236392, 83453, 238356, 238267, 236392, 235248, 242591, 236589, 238266, 102708, 132880, 237533, 236354, 236179, 51732, 237138, 235248, 250016, 237199, 239055, 139148, 75630, 237551, 176947, 61943, 78949, 236214, 131901, 22803, 23594, 237465, 236392, 23248, 239574, 236669, 55496, 235265, 20350, 11464, 237766, 236214, 200944, 4556, 240734, 236179, 60331, 238154, 238138, 168788, 26801, 237092, 238304, 236648, 91940, 122717, 239753, 236859, 160590, 237135, 171754, 236770, 236375, 211896, 72159, 119518, 47555, 235265, 110, 688, 237014, 237526, 171754, 236770, 60709, 213222, 66058, 108, 235290, 19319, 108, 235290, 26862, 108, 235290, 22978, 591, 22469, 235269, 62173, 235269, 38244, 235265, 2833, 235275, 110, 688, 237199, 239158, 66058, 108, 235274, 235265, 5231, 241632, 239296, 224047, 241305, 95573, 55154, 238364, 236179, 227038, 236392, 29283, 238151, 236183, 48682, 236464, 129669, 236950, 237312, 238721, 22803, 55393, 236375, 168788, 236345, 212026, 224047, 241305, 125507, 236840, 236361, 235119, 245257, 12957, 235265, 108, 235284, 235265, 5231, 236554, 238364, 43761, 236345, 99091, 237433, 95573, 139148, 211896, 236392, 91940, 122717, 239753, 236859, 22803, 168788, 238467, 26291, 242974, 55154, 238364, 236137, 43761, 240599, 236392, 184434, 236666, 22618, 55496, 235265, 108, 235304, 235265, 5231, 240112, 237047, 238602, 61943, 236645, 43033, 240521, 95573, 122096, 221570, 235269, 61928, 210450, 142995, 238266, 78749, 73143, 61943, 236645, 227397, 67650, 236354, 236791, 70231, 243093, 209727, 237092, 101969, 128047, 22618, 55496, 235265, 109, 688, 238335, 239158, 66058, 108, 235274, 235265, 5231, 237036, 238179, 132793, 95573, 91940, 122717, 239753, 236859, 160590, 237135, 215441, 236361, 129669, 236950, 237312, 238721, 236179, 61138, 238483, 238070, 212026, 29283, 238179, 236179, 174375, 239618, 238080, 22618, 55496, 235265, 108, 235284, 235265, 5231, 238997, 236950, 237312, 238721, 83942, 239457, 237154, 95573, 32048, 238780, 236511, 129669, 236950, 237312, 238721, 22803, 49697, 236666, 101969, 63806, 237358, 236345, 153145, 215441, 198766, 235832, 53355, 238994, 239254, 22618, 55496, 235265, 108, 235304, 235265, 5231, 236939, 236511, 238602, 64301, 239474, 95573, 91940, 122717, 239753, 236859, 236137, 28693, 236386, 64301, 239474, 236179, 156976, 168788, 125507, 236840, 236361, 123083, 236950, 239574, 22618, 55496, 235265, 109, 3308, 171754, 236939, 55154, 238364, 160590, 237135, 236791, 134472, 149735, 69225, 239303, 235336, 109, 235290, 5231, 237036, 238179, 235832, 215134, 236511, 95917, 95573, 153107, 239199, 236511, 112762, 236915, 215134, 236511, 51732, 238894, 236405, 236354, 54868, 239385, 235832, 157329, 238602, 95917, 55154, 238364, 160590, 237135, 168788, 236361, 126942, 43395, 235265, 108, 235290, 5231, 238266, 90081, 239571, 131006, 211896, 95573, 112762, 239571, 131006, 237807, 236137, 36203, 238033, 238115, 237545, 235832, 235248, 241266, 238628, 101969, 11464, 238949, 236770, 239574, 54715, 55154, 238364, 160590, 237135, 236361, 99797, 237961, 43395, 235265, 108, 235290, 5231, 239205, 241533, 236511, 168788, 95573, 122447, 241533, 236511, 74715, 238325, 180521, 26801, 240833, 236137, 112762, 168788, 236361, 126942, 238080, 54715, 55154, 238364, 235248, 241656, 22803, 168788, 40284, 93205, 106509, 21743, 235265, 109, 3308, 171754, 236939, 91940, 122717, 239753, 236859, 160590, 237135, 236791, 134472, 149735, 69225, 239303, 235336, 109, 235290, 5231, 238146, 210450, 36203, 238033, 238115, 237545, 95573, 61943, 236645, 237807, 236137, 61928, 210450, 36203, 238033, 238115, 237545, 235832, 215134, 236511, 95917, 91940, 122717, 239753, 236859, 160590, 237135, 168788, 236361, 126942, 43395, 235265, 108, 235290, 5231, 236589, 237524, 67650, 236354, 49697, 237603, 168788, 95573, 49697, 85024, 61943, 236645, 227397, 67650, 236354, 235269, 122096, 221570, 235269, 61928, 210450, 142995, 238266, 78749, 73143, 236648, 91940, 122717, 239753, 236859, 160590, 237135, 22803, 168788, 40284, 93205, 106509, 21743, 235265, 108, 235290, 5231, 236554, 238364, 43761, 236345, 70754, 238325, 95573, 55154, 238364, 236137, 43761, 236345, 236791, 184434, 224907, 236645, 69225, 54715, 32929, 237092, 168788, 236791, 91940, 122717, 239753, 236859, 160590, 237135, 236375, 195532, 238080, 22618, 55496, 235265, 108], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55804 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:57 logger.py:39] Received request cmpl-666a06b67bd4404c89db2ce5dbd6180a-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8d ëª¨ë\x93\x88ì\x97\x90ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dì\x97\x90 ë\x8c\x80í\x95´ ëª\x87 ê°\x80ì§\x80 ê·¼ë³¸ì\xa0\x81ì\x9d¸ ì§\x88ë¬¸ì\x9d\x84 í\x95©ë\x8b\x88ë\x8b¤. â\x80\x94 "ê·¸ê²\x8c ë\xad\x90ì\x95¼?", "í\x81´ë\x9d¼ì\x9d´ì\x96¸í\x8a¸ ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dê³¼ ë\xad\x90ê°\x80 ë\x8b¬ë\x9d¼?", "ì\x99\x9c ì\x93¸ë§\x8cí\x95´?". ì\x97¬ê¸°ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x97¬ë\x9f¬ë¶\x84ì\x9d\x98 ì²« ì\x9b¹ì\x82¬ì\x9d´í\x8a¸ë¥¼ ë§\x8cë\x93\x9cë\x8a\x94 ë\x8d°ì\x97\x90 í\x95\x84ì\x9a\x94í\x95\x9c ê°\x80ì\x9e¥ ì\xa0\x81í\x95©í\x95\x9c í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë¥¼ ì\x96´ë\x96»ê²\x8c ì\xa0\x95í\x95\x98ë\x8a\x94 ì§\x80ì\x97\x90 ë\x8c\x80í\x95\x9c ì\xa0\x81ì\xa0\x88í\x95\x9c ì§\x80ë\x8f\x84ì\x99\x80 í\x95¨ê»\x98 ê°\x80ì\x9e¥ ì\x9d¸ê¸°ì\x9e\x88ë\x8a\x94 ì\x84\x9cë²\x84 ì\x82¬ì\x9d´ë\x93\x9c ì\x9b¹ í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë\x93¤ì\x9d\x98 ê°\x9cì\x9a\x94ë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤. ë\x81\x9dì\x9c¼ë¡\x9c ë\x86\x92ì\x9d\x80 ì\x88\x98ì¤\x80ì\x9d\x98 ì\x9b¹ ì\x84\x9cë²\x84 ë³´ì\x95\x88ì\x97\x90 ë\x8c\x80í\x95\x9c ì\x86\x8cê°\x9cë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 235703, 251918, 252469, 235979, 236212, 251918, 235703, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 18198, 251316, 251918, 235979, 236048, 252469, 235442, 235611, 239189, 235979, 254473, 252690, 235979, 235657, 250064, 189966, 237301, 239335, 235979, 251699, 251732, 235703, 249966, 250043, 235703, 251918, 252469, 187197, 253615, 235657, 235979, 239434, 237361, 235979, 252233, 251316, 187197, 251918, 252469, 235979, 236212, 251918, 235703, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 18198, 251316, 251918, 235979, 236048, 252469, 235442, 235611, 239189, 235979, 254473, 252690, 235979, 235657, 250064, 235703, 249966, 250043, 189966, 251336, 249616, 235367, 253114, 236728, 189966, 237301, 253045, 52724, 235657, 249616, 235703, 236067, 249616, 52724, 235611, 238512, 235979, 237429, 239189, 235703, 236338, 247790, 235703, 248215, 239189, 187197, 236067, 251732, 235979, 237361, 239189, 235703, 248215, 251918, 18198, 253114, 236011, 235979, 252151, 251732, 235979, 252151, 238900, 235265, 21221, 249616, 251316, 664, 235442, 235611, 239189, 235442, 236212, 251336, 189966, 236591, 250043, 235703, 253114, 238512, 46062, 664, 235367, 247790, 236728, 235979, 248215, 238512, 235703, 248215, 236728, 235703, 248806, 239189, 235367, 252233, 239189, 187197, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 18198, 251316, 251918, 235979, 236048, 252469, 235442, 235611, 239189, 235979, 254473, 252690, 235979, 235657, 250064, 235442, 237429, 238512, 189966, 236591, 250043, 235442, 235657, 249616, 189966, 252151, 237361, 235979, 248215, 238512, 46062, 664, 235703, 251642, 252469, 187197, 251699, 239189, 235979, 236067, 251336, 235367, 253114, 236728, 100269, 187197, 249966, 237361, 235442, 239189, 235657, 235703, 251918, 252469, 187197, 253615, 235657, 235979, 239434, 237361, 235979, 252233, 251316, 187197, 249966, 237361, 235979, 251845, 237361, 235979, 237478, 251918, 235703, 248215, 252690, 187197, 236212, 235496, 187197, 254276, 236775, 235703, 247204, 237361, 235703, 248215, 236728, 235367, 252233, 239189, 235979, 238103, 238512, 189966, 236067, 251336, 235979, 251699, 252469, 235979, 252233, 251316, 189966, 250064, 235657, 235703, 249966, 250043, 18198, 253114, 251918, 235703, 253615, 251316, 235367, 253114, 252469, 52724, 235657, 249616, 235703, 254473, 238103, 187197, 236338, 247790, 235367, 253114, 236011, 235367, 253114, 252469, 18198, 251316, 251918, 235979, 236338, 251732, 235703, 254473, 251918, 235703, 254276, 251336, 235367, 247790, 237361, 235979, 238103, 238512, 187197, 248806, 236728, 235979, 248806, 235481, 235442, 236212, 251336, 187197, 236338, 253114, 235367, 253114, 252690, 235979, 252233, 251316, 187197, 236067, 249616, 235703, 249966, 250043, 189966, 251336, 249616, 235367, 253114, 252469, 187197, 236338, 247790, 235703, 236338, 251732, 235367, 253114, 252469, 187197, 236067, 249616, 235979, 249583, 251918, 235703, 251642, 249616, 18198, 253114, 239335, 235442, 235481, 252690, 52724, 235657, 249616, 235703, 254473, 238103, 187197, 248215, 239189, 235442, 239189, 235657, 235703, 254473, 251732, 235979, 252233, 251316, 187197, 251918, 252469, 235979, 236212, 251918, 187197, 247204, 237361, 235703, 248215, 236728, 235979, 251699, 252469, 187197, 254276, 236775, 18198, 251316, 251918, 235979, 236338, 251732, 235703, 254473, 251918, 235703, 254276, 251336, 235367, 247790, 237361, 235979, 251699, 238900, 235703, 248215, 252690, 52724, 235657, 252469, 235703, 253615, 251316, 235979, 238103, 238512, 187197, 236338, 252469, 235442, 237429, 237612, 235367, 253114, 236011, 235979, 252151, 251732, 235979, 252151, 238900, 235265, 189966, 247790, 248215, 235703, 252469, 238512, 235979, 236048, 252469, 189966, 253913, 250677, 235703, 248215, 249616, 187197, 251732, 252690, 235703, 238900, 249616, 235703, 248215, 252690, 187197, 254276, 236775, 187197, 251918, 252469, 235979, 236212, 251918, 189966, 237429, 236728, 235703, 253114, 251732, 235703, 249966, 250043, 189966, 251336, 249616, 235367, 253114, 252469, 187197, 253913, 251336, 235442, 235657, 252469, 235979, 238103, 238512, 187197, 236338, 252469, 235442, 237429, 237612, 235367, 253114, 236011, 235979, 252151, 251732, 235979, 252151, 238900, 235265], lora_request: None, prompt_adapter_request: None.
INFO 02-16 23:33:57 engine.py:275] Added request cmpl-cb80ea9a993f400d85e3c7f2d0ab17ac-0.
INFO:     127.0.0.1:55818 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:57 logger.py:39] Received request cmpl-78c3cf7c43554e44a9dcd02dab1c3fc6-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        MDN의 초심자용 서버 사이드 프로그래밍에 대한 기사를 읽고 그에 대한 공부를 해볼 예정이다.\n여기서 서버 측 프로그래밍이 무엇이고, 어떤 일을 할 수 있는지, 클라이언트 프로그래밍과 어떤 점이 다른지에 대해 배워볼 것이다.\n\n현대의 전 세계 웹 개발자들은 서버측 개발을 공부하는 것을 권고 하고 있다. 대부분의 큰 사이트들은 동적으로 보여주기 위한 다양한 데이터가 필요할 때 서버측의 코드를 사용한다.\n일반적으로 서버에 있는 데이터베이스에 저장된 데이터를 빼내서 일부 코드를 통해 보일 수 있도록 클라이언트(HTML 또는 JavaScript)에게 송신한다.\n서버측 코드의 큰 장점은 개별 사용자를 위한 맞춤 웹사이트 컨텐츠를 제공한다는 것이다. 동적 웹사이트는 사용자의 선호도 및 습관에 따라 더 관련성 높은 컨텐츠를 강조 표시할 수 있다.\n또한 이것은 사이트를 저장된 개인 선호와 정보를 사용하기 쉽게 만들어 준다.\n\n### 서버사이드 웹사이트 프로그래밍이 무엇인가?\n웹 서버와 통신하는 웹 브라우저는 HyperText Transport Protocol(HTTP)을 사용하고 있다.\n우리가 웹페이지의 링크를 클릭하거나 폼을 전송하거나 검색을 시작할 때 우리의 웹 브라우저는 HTTP request를 목적 서버에 전달한다. 요청에는 영향을 받는 리소스를 식별하는 URL, 필요 작업을 정의하는 메서드가 포함된다.\n(메소드의 예시로는 리소스를 가져오거나, 삭제하거나 게시하는 것이 있다.\n그리고 URL 매개변수(query 문자열 통해 전송된 값-쌍으로 이루어진 객체), POST 데이터(HTTP POST 메소드에 의해 전송된 데이터), 관련 쿠키 파일을 이용해 인코딩된 추가 정보를 포함할 수 있다.\n\n웹 서버는 클라이언트의 요청이 오길 기다리고, 요청이 도착하면 작업을 진행해, 웹 브라우저에 \\u003cstrong>HTTP 응답 메세지\\u003c/strong>를 보낸다. 그 응답은 요청이 성공 또는 실패를 지시하는 상태 라인을 포함하고 있다.\n요청에 대한 응답이 성공적이라면 본문은 요청 리소스를 포함할 것이고 이는 웹 브라우저에 보여질 수 있다.\n\n\n#### 정적 웹 사이트 (Static Website)\n아래 그림은 정적 웹 사이트의 기본 웹 구조를 보여준다. (정적 웹 사이트는 특별한 리소스 요청이 들어올 때 서버에서 하드 코딩된 동일 컨텐츠를 반환한다.)\n사용자가 페이지를 탐색하거나, 브라우저가 지정된 URL에 HTTP \\"GET\\" 요청을 보낼 때 서버는 파일 시스템에서 요청한 문서를 검색하고 문서과 `success status`를 포함한 HTTP 응답을 반환한다.\n만일 어떠한 이유 때문에 파일을 검색 할 수 없는 경우 `error status`가 반환된다.\n![](https://velog.velcdn.com/images/lmyno/post/ccf3fe62-5d7d-48b3-a397-abe391546c1b/image.png)\n\n#### 동적 웹사이트 (Dynamic Website)\n동적 웹사이트는 필요할 때마다 동적으로 응답 컨텐츠가 생성된다.\n동적 웹사이트의 웹페이지는 보통 HTML 템플릿에 있는 자리 표시자에 데이터베이스에서 가져온 데이터를 넣어 생성된다. (이 방법은 많은 양의 컨텐츠를 저장하기에 정적 웹사이트를 이용하는 것보다 효과적이다.)\n동적 웹사이트는 사용자 또는 저장된 환경을 기반으로 URL에 대해 다른 데이터를 반환할 수 있고, 응답을 반환하는 과정에서 다른 작업을 수행할 수 있다.\n\n동적 웹사이트를 지원하는 코드는 서버에서 실행되어야 한다. 이러한 코드를 만드는 것을 \\u003cspan style=\\"font-size: 150%\\">\\"sever-side programming\\"\\u003c/span>이라 알려져 있다. (또는 \\u003cspan style=\\"font-size: 150%\\">\\"back-end scripting\\"\\u003c/span>이라고도 불린다.)\n\n아래 그림은 동적 웹사이트의 간단한 구조를 보여주고 있다.\n정적 웹사이트와 같이 브라우저는 HTTP 요청을 서버에 보내고, 서버는 요청을 처리하고 적절한 HTTP 응답을 반환한다. 정적 리소스의 요청은 정적 사이트에서의 방법과 같은 방법으로 처리한다. (정적 리소스, 파일은 변하지 않는 파일로 일반적으로 CSS, JS, Image 등등이 있다.)\n![](https://velog.velcdn.com/images/lmyno/post/d971cb86-b6ee-4361-b7b6-be5f03d9f499/image.png)\n\n동적 리소스를 위한 요청은 ② 서버측 코드에 대신 전달(위 그림에서 웹 애플리케이션으로 보이는 부분), ③\\"동적 응답\\"을 위해 서버는 응답을 해석해 필요한 정보를 데이터베이스에서 읽고, ④탐색한 데이터와 HTML 템플릿을 결합하고, ⑤⑥생성된 HTML을 포함한 응답을 다시 보내준다.\n\n서버 사이드와 클라이언트 사이드의 프로그래밍은 같은가?\n이전으로 돌아와서 서버 측에 관여하는 코드와 클라이언트 측에 관여하는 코드를 살펴 보자.\n각각의 케이스마다 코드는 명확히 다른데, 두 사이드의 차이를 보면\n> 1) 그들의 목적과 고민이 서로 다르다.\n2) 일반적으로 같은 프로그래밍 언어를 쓰지 않는다. (JS는 예외적으로 서버와 클라이언트 사이드 둘 다 사용 가능하다.)\n3) 그들은 다른 운영체제 환경에서 수행된다.\n\n브라우저에서 실행되는 코드는 `client-side code`로 알려져 있다. `client-side code`의 주 관심사는 렌더링된 웹페이지의 모양과 행동을 개선시키는 것이다.\n이것은 UI 구성요소 선택 및 스타일 지정, 레이아웃 만들기, 탐색, 양식 유효성 검사 등을 포함하고 있다. 대조적으로, server-side 웹 사이트 프로그래밍은 대부분 브라우저의 요청에 대한 응답으로 어떤 컨텐츠를 반환하는 지 선택하는 것을 포함한다. server-side code는 제출된 데이터 및 요청의 유효성 검사, 데이터 저장 및 검색을 위한 데이터베이스 사용, 필요에 따라 올바른 데이터 전송과 같은 작업을 처리한다.\n\n클라이언트 측 코드는 HTML, CSS, 그리고 JS로 작성된다.\n이것들은 웹 브라우저 안에서 실행되고 기본 운영체제와 연결되지 않거나 아주 약간 연결된다. (파일 시스템의 연결의 제한이 포함되어 있다.) 웹 개발자는 모든 사용자가 웹사이트를 보는 데 사용할 수 있는 브라우저를 조작할 수 없다.\n브라우저는 클라이언트 측 코드 기능과 일관성 없는 수준의 호환성을 제공해, 클라이언트 측 프로그래밍의 어려움은 브라우저 지원의 차이를 정상적으로 처리하는 것이다.\n\n서버측 코드는 다양한 프로그래밍 언어로 작성 가능하다.\n대중적인 서버측 웹 언어를 포함한 예시로 PHP, Python, Ruby, 그리고 C#이 있다. 서버측 코드는 서버의 운영체제와 모든 접속 권한을 가지고, 개발자는 그들이 원하는 프로그래밍 언어를 사용 가능하다.\n\n개발자는 일반적으로 \\u003cstrong>web frameworks(웹 프레임워크)\\u003c/strong>를 이용해 코드를 작성한다. 웹 프레임워크는 일반적인 문제를 해결하고 개발 속도를 높이며 특정 도메인에서 직면하는 다양한 유형의 작업을 단순화하기 위해 설계된 함수, 객체, 규칙 및 기타 코드 구성 요소의 모음이다.\n다시 말하면 클라이언트와 서버 사이드 코드 둘 다 프레임워크를 사용하지만 도메인은 다르지 때문에 프레임워크도 다르다. 클라이언트 측 웹 프레임워크는 레이아웃 및 프레젠테이션 작업을 단순화하는 반면 서버 측 웹 프레임워크는 직접 구현해야 하는 많은 \\"공통\\" 웹 서버 기능을 제공한다.\n(서버 측 공통 웹 서버 기능으로 세션 지원, 사용자와 인증을 지원, 데이터베이스와 쉬운 연결 등등이 있다.)\n\n>참고\n클라이언트 측 프레임워크는 때때로 클라이언트 측 코드를 개발하는 속도를 올릴 수 있게 도와주도록 사용하지만, 우리는 모든 코드를 직접 작성할 수도 있다. **사실 우리가 작고 간단한 사이트의 UI를 만든다면 우리가 직접 작성하는 코드가 더 빠르고 효과적일 수 있다.**\n이와 대조적으로, 우리가 서버측 웹 애플리케이션의 컴포넌트를 **프레임워크 없이 작성하는 것은 거의 생각하기 어려울 것**이다. (Python에서 HTTP 서버와 같은 중요한 기능 구현을 처음부터 하는 것은 어렵지만 Django와 같은 Python 웹 프레임워크는 다른 유용한 도구와 함께 즉시 사용할 수 있는 도구를 제공한다.)\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 11603, 235300, 236137, 87634, 239308, 236645, 237545, 55154, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236179, 71100, 28693, 236417, 236791, 229288, 236464, 20350, 236179, 71100, 41388, 237092, 236791, 56787, 241100, 71277, 236864, 61742, 235265, 108, 237386, 236386, 236554, 55154, 238364, 235248, 241656, 58510, 93674, 238608, 243903, 235832, 60331, 242513, 224907, 235269, 53355, 242251, 32929, 236392, 69225, 22618, 72941, 236183, 235269, 91940, 122717, 239753, 236859, 58510, 93674, 238608, 243903, 237233, 53355, 242251, 131901, 235832, 102708, 236183, 236179, 142192, 50548, 239779, 241100, 170613, 235265, 109, 238513, 236800, 236137, 31087, 154094, 31288, 227613, 236645, 84551, 55154, 238364, 241656, 227613, 236392, 41388, 237092, 40284, 109241, 155280, 236464, 197022, 69581, 235265, 26801, 237092, 238304, 236137, 185075, 17309, 78749, 84551, 49697, 90621, 29283, 237386, 237014, 236386, 168947, 32048, 238780, 236511, 112762, 236361, 126942, 238080, 54715, 55154, 238364, 241656, 236137, 215441, 236791, 61943, 78949, 235265, 108, 236666, 238559, 90621, 55154, 238364, 236179, 72941, 112762, 239571, 131006, 236179, 143077, 238602, 112762, 236791, 235248, 245122, 238151, 236554, 32929, 237092, 215441, 236791, 187118, 29283, 236666, 22618, 21167, 153145, 91940, 122717, 239753, 236859, 235278, 11271, 132879, 22978, 235275, 70471, 235248, 239673, 237502, 78949, 235265, 108, 236554, 238364, 241656, 215441, 236137, 185075, 60318, 239158, 236648, 49532, 239793, 61943, 236645, 236791, 168947, 207221, 244417, 31288, 236417, 78749, 235248, 241996, 164594, 236791, 110308, 78949, 236214, 170613, 235265, 49697, 237603, 31288, 236417, 78749, 236214, 61943, 236645, 236137, 51914, 238033, 236840, 60709, 235248, 237152, 237956, 236179, 156976, 70231, 187003, 237154, 187800, 236648, 235248, 241996, 164594, 236791, 84608, 237602, 100280, 236569, 238080, 22618, 69581, 235265, 108, 239607, 236511, 11464, 139988, 17309, 78749, 236791, 143077, 238602, 49532, 236589, 51914, 238033, 237807, 104569, 236791, 61943, 72159, 235248, 243274, 237458, 128047, 236770, 166422, 236039, 235265, 109, 6176, 55154, 238364, 236417, 217534, 31288, 236417, 78749, 58510, 93674, 238608, 243903, 235832, 60331, 242513, 236589, 236361, 235336, 108, 237941, 55154, 238364, 237807, 83160, 237502, 40284, 31288, 129669, 236950, 237312, 238721, 236214, 27808, 1637, 13426, 33209, 235278, 20672, 235275, 236392, 61943, 48060, 69581, 235265, 108, 237312, 228773, 31288, 83137, 236137, 76326, 236791, 91940, 240356, 236345, 160696, 235248, 243751, 236392, 31087, 239673, 236345, 160696, 203755, 236392, 106793, 238080, 54715, 93241, 236137, 31288, 129669, 236950, 237312, 238721, 236214, 24493, 3853, 236791, 86040, 237603, 55154, 238364, 236179, 31087, 239522, 78949, 235265, 227038, 96564, 52604, 240112, 236392, 101260, 236214, 63102, 237433, 236354, 236791, 130886, 239793, 40284, 10822, 235269, 126942, 211896, 236392, 35467, 236137, 40284, 75630, 236554, 237135, 236361, 157329, 238602, 236039, 235265, 108, 235278, 238519, 237433, 237135, 236137, 71277, 236569, 236375, 236214, 63102, 237433, 236354, 236791, 174538, 237410, 160696, 235269, 155718, 236345, 160696, 219687, 40284, 93205, 69581, 235265, 108, 186223, 10822, 80431, 237936, 239042, 236669, 235278, 3630, 45980, 236645, 239375, 187118, 31087, 239673, 238602, 147342, 235290, 244444, 26291, 11464, 238949, 236770, 237589, 209611, 823, 19124, 112762, 235278, 20672, 19124, 75630, 237433, 237135, 236179, 23594, 237138, 31087, 239673, 238602, 112762, 823, 187003, 222330, 238705, 145240, 236392, 208134, 237138, 30743, 238494, 241103, 238602, 133818, 104569, 236791, 157329, 238080, 22618, 69581, 235265, 109, 237941, 55154, 238364, 236214, 91940, 122717, 239753, 236859, 236137, 227038, 235832, 44245, 240373, 28693, 236039, 102536, 235269, 227038, 235832, 50316, 241293, 123472, 211896, 236392, 83453, 238356, 237138, 235269, 31288, 129669, 236950, 237312, 238721, 236179, 730, 235261, 235276, 235276, 235304, 235260, 19265, 235313, 20672, 224047, 241305, 75630, 237533, 236183, 235286, 235261, 235276, 235276, 235304, 235260, 235283, 19265, 235313, 236791, 29283, 243927, 236039, 235265, 20350, 224047, 241305, 236648, 227038, 235832, 192111, 132879, 234661, 236791, 34805, 236569, 40284, 209975, 79871, 236589, 236392, 157329, 48060, 69581, 235265, 108, 237526, 239151, 236179, 71100, 224047, 241305, 235832, 192111, 237603, 235832, 236950, 237722, 138720, 237465, 236648, 227038, 63102, 237433, 236354, 236791, 157329, 238080, 93205, 236464, 11464, 236214, 31288, 129669, 236950, 237312, 238721, 236179, 29283, 237386, 239574, 22618, 69581, 235265, 110, 3308, 35467, 237603, 31288, 17309, 78749, 591, 22555, 13683, 235275, 108, 236655, 238608, 142479, 236648, 35467, 237603, 31288, 17309, 78749, 236137, 28693, 238744, 31288, 49061, 237602, 236791, 29283, 237386, 239558, 236039, 235265, 591, 236864, 237603, 31288, 17309, 78749, 236214, 94492, 239793, 236511, 63102, 237433, 236354, 227038, 235832, 153935, 240256, 54715, 55154, 238364, 22803, 30181, 237135, 76230, 241103, 238602, 49697, 236666, 235248, 241996, 164594, 236791, 78821, 239457, 78949, 2330, 108, 236417, 237545, 184819, 106191, 236791, 235248, 242850, 238931, 236345, 160696, 235269, 129669, 236950, 237312, 238721, 236361, 34805, 236864, 238602, 10822, 236179, 24493, 30044, 6041, 13663, 227038, 236392, 29283, 245186, 54715, 55154, 238364, 236214, 145240, 27941, 202429, 22803, 227038, 236511, 133889, 236791, 203755, 48060, 133889, 237233, 4103, 6550, 4938, 235376, 236791, 157329, 236511, 24493, 224047, 241305, 236392, 78821, 239457, 78949, 235265, 108, 237598, 236666, 53355, 242664, 236511, 11464, 237766, 147801, 145240, 236392, 203755, 69225, 22618, 233473, 95917, 4103, 1761, 4938, 235376, 236361, 78821, 239457, 238602, 236039, 235265, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 235257, 1723, 956, 235283, 2729, 235283, 229802, 235304, 1039, 235318, 235284, 235290, 235308, 235258, 235324, 235258, 235290, 235310, 235321, 235268, 235304, 235290, 235250, 235304, 235315, 235324, 235290, 51071, 235304, 235315, 235274, 235308, 235310, 235318, 235260, 235274, 235268, 235283, 2502, 235265, 7424, 235275, 109, 3308, 49697, 237603, 31288, 236417, 78749, 591, 28500, 13683, 235275, 108, 237358, 237603, 31288, 236417, 78749, 236214, 126942, 238080, 54715, 237354, 236039, 49697, 90621, 224047, 241305, 235248, 241996, 164594, 236361, 116518, 238602, 236039, 235265, 108, 237358, 237603, 31288, 236417, 78749, 236137, 31288, 83137, 236214, 29283, 238693, 19319, 235248, 240940, 239135, 241982, 236179, 72941, 34103, 236432, 100280, 236569, 236645, 236179, 112762, 239571, 131006, 22803, 174538, 239956, 112762, 236791, 235248, 242665, 236770, 116518, 238602, 236039, 235265, 591, 235832, 130059, 236648, 139148, 119452, 236137, 235248, 241996, 164594, 236791, 143077, 72159, 236179, 35467, 237603, 31288, 236417, 78749, 236791, 208134, 40284, 29599, 180677, 207092, 237233, 237603, 61742, 2330, 108, 237358, 237603, 31288, 236417, 78749, 236214, 61943, 236645, 132879, 143077, 238602, 161409, 237392, 236392, 28693, 238559, 26291, 10822, 236179, 142192, 102708, 112762, 236791, 78821, 239457, 238080, 22618, 21167, 236464, 235269, 224047, 241305, 236392, 78821, 239457, 40284, 65084, 236864, 22803, 102708, 211896, 236392, 22618, 238356, 238080, 22618, 69581, 235265, 109, 237358, 237603, 31288, 236417, 78749, 236791, 224790, 40284, 215441, 236214, 55154, 238364, 22803, 191754, 141048, 238305, 153422, 235265, 11464, 174287, 215441, 236791, 49427, 237135, 236214, 109241, 730, 235261, 235276, 235276, 235304, 235260, 1432, 3411, 14001, 4274, 235290, 1934, 235292, 235248, 235274, 235308, 235276, 10149, 768, 13663, 27169, 235290, 2043, 19991, 86170, 235261, 235276, 235276, 235304, 235260, 235283, 1432, 235313, 235832, 236950, 78183, 238994, 240586, 69581, 235265, 591, 239607, 236214, 730, 235261, 235276, 235276, 235304, 235260, 1432, 3411, 14001, 4274, 235290, 1934, 235292, 235248, 235274, 235308, 235276, 10149, 768, 13663, 1811, 235290, 615, 141988, 86170, 235261, 235276, 235276, 235304, 235260, 235283, 1432, 235313, 235832, 112778, 236840, 83133, 239263, 236039, 2330, 109, 236655, 238608, 142479, 236648, 49697, 237603, 31288, 236417, 78749, 236137, 127149, 238335, 236511, 49061, 237602, 236791, 29283, 237386, 237014, 236464, 69581, 235265, 108, 236864, 237603, 31288, 236417, 78749, 237807, 81673, 235832, 129669, 236950, 237312, 238721, 236214, 24493, 227038, 236392, 55154, 238364, 236179, 29283, 238151, 236464, 235269, 55154, 238364, 236214, 227038, 236392, 168788, 48060, 99797, 240046, 236511, 24493, 224047, 241305, 236392, 78821, 239457, 78949, 235265, 35467, 237603, 63102, 237433, 236354, 236137, 227038, 236648, 35467, 237603, 17309, 78749, 22803, 236137, 130059, 237233, 132929, 130059, 26291, 168788, 78949, 235265, 591, 236864, 237603, 63102, 237433, 236354, 235269, 145240, 236648, 75980, 74860, 186830, 145240, 236375, 234541, 90621, 26862, 235269, 31302, 235269, 8092, 73143, 238650, 235832, 69581, 2330, 108, 193855, 2468, 1336, 894, 869, 235265, 894, 41109, 235265, 872, 235283, 5490, 235283, 235257, 1723, 956, 235283, 2729, 235283, 235258, 235315, 235324, 235274, 9359, 235321, 235318, 235290, 235268, 235318, 1537, 235290, 235310, 235304, 235318, 235274, 235290, 235268, 235324, 235268, 235318, 235290, 555, 235308, 235266, 235276, 235304, 235258, 235315, 235266, 235310, 235315, 235315, 235283, 2502, 235265, 7424, 235275, 109, 237358, 237603, 63102, 237433, 236354, 236791, 168947, 227038, 236648, 93552, 55154, 238364, 241656, 215441, 236179, 26801, 237502, 31087, 239522, 235278, 237601, 142479, 22803, 31288, 122096, 239135, 236432, 239814, 146689, 26291, 29283, 206367, 43761, 238304, 823, 159545, 13663, 237358, 237603, 224047, 241305, 13663, 236392, 93806, 55154, 238364, 236214, 224047, 241305, 236392, 56787, 239465, 237138, 126942, 236511, 104569, 236791, 112762, 239571, 131006, 22803, 229288, 236464, 235269, 235248, 239221, 242850, 238931, 236511, 112762, 237807, 19319, 235248, 240940, 239135, 241982, 236392, 72510, 237961, 48060, 235269, 235248, 240104, 240967, 237889, 237154, 238602, 19319, 236392, 157329, 236511, 224047, 241305, 236392, 171167, 29283, 238151, 239558, 236039, 235265, 109, 236554, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 58510, 93674, 238608, 243903, 236648, 132929, 236361, 235336, 108, 235832, 237045, 26291, 138153, 236655, 237807, 236554, 55154, 238364, 235248, 241656, 236179, 55526, 237386, 40284, 215441, 237807, 91940, 122717, 239753, 236859, 235248, 241656, 236179, 55526, 237386, 40284, 215441, 236791, 130412, 245435, 29283, 236645, 235265, 108, 238316, 238316, 236137, 170609, 131006, 237354, 236039, 215441, 236214, 95165, 239131, 239055, 102708, 238266, 235269, 93828, 160590, 237135, 236137, 91292, 235832, 236791, 29283, 237722, 108, 235313, 235248, 235274, 235275, 20350, 132642, 86040, 237603, 237233, 46749, 238754, 235832, 55154, 236375, 32048, 238500, 236039, 235265, 108, 235284, 235275, 234541, 90621, 132929, 58510, 93674, 238608, 243903, 171754, 236770, 236791, 198670, 236183, 186830, 236039, 235265, 591, 16436, 236214, 71277, 238643, 90621, 55154, 238364, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 235248, 242870, 32048, 61943, 153728, 188898, 2330, 108, 235304, 235275, 20350, 84551, 102708, 118566, 237759, 238308, 236939, 161409, 237392, 22803, 22618, 238356, 238602, 236039, 235265, 109, 238997, 236950, 237312, 238721, 22803, 191754, 156610, 215441, 236214, 4103, 5251, 235290, 2043, 3409, 235376, 236375, 78183, 238994, 240586, 69581, 235265, 4103, 5251, 235290, 2043, 3409, 235376, 236137, 40712, 55526, 239308, 236417, 236214, 235248, 241486, 238589, 239074, 238602, 31288, 83137, 236137, 34459, 238780, 237233, 105560, 237358, 236392, 49532, 237700, 236569, 238705, 236214, 170613, 235265, 108, 235832, 139988, 13566, 220641, 237526, 237433, 134472, 60709, 233186, 34805, 236864, 235269, 161882, 236655, 241736, 128047, 236386, 235269, 235248, 242850, 238931, 235269, 119452, 238186, 46355, 241078, 237154, 102890, 236417, 73143, 236392, 157329, 48060, 69581, 235265, 26801, 237602, 90621, 235269, 6934, 235290, 2043, 31288, 17309, 78749, 58510, 93674, 238608, 243903, 236648, 26801, 237092, 238304, 129669, 236950, 237312, 238721, 236137, 227038, 236179, 71100, 224047, 241305, 26291, 53355, 242251, 235248, 241996, 164594, 236791, 78821, 239457, 40284, 34805, 134472, 40284, 109241, 157329, 78949, 235265, 6934, 235290, 2043, 3409, 236214, 31850, 238483, 238602, 112762, 60709, 227038, 236137, 46355, 241078, 237154, 102890, 236417, 235269, 112762, 143077, 60709, 203755, 236392, 168947, 112762, 239571, 131006, 61943, 235269, 126942, 236179, 156976, 133057, 238131, 239296, 112762, 31087, 239673, 237233, 132929, 211896, 236392, 168788, 78949, 235265, 109, 239483, 122717, 239753, 236859, 235248, 241656, 215441, 236214, 19319, 235269, 26862, 235269, 213512, 31302, 236375, 198766, 238602, 236039, 235265, 108, 235832, 237506, 84551, 31288, 129669, 236950, 237312, 238721, 70685, 22803, 191754, 238070, 236464, 28693, 238744, 118566, 237759, 238308, 236939, 237807, 197054, 234654, 48682, 160696, 23745, 237014, 151245, 238264, 197054, 238602, 236039, 235265, 591, 173331, 27941, 202429, 236137, 197054, 236137, 31850, 236511, 235832, 157329, 141048, 69581, 2330, 31288, 227613, 236645, 236214, 87997, 61943, 184819, 31288, 236417, 78749, 236791, 29283, 236214, 65503, 61943, 238080, 22618, 72941, 129669, 236950, 237312, 238721, 236791, 42916, 238115, 238080, 22618, 56341, 236039, 235265, 108, 238997, 236950, 237312, 238721, 236214, 91940, 122717, 239753, 236859, 235248, 241656, 215441, 201619, 237233, 32929, 237956, 237154, 233473, 22618, 239558, 236137, 83942, 239457, 237154, 236392, 110308, 237138, 235269, 91940, 122717, 239753, 236859, 235248, 241656, 58510, 93674, 238608, 243903, 236137, 53355, 238994, 240520, 236648, 129669, 236950, 237312, 238721, 224790, 236137, 91292, 235832, 236791, 35467, 237047, 90621, 168788, 40284, 170613, 235265, 109, 236554, 238364, 241656, 215441, 236214, 32048, 238780, 236511, 58510, 93674, 238608, 243903, 171754, 236770, 236375, 198766, 153728, 188898, 235265, 108, 236800, 237935, 85024, 55154, 238364, 241656, 31288, 171754, 236770, 236791, 157329, 236511, 71277, 236569, 236375, 29617, 235269, 21237, 235269, 39671, 235269, 213512, 585, 235345, 235832, 69581, 235265, 55154, 238364, 241656, 215441, 236214, 55154, 238364, 236137, 118566, 237759, 238308, 236939, 237807, 87997, 165866, 238982, 155280, 236511, 236392, 128753, 236464, 235269, 227613, 236645, 236214, 20350, 94525, 68586, 40284, 58510, 93674, 238608, 243903, 171754, 236770, 236791, 61943, 153728, 188898, 235265, 109, 237936, 238526, 236645, 236214, 234541, 90621, 730, 235261, 235276, 235276, 235304, 235260, 19265, 235313, 4405, 70774, 235278, 237941, 58510, 237990, 238700, 239779, 237611, 6596, 235261, 235276, 235276, 235304, 235260, 235283, 19265, 235313, 236791, 208134, 237138, 215441, 236791, 198766, 78949, 235265, 31288, 58510, 237990, 238700, 239779, 237611, 236214, 234541, 85024, 132793, 236791, 56787, 238665, 48060, 227613, 125507, 236840, 236791, 187800, 225022, 94492, 236864, 50316, 238519, 236589, 22803, 143636, 237722, 40284, 32048, 238780, 236511, 46355, 238867, 236137, 211896, 236392, 80289, 239937, 236817, 72159, 93806, 65952, 238002, 238602, 200901, 235269, 209611, 235269, 235248, 240753, 242930, 60709, 28693, 237986, 215441, 220641, 73713, 237433, 236137, 34459, 238036, 61742, 235265, 108, 236039, 236569, 72163, 123472, 91940, 122717, 239753, 236859, 237807, 55154, 238364, 160590, 237135, 215441, 235248, 242870, 32048, 58510, 237990, 238700, 239779, 237611, 236791, 61943, 74860, 237598, 50316, 238519, 236589, 236648, 32048, 238500, 236183, 147801, 58510, 237990, 238700, 239779, 237611, 236840, 32048, 238500, 236039, 235265, 91940, 122717, 239753, 236859, 235248, 241656, 31288, 58510, 237990, 238700, 239779, 237611, 236214, 161882, 236655, 241736, 60709, 58510, 237990, 244179, 239060, 146689, 211896, 236392, 80289, 239937, 236817, 40284, 78821, 237722, 55154, 238364, 235248, 241656, 31288, 58510, 237990, 238700, 239779, 237611, 236214, 143636, 240449, 49061, 238513, 149735, 109976, 139148, 30044, 237495, 238693, 13663, 31288, 55154, 238364, 201619, 236392, 110308, 78949, 235265, 108, 235278, 236554, 238364, 235248, 241656, 41388, 238693, 31288, 55154, 238364, 201619, 26291, 48740, 239109, 224790, 235269, 61943, 236645, 237807, 30743, 239907, 236392, 224790, 235269, 112762, 239571, 131006, 237807, 235248, 242454, 238138, 197054, 73143, 238650, 235832, 69581, 2330, 109, 235313, 189764, 108, 239483, 122717, 239753, 236859, 235248, 241656, 58510, 237990, 238700, 239779, 237611, 236214, 54715, 238740, 236375, 91940, 122717, 239753, 236859, 235248, 241656, 215441, 236791, 227613, 40284, 125507, 236840, 236791, 133057, 241949, 22618, 21167, 237458, 50316, 237807, 237014, 153145, 61943, 74860, 237598, 235269, 93241, 236214, 87997, 215441, 236791, 143636, 240449, 198766, 238080, 22618, 236840, 69581, 235265, 5231, 236417, 238146, 93241, 236361, 63806, 236464, 127149, 238335, 236511, 17309, 78749, 236137, 13566, 236791, 49427, 239227, 236039, 237722, 93241, 236361, 143636, 240449, 198766, 40284, 215441, 236361, 70231, 235119, 238500, 236464, 207092, 237233, 237603, 236666, 22618, 69581, 116742, 108, 235832, 237807, 26801, 237602, 90621, 235269, 93241, 236361, 55154, 238364, 241656, 31288, 122096, 239135, 236432, 239814, 146689, 236137, 235248, 241897, 238199, 245310, 236859, 236791, 5231, 237964, 237990, 238700, 239779, 237611, 56341, 235832, 198766, 40284, 143613, 73523, 236137, 142882, 72159, 53355, 238994, 239254, 29599, 688, 61742, 235265, 591, 27922, 22803, 24493, 55154, 238364, 237807, 132929, 215134, 236511, 201619, 49061, 238513, 236392, 106204, 238036, 124431, 109976, 143613, 53355, 244597, 95091, 95945, 237807, 132929, 21237, 31288, 58510, 237990, 238700, 239779, 237611, 236214, 102708, 46355, 237545, 236511, 50316, 237302, 237807, 135132, 235248, 242579, 236569, 61943, 238080, 22618, 72941, 50316, 237302, 236791, 110308, 78949, 2330, 108], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55820 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:58 engine.py:275] Added request cmpl-666a06b67bd4404c89db2ce5dbd6180a-0.
INFO 02-16 23:33:58 engine.py:275] Added request cmpl-78c3cf7c43554e44a9dcd02dab1c3fc6-0.
INFO 02-16 23:33:58 metrics.py:455] Avg prompt throughput: 539.6 tokens/s, Avg generation throughput: 49.5 tokens/s, Running: 3 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.3%, CPU KV cache usage: 0.0%.
INFO 02-16 23:33:58 logger.py:39] Received request cmpl-d7aa31f596ea4d8199c9aa7d1bdbded8-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        웹 프로그래밍에서서버 사이드/클리아언트 사이드는 엄청난 의미를 가진다.왜냐하면 어느쪽에 중심을 두느냐에 따라 프로젝트의 방향이 완전히 다르기때문이다.1. 클라이언트 사이드(Client-Side)-클라이언트(사용자) 측에서 처리하는 것.클라이언트가 입력한것을 수신해서 HTML로 만들어서 크롬과 같은 어플리케이션에 해석해서 표시.대표적으로 자바스크립트(Javascript)이 있다.2. 서버 사이드(Server-Side)-서버(제공자) 측에서 즉시 처리하는 것.서버 사이드는클라이언트로 보낼\xa0웹 페이지(HTML,\xa0JavaScript 등이 담긴)를\xa0만들며,정말 중요한 작업들(사용자 유효성, DB 관련 등)을 수행한다.대표적인 언어는 Java, PHP, Ruby, Python, Node.js 등을 언급할 수 있다.즉,서버와클라이언트는 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.클라이언트 사이드 언어를 다루고 그에 관련된 개발자를= 프론트 엔드서버 사이드 언어를 다루고 그에 관련된 개발자= 백엔드라 부른다.Recommand Posting For you Guys* PHP란 대체 무엇인가..?* 프론트 개발자가 알아야할 기술이 뭐지?* 프로토컬, IP, 도메인네임 그게 다 뭔데?* JSON 대체 뭐하는 애야..?', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 237941, 58510, 93674, 238608, 243903, 22803, 236554, 238364, 160590, 237135, 235283, 239483, 140801, 239753, 236859, 160590, 237135, 236214, 235248, 241490, 239151, 240198, 223616, 236791, 23248, 237589, 236039, 235265, 242940, 243383, 123472, 53355, 241039, 240734, 236179, 47250, 239308, 236392, 93828, 241039, 243383, 236179, 156976, 132880, 242989, 236859, 236137, 51806, 240112, 235832, 123248, 232523, 32048, 238500, 236386, 238740, 237465, 61742, 235265, 235274, 235265, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 7817, 239483, 122717, 239753, 236859, 235278, 236417, 237545, 236645, 235275, 235248, 241656, 22803, 168788, 40284, 29599, 235265, 239483, 122717, 239753, 236859, 236361, 120618, 236511, 237506, 236392, 22618, 237502, 206666, 19319, 236375, 128047, 236770, 236554, 94177, 244875, 237233, 132929, 53355, 239135, 236432, 239814, 146689, 236179, 56787, 239465, 206666, 100280, 236569, 235265, 236800, 238946, 90621, 34103, 238131, 161615, 239837, 236859, 235278, 95661, 235275, 235832, 69581, 235265, 235284, 235265, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 7817, 236554, 238364, 235278, 236939, 237495, 236645, 235275, 235248, 241656, 22803, 235248, 242579, 236569, 168788, 40284, 29599, 235265, 236554, 238364, 160590, 237135, 236214, 239483, 122717, 239753, 236859, 236375, 29283, 245186, 236338, 237941, 106191, 235278, 11271, 235269, 236338, 44980, 73143, 235832, 205799, 241615, 235275, 236791, 236338, 237598, 237290, 238986, 235269, 236864, 238989, 215134, 236511, 211896, 237290, 235278, 236417, 237545, 236645, 46355, 241078, 237154, 235269, 13986, 187003, 73143, 235275, 236392, 22618, 238356, 78949, 235265, 236800, 238946, 85024, 171754, 236770, 236214, 12071, 235269, 29617, 235269, 39671, 235269, 21237, 235269, 13116, 235265, 2833, 73143, 236392, 171754, 240115, 238080, 22618, 69581, 235265, 242579, 235269, 236554, 238364, 237807, 239483, 122717, 239753, 236859, 236214, 31288, 106191, 236375, 55154, 236375, 134512, 242780, 236405, 239814, 146689, 236392, 153422, 236464, 181539, 22618, 69581, 235265, 239483, 122717, 239753, 236859, 160590, 237135, 171754, 236770, 236791, 32048, 238949, 236464, 20350, 236179, 187003, 238602, 227613, 236645, 236791, 235293, 58510, 240405, 236859, 209560, 237135, 236554, 238364, 160590, 237135, 171754, 236770, 236791, 32048, 238949, 236464, 20350, 236179, 187003, 238602, 227613, 236645, 235293, 124559, 241167, 237135, 236950, 43761, 239296, 236039, 235265, 987, 6000, 121514, 1699, 692, 36836, 235287, 29617, 240136, 26801, 238308, 60331, 242513, 236589, 236361, 95879, 235287, 58510, 240405, 236859, 227613, 184819, 78183, 236655, 238305, 238080, 213222, 235832, 235248, 245365, 236183, 158757, 132880, 238772, 241725, 235269, 9790, 235269, 50316, 238519, 236589, 239156, 238700, 20350, 237458, 32048, 235248, 247291, 238266, 158757, 11384, 26801, 238308, 235248, 245365, 40284, 122096, 238305, 95879], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55828 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:58 engine.py:275] Added request cmpl-d7aa31f596ea4d8199c9aa7d1bdbded8-0.
INFO 02-16 23:33:59 logger.py:39] Received request cmpl-630663e5ead24972a0808af584f6c10d-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ✏️ 서버 사이드(Server-Side)와 클라이언트 사이드(Client-Side)서버 사이드(Server-Side)란\xa0네트워크의 한 방식인 클라이언트-서버 구조에서 서버에서의 처리를 말한다웹에서의 서버 사이드를 간단히 말하자면, 웹 서버에서 하는 작업을 의미한다클라이언트로 요청을 받아 처리하고 처리 결과를 브라우저에 송신, 응답하는 역할을 한다클라이언트 사이드(Client-Side)란, 네트워크의 한 방식인 클라이언트-서버 구조에서 클라이언트의 처리를 말한다웹에서의 클라이언트는, 서버와는 상대되는 개념으로 어떤 서비스를 요청하는 역할을 하게 된다웹 페이지를 요청하는 것은 클라이언트의 역할이라고 말할 수 있다웹 페이지의 요청은 대부분 웹 브라우저가 하게 된다.그렇기 때문에 일반적으로 웹에서의 클라이언트는 웹 브라우저를 의미한다✏️ 데이터의 처리서버 사이드(Server-Side)에서의 처리서버 관리자의 입장에서 데이터 위조의 가능성을 비교적 줄일 수 있다클라이언트 사용자의 입장에서 클라이언트 컴퓨터의 처리 부담이 줄어든다반면 서버 처리 부담이 커져, 서버 비용이 늘어난다클라이언트 사이드(Client-Side)에서의 처리서버 관리자의 입장에서 서버 처리 부담이 적어져, 서버 비용이 줄어든다클라이언트 사용자의 입장에서 클라이언트 컴퓨터의 처리 부담이 높아진다보안에 민감한 데이터의 경우 통신에 대비해 암호화할 필요가 없으므로 암호화 소요가 줄어든다클라이언트 사이드에서 데이터를 위조하기 쉽다[참고 1]위키 백과 - 클라이언트 서버 모델,위키 백과 - 서버 사이드,위키 백과 - 클라이언트 사이드', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 154533, 55154, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 235275, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 235275, 236554, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 235275, 240136, 236338, 239156, 236859, 239779, 237611, 236137, 35191, 51806, 238186, 236589, 91940, 122717, 239753, 236859, 235290, 236554, 238364, 49061, 237602, 22803, 55154, 238364, 22803, 236137, 168788, 236791, 72163, 78949, 237941, 22803, 236137, 55154, 238364, 160590, 237135, 236791, 127149, 238335, 239055, 72163, 236345, 236645, 237722, 235269, 31288, 55154, 238364, 22803, 109976, 211896, 236392, 223616, 78949, 239483, 122717, 239753, 236859, 236375, 227038, 236392, 101260, 236655, 168788, 48060, 168788, 161050, 236791, 129669, 236950, 237312, 238721, 236179, 235248, 239673, 237502, 235269, 224047, 241305, 40284, 61169, 238080, 236392, 153422, 239483, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 235275, 240136, 235269, 123722, 236859, 239779, 237611, 236137, 35191, 51806, 238186, 236589, 91940, 122717, 239753, 236859, 235290, 236554, 238364, 49061, 237602, 22803, 91940, 122717, 239753, 236859, 236137, 168788, 236791, 72163, 78949, 237941, 22803, 236137, 91940, 122717, 239753, 236859, 236214, 235269, 55154, 238364, 237807, 236214, 36203, 236800, 156610, 49532, 241631, 26291, 53355, 242251, 206586, 236791, 227038, 40284, 61169, 238080, 236392, 30181, 237458, 95622, 236039, 237941, 106191, 236791, 227038, 40284, 143613, 91940, 122717, 239753, 236859, 236137, 61169, 238080, 235832, 112778, 72163, 238080, 22618, 69581, 237941, 106191, 236137, 227038, 236648, 26801, 237092, 238304, 31288, 129669, 236950, 237312, 238721, 236361, 30181, 237458, 95622, 236039, 235265, 236671, 241838, 236386, 147801, 234541, 90621, 31288, 22803, 236137, 91940, 122717, 239753, 236859, 236214, 31288, 129669, 236950, 237312, 238721, 236791, 223616, 78949, 154533, 112762, 236137, 168788, 236554, 238364, 160590, 237135, 235278, 7538, 235290, 13983, 235275, 22803, 236137, 168788, 236554, 238364, 159838, 236645, 236137, 74209, 237199, 22803, 112762, 41423, 237602, 236137, 153728, 237154, 236392, 51732, 237905, 237603, 184434, 236666, 22618, 69581, 239483, 122717, 239753, 236859, 61943, 236645, 236137, 74209, 237199, 22803, 91940, 122717, 239753, 236859, 235248, 241897, 243032, 237524, 236137, 168788, 43761, 240599, 235832, 184434, 236770, 239227, 236039, 238559, 237722, 55154, 238364, 168788, 43761, 240599, 235832, 134512, 240586, 235269, 55154, 238364, 51732, 237545, 235832, 235248, 240703, 236770, 240198, 236039, 239483, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 13983, 235275, 22803, 236137, 168788, 236554, 238364, 159838, 236645, 236137, 74209, 237199, 22803, 55154, 238364, 168788, 43761, 240599, 235832, 99797, 236770, 240586, 235269, 55154, 238364, 51732, 237545, 235832, 184434, 236770, 239227, 236039, 239483, 122717, 239753, 236859, 61943, 236645, 236137, 74209, 237199, 22803, 91940, 122717, 239753, 236859, 235248, 241897, 243032, 237524, 236137, 168788, 43761, 240599, 235832, 187800, 236655, 237589, 236039, 237036, 238179, 236179, 153107, 239199, 236511, 112762, 236137, 95917, 83160, 237502, 236179, 26801, 237584, 237138, 235248, 241560, 238033, 236817, 238080, 126942, 236361, 56341, 237214, 212026, 235248, 241560, 238033, 236817, 44997, 237526, 236361, 184434, 236770, 239227, 236039, 239483, 122717, 239753, 236859, 160590, 237135, 22803, 112762, 236791, 41423, 237602, 72159, 235248, 243274, 236039, 235309, 189764, 235248, 235274, 235307, 237601, 238705, 124559, 237233, 728, 91940, 122717, 239753, 236859, 55154, 238364, 162570, 235269, 237601, 238705, 124559, 237233, 728, 55154, 238364, 160590, 237135, 235269, 237601, 238705, 124559, 237233, 728, 91940, 122717, 239753, 236859, 160590, 237135], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55820 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:33:59 engine.py:275] Added request cmpl-630663e5ead24972a0808af584f6c10d-0.
INFO 02-16 23:34:01 logger.py:39] Received request cmpl-ef8a39c4e2b743b18cf807160f13524b-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        # Objectives\nEvaulate the difference between client and server-side web applications\nRefresh key concepts and technologies for web design\nInstall the web server and test its functionality\nCreate and customize an HTML page with PHP\n# Agenda and content\nHow websites work\nServer-side processing\nWeb servers\nServer-side programming and PHP\nBootstrap recap\n# How websites work\n1. two components of any web application\n• 모든 web site and application에는 two sides가 있음\n• server-side : 정보가 중앙에서 저장, 검색 및 처리되는 위치\n• client-side : user\'s computers\n• 둘 다 중요한 역할을 함\n• server-side에서 정보 및 처리에 집중함 (the engine)\n• client-side 측이란 사용자가 보고 상호 작용하는 것 (the user interface)\n\u200b\n2. client and server\nWeb Client\n• 필요할 때 인터넷에 연결\n• 일반적으로 web browser(client) software(예: Internet Explorer 또는 Firefox 등)를 실행함\n• HTTP(Hypertext Transfer Protocol) 사용\n• server에서 web pages 요청\n• server로부터 web pages and files 수신\nWeb server\n• 인터넷에 지속적으로 연결\n• web server software(예: Apache 또는 Internet Information Server)를 실행함\n• HTTP(Hypertext Transfer Protocol) 사용\n• web page에 대한 요청을 수신함\n• 요청에 응답하고 상태 코드, 웹 페이지 및 관련 파일을 전송함\n\u200b\n3. dialogue between the client and the server\n• Client/Server는 "client"와 "server"라는 두 컴퓨터 프로그램 사이의 관계를 설명할 수 있음\nClient\n• server에서 특정 유형의 서비스(예: file 또는 database access)를 요청\nServer\n• 요청을 수행하고 네트워크를 통해 client에 결과를 전송함\n• client와 server 간의 대화를 볼 수 있음\n• 브라우저 검사 창(browser inspection window)에서 네트워크 탭(network tab) 열기\n4. uniform resource identifier\n• URI – Uniform Resource Identifier\n• 인터넷에서 리소스를 식별\n• URN – Universal Resource Name\n• 고유 문자열 식별자\n• URL – Uniform Resource Locator\n• 웹 페이지 또는 그래픽 파일과 같은 리소스의 네트워크 위치를 나타내는 URI 유형\n\u200b\n5. TLD Top-Level Domain Name\n• A top-level domain(TLD)은 도메인 이름의 맨 오른쪽 부분을 식별함\n• 일반 TLD의 예:\n.com, .dll, .net, .mil, .dll, .dll, .int,\n.volution, .asia, .cat, .volution, .name, .vii,\n.mobi, .dlll, .info, .dlll, .post,\n.pro, .tel, .travel\n6. County Code TLDs\n• 원래 웹사이트의 지리적 위치(국가)를 표시하기 위한 두 개의 문자 코드\n• 실제로 등록자에게 로컬이 아닌 국가 코드 TLD로 도메인 이름을 얻는 것은 상당히 쉬움\n• 예: • .tv, .ws, .au, .dll, .uk\n\u200b\n7. Domain Name\n• 인터넷에서 organization or entity를 찾습니다.\nDomain Name System\n\u200b\n• 인터넷을 logical groups과 understandable names으로 나눔\n• 고유한 컴퓨터 IP 주소를 web browesr에 입력하는 text-based domain names과 연결\n• Bowser :\nhttp://google.com\n• IP 주소 : 173.194.116.72\n8. Domain Name System\n• The Domain Name System (DNS)은 IP address와 domain names를 연관짓는 것\n9. IP Internet Protocol\n• 인터넷에서 시스템 간에 데이터를 전송하는 방법을 제어하는 규칙 집합\n• IP가 패킷(packet)을 올바른 대상 주소로 라우팅(전송)함\n• 패킷이 대상에 도달할 때까지, 다음 가장 가까운 라우터(네트워크 트래픽을 이동하도록 설계된 하드웨어 장치)로 연속적으로 전달됨\n10. IP Address\n• 인터넷에 연결된 각 장치에는 고유한 숫자 IP 주소가 있음\n• 이러한 주소는 octest이라고 불리는 네 개의 숫자 그룹으로 구성됨\n• 216.58.194.46이 구글을 가져다 줄 것\n• IP 주소는 도메인 이름과 일치할 수 있음\n11. Internet Protocols\n• Protocols\n• clients와 servers가 네트워크를 통해 서로 통신하는 데 사용되는 방법을 설명하는 규칙\n• 인터넷과 웹을 작동시키는 단일 프로토콜은 없음\n• 특정 기능을 가진 여러 프로토콜이 필요함\n12. HTTP - Hypertext Transfer Protocol\n• 웹에서 text, graphic images, sound, video, and other multimedia files과 같은 파일을 교환하기 위한 규칙 집합\n• web browser는 웹 페이지 및 관련 파일에 대한 HTTP 요청을 보냄\n• web server는 HTTP 응답을 웹 브라우저로 다시 보냄\n13. FTP File Transfer Protocol\n• 인터넷의 컴퓨터 간에 파일을 교환할 수 있도록 허용하는 규칙 집합\n• 웹 개발자는 일반적으로 FTP를 사용하여 웹 페이지 파일을 컴퓨터에서 웹 서버로 전송함\n• FTP는 또한 다른 서버에서 개별 컴퓨터로 프로그램과 파일을 다운로드하는 데 사용됨\n14. E-Mail Protocols\n• Sending E-mail\n• SMTP Simple Mail Transfer Protocol\n• Receiving E-mail\n• POP (POP3) Post Office Protocol\n• IMAP Internet Mail Access Protocol\n# Server-side processing works\n1. static web page\n2. static web page and client-side scripts\n• 오직, 인터넷을 통한 액세스를 활성화하려면 원격 웹 서버(remote web server)가 필요함\n• Static web pages on local machines는 항상 인터넷 액세스가 필요한 것은 아님\n• 문서로서, static web pages에는 viewer(web browser)만 필요함\n• browser는 콘텐츠 처리만 담당\n• HTML과 Javascript를 해석하기 위한 파서를 통합함\n• The control is local : 사용자가 Javascript를 비활성화할 수 있음\n\u200b\n3. dynamic web page\n4. dynamic page: an example?\n5. dynamic web page and server-side scripts\n• 일반적으로 서버 측 코드는 원격 시스템에서 호스팅됨 (즉, 인터넷이 필요함)\n• Server-side scripts를 통해 보다 강력한 작업 및 요청 가능\n• browser (클라이언트) level에서 실행되지 않음\n• client가 실행 중인 scripts를 제어(확인)하지 않음\n• 요청을 처리하기 위해 정교한 웹 서버(예: Apache)가 필요함\n\u200b\n6. static VS dynamic web pages\nStatic web page\n• 파일 업로드 전에 생성된 콘텐츠\n• 모든 업데이트에 파일 업로드 필요\n• 모든 사용자에게 동일한 컨텐츠 제공\n• 요구 사항\n• 하드 디스크, 웹 브라우저\n• 이점\n• 기본 프로그래밍 기술 필요\n• 어디서나 실행\nDynamic web page\n• 요청 시 콘텐츠가 생성됨\n• 업데이트에 새 파일이 필요하지 않음\n• Custom content\n• 요구사항(추가)\n• 웹 서버, 언어 프로세서\n• 이점\n• 업데이트 및 유지 관리가 용이함\n• 대규모 재사용 가능\n\u200b\n7. server-side programming\n1. web server가 요청을 수신하고 있음\n2. server에 언어 프로세서/서버 측 응용 프로그램이 설치되어 있음\n3. server가 요청을 수신할 때마다 server는 적절한 입력 데이터가 있는 언어 프로세서 또는 서버 측 애플리케이션를 호출함\n4. 언어 프로세서/서버 측 응용 프로그램의 실행 결과를 사용자에게 제시함\n\u200b\n8. advantages of server-side programming\n• 요청에 따라 다른 응답이 수신됨\n• 정보의 중앙 저장소 (데이터베이스)\n• 효율적인 정보 저장 및 전달\n• customized user experience\n• 콘텐츠에 대한 제어된 액세스\n• 세션/상태 정보 저장\n• 통지 및 통신\n• 데이터 분석\n• 전체 프로세스가 사용자에게 투명함\n• 백엔드 관리\n• 타사 서비스와의 상호 작용\n\u200b\n9. technologies for client and server side\n• 클라이언트 측과 서버 측의 역할이 다르기 때문에 서로 다른 기술과 언어에 의존함\n• Client-side : 웹 사이트 구조, 레이아웃, 인터페이스, 콘텐츠 및 상호 작용\n• Server-side : 중앙 집중식 정보 처리(클라이언트), 성능 최적화\n• 그러나 클라이언트측 언어는 서버측에서 처리됨\n• 이 과정에서는 클라이언트 사이드 언어에 초점을 맞출 것\n\u200b\n10. client-side is awesome !\n• 클라이언트 측과 서버 측이 경쟁 상대가 아님\n• 서버측 기능이 동적 컨텐츠로 웹 페이지의 성능을 확장함\n• 클라이언트 측 프로그래밍을 통해 다운로드된 페이지에서 상호 작용 가능\n\u200b\n11. server-side and client-side go together\n\u200b\n12. three-tier model\n• 많은 사람들이 그것을 구식이라고 말함\n• 그러나, 그것은 여전히 많은 웹 애플리케이션들을 대표함\n\u200b\n13. the “stack”\n\u200b\n14. full-stack technologies\n\u200b\n15. two meanings of “back-end”\n\u200b\n“Back end” in software architecture\n• 서버측 기술\n사용자가 보는 것과 비교(front-end)\n"Back-end” in content management systems\n• 일반 대중이 액세스할 수 있는 것과 비교하여 관리자 또는 시스템 운영자가 보는 것\n• 백오피스의 동의어로 사용됨 (used as synonmous of back-office)\n# Web servers\n1. what is a web server\n• HTTP 요청을 처리하고 응답을 반환하는 컴퓨터 프로그램\n• HTTP 요청 수신\n• 요청한 리소스를 찾거나 CGI 프로그램을 실행함\n• 리소스 또는 프로그램 출력을 브라우저로 반환함\n• 가장 일반적인 웹 서버는 Apache, IIS, NodeJS, nginx, ligHttpd 등이 있음\n\u200b\n2. HTTP is OSI layer 7\n\u200b\n\u200b\n3. HTTP web servers\n• 여러 공급업체의 웹 서버가 있음\n• Apache web server\n• Apache Tomcat\n• Microsoft IIS\n• NGINX\n• Lighttpd\n• Google web server\n\u200b\n4. a changing scenario in the world of servers\n\u200b\n5. apache features\n• 서버 측 프로그래밍 언어 지원\n• 아파치는 펄, 파이썬, Tcl, PHP를 포함한 몇 가지 공통 언어 인터페이스를 지원함\n또한 mod_auth, mod_access, mod_digest 등 다양한 대중적인 인증 모듈을 지원함\n• IPv6 지원\n• IPv6가 기본 Apache Portable Runtime 라이브러리에서 지원되는 시스템에서 Apache는 기본적으로 IPv6 수신 소켓을 가져옴\n• 가상 호스팅\n• Apache는 하나의 설치 인스턴스가 여러 웹 사이트를 서비스하도록 허용함\n예를 들어 하나의 Apache 설치는 sse.afnog.org, ws.afnog.org 등을 지원할 수 있음\n• SSL 지원\n• 단순화된 구성\n• 기본 Windows NT 유니코드 지원\n\u200b\n6. apache request phase\n\u200b\n7. Common Gateway Interface\n• 웹 서버와 CGI 프로그램 간의 상호 작용을 위한 통합 규격\n• CGI 프로그램은 웹 서버로부터 데이터를 수신하고 일반적으로 생성된 HTML 콘텐츠를 반환함\n• CGI 프로그램은 XML 파일, 이미지, 비디오 스트림 및 브라우저가 이해할 수 있는 기타 콘텐츠를 생성하는 데 사용됨\n• 일부 웹 서버에는 서버 측 코드가 저장되는 "cgi-bin" 폴더가 있음\n# Server-side programming and PHP\n1. server-side programming languages\n• C# (pronounced C-Sharp) / ASP.net\n• 마이크로소프트에서 개발했으며 일반적으로 기업에서 대규모 데이터베이스를 관리하는 데 사용됨\n• Java / Spring\n• 자바는 가장 오래되고 널리 채택된 프로그래밍 언어 중 하나임\n• Node.js (JavaScript)\n• 자바스크립트의 인기가 웹사이트의 인터페이스에 상호작용성을 더하기 위해 커짐에 따라, 일부 회원들은,\n커뮤니티에서 서버 측 언어로도 사용할 수 있는 방법을 찾았음. 노드에서 동일한 JavaScript 구문을 사용함\n• Python\n• 파이썬은 학생들에게 그들의 첫 번째 프로그래밍 언어를 가르치기 위해 대학에서 인기가 있고, 그것은 널리 사용됨\n• PHP\n• 웹에서 사용하기 위해 조정되어야 했던 다른 언어들과 달리, PHP는 웹 개발로 설계됨\n• Ruby\n• 루비는 우아하고 생산적인 프로그래밍 언어라고 자부함\n\u200b\n2. compiled languages\n\u200b\n3. interpreted language\n• 서버 측에서는 호환성으로 인해 해석된 언어가 널리 채택됨\n\u200b\n4. hybrid language\n\u200b\n5. XAMPP\n• Cross-Platform (X) Apache (A), MySQL (M), PHP (P) and Perl (P)\n• 로컬 웹 서버를 생성하는 경량 Apache 배포\n• 무료 다운로드 및 사용\n\u200b\n6. the PHP language\n• PHP는 "PHP: Hypertext Preprocessor"의 약자\n• 널리 사용되는 오픈 소스 스크립트 언어\n• 스크립트가 서버에서 실행됨\n• 무료 다운로드 및 사용\n• 다양한 플랫폼(Windows, Linux, Unix, Mac OS X 등)에서 uns.\n• PHP는 오늘날 사용되는 거의 모든 서버(Apache, IIS 등)와 호환됨\n• 광범위한 데이터베이스 지원\n• 대규모 사용자 커뮤니티에 의해 지원됨\n\u200b\n7. what can you do with PHP?\n• 동적 페이지 내용 생성\n• 서버에서 파일 만들기, 열기, 읽기, 쓰기, 삭제 및 닫기\n• form 데이터를 수집\n• cookies를 주고받음\n• 데이터베이스의 데이터 추가, 삭제, 수정\n• 사용자 액세스를 제어\n• 데이터를 암호화\n• 이메일을 보내고 처리\n• 그 외 여러 가지…\n\u200b\n8. advantages of PHP\n• 그것은 웹에서 가장 큰 블로그 시스템의 핵심에 있을 만큼 강력함\n• 그것은 가장 큰 소셜 네트워크 (페이스북)를 운영하기에 충분히 깊음\n• 또한 초보자용 서버 사이드 언어가 될 만큼 쉬움\n• PHP를 사용하면 HTML 출력에 제한되지 않음\n• 이미지, PDF 파일 및 플래시 동영상도 출력할 수 있음. XHTML 및 XML과 같은 텍스트를 출력할 수도 있음\n\u200b\n9. PHP files\n• PHP 파일은 텍스트, HTML, CSS, 자바스크립트, PHP 코드를 포함할 수 있음\n• 서버에서 PHP 코드가 실행되며, 결과는 일반 HTML로 브라우저에 반환됨\n• PHP 파일의 확장자는 ".php"임\n\u200b\n10. XAMPP working directory\n• XAMPP 폴더의 tdocs 디렉터리에 파일을 저장하려는 경우\n• 여기에 튜토리얼을 위한 모든 .html, .php 파일이 있음\n\u200b\n11. accessing the web server via web browser\n• XAMPP에 의해 만들어진 로컬 웹 서버 주소창에 http://localhost/을 타이핑해서 접근할 수 있음\n• htdocs 디렉토리에 액세스함\n\u200b', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236039, 238036, 235248, 242756, 50691, 236791, 229288, 236464, 235269, 40712, 237526, 72797, 175659, 237807, 235248, 244073, 239308, 196582, 236392, 59994, 240146, 72494, 235269, 127149, 238665, 123472, 236554, 236840, 95165, 239131, 236511, 73713, 239618, 237465, 236392, 198766, 237138, 40712, 96673, 235265, 109, 145, 237526, 239618, 237465, 236648, 115049, 122201, 238743, 134660, 157329, 149735, 179694, 235292, 108, 145, 235274, 235265, 133889, 236137, 40712, 237526, 40712, 236939, 60709, 86040, 237603, 108, 145, 235284, 235265, 235248, 244073, 239308, 196582, 237233, 215134, 236511, 48740, 237092, 236417, 239383, 108, 145, 235304, 235265, 72510, 240405, 60709, 31087, 239522, 48060, 236645, 109976, 75630, 236569, 236183, 109, 145, 75259, 104569, 236791, 157329, 74860, 48682, 236464, 110308, 238602, 235248, 242756, 50691, 236179, 237598, 31087, 90621, 23594, 240127, 204551, 235265, 108, 145, 108, 145, 235345, 39035, 108, 56106, 7459, 573, 5830, 1865, 5553, 578, 6934, 235290, 2043, 2744, 8557, 108, 20686, 2621, 17482, 578, 14363, 604, 2744, 2480, 108, 18150, 573, 2744, 6934, 578, 2121, 1277, 24492, 108, 4912, 578, 45610, 671, 19319, 2602, 675, 29617, 108, 235345, 54389, 578, 3381, 108, 2299, 21605, 1160, 108, 7538, 235290, 2043, 10310, 108, 3728, 27280, 108, 7538, 235290, 2043, 19991, 578, 29617, 108, 81391, 60758, 108, 235345, 2250, 21605, 1160, 108, 235274, 235265, 1378, 8832, 576, 1089, 2744, 4724, 108, 235431, 87997, 2744, 3440, 578, 4724, 96564, 1378, 10012, 236361, 21167, 238036, 108, 235431, 6934, 235290, 2043, 865, 104569, 236361, 47250, 241717, 22803, 143077, 235269, 203755, 60709, 168788, 156610, 178535, 108, 235431, 5553, 235290, 2043, 865, 2425, 235303, 235256, 25175, 108, 235431, 235248, 242870, 32048, 215134, 236511, 61169, 238080, 236392, 81796, 108, 235431, 6934, 235290, 2043, 22803, 104569, 60709, 168788, 236179, 113832, 237935, 238467, 591, 1175, 4800, 235275, 108, 235431, 5553, 235290, 2043, 235248, 241656, 235832, 240136, 61943, 184819, 206583, 36203, 238033, 63806, 237545, 40284, 29599, 591, 1175, 2425, 7222, 235275, 108, 235421, 108, 235284, 235265, 5553, 578, 6934, 108, 3728, 16338, 108, 235431, 126942, 238080, 54715, 227397, 242319, 236179, 197054, 108, 235431, 234541, 90621, 2744, 13178, 235278, 5251, 235275, 6815, 235278, 238748, 235292, 9047, 37607, 132879, 43690, 73143, 235275, 236791, 191754, 238467, 108, 235431, 24493, 235278, 38954, 1082, 19657, 33209, 235275, 61943, 108, 235431, 6934, 22803, 2744, 7297, 227038, 108, 235431, 6934, 236375, 124431, 2744, 7297, 578, 6630, 22618, 237502, 108, 3728, 6934, 108, 235431, 227397, 242319, 236179, 34805, 238982, 90621, 197054, 108, 235431, 2744, 6934, 6815, 235278, 238748, 235292, 41173, 132879, 9047, 5254, 13506, 235275, 236791, 191754, 238467, 108, 235431, 24493, 235278, 38954, 1082, 19657, 33209, 235275, 61943, 108, 235431, 2744, 2602, 236179, 71100, 227038, 236392, 22618, 237502, 238467, 108, 235431, 227038, 236179, 224047, 241305, 48060, 209975, 215441, 235269, 31288, 106191, 60709, 187003, 145240, 236392, 31087, 239673, 238467, 108, 235421, 108, 235304, 235265, 25085, 1865, 573, 5553, 578, 573, 6934, 108, 235431, 16338, 235283, 7538, 236214, 664, 5251, 235281, 237807, 664, 5720, 235281, 139978, 93828, 235248, 241897, 243032, 237524, 226417, 160590, 236137, 217761, 236791, 220596, 238080, 22618, 21167, 238036, 108, 4609, 108, 235431, 6934, 22803, 94492, 236864, 46355, 238867, 236137, 206586, 235278, 238748, 235292, 2482, 132879, 8746, 3684, 235275, 236791, 227038, 108, 7538, 108, 235431, 227038, 236392, 22618, 238356, 48060, 123722, 236859, 239779, 237611, 236791, 187118, 5553, 236179, 161050, 236791, 31087, 239673, 238467, 108, 235431, 5553, 237807, 6934, 127149, 236137, 26801, 236817, 236791, 181539, 22618, 21167, 238036, 108, 235431, 129669, 236950, 237312, 238721, 102890, 236417, 162337, 235278, 22262, 19840, 5912, 235275, 22803, 123722, 236859, 239779, 237611, 235248, 245434, 235278, 15987, 6684, 235275, 120699, 236386, 108, 235310, 235265, 12876, 6537, 30824, 108, 235431, 40256, 1157, 54071, 17688, 54378, 108, 235431, 227397, 242319, 22803, 63102, 237433, 236354, 236791, 130886, 239793, 108, 235431, 752, 28674, 1157, 25797, 17688, 5649, 108, 235431, 46749, 237766, 45980, 236645, 239375, 130886, 239793, 236645, 108, 235431, 10822, 1157, 54071, 17688, 177926, 108, 235431, 31288, 106191, 132879, 20350, 238608, 242108, 145240, 237233, 132929, 63102, 237433, 236354, 236137, 123722, 236859, 239779, 237611, 178535, 236791, 211491, 238151, 236214, 40256, 46355, 238867, 108, 235421, 108, 235308, 235265, 584, 10426, 6835, 235290, 6982, 33581, 5649, 108, 235431, 586, 2267, 235290, 5584, 11988, 235278, 235279, 10426, 235275, 236648, 50316, 238519, 236589, 145887, 236137, 235248, 241384, 44245, 239296, 240734, 43761, 238304, 236392, 130886, 239793, 238467, 108, 235431, 234541, 584, 10426, 236137, 71277, 235292, 108, 235265, 872, 235269, 954, 37023, 235269, 954, 1936, 235269, 954, 18410, 235269, 954, 37023, 235269, 954, 37023, 235269, 954, 635, 235269, 108, 235265, 33845, 235269, 954, 30425, 235269, 954, 4991, 235269, 954, 33845, 235269, 954, 1067, 235269, 954, 20352, 235269, 108, 235265, 190505, 235269, 954, 235258, 14906, 235269, 954, 3296, 235269, 954, 235258, 14906, 235269, 954, 2729, 235269, 108, 235265, 1010, 235269, 954, 2214, 235269, 954, 30203, 108, 235318, 235265, 4992, 6698, 584, 10426, 235256, 108, 235431, 68586, 238608, 31288, 236417, 78749, 236137, 34805, 236432, 237603, 178535, 235278, 237522, 236361, 235275, 236791, 100280, 236569, 72159, 168947, 93828, 49532, 236137, 45980, 236645, 215441, 108, 235431, 61928, 236939, 236375, 194174, 236645, 70471, 54868, 241725, 235832, 23745, 242567, 228223, 215441, 584, 10426, 236375, 50316, 238519, 236589, 145887, 236392, 210976, 236214, 143613, 36203, 238272, 239055, 235248, 242454, 240520, 108, 235431, 71277, 235292, 2947, 954, 9540, 235269, 954, 4677, 235269, 954, 792, 235269, 954, 37023, 235269, 954, 1458, 108, 235421, 108, 235324, 235265, 33581, 5649, 108, 235431, 227397, 242319, 22803, 8344, 689, 12395, 236791, 134498, 21743, 235265, 108, 16968, 5649, 1479, 108, 235421, 108, 235431, 227397, 242319, 236392, 24742, 5452, 237233, 64827, 4752, 26291, 38585, 248067, 108, 235431, 46749, 237766, 236511, 235248, 241897, 243032, 237524, 9790, 40712, 237433, 236791, 2744, 36780, 484, 235255, 236179, 120618, 40284, 2793, 235290, 6576, 11988, 4752, 237233, 197054, 108, 235431, 174969, 865, 108, 2255, 1336, 5996, 235265, 872, 108, 235431, 9790, 40712, 237433, 865, 235248, 235274, 235324, 235304, 235265, 235274, 235315, 235310, 235265, 235274, 235274, 235318, 235265, 235324, 235284, 108, 235321, 235265, 33581, 5649, 1479, 108, 235431, 714, 33581, 5649, 1479, 591, 61514, 235275, 236648, 9790, 3986, 237807, 11988, 4752, 236791, 50833, 237956, 244190, 236214, 29599, 108, 235315, 235265, 9790, 9047, 33209, 108, 235431, 227397, 242319, 22803, 27941, 202429, 127149, 236179, 112762, 236791, 31087, 239673, 40284, 130059, 236392, 31850, 236770, 40284, 235248, 240753, 242930, 113832, 237961, 108, 235431, 9790, 236361, 98027, 245247, 235278, 28860, 235275, 236392, 133057, 238131, 239296, 26801, 237047, 40712, 237433, 236375, 79871, 237312, 240880, 235278, 237045, 239673, 235275, 238467, 108, 235431, 98027, 245247, 235832, 26801, 237047, 236179, 50316, 239522, 238080, 54715, 109535, 235269, 115049, 126277, 23248, 239303, 238138, 79871, 237312, 237524, 235278, 239156, 236859, 239779, 237611, 106365, 238608, 242108, 236392, 195532, 236345, 153145, 65952, 238002, 238602, 30181, 237135, 241023, 236770, 60318, 237924, 235275, 236375, 50833, 238982, 90621, 31087, 239522, 242912, 108, 235274, 235276, 235265, 9790, 13169, 108, 235431, 227397, 242319, 236179, 197054, 238602, 163558, 60318, 237924, 96564, 46749, 237766, 236511, 235248, 243077, 236645, 9790, 40712, 237433, 236361, 21167, 238036, 108, 235431, 11464, 174287, 40712, 237433, 236214, 21500, 644, 235832, 112778, 83133, 137120, 123722, 49532, 236137, 235248, 243077, 236645, 20350, 242206, 26291, 220641, 242912, 108, 235431, 235248, 235284, 235274, 235318, 235265, 235308, 235321, 235265, 235274, 235315, 235310, 235265, 235310, 235318, 235832, 49061, 239334, 236392, 174538, 236039, 184434, 29599, 108, 235431, 9790, 40712, 237433, 236214, 50316, 238519, 236589, 145887, 237233, 32929, 237924, 238080, 22618, 21167, 238036, 108, 235274, 235274, 235265, 9047, 119741, 108, 235431, 119741, 108, 235431, 9325, 237807, 27280, 236361, 123722, 236859, 239779, 237611, 236791, 187118, 55154, 236375, 83160, 237502, 40284, 65503, 61943, 156610, 130059, 236392, 220596, 40284, 235248, 240753, 242930, 108, 235431, 227397, 242319, 237233, 31288, 236392, 63806, 237358, 236569, 238705, 236214, 80289, 236666, 132880, 238772, 242019, 236648, 56341, 238036, 108, 235431, 94492, 236864, 201619, 236392, 23248, 237589, 197781, 132880, 238772, 242019, 235832, 126942, 238467, 108, 235274, 235284, 235265, 24493, 728, 27808, 1082, 19657, 33209, 108, 235431, 31288, 22803, 2793, 235269, 19176, 5191, 235269, 4835, 235269, 3569, 235269, 578, 1156, 49301, 6630, 237233, 132929, 145240, 236392, 75985, 239457, 72159, 168947, 235248, 240753, 242930, 113832, 237961, 108, 235431, 2744, 13178, 236214, 31288, 106191, 60709, 187003, 59994, 120043, 71100, 24493, 227038, 236392, 29283, 245229, 108, 235431, 2744, 6934, 236214, 24493, 224047, 241305, 236392, 31288, 129669, 236950, 237312, 238721, 236375, 171167, 29283, 245229, 108, 235274, 235304, 235265, 75477, 6925, 19657, 33209, 108, 235431, 227397, 242319, 236137, 235248, 241897, 243032, 237524, 127149, 236179, 145240, 236392, 75985, 239457, 238080, 22618, 21167, 153145, 189305, 237545, 40284, 235248, 240753, 242930, 113832, 237961, 108, 235431, 31288, 227613, 236645, 236214, 234541, 90621, 75477, 236791, 61943, 72494, 31288, 106191, 145240, 236392, 235248, 241897, 243032, 237524, 22803, 31288, 55154, 238364, 236375, 31087, 239673, 238467, 108, 235431, 75477, 236214, 86622, 236511, 102708, 55154, 238364, 22803, 49532, 239793, 235248, 241897, 243032, 237524, 236375, 226417, 237233, 145240, 236392, 32048, 238138, 200576, 40284, 65503, 61943, 242912, 108, 235274, 235310, 235265, 637, 235290, 13617, 119741, 108, 235431, 108778, 637, 235290, 1765, 108, 235431, 118674, 13702, 16220, 19657, 33209, 108, 235431, 116597, 637, 235290, 1765, 108, 235431, 38132, 591, 40852, 235304, 235275, 4791, 7006, 33209, 108, 235431, 209282, 9047, 16220, 11499, 33209, 108, 235345, 13506, 235290, 2043, 10310, 3598, 108, 235274, 235265, 2022, 2744, 2602, 108, 235284, 235265, 2022, 2744, 2602, 578, 5553, 235290, 2043, 37089, 108, 235431, 44245, 239385, 235269, 227397, 242319, 236392, 83160, 236511, 235248, 241377, 237533, 236354, 236791, 147226, 237154, 236817, 227860, 237722, 68586, 239862, 31288, 55154, 238364, 235278, 25888, 2744, 6934, 235275, 236361, 126942, 238467, 108, 235431, 45096, 2744, 7297, 611, 2813, 15051, 236214, 122201, 237047, 227397, 242319, 235248, 241377, 237533, 236354, 236361, 126942, 236511, 143613, 23745, 239957, 108, 235431, 133889, 236375, 236554, 235269, 2022, 2744, 7297, 96564, 36183, 235278, 4405, 13178, 235275, 237598, 126942, 238467, 108, 235431, 13178, 236214, 176427, 168788, 237598, 205799, 238272, 108, 235431, 19319, 237233, 73009, 236791, 56787, 239465, 72159, 168947, 59994, 236554, 236791, 83160, 237961, 238467, 108, 235431, 714, 2582, 603, 2813, 865, 61943, 184819, 73009, 236791, 51732, 240090, 237154, 236817, 238080, 22618, 21167, 238036, 108, 235421, 108, 235304, 235265, 12415, 2744, 2602, 108, 235310, 235265, 12415, 2602, 235292, 671, 3287, 235336, 108, 235308, 235265, 12415, 2744, 2602, 578, 6934, 235290, 2043, 37089, 108, 235431, 234541, 90621, 55154, 238364, 235248, 241656, 215441, 236214, 68586, 239862, 27941, 202429, 22803, 83942, 236354, 240880, 242912, 591, 242579, 235269, 227397, 242319, 235832, 126942, 238467, 235275, 108, 235431, 13506, 235290, 2043, 37089, 236791, 187118, 29283, 236039, 84608, 238365, 236511, 211896, 60709, 227038, 153728, 108, 235431, 13178, 591, 239483, 122717, 239753, 236859, 235275, 2403, 22803, 191754, 234654, 48682, 238036, 108, 235431, 5553, 236361, 191754, 47250, 236589, 37089, 236791, 31850, 236770, 235278, 239131, 236589, 235275, 74860, 48682, 238036, 108, 235431, 227038, 236392, 168788, 72159, 93806, 35467, 237905, 236511, 31288, 55154, 238364, 235278, 238748, 235292, 41173, 235275, 236361, 126942, 238467, 108, 235421, 108, 235318, 235265, 2022, 28404, 12415, 2744, 7297, 108, 22555, 2744, 2602, 108, 235431, 145240, 142995, 200576, 31087, 236179, 116518, 238602, 176427, 108, 235431, 87997, 142995, 238266, 78749, 236179, 145240, 142995, 200576, 126942, 108, 235431, 87997, 61943, 236645, 70471, 49697, 236666, 236511, 235248, 241996, 164594, 110308, 108, 235431, 73713, 237302, 17309, 239383, 108, 235431, 30181, 237135, 82206, 161615, 235269, 31288, 129669, 236950, 237312, 238721, 108, 235431, 11464, 239158, 108, 235431, 28693, 238744, 58510, 93674, 238608, 243903, 213222, 126942, 108, 235431, 53355, 238173, 236554, 236915, 191754, 108, 28500, 2744, 2602, 108, 235431, 227038, 27941, 176427, 236361, 116518, 242912, 108, 235431, 142995, 238266, 78749, 236179, 104606, 145240, 235832, 126942, 74860, 48682, 238036, 108, 235431, 10917, 3381, 108, 235431, 73713, 237302, 236417, 239383, 235278, 239043, 236361, 235275, 108, 235431, 31288, 55154, 238364, 235269, 171754, 236770, 132880, 237533, 236554, 108, 235431, 11464, 239158, 108, 235431, 142995, 238266, 78749, 60709, 46355, 236183, 159838, 236361, 120340, 235832, 238467, 108, 235431, 26801, 240753, 237551, 90869, 236417, 237545, 153728, 108, 235421, 108, 235324, 235265, 6934, 235290, 2043, 19991, 108, 235274, 235265, 2744, 6934, 236361, 227038, 236392, 22618, 237502, 48060, 21167, 238036, 108, 235284, 235265, 6934, 236179, 171754, 236770, 132880, 237533, 236554, 235283, 236554, 238364, 235248, 241656, 224047, 237545, 226417, 235832, 65952, 237924, 141048, 21167, 238036, 108, 235304, 235265, 6934, 236361, 227038, 236392, 22618, 237502, 238080, 54715, 237354, 236039, 6934, 236214, 99797, 240046, 236511, 120618, 112762, 236361, 72941, 171754, 236770, 132880, 237533, 236554, 132879, 55154, 238364, 235248, 241656, 122096, 239135, 236432, 239814, 146689, 236791, 83942, 238483, 238467, 108, 235310, 235265, 171754, 236770, 132880, 237533, 236554, 235283, 236554, 238364, 235248, 241656, 224047, 237545, 226417, 236137, 191754, 161050, 236791, 61943, 236645, 70471, 31850, 236569, 238467, 108, 235421, 108, 235321, 235265, 17927, 576, 6934, 235290, 2043, 19991, 108, 235431, 227038, 236179, 156976, 102708, 224047, 241305, 235832, 22618, 237502, 242912, 108, 235431, 104569, 236137, 47250, 241717, 143077, 237433, 591, 238266, 90081, 239571, 131006, 235275, 108, 235431, 207092, 241938, 85024, 104569, 143077, 60709, 31087, 239522, 108, 235431, 39565, 2425, 3281, 108, 235431, 176427, 236179, 71100, 31850, 236770, 238602, 235248, 241377, 237533, 236354, 108, 235431, 48740, 239109, 235283, 237047, 239190, 104569, 143077, 108, 235431, 83160, 236183, 60709, 83160, 237502, 108, 235431, 112762, 211558, 108, 235431, 216491, 132880, 237533, 236354, 236361, 61943, 236645, 70471, 148188, 238068, 238467, 108, 235431, 124559, 241167, 237135, 159838, 108, 235431, 81071, 236417, 206586, 237807, 236137, 36203, 238033, 63806, 237545, 108, 235421, 108, 235315, 235265, 14363, 604, 5553, 578, 6934, 2857, 108, 235431, 91940, 122717, 239753, 236859, 235248, 241656, 237233, 55154, 238364, 235248, 241656, 236137, 61169, 238080, 235832, 32048, 238500, 236386, 147801, 55154, 236375, 102708, 213222, 237233, 171754, 236770, 236179, 23594, 240127, 238467, 108, 235431, 16338, 235290, 2043, 865, 31288, 17309, 78749, 49061, 237602, 235269, 161882, 236655, 241736, 235269, 227397, 67650, 236354, 235269, 176427, 60709, 36203, 238033, 63806, 237545, 108, 235431, 13506, 235290, 2043, 865, 47250, 241717, 113832, 237935, 238186, 104569, 168788, 235278, 239483, 122717, 239753, 236859, 823, 64301, 239474, 75500, 237603, 236817, 108, 235431, 20350, 122865, 91940, 122717, 239753, 236859, 241656, 171754, 236770, 236214, 55154, 238364, 241656, 22803, 168788, 242912, 108, 235431, 11464, 65084, 236864, 180860, 91940, 122717, 239753, 236859, 160590, 237135, 171754, 236770, 236179, 87634, 239158, 236392, 207221, 238483, 29599, 108, 235421, 108, 235274, 235276, 235265, 5553, 235290, 2043, 603, 10740, 1241, 108, 235431, 91940, 122717, 239753, 236859, 235248, 241656, 237233, 55154, 238364, 235248, 241656, 235832, 43033, 241513, 36203, 236800, 236361, 23745, 239957, 108, 235431, 55154, 238364, 241656, 201619, 235832, 49697, 237603, 235248, 241996, 164594, 236375, 31288, 106191, 236137, 64301, 239474, 236392, 69781, 237199, 238467, 108, 235431, 91940, 122717, 239753, 236859, 235248, 241656, 58510, 93674, 238608, 243903, 236392, 187118, 32048, 238138, 200576, 238602, 106191, 22803, 36203, 238033, 63806, 237545, 153728, 108, 235421, 108, 235274, 235274, 235265, 6934, 235290, 2043, 578, 5553, 235290, 2043, 871, 3584, 108, 235421, 108, 235274, 235284, 235265, 2149, 235290, 8058, 2091, 108, 235431, 139148, 64691, 94525, 213707, 236392, 49061, 238186, 235832, 112778, 72163, 238467, 108, 235431, 20350, 122865, 235269, 20350, 139988, 41896, 232523, 139148, 31288, 122096, 239135, 236432, 239814, 146689, 134660, 26801, 238946, 238467, 108, 235421, 108, 235274, 235304, 235265, 573, 1080, 8388, 235369, 108, 235421, 108, 235274, 235310, 235265, 2247, 235290, 8388, 14363, 108, 235421, 108, 235274, 235308, 235265, 1378, 44304, 576, 1080, 1811, 235290, 615, 235369, 108, 235421, 108, 235366, 3663, 1580, 235369, 575, 6815, 16333, 108, 235431, 55154, 238364, 241656, 213222, 108, 236417, 237545, 184819, 29283, 236214, 29599, 237233, 51732, 237905, 235278, 10573, 235290, 615, 235275, 108, 235281, 3663, 235290, 615, 235369, 575, 3381, 4815, 5188, 108, 235431, 234541, 26801, 237935, 235832, 235248, 241377, 237533, 236354, 238080, 22618, 72941, 29599, 237233, 51732, 237905, 72494, 159838, 236645, 132879, 27941, 202429, 118566, 237759, 184819, 29283, 236214, 29599, 108, 235431, 124559, 237410, 238810, 236354, 236137, 49697, 236137, 236770, 236375, 61943, 242912, 591, 3909, 685, 14904, 477, 142950, 576, 1355, 235290, 26878, 235275, 108, 235345, 4556, 27280, 108, 235274, 235265, 1212, 603, 476, 2744, 6934, 108, 235431, 24493, 227038, 236392, 168788, 48060, 224047, 241305, 236392, 78821, 239457, 40284, 235248, 241897, 243032, 237524, 226417, 108, 235431, 24493, 227038, 22618, 237502, 108, 235431, 227038, 236511, 63102, 237433, 236354, 236791, 134498, 160696, 104852, 226417, 236392, 191754, 238467, 108, 235431, 63102, 237433, 236354, 132879, 226417, 182260, 236392, 129669, 236950, 237312, 238721, 236375, 78821, 239457, 238467, 108, 235431, 126277, 234541, 85024, 31288, 55154, 238364, 236214, 41173, 235269, 126325, 235269, 13116, 16436, 235269, 130278, 235269, 10608, 5118, 235258, 73143, 235832, 21167, 238036, 108, 235421, 108, 235284, 235265, 24493, 603, 188625, 8651, 235248, 235324, 108, 235421, 108, 235421, 108, 235304, 235265, 24493, 2744, 27280, 108, 235431, 197781, 41388, 240115, 238391, 238308, 236137, 31288, 55154, 238364, 236361, 21167, 238036, 108, 235431, 41173, 2744, 6934, 108, 235431, 41173, 200046, 108, 235431, 8057, 126325, 108, 235431, 646, 15870, 235356, 108, 235431, 8186, 15980, 235258, 108, 235431, 6238, 2744, 6934, 108, 235421, 108, 235310, 235265, 476, 11117, 20860, 575, 573, 2134, 576, 27280, 108, 235421, 108, 235308, 235265, 119983, 5119, 108, 235431, 55154, 238364, 235248, 241656, 58510, 93674, 238608, 243903, 171754, 236770, 224790, 108, 235431, 23745, 238183, 237924, 236214, 235248, 247164, 235269, 59994, 235832, 246881, 235269, 584, 786, 235269, 29617, 236791, 157329, 236511, 235248, 242394, 128753, 41388, 238693, 171754, 236770, 227397, 67650, 236354, 236791, 224790, 238467, 108, 239607, 236511, 1958, 235298, 6764, 235269, 1958, 235298, 10956, 235269, 1958, 235298, 53795, 73143, 32048, 238780, 236511, 26801, 237935, 85024, 30743, 239907, 34459, 245526, 236392, 224790, 238467, 108, 235431, 69245, 235318, 224790, 108, 235431, 69245, 235318, 236361, 28693, 238744, 41173, 55327, 29844, 213862, 238997, 237822, 236432, 22803, 224790, 156610, 27941, 202429, 22803, 41173, 236214, 28693, 238744, 90621, 69245, 235318, 22618, 237502, 44997, 241859, 236392, 174538, 244911, 108, 235431, 23248, 237047, 83942, 236354, 240880, 108, 235431, 41173, 236214, 113859, 236137, 65952, 237924, 121935, 241053, 236354, 236361, 197781, 31288, 17309, 78749, 236791, 206586, 236345, 153145, 189305, 237545, 238467, 108, 238748, 236791, 153935, 113859, 236137, 41173, 65952, 237924, 236214, 485, 497, 235265, 2518, 64684, 235265, 2164, 235269, 17804, 235265, 2518, 64684, 235265, 2164, 73143, 236392, 224790, 238080, 22618, 21167, 238036, 108, 235431, 46870, 224790, 108, 235431, 80289, 239937, 236817, 238602, 220641, 108, 235431, 28693, 238744, 7620, 27382, 46355, 236405, 238494, 237135, 224790, 108, 235421, 108, 235318, 235265, 119983, 3853, 8342, 108, 235421, 108, 235324, 235265, 11506, 53785, 31687, 108, 235431, 31288, 55154, 238364, 237807, 104852, 226417, 127149, 236137, 36203, 238033, 63806, 237545, 236392, 168947, 83160, 237961, 235248, 240753, 239862, 108, 235431, 104852, 226417, 236648, 31288, 55154, 238364, 236375, 124431, 112762, 236791, 22618, 237502, 48060, 234541, 90621, 116518, 238602, 19319, 176427, 236791, 78821, 239457, 238467, 108, 235431, 104852, 226417, 236648, 26176, 145240, 235269, 23088, 235269, 51732, 187687, 32275, 236859, 239398, 60709, 129669, 236950, 237312, 238721, 236361, 201194, 238080, 22618, 72941, 28693, 237986, 176427, 236791, 116518, 40284, 65503, 61943, 242912, 108, 235431, 32929, 237092, 31288, 55154, 238364, 96564, 55154, 238364, 235248, 241656, 215441, 236361, 143077, 156610, 664, 59500, 235290, 3049, 235281, 235248, 241592, 238589, 236361, 21167, 238036, 108, 235345, 13506, 235290, 2043, 19991, 578, 29617, 108, 235274, 235265, 6934, 235290, 2043, 19991, 17044, 108, 235431, 585, 235345, 591, 182216, 585, 235290, 37684, 235275, 1148, 48623, 235265, 1936, 108, 235431, 41645, 227195, 236375, 237433, 237964, 236859, 22803, 227613, 238267, 101715, 234541, 90621, 28693, 238391, 22803, 26801, 240753, 237551, 112762, 239571, 131006, 236791, 159838, 40284, 65503, 61943, 242912, 108, 235431, 12071, 1148, 11640, 108, 235431, 34103, 238131, 236214, 126277, 44245, 238608, 238070, 236464, 235248, 241518, 236432, 168426, 240050, 238602, 58510, 93674, 238608, 243903, 171754, 236770, 47250, 113859, 238700, 108, 235431, 13116, 235265, 2833, 591, 44980, 235275, 108, 235431, 34103, 238131, 161615, 239837, 236859, 236137, 30743, 236386, 236361, 31288, 236417, 78749, 236137, 227397, 67650, 236354, 236179, 36203, 238033, 238115, 237545, 237154, 236392, 70231, 72159, 93806, 134512, 243805, 236179, 156976, 235269, 32929, 237092, 228837, 84551, 235269, 108, 239709, 242780, 236405, 238649, 22803, 55154, 238364, 235248, 241656, 171754, 236770, 236375, 236840, 61943, 238080, 22618, 72941, 130059, 236392, 134498, 239985, 238036, 235265, 61138, 237135, 22803, 49697, 236666, 236511, 22978, 49061, 237465, 236392, 61943, 238467, 108, 235431, 21237, 108, 235431, 59994, 235832, 246881, 236648, 126160, 237889, 215895, 20350, 132642, 185111, 170174, 58510, 93674, 238608, 243903, 171754, 236770, 236791, 23248, 238500, 237924, 236386, 93806, 26801, 237834, 22803, 30743, 236386, 236361, 21167, 236464, 235269, 20350, 139988, 235248, 241518, 236432, 61943, 242912, 108, 235431, 29617, 108, 235431, 31288, 22803, 61943, 72159, 93806, 42916, 236864, 141048, 238305, 235248, 238267, 240080, 102708, 171754, 236770, 237290, 237233, 123083, 236432, 235269, 29617, 236214, 31288, 227613, 236375, 65952, 238002, 242912, 108, 235431, 39671, 108, 235431, 200936, 237584, 236214, 54087, 236655, 48060, 50390, 238325, 85024, 58510, 93674, 238608, 243903, 171754, 236770, 112778, 34103, 237092, 238467, 108, 235421, 108, 235284, 235265, 33544, 17044, 108, 235421, 108, 235304, 235265, 34051, 5255, 108, 235431, 55154, 238364, 235248, 241656, 180860, 83942, 239457, 237154, 26291, 30743, 237138, 56787, 239465, 238602, 171754, 236770, 236361, 235248, 241518, 236432, 168426, 240050, 242912, 108, 235421, 108, 235310, 235265, 19504, 5255, 108, 235421, 108, 235308, 235265, 1576, 1306, 11564, 108, 235431, 10006, 235290, 22834, 591, 235356, 235275, 41173, 591, 235280, 823, 52281, 591, 235296, 823, 29617, 591, 235295, 235275, 578, 97306, 591, 235295, 235275, 108, 235431, 54868, 241725, 31288, 55154, 238364, 236791, 116518, 40284, 43033, 240833, 41173, 50548, 238199, 108, 235431, 60331, 239077, 32048, 238138, 200576, 60709, 61943, 108, 235421, 108, 235318, 235265, 573, 29617, 5255, 108, 235431, 29617, 236214, 664, 29697, 235292, 27808, 1082, 2769, 39487, 235281, 236137, 151245, 236645, 108, 235431, 235248, 241518, 236432, 61943, 156610, 44245, 244142, 44997, 236354, 32275, 237611, 239837, 236859, 171754, 236770, 108, 235431, 32275, 237611, 239837, 236859, 236361, 55154, 238364, 22803, 191754, 242912, 108, 235431, 60331, 239077, 32048, 238138, 200576, 60709, 61943, 108, 235431, 32048, 238780, 236511, 117904, 243792, 243751, 235278, 5006, 235269, 21415, 235269, 102599, 235269, 5439, 14837, 1576, 73143, 235275, 22803, 6042, 235265, 108, 235431, 29617, 236214, 44245, 240703, 239805, 61943, 156610, 73523, 236137, 87997, 55154, 238364, 235278, 95375, 235269, 126325, 73143, 235275, 237807, 83942, 239457, 242912, 108, 235431, 154304, 240696, 237601, 236511, 112762, 239571, 131006, 224790, 108, 235431, 26801, 240753, 237551, 61943, 236645, 134512, 242780, 236405, 238649, 236179, 23594, 237138, 224790, 242912, 108, 235421, 108, 235324, 235265, 1212, 798, 692, 749, 675, 29617, 235336, 108, 235431, 49697, 237603, 106191, 196582, 116518, 108, 235431, 55154, 238364, 22803, 145240, 128047, 236386, 235269, 120699, 236386, 235269, 229288, 236386, 235269, 198670, 236386, 235269, 155718, 60709, 235248, 243579, 236386, 108, 235431, 1736, 112762, 236791, 22618, 239346, 108, 235431, 5428, 236791, 40712, 236464, 239824, 238036, 108, 235431, 112762, 239571, 131006, 236137, 112762, 133818, 235269, 155718, 235269, 164079, 108, 235431, 61943, 236645, 235248, 241377, 237533, 236354, 236791, 31850, 236770, 108, 235431, 112762, 236791, 235248, 241560, 238033, 236817, 108, 235431, 11464, 238519, 236666, 236392, 29283, 238151, 236464, 168788, 108, 235431, 20350, 136201, 197781, 128753, 235417, 108, 235421, 108, 235321, 235265, 17927, 576, 29617, 108, 235431, 20350, 139988, 31288, 22803, 126277, 185075, 111276, 93674, 27941, 202429, 236137, 235248, 244073, 239308, 236179, 21167, 236392, 49427, 243977, 84608, 238365, 238467, 108, 235431, 20350, 139988, 126277, 185075, 44997, 244173, 123722, 236859, 239779, 237611, 591, 67650, 236354, 240142, 235275, 236791, 118566, 237759, 72159, 236179, 163964, 238304, 239055, 235248, 243890, 238036, 108, 235431, 86622, 236511, 87634, 237036, 236645, 237545, 55154, 238364, 160590, 237135, 171754, 236770, 236361, 178049, 49427, 243977, 235248, 242454, 240520, 108, 235431, 29617, 236791, 61943, 123472, 19319, 182260, 236179, 31850, 236511, 234654, 48682, 238036, 108, 235431, 23088, 235269, 12143, 145240, 60709, 117904, 238608, 236569, 49697, 237759, 237047, 236840, 182260, 238080, 22618, 21167, 238036, 235265, 230462, 60709, 26176, 237233, 132929, 235248, 242756, 50691, 236791, 182260, 238080, 22618, 236840, 21167, 238036, 108, 235421, 108, 235315, 235265, 29617, 6630, 108, 235431, 29617, 145240, 236648, 235248, 242756, 50691, 235269, 19319, 235269, 26862, 235269, 34103, 238131, 161615, 239837, 236859, 235269, 29617, 215441, 236791, 157329, 238080, 22618, 21167, 238036, 108, 235431, 55154, 238364, 22803, 29617, 215441, 236361, 191754, 238070, 238986, 235269, 161050, 236214, 234541, 19319, 236375, 129669, 236950, 237312, 238721, 236179, 78821, 239457, 242912, 108, 235431, 29617, 145240, 236137, 69781, 237199, 236645, 236214, 16054, 1556, 235281, 238700, 108, 235421, 108, 235274, 235276, 235265, 1576, 1306, 11564, 3434, 15670, 108, 235431, 1576, 1306, 11564, 235248, 241592, 238589, 236137, 474, 19229, 82206, 242341, 237524, 236432, 236179, 145240, 236392, 143077, 227860, 236214, 95917, 108, 235431, 41896, 191232, 235248, 242463, 238772, 236432, 240674, 236392, 168947, 87997, 954, 2527, 235269, 954, 1556, 145240, 235832, 21167, 238036, 108, 235421, 108, 235274, 235274, 235265, 58389, 573, 2744, 6934, 3998, 2744, 13178, 108, 235431, 1576, 1306, 11564, 236179, 23594, 237138, 128047, 236770, 237589, 54868, 241725, 31288, 55154, 238364, 40712, 237433, 240197, 236179, 4494, 1336, 20156, 235283, 236392, 81071, 235832, 241496, 206666, 165866, 239969, 238080, 22618, 21167, 238036, 108, 235431, 531, 2077, 82927, 82206, 242341, 238772, 236432, 236179, 235248, 241377, 237533, 236354, 238467, 108, 235421], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55818 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:34:01 engine.py:275] Added request cmpl-ef8a39c4e2b743b18cf807160f13524b-0.
INFO 02-16 23:34:03 metrics.py:455] Avg prompt throughput: 1638.5 tokens/s, Avg generation throughput: 239.2 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.6%, CPU KV cache usage: 0.0%.
INFO 02-16 23:34:07 logger.py:39] Received request cmpl-02fd986a09164dc6ac8cdc1b3e6ae998-0: prompt: '아래 정보에 기반하여, 사용자의 질문에 답하세요.\n        \n\n        \n\n\n\n## 웹 프로그래밍에서 서버/클라이언트 사이드의 중요성\n\n본 텍스트는 웹 프로그래밍에서 서버 사이드와 클라이언트 사이드의 개념과 중요성을 설명하고 있습니다. \n\n**핵심 내용:**\n\n* **클라이언트 사이드:** 사용자 측에서 작동하며, 사용자 입력을 받아 HTML로 변환하여 브라우저에 표시합니다. 자바스크립트가 대표적인 언어입니다.\n* **서버 사이드:** 서버 측에서 작동하며, 웹 페이지를 생성하고 사용자 인증, 데이터베이스 연동 등 중요한 작업을 수행합니다. 자바, PHP, Ruby, Python, Node.js 등이 대표적인 언어입니다.\n\n서버와 클라이언트는 웹 페이지를 통해 소통하며, 클라이언트 사이드 개발자를 프론트엔드, 서버 사이드 개발자를 백엔드라고 부릅니다.\n\n\n**전달 메시지:**\n\n웹 프로그래밍에서는 서버 사이드와 클라이언트 사이드의 개념을 이해하는 것이 중요하며, 각각의 역할과 기술을 숙지해야 합니다. \n\n \n\n\n## 웹 개발: 서버 사이드 vs. 클라이언트 사이드\n\n이 글은 웹 개발에서 중요한 결정인 **서버 사이드(Server-side)와 클라이언트 사이드(Client-side)의 차이점과 각각의 장단점**을 설명합니다. \n\n**서버 사이드**는 웹 서버에서 실행되는 코드로 데이터베이스 접근, 데이터 처리, HTML 페이지 생성 등을 담당합니다. \n\n* **장점**: 보안, 데이터베이스 접근 용이, 브라우저 호환성 높음\n* **단점**: 서버 부하 증가, 응답 시간 지연\n\n**클라이언트 사이드**는 사용자의 브라우저에서 실행되는 코드로 HTML, CSS, JavaScript를 사용하여 사용자 인터페이스를 조작하고 사용자와 상호작용합니다.\n\n* **장점**: 빠른 응답, 서버 부하 감소, 향상된 사용자 경험\n* **단점**: 보안 취약성, 브라우저 호환성 문제, 성능 제한\n\n글에서는 각 방식의 적합한 사용 사례를 제시합니다. \n\n* **서버 사이드**: 보안, 데이터베이스 작업, 복잡한 처리\n* **클라이언트 사이드**: 실시간 상호작용, 인터페이스 동적 처리, 서버 부하 분산\n\n결론적으로, 웹 개발에서 서버 사이드와 클라이언트 사이드를 효과적으로 활용하여 웹 애플리케이션의 성능, 보안, 사용자 경험을 극대화하는 것이 중요합니다.\n\n\n\n\n\nThis text discusses the need for a more inclusive and equitable society. It highlights the challenges faced by marginalized groups and calls for a collective effort to create a world where everyone has the opportunity to thrive.\n\n##  요약문\n\n본 텍스트는 **사회의 포용성과 평등성 증진의 중요성**을 강조합니다.  \n\n핵심 내용은 다음과 같습니다:\n\n* **사회적 약자들이 겪는 어려움**을 지적하며, 이는 현재 사회 구조의 문제점을 시사합니다.\n* **모든 구성원이 번영할 수 있는 사회**를 만들기 위한 **공동의 노력**이 필요하다는 메시지를 전달합니다.\n\n글쓴이는 **사회 변화를 위한 즉각적인 행동**을 촉구하며,  **포용적이고 공정한 사회 구현**을 위한 움직임에 대한 강력한 의지를 드러냅니다. \n\n\n\n## 결론\n\n서버 사이드 프로그래밍은 웹사이트의 동적 기능을 만들어내는 데 필수적이다. \n서버 사이드 프로그래밍은 웹사이트에 개인화된 컨텐츠를 제공하고 사용자 데이터를 관리하는 데 중요한 역할을 한다. \n\n\n\n\n\n**요약문:**\n\n본 텍스트는 웹 개발에서 사용되는 서버 사이드와 클라이언트 사이드의 개념을 설명하고, 각각의 장단점을 비교 분석합니다. 서버 사이드는 웹 서버에서 데이터 처리를 담당하며, 데이터 위조 가능성을 줄이고 클라이언트 컴퓨터의 처리 부담을 덜어주지만, 서버 처리 부담과 비용이 증가하는 단점이 있습니다. 반면 클라이언트 사이드는 사용자 컴퓨터에서 데이터 처리를 수행하며, 서버 처리 부담을 줄이고 비용을 절감하지만, 클라이언트 컴퓨터의 처리 부담이 증가하고 데이터 위조 가능성이 높아지는 단점이 있습니다. 즉, 서버 사이드와 클라이언트 사이드는 각각의 특징과 장단점을 가지고 있으며, 웹 애플리케이션의 구조와 요구 사항에 따라 적절하게 선택되어야 합니다. \n\n\n\n\n12. creating a simple PHP file\n• 텍스트 편집기에서 새로운 파일을 만들고, 파일 이름을 "hello.php"로 지정함\n• 다음 PHP 코드를 파일로 저장함\n```php\n<?php\necho "Hello World!";\n?>\n```\n• 파일을 XAMPP 폴더의 htdocs 디렉터리에 저장함\n• 웹 브라우저에서 http://localhost/hello.php를 열면 "Hello World!"가 표시됨\n\n\n\n\n## 텍스트 요약\n\n본 문서는 웹 애플리케이션의 기본 개념을 설명하고, 클라이언트-서버 모델, 웹 서버, PHP 등 웹 개발에 필요한 기술을 소개합니다. \n\n**주요 내용:**\n\n* **웹 애플리케이션 구조:** 웹 애플리케이션은 클라이언트(브라우저)와 서버 사이의 상호 작용을 통해 작동하며, 서버는 데이터 처리와 콘텐츠 제공을 담당합니다.\n* **웹 서버:** HTTP 요청을 처리하고 웹 페이지를 제공하는 프로그램으로, Apache, IIS, Nginx 등이 있습니다.\n* **서버-사이드 프로그래밍:** PHP와 같은 서버-사이드 언어는 사용자 요청에 따라 동적 콘텐츠를 생성하고 데이터베이스와 상호 작용합니다.\n* **PHP:** 웹 개발에 널리 사용되는 오픈 소스 서버-사이드 스크립트 언어로, 동적 웹 페이지 생성, 데이터 처리, 파일 관리 등 다양한 기능을 제공합니다.\n\n**핵심 기술:**\n\n* **HTTP:** 웹에서 정보를 교환하는 표준 프로토콜\n* **URI, URL, TLD:** 웹 페이지와 리소스를 식별하는 주소 체계\n* **IP 주소:** 인터넷에서 장치를 식별하는 숫자 주소\n\n**결론:**\n\n본 문서는 웹 개발의 기본 개념을 이해하는 데 필수적인 정보를 제공하며, PHP를 활용한 웹 애플리케이션 개발에 대한 기초를 다집니다.\n\n\n\n        사용자 질문: 서버사이드 프로그래밍에 대해 알려줘 ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 236655, 238608, 104569, 236179, 28693, 238559, 72494, 235269, 61943, 236645, 236137, 160587, 237465, 236179, 235248, 241305, 204551, 235265, 108, 145, 109, 145, 111, 1620, 31288, 58510, 93674, 238608, 243903, 22803, 55154, 238364, 235283, 239483, 122717, 239753, 236859, 160590, 237135, 236137, 215134, 237154, 109, 238744, 235248, 242756, 50691, 236214, 31288, 58510, 93674, 238608, 243903, 22803, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 49532, 241631, 237233, 215134, 237154, 236392, 220596, 48060, 55496, 235265, 235248, 109, 688, 244073, 239308, 196582, 66058, 109, 235287, 5231, 239483, 122717, 239753, 236859, 160590, 237135, 66058, 61943, 236645, 235248, 241656, 22803, 63806, 237358, 206716, 235269, 61943, 236645, 120618, 236392, 101260, 236655, 19319, 236375, 75980, 239457, 72494, 129669, 236950, 237312, 238721, 236179, 100280, 236569, 43395, 235265, 34103, 238131, 161615, 239837, 236859, 236361, 26801, 238946, 85024, 171754, 236770, 47555, 235265, 108, 235287, 5231, 236554, 238364, 160590, 237135, 66058, 55154, 238364, 235248, 241656, 22803, 63806, 237358, 206716, 235269, 31288, 106191, 236791, 116518, 48060, 61943, 236645, 30743, 239907, 235269, 112762, 239571, 131006, 50833, 237358, 73143, 215134, 236511, 211896, 236392, 22618, 238356, 43395, 235265, 34103, 238131, 235269, 29617, 235269, 39671, 235269, 21237, 235269, 13116, 235265, 2833, 73143, 235832, 26801, 238946, 85024, 171754, 236770, 47555, 235265, 109, 236554, 238364, 237807, 91940, 122717, 239753, 236859, 236214, 31288, 106191, 236791, 187118, 44997, 238693, 206716, 235269, 91940, 122717, 239753, 236859, 160590, 237135, 227613, 236645, 236791, 58510, 240405, 236859, 241167, 237135, 235269, 55154, 238364, 160590, 237135, 227613, 236645, 236791, 124559, 241167, 237135, 112778, 43761, 245257, 12957, 235265, 110, 688, 237045, 239522, 75630, 236569, 236183, 66058, 109, 237941, 58510, 93674, 238608, 243903, 180860, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 49532, 241631, 236392, 201194, 40284, 93205, 215134, 206716, 235269, 163558, 238316, 236137, 61169, 238080, 237233, 213222, 236392, 235248, 241594, 236183, 149735, 179694, 235265, 235248, 109, 235248, 110, 1620, 31288, 227613, 235292, 55154, 238364, 160590, 237135, 5135, 235265, 91940, 122717, 239753, 236859, 160590, 237135, 109, 235832, 153818, 236648, 31288, 227613, 22803, 215134, 236511, 72510, 236864, 236589, 5231, 236554, 238364, 160590, 237135, 235278, 7538, 235290, 2043, 235275, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 235278, 4609, 235290, 2043, 235275, 236137, 91292, 235832, 239158, 237233, 163558, 238316, 236137, 60318, 238335, 239158, 688, 236392, 220596, 43395, 235265, 235248, 109, 688, 236554, 238364, 160590, 237135, 688, 236214, 31288, 55154, 238364, 22803, 191754, 156610, 215441, 236375, 112762, 239571, 131006, 165866, 239969, 235269, 112762, 168788, 235269, 19319, 106191, 116518, 73143, 236392, 205799, 238272, 43395, 235265, 235248, 109, 235287, 5231, 237199, 239158, 95573, 29283, 238179, 235269, 112762, 239571, 131006, 165866, 239969, 120340, 235832, 235269, 129669, 236950, 237312, 238721, 83942, 239457, 237154, 187800, 238036, 108, 235287, 5231, 238335, 239158, 95573, 55154, 238364, 43761, 236345, 160284, 236361, 235269, 224047, 241305, 118058, 34805, 237794, 109, 688, 239483, 122717, 239753, 236859, 160590, 237135, 688, 236214, 61943, 236645, 236137, 129669, 236950, 237312, 238721, 22803, 191754, 156610, 215441, 236375, 19319, 235269, 26862, 235269, 22978, 236791, 61943, 72494, 61943, 236645, 227397, 67650, 236354, 236791, 42916, 238115, 48060, 61943, 236645, 237807, 36203, 238033, 238115, 237545, 43395, 235265, 109, 235287, 5231, 237199, 239158, 95573, 235119, 239296, 224047, 241305, 235269, 55154, 238364, 43761, 236345, 99091, 237433, 235269, 220234, 237047, 238602, 61943, 236645, 43033, 240521, 108, 235287, 5231, 238335, 239158, 95573, 29283, 238179, 174375, 239618, 237154, 235269, 129669, 236950, 237312, 238721, 83942, 239457, 237154, 132793, 235269, 64301, 239474, 31850, 236511, 109, 239334, 180860, 163558, 51806, 238186, 236137, 99797, 237961, 236511, 61943, 17309, 241569, 236791, 31850, 236569, 43395, 235265, 235248, 109, 235287, 5231, 236554, 238364, 160590, 237135, 95573, 29283, 238179, 235269, 112762, 239571, 131006, 211896, 235269, 122447, 241533, 236511, 168788, 108, 235287, 5231, 239483, 122717, 239753, 236859, 160590, 237135, 95573, 61928, 210450, 36203, 238033, 238115, 237545, 235269, 227397, 67650, 236354, 49697, 237603, 168788, 235269, 55154, 238364, 43761, 236345, 70754, 238325, 109, 238665, 240405, 90621, 235269, 31288, 227613, 22803, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236791, 207092, 237233, 90621, 147226, 237545, 72494, 31288, 122096, 239135, 236432, 239814, 146689, 236137, 64301, 239474, 235269, 29283, 238179, 235269, 61943, 236645, 43033, 240521, 236392, 235248, 241073, 236800, 236817, 40284, 93205, 215134, 43395, 235265, 113, 1596, 2793, 47065, 573, 1476, 604, 476, 978, 28540, 578, 59731, 8059, 235265, 1165, 24688, 573, 12382, 20360, 731, 152188, 5452, 578, 9712, 604, 476, 23901, 8395, 577, 3104, 476, 2134, 1570, 4784, 919, 573, 7251, 577, 52837, 235265, 109, 1620, 139, 237526, 239618, 237465, 109, 238744, 235248, 242756, 50691, 236214, 5231, 236417, 237880, 236137, 58888, 237545, 237154, 237233, 119339, 238650, 237154, 160284, 237589, 236137, 215134, 237154, 688, 236392, 84608, 237602, 43395, 235265, 139, 109, 244073, 239308, 196582, 236648, 115049, 237233, 81673, 21743, 235292, 109, 235287, 5231, 236417, 237880, 237603, 151245, 236645, 94525, 235248, 246393, 236214, 53355, 238994, 240520, 688, 236392, 34805, 237603, 206716, 235269, 11464, 236214, 200944, 208667, 49061, 237602, 236137, 132793, 239158, 236392, 27941, 236417, 43395, 235265, 108, 235287, 5231, 237551, 239227, 220641, 237399, 235832, 84389, 237759, 238080, 22618, 72941, 208667, 688, 236791, 128047, 236386, 168947, 5231, 237495, 237358, 236137, 61138, 238365, 688, 235832, 126942, 236345, 161509, 75630, 236569, 231588, 31087, 239522, 43395, 235265, 109, 239334, 245398, 206367, 5231, 236417, 237880, 75980, 236817, 236791, 168947, 235248, 242579, 238316, 85024, 105560, 237358, 688, 236392, 235248, 244316, 237302, 206716, 235269, 139, 688, 238199, 237545, 237603, 224907, 41388, 236864, 236511, 208667, 49061, 238513, 688, 236392, 168947, 235248, 240520, 239385, 238700, 236179, 71100, 84608, 238365, 236511, 23594, 231588, 99028, 237822, 245309, 12957, 235265, 235248, 111, 1620, 72510, 240405, 109, 236554, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 31288, 236417, 78749, 236137, 49697, 237603, 201619, 236392, 128047, 236770, 238151, 236214, 65503, 88036, 236669, 237603, 61742, 235265, 235248, 108, 236554, 238364, 160590, 237135, 58510, 93674, 238608, 243903, 236648, 31288, 236417, 78749, 236179, 49532, 236589, 236817, 238602, 235248, 241996, 164594, 236791, 110308, 48060, 61943, 236645, 112762, 236791, 159838, 40284, 65503, 215134, 236511, 61169, 238080, 236392, 153422, 235265, 235248, 113, 688, 237526, 239618, 237465, 66058, 109, 238744, 235248, 242756, 50691, 236214, 31288, 227613, 22803, 61943, 156610, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236137, 49532, 241631, 236392, 220596, 48060, 235269, 163558, 238316, 236137, 60318, 238335, 239158, 236392, 51732, 237905, 211558, 43395, 235265, 55154, 238364, 160590, 237135, 236214, 31288, 55154, 238364, 22803, 112762, 168788, 236791, 205799, 238272, 206716, 235269, 112762, 41423, 237602, 153728, 237154, 236392, 184434, 224907, 91940, 122717, 239753, 236859, 235248, 241897, 243032, 237524, 236137, 168788, 43761, 240599, 236392, 235248, 245057, 236770, 237014, 95091, 235269, 55154, 238364, 168788, 43761, 240599, 237233, 51732, 237545, 235832, 160284, 236361, 40284, 80289, 239158, 235832, 55496, 235265, 78821, 237722, 91940, 122717, 239753, 236859, 160590, 237135, 236214, 61943, 236645, 235248, 241897, 243032, 237524, 22803, 112762, 168788, 236791, 22618, 238356, 206716, 235269, 55154, 238364, 168788, 43761, 240599, 236392, 184434, 224907, 51732, 237545, 236392, 191532, 239199, 74860, 237598, 235269, 91940, 122717, 239753, 236859, 235248, 241897, 243032, 237524, 236137, 168788, 43761, 240599, 235832, 160284, 236361, 48060, 112762, 41423, 237602, 153728, 237154, 235832, 187800, 236655, 194255, 80289, 239158, 235832, 55496, 235265, 235248, 242579, 235269, 55154, 238364, 160590, 237135, 237807, 91940, 122717, 239753, 236859, 160590, 237135, 236214, 163558, 238316, 236137, 94492, 241330, 237233, 60318, 238335, 239158, 236392, 128753, 236464, 218631, 235269, 31288, 122096, 239135, 236432, 239814, 146689, 236137, 49061, 237602, 237807, 73713, 237302, 17309, 239383, 236179, 156976, 99797, 240046, 101969, 134472, 141048, 238305, 179694, 235265, 235248, 112, 235274, 235284, 235265, 10241, 476, 3890, 29617, 2482, 108, 235431, 235248, 242756, 50691, 136188, 239346, 236386, 22803, 201009, 145240, 236392, 128047, 236464, 235269, 145240, 145887, 236392, 664, 17534, 235265, 1556, 235281, 236375, 34805, 236864, 238467, 108, 235431, 115049, 29617, 215441, 236791, 145240, 236375, 143077, 238467, 108, 1917, 1556, 108, 1689, 1556, 108, 4298, 664, 4521, 3855, 66119, 108, 2144, 108, 1917, 108, 235431, 145240, 236392, 1576, 1306, 11564, 235248, 241592, 238589, 236137, 531, 2077, 82927, 82206, 242341, 237524, 236432, 236179, 143077, 238467, 108, 235431, 31288, 129669, 236950, 237312, 238721, 22803, 4494, 1336, 20156, 235283, 17534, 235265, 1556, 236791, 120699, 237722, 664, 4521, 3855, 4496, 236361, 100280, 236569, 242912, 112, 1620, 235248, 242756, 50691, 73713, 239618, 109, 238744, 133889, 236214, 31288, 122096, 239135, 236432, 239814, 146689, 236137, 28693, 238744, 49532, 241631, 236392, 220596, 48060, 235269, 91940, 122717, 239753, 236859, 235290, 236554, 238364, 162570, 235269, 31288, 55154, 238364, 235269, 29617, 73143, 31288, 227613, 236179, 126942, 236511, 213222, 236392, 44997, 237936, 43395, 235265, 235248, 109, 688, 237014, 237526, 196582, 66058, 109, 235287, 5231, 237941, 122096, 239135, 236432, 239814, 146689, 49061, 237602, 66058, 31288, 122096, 239135, 236432, 239814, 146689, 236648, 91940, 122717, 239753, 236859, 235278, 238997, 236950, 237312, 238721, 235275, 237807, 55154, 238364, 160590, 236137, 36203, 238033, 63806, 237545, 236392, 187118, 63806, 237358, 206716, 235269, 55154, 238364, 236214, 112762, 168788, 237807, 176427, 110308, 236392, 205799, 238272, 43395, 235265, 108, 235287, 5231, 237941, 55154, 238364, 66058, 24493, 227038, 236392, 168788, 48060, 31288, 106191, 236791, 110308, 40284, 226417, 26291, 235269, 41173, 235269, 126325, 235269, 646, 170328, 73143, 235832, 55496, 235265, 108, 235287, 5231, 236554, 238364, 235290, 236417, 217534, 58510, 93674, 238608, 243903, 66058, 29617, 237807, 132929, 55154, 238364, 235290, 236417, 217534, 171754, 236770, 236214, 61943, 236645, 227038, 236179, 156976, 49697, 237603, 176427, 236791, 116518, 48060, 112762, 239571, 131006, 237807, 36203, 238033, 63806, 237545, 43395, 235265, 108, 235287, 5231, 29697, 66058, 31288, 227613, 236179, 235248, 241518, 236432, 61943, 156610, 44245, 244142, 44997, 236354, 55154, 238364, 235290, 236417, 217534, 32275, 237611, 239837, 236859, 171754, 236770, 236375, 235269, 49697, 237603, 31288, 106191, 116518, 235269, 112762, 168788, 235269, 145240, 159838, 73143, 32048, 238780, 236511, 201619, 236392, 110308, 43395, 235265, 109, 688, 244073, 239308, 213222, 66058, 109, 235287, 5231, 20672, 66058, 31288, 22803, 104569, 236791, 75985, 239457, 40284, 100280, 239558, 132880, 238772, 242019, 108, 235287, 5231, 17793, 235269, 10822, 235269, 584, 10426, 66058, 31288, 106191, 237807, 63102, 237433, 236354, 236791, 130886, 239793, 40284, 40712, 237433, 109962, 238002, 108, 235287, 5231, 2520, 40712, 237433, 66058, 227397, 242319, 22803, 60318, 237924, 236791, 130886, 239793, 40284, 235248, 243077, 236645, 40712, 237433, 109, 688, 238665, 240405, 66058, 109, 238744, 133889, 236214, 31288, 227613, 236137, 28693, 238744, 49532, 241631, 236392, 201194, 40284, 65503, 88036, 236669, 85024, 104569, 236791, 110308, 206716, 235269, 29617, 236791, 147226, 237545, 236511, 31288, 122096, 239135, 236432, 239814, 146689, 227613, 236179, 71100, 28693, 238950, 236791, 32048, 239346, 12957, 235265, 111, 145, 236417, 237545, 236645, 160587, 237465, 235292, 55154, 238364, 236417, 217534, 58510, 93674, 238608, 243903, 236179, 142192, 78183, 238994, 244669, 235248], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55836 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:34:07 engine.py:275] Added request cmpl-02fd986a09164dc6ac8cdc1b3e6ae998-0.
INFO 02-16 23:34:08 metrics.py:455] Avg prompt throughput: 333.7 tokens/s, Avg generation throughput: 97.4 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.5%, CPU KV cache usage: 0.0%.
INFO 02-16 23:34:13 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 92.5 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.6%, CPU KV cache usage: 0.0%.
INFO 02-16 23:34:24 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 14.3 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:34:34 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:37:55 logger.py:39] Received request cmpl-30ceb229bfdc41a38c999c92b8ad1138-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 크롤링 라이브러리를 알아봐주고, 공통점과 차이점을 비교해줘 <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=768, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 94177, 242237, 239074, 213862, 238997, 237822, 176947, 78183, 236655, 244950, 237014, 236464, 235269, 41388, 238693, 239158, 237233, 91292, 235832, 239158, 236392, 51732, 237905, 237138, 244669, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:57508 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:37:55 engine.py:275] Added request cmpl-30ceb229bfdc41a38c999c92b8ad1138-0.
INFO 02-16 23:38:06 metrics.py:455] Avg prompt throughput: 105.4 tokens/s, Avg generation throughput: 8.5 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:38:16 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:39:01 logger.py:39] Received request cmpl-af95cd884e844687916031e46c0b5e19-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 크롤링 라이브러리를 알아봐주고, 공통점과 차이점을 비교해줘 <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4096, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 94177, 242237, 239074, 213862, 238997, 237822, 176947, 78183, 236655, 244950, 237014, 236464, 235269, 41388, 238693, 239158, 237233, 91292, 235832, 239158, 236392, 51732, 237905, 237138, 244669, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:47354 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:39:01 engine.py:275] Added request cmpl-af95cd884e844687916031e46c0b5e19-0.
INFO 02-16 23:39:02 metrics.py:455] Avg prompt throughput: 240.3 tokens/s, Avg generation throughput: 0.2 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.4%, CPU KV cache usage: 0.0%.
INFO 02-16 23:39:12 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 5.7 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:39:22 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:42:47 logger.py:39] Received request cmpl-d8a16ef7c462479c8a3b04fa346b4efb-0: prompt: '오늘은 2025년 02월 16일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.<start_of_turn>system 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요. 주어진 질문이 여러 문장인 경우 더 많이 생성해도 됩니다. 최대 8개까지만 생성하세요.\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n<start_of_turn>model\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n<end_of_turn>\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.<end_of_turn><start_of_turn>example 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n<end_of_turn>\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    <start_of_turn>user 이번주 주말 부산 날씨를 알려줘. 가볼만곳도 추천해줘. <end_of_turn>\n    <start_of_turn>model\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4096, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2, 237410, 240703, 236648, 235248, 235284, 235276, 235284, 235308, 237029, 235248, 235276, 235284, 237699, 235248, 235274, 235318, 236666, 47555, 235265, 133057, 237138, 236214, 235248, 235284, 235276, 235284, 235308, 237029, 47555, 235265, 11464, 238628, 123083, 236648, 235248, 235284, 237699, 47555, 235265, 106, 9020, 132333, 236648, 153935, 237410, 236214, 122447, 241533, 236511, 160587, 237465, 134660, 80289, 239937, 236511, 30181, 237601, 211896, 26291, 38585, 240265, 236214, 65503, 236179, 235248, 239474, 238693, 236511, 31087, 237465, 236361, 47555, 235265, 108, 235274, 235265, 40712, 236770, 237589, 160587, 237465, 236392, 142925, 238597, 90621, 48740, 237092, 211896, 26291, 38585, 240265, 96673, 235265, 108, 235284, 235265, 163558, 30181, 237601, 235248, 244489, 137120, 113859, 236137, 211896, 237598, 26291, 11464, 238949, 236770, 240586, 238305, 179694, 235265, 191532, 236800, 197781, 237936, 236137, 211896, 236392, 157329, 74860, 41645, 96673, 235265, 591, 238748, 235292, 49697, 236569, 236179, 93828, 49532, 159798, 236137, 104569, 236791, 42916, 236417, 40284, 211896, 70685, 235248, 129090, 235265, 23248, 239862, 236800, 73143, 236840, 41645, 241828, 236361, 236183, 236375, 163558, 238316, 103293, 236375, 160587, 237465, 236392, 235248, 240080, 236183, 153145, 30181, 96673, 2330, 108, 235304, 235265, 235248, 235304, 237936, 11464, 236345, 236137, 30181, 237601, 235248, 244489, 176947, 116518, 204551, 235265, 40712, 236770, 237589, 160587, 237465, 235832, 197781, 45980, 237199, 236589, 95917, 70231, 99805, 235832, 116518, 237138, 236840, 235248, 129090, 235265, 75500, 236800, 235248, 235321, 237936, 239303, 95091, 116518, 204551, 235265, 108, 235310, 235265, 235248, 241305, 239042, 236648, 23745, 238608, 237807, 81673, 235832, 11384, 112507, 238186, 26291, 56787, 238305, 179694, 235265, 108, 106, 2516, 108, 235282, 108, 141, 235281, 4250, 1192, 10890, 236345, 237601, 235248, 244489, 236432, 235248, 235274, 824, 664, 236345, 237601, 235248, 244489, 236432, 235248, 235284, 824, 2804, 1308, 108, 235270, 108, 107, 108, 235308, 235265, 235248, 241305, 239042, 96564, 11384, 112507, 238186, 11464, 238643, 236137, 102708, 196582, 236392, 157329, 74860, 41645, 96673, 235265, 591, 1917, 3327, 1917, 143401, 236671, 236375, 236840, 198766, 74860, 41645, 96673, 2330, 108, 235318, 235265, 44245, 240703, 128856, 241659, 236791, 78821, 237759, 72494, 161050, 236791, 116518, 204551, 235265, 107, 106, 7310, 23745, 238608, 236214, 235248, 242394, 128753, 71277, 236569, 47555, 235265, 23745, 238608, 71277, 236569, 236791, 120816, 236464, 206666, 235248, 241305, 239042, 236392, 198766, 204551, 235265, 238748, 236569, 120618, 235292, 235248, 242876, 236386, 239566, 55393, 236915, 156539, 163558, 238316, 53355, 241039, 74715, 240046, 236179, 34103, 236950, 235336, 235248, 242870, 237935, 236179, 58272, 236666, 60331, 242068, 65084, 236666, 222449, 236392, 236183, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 242876, 236386, 236361, 34103, 139978, 74715, 240046, 824, 664, 238131, 236915, 236915, 236361, 34103, 139978, 74715, 240046, 824, 664, 242876, 236386, 237807, 55393, 236915, 236915, 47250, 222449, 236392, 29599, 75943, 239250, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 49061, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 236648, 53355, 242950, 237458, 102708, 236361, 235336, 163558, 238316, 236137, 84961, 236417, 94525, 53355, 242251, 51732, 238894, 236405, 236354, 162570, 236392, 61943, 48060, 72941, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 149, 235281, 4250, 1192, 10890, 237302, 239334, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 239450, 239135, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 240567, 237154, 237045, 236645, 236137, 41645, 239814, 240880, 31087, 242296, 824, 664, 237302, 239334, 235269, 122096, 239135, 235269, 178181, 237154, 236137, 41645, 239814, 240880, 31087, 242296, 91292, 235832, 239158, 824, 664, 237302, 239334, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 239450, 239135, 236137, 51732, 238894, 236405, 236354, 162570, 824, 664, 240567, 237154, 237045, 236645, 236137, 51732, 238894, 236405, 236354, 162570, 4437, 108, 149, 235270, 109, 238748, 236569, 120618, 235292, 34103, 237045, 238154, 236791, 81071, 236214, 93205, 109961, 238898, 236179, 231124, 236361, 235336, 34103, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 236214, 53355, 238173, 236589, 236361, 235336, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 10890, 236645, 237045, 238154, 81071, 236386, 236361, 109961, 238898, 236179, 48835, 237924, 236214, 52604, 240112, 134498, 236386, 824, 664, 236645, 237045, 238154, 81071, 191232, 231124, 60318, 237433, 134498, 236386, 4437, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 22803, 26801, 237045, 26291, 23248, 236214, 747, 17051, 237807, 165598, 118566, 238356, 104569, 236791, 51732, 237905, 237138, 237014, 236464, 235269, 126277, 235119, 239296, 118058, 236392, 75943, 239250, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 165598, 118566, 238356, 104569, 591, 238151, 236666, 28693, 239558, 21569, 108, 149, 235281, 211324, 235290, 236800, 237045, 747, 17051, 237807, 165598, 51732, 237905, 824, 108, 149, 235281, 211324, 235290, 236800, 237045, 75500, 238335, 44997, 237526, 118566, 238356, 27941, 75943, 239250, 235281, 108, 145, 235307, 108, 145, 235270, 109, 238748, 236569, 120618, 235292, 130603, 237589, 236354, 236137, 65503, 245108, 241017, 237233, 75500, 237502, 241017, 236392, 78183, 238994, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 153, 235281, 239970, 237589, 236354, 236137, 65503, 245108, 241017, 824, 108, 153, 235281, 239970, 237502, 236354, 236137, 75500, 237502, 241017, 235281, 108, 149, 235307, 235248, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 163260, 22803, 82366, 238526, 237138, 31087, 237014, 235269, 154304, 237014, 235269, 41896, 236669, 236791, 73523, 242391, 43761, 238325, 109535, 41896, 238356, 238080, 71277, 236864, 236589, 238266, 235269, 163558, 197657, 236137, 40712, 237526, 55526, 239830, 236183, 237807, 75943, 239250, 235248, 242694, 239346, 236392, 78183, 238994, 237014, 236464, 235269, 75500, 237603, 236137, 195532, 43033, 236375, 237807, 75985, 238693, 239813, 236392, 211558, 237138, 244669, 235265, 86622, 236511, 71277, 237047, 44997, 237526, 118058, 237233, 51732, 237545, 236392, 157329, 237138, 244669, 235265, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 211324, 235290, 237045, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237045, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237045, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 237014, 235290, 239830, 237014, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 239830, 237014, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 239830, 237014, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 239830, 237014, 235290, 237386, 236669, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237386, 236669, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237386, 236669, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237386, 236669, 235290, 237092, 238325, 195532, 43033, 236375, 60709, 75985, 238693, 239813, 824, 108, 149, 235281, 237092, 238325, 40712, 237526, 55526, 239830, 236183, 824, 108, 149, 235281, 237092, 238325, 75943, 239250, 235248, 242694, 239346, 824, 108, 149, 235281, 237045, 238308, 41896, 238356, 71277, 237047, 44997, 237526, 118058, 60709, 51732, 237545, 235281, 108, 145, 235307, 108, 141, 235270, 109, 238748, 236569, 120618, 235292, 58272, 236666, 163260, 236375, 41896, 238356, 236392, 23248, 238994, 236464, 109976, 238266, 128856, 241215, 236361, 235248, 246917, 246408, 236392, 239303, 235336, 213512, 235248, 246917, 246408, 236648, 55526, 239830, 236183, 235248, 243976, 75943, 239250, 237138, 244669, 108, 238748, 236569, 182260, 235292, 612, 108, 145, 235281, 4250, 1192, 892, 108, 149, 235281, 238151, 236666, 163260, 128856, 241215, 824, 108, 149, 235281, 211324, 40712, 237526, 55526, 239830, 236183, 235281, 108, 145, 235307, 108, 145, 235270, 108, 107, 109, 236039, 238036, 160587, 237465, 236392, 197781, 49532, 236137, 30181, 237601, 160587, 237465, 26291, 38585, 240265, 236770, 237014, 96673, 235265, 108, 141, 106, 1645, 11464, 238628, 237014, 40712, 238989, 43761, 238325, 128856, 241215, 236791, 78183, 238994, 244669, 235265, 23248, 241100, 237598, 241732, 236840, 75943, 239250, 237138, 244669, 235265, 235248, 107, 108, 141, 106, 2516, 108, 141], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:60082 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-16 23:42:47 engine.py:275] Added request cmpl-d8a16ef7c462479c8a3b04fa346b4efb-0.
INFO 02-16 23:42:48 metrics.py:455] Avg prompt throughput: 247.7 tokens/s, Avg generation throughput: 4.0 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.4%, CPU KV cache usage: 0.0%.
INFO 02-16 23:42:58 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 2.2 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:43:08 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-16 23:44:42 launcher.py:59] Shutting down FastAPI HTTP server.
INFO 02-16 23:44:42 multiproc_worker_utils.py:141] Terminating local vLLM worker processes
[1;36m(VllmWorkerProcess pid=3986726)[0;0m INFO 02-16 23:44:42 multiproc_worker_utils.py:253] Worker exiting
[1;36m(VllmWorkerProcess pid=3986724)[0;0m INFO 02-16 23:44:42 multiproc_worker_utils.py:253] Worker exiting
[1;36m(VllmWorkerProcess pid=3986725)[0;0m INFO 02-16 23:44:42 multiproc_worker_utils.py:253] Worker exiting
[rank0]:[W216 23:44:45.219245383 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
INFO:     Shutting down
INFO:     Waiting for application shutdown.
INFO:     Application shutdown complete.
/opt/anaconda3/lib/python3.12/multiprocessing/resource_tracker.py:254: UserWarning: resource_tracker: There appear to be 1 leaked shared_memory objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
INFO 02-17 00:06:51 __init__.py:190] Automatically detected platform cuda.
INFO 02-17 00:06:52 api_server.py:840] vLLM API server version 0.7.2
INFO 02-17 00:06:52 api_server.py:841] args: Namespace(subparser='serve', model_tag='snunlp/bigdata_exaone3_7.8b_fft', config='', host=None, port=8000, uvicorn_log_level='info', allow_credentials=False, allowed_origins=['*'], allowed_methods=['*'], allowed_headers=['*'], api_key='token-snuintern2025', lora_modules=None, prompt_adapters=None, chat_template=None, chat_template_content_format='auto', response_role='assistant', ssl_keyfile=None, ssl_certfile=None, ssl_ca_certs=None, ssl_cert_reqs=0, root_path=None, middleware=[], return_tokens_as_token_ids=False, disable_frontend_multiprocessing=False, enable_request_id_headers=False, enable_auto_tool_choice=False, enable_reasoning=False, reasoning_parser=None, tool_call_parser=None, tool_parser_plugin='', model='snunlp/bigdata_exaone3_7.8b_fft', task='auto', tokenizer=None, skip_tokenizer_init=False, revision=None, code_revision=None, tokenizer_revision=None, tokenizer_mode='auto', trust_remote_code=False, allowed_local_media_path=None, download_dir=None, load_format='auto', config_format=<ConfigFormat.AUTO: 'auto'>, dtype='auto', kv_cache_dtype='auto', max_model_len=None, guided_decoding_backend='xgrammar', logits_processor_pattern=None, model_impl='auto', distributed_executor_backend=None, pipeline_parallel_size=1, tensor_parallel_size=1, max_parallel_loading_workers=None, ray_workers_use_nsight=False, block_size=None, enable_prefix_caching=None, disable_sliding_window=False, use_v2_block_manager=True, num_lookahead_slots=0, seed=0, swap_space=4, cpu_offload_gb=0, gpu_memory_utilization=0.9, num_gpu_blocks_override=None, max_num_batched_tokens=None, max_num_seqs=None, max_logprobs=20, disable_log_stats=False, quantization=None, rope_scaling=None, rope_theta=None, hf_overrides=None, enforce_eager=False, max_seq_len_to_capture=8192, disable_custom_all_reduce=False, tokenizer_pool_size=0, tokenizer_pool_type='ray', tokenizer_pool_extra_config=None, limit_mm_per_prompt=None, mm_processor_kwargs=None, disable_mm_preprocessor_cache=False, enable_lora=False, enable_lora_bias=False, max_loras=1, max_lora_rank=16, lora_extra_vocab_size=256, lora_dtype='auto', long_lora_scaling_factors=None, max_cpu_loras=None, fully_sharded_loras=False, enable_prompt_adapter=False, max_prompt_adapters=1, max_prompt_adapter_token=0, device='auto', num_scheduler_steps=1, multi_step_stream_outputs=True, scheduler_delay_factor=0.0, enable_chunked_prefill=None, speculative_model=None, speculative_model_quantization=None, num_speculative_tokens=None, speculative_disable_mqa_scorer=False, speculative_draft_tensor_parallel_size=None, speculative_max_model_len=None, speculative_disable_by_batch_size=None, ngram_prompt_lookup_max=None, ngram_prompt_lookup_min=None, spec_decoding_acceptance_method='rejection_sampler', typical_acceptance_sampler_posterior_threshold=None, typical_acceptance_sampler_posterior_alpha=None, disable_logprobs_during_spec_decoding=None, model_loader_extra_config=None, ignore_patterns=[], preemption_mode=None, served_model_name=None, qlora_adapter_name_or_path=None, otlp_traces_endpoint=None, collect_detailed_traces=None, disable_async_output_proc=False, scheduling_policy='fcfs', override_neuron_config=None, override_pooler_config=None, compilation_config=None, kv_transfer_config=None, worker_cls='auto', generation_config=None, override_generation_config=None, enable_sleep_mode=False, calculate_kv_scales=False, disable_log_requests=False, max_log_len=None, disable_fastapi_docs=False, enable_prompt_tokens_details=False, dispatch_function=<function serve at 0x7f0c88367ec0>)
INFO 02-17 00:06:52 api_server.py:206] Started engine process with PID 3992654
INFO 02-17 00:06:57 __init__.py:190] Automatically detected platform cuda.
INFO 02-17 00:07:02 config.py:542] This model supports multiple tasks: {'score', 'classify', 'embed', 'reward', 'generate'}. Defaulting to 'generate'.
INFO 02-17 00:07:18 config.py:542] This model supports multiple tasks: {'embed', 'classify', 'reward', 'score', 'generate'}. Defaulting to 'generate'.
INFO 02-17 00:07:18 llm_engine.py:234] Initializing a V0 LLM engine (v0.7.2) with config: model='snunlp/bigdata_exaone3_7.8b_fft', speculative_config=None, tokenizer='snunlp/bigdata_exaone3_7.8b_fft', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=snunlp/bigdata_exaone3_7.8b_fft, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=True, 
INFO 02-17 00:07:20 cuda.py:230] Using Flash Attention backend.
INFO 02-17 00:07:20 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
INFO 02-17 00:07:21 weight_utils.py:252] Using model weights format ['*.safetensors']
Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:01<00:04,  1.47s/it]
Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:03<00:03,  1.51s/it]
Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:03<00:00,  1.02it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:04<00:00,  1.16s/it]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:04<00:00,  1.20s/it]

INFO 02-17 00:07:26 model_runner.py:1115] Loading model weights took 14.5640 GB
INFO 02-17 00:07:28 worker.py:267] Memory profiling takes 1.23 seconds
INFO 02-17 00:07:28 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
INFO 02-17 00:07:28 worker.py:267] model weights take 14.56GiB; non_torch_memory takes 0.09GiB; PyTorch activation peak memory takes 0.97GiB; the rest of the memory reserved for KV Cache is 19.83GiB.
INFO 02-17 00:07:28 executor_base.py:110] # CUDA blocks: 10153, # CPU blocks: 2048
INFO 02-17 00:07:28 executor_base.py:115] Maximum concurrency for 4096 tokens per request: 39.66x
INFO 02-17 00:07:30 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s]Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:20,  1.65it/s]Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:01<00:19,  1.72it/s]Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:01<00:17,  1.78it/s]Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:02<00:17,  1.81it/s]Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:02<00:16,  1.82it/s]Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:03<00:15,  1.82it/s]Capturing CUDA graph shapes:  20%|██        | 7/35 [00:03<00:15,  1.84it/s]Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:04<00:14,  1.84it/s]Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:04<00:14,  1.84it/s]Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:05<00:13,  1.81it/s]Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:06<00:13,  1.83it/s]Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:06<00:12,  1.84it/s]Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:07<00:12,  1.82it/s]Capturing CUDA graph shapes:  40%|████      | 14/35 [00:07<00:11,  1.84it/s]Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:08<00:10,  1.85it/s]Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:08<00:10,  1.86it/s]Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:09<00:09,  1.85it/s]Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:09<00:09,  1.88it/s]Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:10<00:08,  1.90it/s]Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:10<00:07,  1.89it/s]Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:11<00:07,  1.91it/s]Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:11<00:06,  1.92it/s]Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:12<00:06,  1.93it/s]Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:12<00:05,  1.94it/s]Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:13<00:05,  1.95it/s]Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:13<00:04,  1.92it/s]Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:14<00:04,  1.94it/s]Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:14<00:03,  1.96it/s]Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:15<00:03,  1.98it/s]Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:15<00:02,  1.97it/s]Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:16<00:02,  1.98it/s]Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:16<00:01,  1.99it/s]Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:17<00:00,  2.00it/s]Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:17<00:00,  2.01it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:18<00:00,  2.00it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:18<00:00,  1.90it/s]
INFO 02-17 00:07:48 model_runner.py:1562] Graph capturing finished in 18 secs, took 0.88 GiB
INFO 02-17 00:07:48 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 22.03 seconds
INFO 02-17 00:07:49 api_server.py:756] Using supplied chat template:
INFO 02-17 00:07:49 api_server.py:756] None
INFO 02-17 00:07:49 launcher.py:21] Available routes are:
INFO 02-17 00:07:49 launcher.py:29] Route: /openapi.json, Methods: GET, HEAD
INFO 02-17 00:07:49 launcher.py:29] Route: /docs, Methods: GET, HEAD
INFO 02-17 00:07:49 launcher.py:29] Route: /docs/oauth2-redirect, Methods: GET, HEAD
INFO 02-17 00:07:49 launcher.py:29] Route: /redoc, Methods: GET, HEAD
INFO 02-17 00:07:49 launcher.py:29] Route: /health, Methods: GET
INFO 02-17 00:07:49 launcher.py:29] Route: /ping, Methods: POST, GET
INFO 02-17 00:07:49 launcher.py:29] Route: /tokenize, Methods: POST
INFO 02-17 00:07:49 launcher.py:29] Route: /detokenize, Methods: POST
INFO 02-17 00:07:49 launcher.py:29] Route: /v1/models, Methods: GET
INFO 02-17 00:07:49 launcher.py:29] Route: /version, Methods: GET
INFO 02-17 00:07:49 launcher.py:29] Route: /v1/chat/completions, Methods: POST
INFO 02-17 00:07:49 launcher.py:29] Route: /v1/completions, Methods: POST
INFO 02-17 00:07:49 launcher.py:29] Route: /v1/embeddings, Methods: POST
INFO 02-17 00:07:49 launcher.py:29] Route: /pooling, Methods: POST
INFO 02-17 00:07:49 launcher.py:29] Route: /score, Methods: POST
INFO 02-17 00:07:49 launcher.py:29] Route: /v1/score, Methods: POST
INFO 02-17 00:07:49 launcher.py:29] Route: /rerank, Methods: POST
INFO 02-17 00:07:49 launcher.py:29] Route: /v1/rerank, Methods: POST
INFO 02-17 00:07:49 launcher.py:29] Route: /v2/rerank, Methods: POST
INFO 02-17 00:07:49 launcher.py:29] Route: /invocations, Methods: POST
INFO:     Started server process [3992485]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
ERROR 02-17 00:07:50 serving_chat.py:126] Error with model object='error' message='The model `snunlp/bigdata_gemma2_9b_dora` does not exist.' type='NotFoundError' param=None code=404
INFO:     127.0.0.1:48706 - "POST /v1/chat/completions HTTP/1.1" 404 Not Found
INFO 02-17 00:08:27 chat_utils.py:332] Detected the chat template content format to be 'string'. You can set `--chat-template-content-format` to override this.
INFO 02-17 00:08:27 logger.py:39] Received request chatcmpl-1550908ace624efebbf367d891065ae2: prompt: '[|system|][|endofturn|]\n[|user|]세종대왕에 대해 알려줘.\n[|assistant|]', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4070, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: None, lora_request: None, prompt_adapter_request: None.
INFO 02-17 00:08:27 engine.py:275] Added request chatcmpl-1550908ace624efebbf367d891065ae2.
INFO 02-17 00:08:27 metrics.py:455] Avg prompt throughput: 3.0 tokens/s, Avg generation throughput: 0.1 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:08:32 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 72.9 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.2%, CPU KV cache usage: 0.0%.
INFO:     127.0.0.1:53248 - "POST /v1/chat/completions HTTP/1.1" 200 OK
INFO 02-17 00:08:46 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 17.9 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:08:56 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:09:12 logger.py:39] Received request cmpl-dc230249fdd64eb8b92d166ca06b3061-0: prompt: '오늘은 2025년 02월 17일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.[|system|] 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요.\n4. 하위 쿼리는 최대한 간단한 질문으로 만드세요. (예: "만약 날아다니는 스파게티 괴물이 창작물이나 상상력의 산물이라면, 그 창작물의 출처나 배경 정보 파악" 대신 "날아다니는 스파게티 괴물의 출처 파악"과 같이 간단하게 만드세요.)\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n[|assistant|]\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.[|endofturn|][|example|] 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n[|endofturn|]\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    [|user|] 서버사이드 프로그래밍에 대해 알려줘 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2939, 732, 582, 379, 377, 379, 382, 2171, 582, 377, 379, 2751, 582, 378, 384, 858, 10996, 375, 4484, 657, 582, 379, 377, 379, 382, 2171, 10996, 375, 2626, 1578, 732, 582, 379, 2751, 10996, 15954, 453, 47982, 453, 422, 5998, 732, 7205, 657, 12037, 1075, 5962, 1371, 696, 8019, 1075, 27498, 3644, 13456, 7872, 657, 1736, 2373, 4362, 1727, 1075, 7111, 10996, 375, 560, 378, 375, 24348, 5962, 696, 39380, 41281, 17661, 3644, 13456, 7872, 5847, 375, 560, 379, 375, 2534, 27498, 100048, 657, 1799, 730, 3644, 1043, 13456, 53712, 1481, 375, 7164, 2690, 1823, 730, 3644, 696, 4666, 1130, 698, 14182, 375, 688, 3027, 387, 6873, 2373, 1546, 1208, 2329, 730, 3231, 4605, 4415, 1130, 657, 3644, 1084, 2873, 375, 23784, 1222, 720, 9190, 715, 7135, 5658, 5962, 696, 8890, 37728, 691, 5847, 22442, 560, 380, 375, 582, 380, 1823, 8099, 730, 27498, 100048, 4605, 16769, 1130, 5847, 375, 560, 381, 375, 27498, 100048, 657, 9338, 5488, 1075, 5962, 13456, 5799, 5847, 375, 688, 3027, 387, 738, 20267, 69972, 657, 28874, 30874, 634, 23993, 1113, 37891, 42738, 730, 62058, 634, 17663, 373, 855, 23993, 1113, 730, 10411, 902, 10300, 3231, 7936, 363, 6414, 738, 1945, 1023, 8367, 657, 28874, 30874, 730, 10411, 7936, 363, 1548, 2485, 5488, 1130, 1060, 5799, 5847, 22442, 560, 381, 375, 9556, 732, 4488, 2030, 2485, 15214, 12947, 13456, 1992, 1481, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 20498, 26942, 23454, 1130, 1595, 100048, 582, 378, 9417, 738, 1130, 1595, 100048, 582, 379, 9417, 4377, 10924, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 14182, 375, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 1130, 5847, 375, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 4488, 32604, 4605, 5813, 5414, 9556, 696, 6016, 1130, 5847, 375, 3027, 954, 13385, 387, 11225, 1339, 18295, 657, 7135, 3930, 11966, 2373, 9633, 392, 3136, 1780, 2373, 6930, 5571, 9500, 1162, 696, 698, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 25999, 905, 9633, 657, 11966, 9417, 738, 49065, 905, 9633, 657, 11966, 9417, 738, 25999, 2030, 18295, 1126, 1162, 696, 924, 3093, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 16993, 373, 11819, 373, 5805, 730, 11282, 7460, 732, 3656, 91728, 392, 7135, 730, 3830, 14178, 3090, 18938, 5927, 696, 1821, 48199, 773, 657, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 54529, 730, 11282, 7460, 9417, 738, 22279, 730, 11282, 7460, 9417, 738, 34724, 730, 11282, 7460, 9417, 738, 54529, 373, 11819, 373, 5805, 730, 11282, 7460, 29289, 9417, 738, 54529, 730, 18938, 5927, 9417, 738, 22279, 730, 18938, 5927, 9417, 738, 34724, 730, 18938, 5927, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 11265, 4605, 1747, 657, 924, 634, 3164, 2373, 1104, 732, 905, 392, 11265, 1747, 37817, 1104, 732, 6620, 657, 4083, 798, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 23454, 39190, 1747, 722, 905, 3164, 2373, 11310, 657, 5282, 1996, 722, 9417, 738, 39190, 1747, 37817, 1104, 732, 6620, 1996, 722, 71045, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 41728, 7991, 13456, 713, 657, 40187, 2030, 77348, 13891, 3231, 4605, 5080, 999, 823, 853, 373, 2472, 8570, 1590, 696, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 20715, 40187, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 77348, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 40187, 2030, 77348, 5080, 9417, 560, 23, 363, 8397, 374, 20715, 1601, 1430, 15767, 13891, 834, 3093, 363, 560, 27, 422, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 4113, 1146, 830, 730, 17129, 4747, 1548, 16951, 4747, 696, 3504, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 19, 363, 2839, 1146, 830, 730, 17129, 4747, 9417, 560, 19, 363, 2839, 1254, 830, 730, 16951, 4747, 363, 560, 23, 422, 582, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 2879, 41728, 7646, 999, 13186, 373, 7967, 373, 18066, 4605, 10916, 4817, 76876, 3253, 2870, 3864, 74914, 373, 2534, 2878, 730, 7245, 23512, 2030, 3093, 3501, 696, 3504, 823, 853, 373, 17028, 730, 5346, 19597, 2030, 73414, 696, 5422, 999, 15887, 375, 3662, 5210, 15767, 1590, 1548, 5262, 696, 4666, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 32122, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 32122, 7245, 23512, 9417, 560, 23, 363, 32122, 3093, 3501, 9417, 560, 23, 363, 32122, 374, 23135, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 23135, 7245, 23512, 9417, 560, 23, 363, 23135, 3093, 3501, 9417, 560, 23, 363, 23135, 374, 44868, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 44868, 7245, 23512, 9417, 560, 23, 363, 44868, 3093, 3501, 9417, 560, 23, 363, 44868, 374, 12149, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 12149, 7245, 23512, 9417, 560, 23, 363, 12149, 3093, 3501, 9417, 560, 23, 363, 17793, 3253, 5210, 15767, 1590, 2425, 5262, 363, 560, 27, 422, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 715, 3253, 696, 713, 12438, 691, 15913, 4977, 905, 3835, 34325, 392, 2210, 3835, 732, 23512, 2131, 3093, 999, 15887, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 13225, 2879, 4977, 9417, 560, 23, 363, 8397, 7245, 23512, 363, 560, 27, 422, 560, 27, 454, 560, 361, 560, 560, 6297, 5962, 696, 2690, 78028, 27498, 5962, 13456, 7872, 33413, 5847, 375, 560, 31, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 2373, 2409, 3504, 15887, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:60246 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:09:12 engine.py:275] Added request cmpl-dc230249fdd64eb8b92d166ca06b3061-0.
INFO 02-17 00:09:12 metrics.py:455] Avg prompt throughput: 156.4 tokens/s, Avg generation throughput: 0.2 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.6%, CPU KV cache usage: 0.0%.
INFO 02-17 00:09:13 logger.py:39] Received request cmpl-3a16f48b9b5b433fb9a903db6c91f5c8-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 정의 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 11476, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:60246 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:09:13 engine.py:275] Added request cmpl-3a16f48b9b5b433fb9a903db6c91f5c8-0.
INFO 02-17 00:09:14 logger.py:39] Received request cmpl-2418b1aba3894eac9f2602fe16b772c4-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 특징 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 8574, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:60246 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:09:14 engine.py:275] Added request cmpl-2418b1aba3894eac9f2602fe16b772c4-0.
INFO 02-17 00:09:17 logger.py:39] Received request cmpl-eeee479605104bf9a146f1530d30123d-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 장점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 7306, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:60246 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:09:17 engine.py:275] Added request cmpl-eeee479605104bf9a146f1530d30123d-0.
INFO 02-17 00:09:17 metrics.py:455] Avg prompt throughput: 523.9 tokens/s, Avg generation throughput: 68.0 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.6%, CPU KV cache usage: 0.0%.
INFO 02-17 00:09:22 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 71.9 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.8%, CPU KV cache usage: 0.0%.
INFO 02-17 00:09:23 logger.py:39] Received request cmpl-951518f8c87846598b1e16ef049952f8-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 단점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 13263, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:60246 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:09:23 engine.py:275] Added request cmpl-951518f8c87846598b1e16ef049952f8-0.
INFO 02-17 00:09:27 metrics.py:455] Avg prompt throughput: 177.4 tokens/s, Avg generation throughput: 70.6 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.7%, CPU KV cache usage: 0.0%.
INFO 02-17 00:09:32 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 71.8 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 1.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:09:37 logger.py:39] Received request cmpl-5b2198631ec742b9b508902c6d49b59b-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 서버사이드 프로그래밍의 예시 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 18296, 37305, 42980, 730, 32604, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:60246 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:09:37 engine.py:275] Added request cmpl-5b2198631ec742b9b508902c6d49b59b-0.
INFO 02-17 00:09:37 metrics.py:455] Avg prompt throughput: 177.5 tokens/s, Avg generation throughput: 70.3 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.6%, CPU KV cache usage: 0.0%.
INFO 02-17 00:09:42 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 71.9 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.8%, CPU KV cache usage: 0.0%.
INFO 02-17 00:09:50 logger.py:39] Received request cmpl-7b631764a3ed4de9b5f26bc055ad0933-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ### 👉 스크립트란?\n\n---\n\n- 특정 작업을 자동으로 수행하기 위해 작성된 프로그램이나 명령어의 집합\n- 스크립트는 주로 단순 반복 작업이나 일련의 과정을 자동화하기 위해 사용되며, 보통 프로그래밍 언어보다 간단한 구조를 가지고 있음\n- 스크립트는 일반적으로 독립적인 애플리케이션보다는 다른 소프트웨어 환경 내에서 실행\n- 인터프리터를 통해 한 줄씩 실행됨\n\\u003cbr>\n\\u003cbr>\n\n### 👉 서버 사이드 스크립트란?\n\n---\n\n- 웹 서버에서 실행되는 스크립트 언어\n- 클라이언트(웹 브라우저)의 요청을 받아 서버에서 처리하고 그 결과를 다시 클라이언트에게 전송하는 역할\n- 웹 개발에서 널리 사용되고 있음\n- 동적인 웹 페이지 생성, 데이터 처리, 사용자 인증 등 다양한 기능을 구현하는 데 핵심적인 역할을 함\n- 대표적으로는 PHP, Python(Django, Flask), Ruby(Ruby on Rails), Java(JSP) 등이 있음\n\\u003cbr>\n\\u003cbr>\n\n### 👉 서버 사이드 스크립트의 주요 특징\n\n---\n\n- 서버에서 실행\n    - 서버 사이드 스크립트는 웹 서버 내에서 실행되며, 클라이언트는 실행 결과만 받음\n- 다양한 언어 지원\n    - PHP, Python, Ruby, Java 등 다양한 언어로 작성할 수 있음\n- 데이터베이스 연동\n    - 서버 사이드 스크립트는 데이터베이스와 상호작용하여 데이터를 저장, 수정, 삭제할 수 있음\n- 보안성\n    - 소스 코드가 클라이언트에게 노출되지 않아 보안에 유리\n- 서버 자원 활용\n    - 서버의 CPU, 메모리 등 자원을 활용하여 복잡한 작업을 처리할 수 있음\n    \\u003cbr>\n    \\u003cbr>\n\n### 👉 클라이언트 사이드 스크립트란?\n\n---\n\n- 웹 브라우저에서 실행되는 스크립트 언어\n- 서버로부터 웹 페이지를 받아온 후, 브라우저에서 스크립트를 실행하여 동적으로 웹 페이지를 변경하거나 사용자와 상호작용\n- 동적인 웹 페이지 구현, 사용자 인터페이스 개선, 폼 유효성 검사 등 다양한 기능을 구현할 수 있음\n- 웹 개발에서는 일반적으로 서버 사이드 스크립트와 클라이언트 사이드 스크립트를 함께 사용\n- 대표적으로는 JavaScript가 있으며, jQuery, React, AngularJS, Vue.js 등의 라이브러리와 프레임워크가 많이 사용됨\n\\u003cbr>\n\\u003cbr>\n\n### 👉 클라이언트 사이드 스크립트의 주요 특징\n\n---\n\n- 브라우저에서 실행\n    - 클라이언트 사이드 스크립트는 사용자의 웹 브라우저에서 실행됨\n- JavaScript 사용\n    - 대부분의 클라이언트 사이드 스크립트는 JavaScript로 작성됨\n- 빠른 응답성\n    - 서버와의 통신 없이 브라우저에서 직접 실행되므로 빠른 응답이 가능\n- 사용자 상호 작용\n    - 마우스 클릭, 키보드 입력 등 사용자 이벤트에 즉각적으로 반응할 수 있음\n- 제한된 접근권한\n    - 보안상의 이유로 클라이언트 사이드 스크립트는 사용자 컴퓨터의 자원에 제한적으로 접근', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 5941, 76629, 593, 59588, 1868, 392, 560, 560, 4961, 560, 560, 374, 11126, 3644, 696, 4440, 13456, 9425, 76766, 1902, 6016, 16524, 5371, 37891, 62305, 730, 34617, 560, 374, 59588, 657, 8011, 8019, 7930, 3644, 37891, 43699, 730, 3540, 696, 4440, 1255, 76766, 1902, 1821, 13452, 1877, 373, 6586, 42980, 10978, 30885, 5488, 1075, 5630, 4605, 2034, 853, 773, 1040, 560, 374, 59588, 657, 4400, 41281, 12125, 1965, 798, 38217, 1280, 4264, 2126, 22839, 4576, 1080, 41728, 12944, 560, 374, 4517, 23615, 1173, 4605, 2364, 764, 1949, 64101, 12944, 837, 463, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 18296, 16444, 59588, 1868, 392, 560, 560, 4961, 560, 560, 374, 11574, 18296, 41728, 12944, 13452, 657, 59588, 10978, 560, 374, 56794, 369, 51257, 61559, 370, 730, 8254, 696, 69597, 18296, 41728, 5547, 48199, 855, 3336, 4605, 2257, 56794, 2373, 1060, 24134, 1130, 657, 6034, 560, 374, 11574, 4003, 41728, 23487, 1821, 13452, 853, 773, 1040, 560, 374, 84906, 798, 11574, 13203, 16769, 373, 7957, 5547, 373, 7332, 7741, 1222, 2841, 1075, 4198, 696, 19495, 1130, 657, 1736, 8771, 1965, 798, 6034, 696, 1470, 560, 374, 3163, 41281, 657, 21479, 373, 14138, 369, 78680, 10380, 373, 58607, 5445, 30967, 369, 65566, 450, 807, 50760, 5445, 11154, 369, 17770, 409, 370, 1222, 634, 773, 1040, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 18296, 16444, 59588, 730, 7245, 8574, 560, 560, 4961, 560, 560, 374, 18296, 41728, 12944, 560, 31, 374, 18296, 16444, 59588, 657, 11574, 18296, 1080, 41728, 12944, 13452, 1877, 373, 56794, 657, 12944, 3336, 1043, 1374, 1040, 560, 374, 2841, 1075, 10978, 3157, 560, 31, 374, 21479, 373, 14138, 373, 30967, 373, 11154, 1222, 2841, 1075, 10978, 715, 6016, 2870, 868, 773, 1040, 560, 374, 51359, 24108, 560, 31, 374, 18296, 16444, 59588, 657, 51359, 2030, 14885, 14052, 22226, 7957, 4605, 11503, 373, 10122, 373, 14829, 2870, 868, 773, 1040, 560, 374, 13949, 1210, 560, 31, 374, 6126, 12291, 905, 56794, 2373, 1060, 12448, 13452, 698, 1145, 1023, 13949, 2373, 7167, 560, 374, 18296, 10622, 4703, 560, 31, 374, 18296, 730, 18313, 373, 21497, 1222, 10622, 696, 4703, 22226, 12037, 1075, 3644, 696, 5547, 2870, 868, 773, 1040, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 56794, 16444, 59588, 1868, 392, 560, 560, 4961, 560, 560, 374, 11574, 61559, 41728, 12944, 13452, 657, 59588, 10978, 560, 374, 18296, 715, 4560, 11574, 13203, 4605, 69597, 2263, 1452, 373, 61559, 41728, 59588, 4605, 12944, 22226, 1368, 41281, 11574, 13203, 4605, 8171, 1130, 16519, 7332, 2030, 14885, 14052, 560, 374, 84906, 798, 11574, 13203, 19495, 373, 7332, 51299, 4982, 373, 8809, 24146, 1210, 4830, 1222, 2841, 1075, 4198, 696, 19495, 2870, 868, 773, 1040, 560, 374, 11574, 4003, 41728, 657, 4400, 41281, 18296, 16444, 59588, 2030, 56794, 16444, 59588, 4605, 2110, 1821, 560, 374, 3163, 41281, 657, 20820, 905, 773, 5718, 373, 27010, 373, 21676, 373, 43047, 17770, 373, 46552, 375, 12716, 53641, 67175, 2030, 18286, 13518, 905, 1719, 1821, 837, 463, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 56794, 16444, 59588, 730, 7245, 8574, 560, 560, 4961, 560, 560, 374, 61559, 41728, 12944, 560, 31, 374, 56794, 16444, 59588, 657, 7332, 730, 11574, 61559, 41728, 12944, 837, 463, 560, 374, 20820, 1821, 560, 31, 374, 5255, 730, 56794, 16444, 59588, 657, 20820, 715, 6016, 837, 463, 560, 374, 8570, 16352, 1210, 560, 31, 374, 18296, 2030, 730, 7514, 2705, 61559, 41728, 3492, 12944, 13452, 8158, 8570, 16352, 634, 1995, 560, 374, 7332, 14885, 9368, 560, 31, 374, 25801, 9144, 373, 28674, 13385, 1222, 7332, 6594, 2373, 24385, 41281, 7667, 2870, 868, 773, 1040, 560, 374, 8673, 16524, 10625, 1810, 1075, 560, 31, 374, 13949, 84890, 95483, 56794, 16444, 59588, 657, 7332, 9231, 730, 10622, 2373, 8673, 41281, 10625], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:33780 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:09:50 engine.py:275] Added request cmpl-7b631764a3ed4de9b5f26bc055ad0933-0.
INFO 02-17 00:09:50 logger.py:39] Received request cmpl-54864ce3dcb94d2881691b4514e85cd1-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        안녕하세요 jju_developer입니다.오늘은제이쿼리 비동기 방식 연동에 대해 설명하다가따로 설명을 드려야 할 것 같은 정보가 있어서!! 글을 정리하여 적어봅니다~책을 읽다보면 서버사이드와 클라이언트 사이드를 많이 접하실텐데요?웹 프로그래밍에서서버 사이드/클라이언트 사이드가 나뉘고,어느 쪽에 중심을 두느냐에 따라 프로젝트의 방향이 달라지게 됩니다.그렇다면 클라이언트 사이드와 서버 사이드는 무엇일까요?1. 클라이언트 사이드(Client-Side)-클라이언트(사용자) 측에서 처리하는 것.클라이언트(사용자)가 입력한 것을 수신해서 HTML로 만들어서 크롬과 같은 애플리케이션에 해석해서 표시합니다.대표적으로 자바스크립트(Javascript)가 있습니다.2. 서버 사이드(Server-Side)-서버(제공자) 측에서 즉시 처리하는 것.서버 사이드는\xa0클라이언트로 보낼\xa0웹 페이지(HTML,\xa0JavaScript 등이 담긴)를\xa0만들며,작업들(사용자 유효성, DB 관련 등)을 수행합니다.대표적인 언어는 Java, PHP, Ruby, Python, Node.js 등이 있습니다.즉,서버와클라이언트는 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.클라이언트 사이드 언어를 다루고 그에 관련된 개발자들을프론트 엔드서버 사이드 언어를 다루고 그에 관련된 개발자를백엔드라 부릅니다.웹사이트를\xa0제작하는데\xa0쓰이는\xa0스크립트는실행되는 위치에 따라 클라이언트 사이드 스크립트와 서버사이드 스크립트로 구분합니다.서버사이드 스크립트는서버에서 해석해서 구동되는 스크립트이고,클라이언트 사이드 스크립트는브라우저에서 해석해서 구동되는 스크립트입니다.서버사이드 스크립트는 DB를 액세스 하는 게 주요 목적이고,클라이언트 사이드 스크립트는 브라우저의 객체를 제어하는데 쓰입니다.서버 사이드와 클라이언트의 데이터 교환은 HTTPS로 하는데요!여기서 HTTP의 한계를 알아보겠습니다.HTTP의 한계HTTP의 뒤 두 글자 Transfer Protocol.HTTP의 대전제는 “URL 및 부가정보를 통해 사용자가 원하는 페이지를 서버에요청한다,그리고 서버는 해당 요청에응답한다”입니다.사용자가 URL을 요청할 때에만!서버에서 해당 페이지를 꺼내주는 식이라는 겁니다.거꾸로\xa0말하자면,\xa0사용자는\xa0서버로부터\xa0새로운\xa0정보를\xa0받아보기\xa0위해서,\xa0반드시,\xa0새로운\xa0URL을\xa0요청해야\xa0한다는\xa0말과\xa0같습니다.예전에 로그인할 때 아이디 중복확인하는 거 해보셨죠?그때 서버에게 중복 검사를 요청하기 위해서 새 페이지를 요청해야만 했었는데,회원 정보 작성 중에는 페이지를 이동할 수 없었기 때문에새로 요청한 페이지를 팝업창으로 띄웠던 것입니다.(요즘 사이트들은 대부분 팝업창 없이 검사가 가능합니다. 이것이 바로\xa0 Ajax를 이용했기 때문이죠!!!)AJAX그 당시에 떠오르기 시작한 구글은 HTTP 규약을 뛰어넘는 방안을 제안합니다.이름하여AJAX입니다.AJAX를 쓰면, 유저는 새로운 HTML을 서버로부터 받는 것이 아닙니다.즉, 유저는 새로운 웹페이지로 이동하는 것이 아닙니다.대신, 동일한 웹페이지 내에서 DOM을 변경하게 됩니다.요청 페이지에서 이름 칸에 ‘쮸’를 쓰고, 내용에 ‘안녕하세요. 쮸입니다’라고 썼다고 해봅시다.사용자의 이벤트로부터 Javascript는 해당 이름과 내용이 쓰인 DOM을 읽습니다.그리고는 XMLHttpRequest 객체를 통해 웹서버에 해당 이름과 내용을 전송합니다.웹서버는 요청을 처리하고 XML, Text 혹은 JSON을 XMLHttpRequest 객체에 전송합니다.그러면, Javascript가 해당 응답 정보를 DOM에 씁니다.그렇게 결과페이지가 만들어집니다.\u200bAJAX를 쓰면 새로운 HTML을 서버로부터 받아야 하는 것이 아닙니다.동일한 페이지의 일부를 수정할 수도 있는 가능성이 생깁니다.결과적으로 사용자 입장에서는페이지 이동이 발생되지 않고 페이지 내부 변화만 일어나게 됩니다.HTML 페이지 전체를 다 바꿔야 하는 것이 아니라 부분만 바꿀 수 있게 되는 것입니다.이렇게 따로 페이지의 이동 없이 페이지 내부에서 검사를 하여 결과를 출력하는 것을 볼 수 있죵?아이디 중복체크하려면 필히 서버 쪽 DB와 통신하기 위해서 웹서버 동작이 필요한데,이때 페이지를 바꾸지 않고 요청 결과만 그대로 가져와서 띄우면 되게 됩니다.그 외에도 비밀번호 강도 확인, 검색어 실시간 추천, 마우스 커서나 스크롤바 위치에 반응하는 그림, 지도 표시 서비스 등등 다양합니다.<정리>Ajax는 웹 페이지 전체를다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있게 해 줍니다.즉 Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분에만 표시할 수 있습니다.이때 서버와는 다음과 같은 다양한 형태의 데이터를 주고받을 수 있습니다.JSONXMLHTML텍스트 파일 등Ajax의 장점Ajax를 이용하면 다음과 같은 장점이 있습니다.\u200b1.웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있습니다.2. 웹 페이지가 로드된 후에 서버로 데이터 요청을 보낼 수 있습니다. (Post를 통해 값을 서버 쪽으로 전달해 처리되고 받아올 수 있음)3. 웹 페이지가 로드된 후에 서버로부터 데이터를 받을 수 있습니다.4. 백그라운드 영역에서 서버로 데이터를 보낼 수 있습니다.Ajax의 단점Ajax를 이용하면 여러 장점을 가지지만, Ajax로도 다음과 같은 일들은 처리할 수 없습니다.\u200b1.Ajax는 클라이언트가 서버에 데이터를 요청하는 클라이언트 풀링 방식(사용자가 직접 요청)을 사용하므로,서버 푸시 방식(푸시알람 같은)의 실시간 서비스는 만들 수 없습니다.2. Ajax로는 바이너리 데이터를 보내거나 받을 수 없습니다.3. Ajax 스크립트가 포함된 서버가 아닌 다른 서버로 Ajax 요청을 보낼 수는 없습니다.4.클라이언트의 PC로 Ajax 요청을 보낼 수는 없습니다.Ajax 구성 요소- 웹 페이지의 표현을 위한HTML과 CSS- 데이터에 접근하거나 화면 구성을 동적으로 조작하기 위해 사용되는DOM 모델- 데이터의 교환을 위한JSON이나 XML- 웹 서버와의 비동기식 통신을 위한XMLHttpRequest 객체- 위에서 언급한 모든 기술을 결합하여 사용자의 작업 흐름을 제어하는 데 사용되는자바스크립트1 : 사용자에 의한 요청 이벤트가 발생합니다. (-> jju240 아이디 생성 요청함)2 : 요청 이벤트가 발생하면 이벤트 핸들러에 의해 자바스크립트가 호출됩니다.3 : 자바스크립트는 XMLHttpRequest 객체를 사용하여 서버로 요청을 보냅니다.이때 웹 브라우저는 요청을 보내고 나서,서버의 응답을 기다릴 필요 없이다른 작업을 처리할 수 있습니다.4 : 서버는 전달받은 XMLHttpRequest 객체를 가지고 Ajax 요청을 처리합니다.5,6 : 서버는 처리한 결과를 HTML, XML 또는 JSON 형태의 데이터로 웹 브라우저에 전달합니다.이때 전달되는 응답은 새 페이지 전부 보내는 것이 아니라 필요한 데이터만을 전달합니다.(->이미사용 중이라는 문구)7 : 서버로부터 전달받은 데이터를 가지고 웹 페이지의 일부분만을 갱신하는 자바스크립트를 호출합니다.8 : 최종으로 웹 페이지의 일부분만이 다시 로딩되어 표시됩니다. (-> 이미 사용 중인 아이디입니다!)XMLHttpRequest 객체Ajax의 가장 핵심적인 구성 요소는 바로 XMLHttpRequest 객체입니다.Ajax에서 XMLHttpRequest 객체는웹 브라우저가 서버와 데이터를 교환할 때 사용됩니다.웹 브라우저가 백그라운드에서 계속해서 서버와 통신할 수 있는 것은 바로 이 객체를 사용하기 때문입니다.let httpRequest = new XMLHttpRequest();이상으로 서버사이드, 클라이언트의 개념과 그 둘이 어떻게 데이터를 교환하는지 알아보았습니다.⭐⭐⭐⭐⭐ 이번 글은 이해하고 적는 것에 초점을 두었기 때문에 시간이 많이 걸렸었는데용\xa0ㅎㅎ😥\\중요한 개념이니 꼭 숙지하시는데 도움이 되었으면 좋겠습니다~!!!그럼 오늘도 수고하셨습니다~참고 웹사이트:http://tcpschool.com/ajax/ajax_intro_works', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 3801, 1130, 5847, 1056, 13238, 424, 50874, 623, 10996, 375, 2939, 732, 37762, 46008, 760, 1202, 50048, 5073, 24108, 2373, 2409, 3328, 1130, 5954, 28837, 3328, 696, 32961, 1051, 924, 1119, 732, 3231, 905, 773, 22556, 3461, 2272, 696, 4892, 22226, 1015, 721, 41065, 455, 2703, 696, 3405, 10816, 838, 18296, 37305, 2030, 56794, 16444, 4605, 1719, 20032, 1332, 6891, 27778, 392, 51257, 42980, 41728, 95473, 16444, 376, 6055, 49544, 16444, 905, 20903, 853, 373, 12258, 3609, 2373, 5696, 696, 1546, 3016, 5133, 2373, 2414, 10902, 730, 6319, 634, 17032, 1060, 2873, 375, 9251, 4767, 56794, 16444, 2030, 18296, 16444, 657, 4262, 858, 4148, 392, 378, 375, 56794, 16444, 369, 16483, 374, 44590, 370, 374, 6055, 49544, 369, 16167, 942, 370, 4387, 41728, 5547, 1130, 657, 924, 375, 6055, 49544, 369, 16167, 942, 370, 905, 13385, 1075, 924, 696, 33278, 5414, 15447, 715, 2069, 22556, 40433, 1548, 1119, 732, 38217, 2373, 11235, 5414, 10269, 14010, 375, 13908, 41281, 47201, 4183, 56386, 369, 403, 1238, 10832, 370, 905, 773, 50747, 375, 379, 375, 18296, 16444, 369, 23423, 374, 44590, 370, 374, 95473, 369, 1050, 40041, 370, 4387, 41728, 16192, 5547, 1130, 657, 924, 375, 95473, 16444, 657, 2926, 31158, 25430, 17681, 11574, 13203, 369, 24961, 373, 20820, 1222, 634, 17206, 370, 4605, 2069, 1877, 373, 21135, 1371, 369, 16167, 942, 24146, 1210, 373, 12847, 3051, 1222, 370, 696, 9425, 14010, 375, 13908, 1965, 798, 10978, 657, 11154, 373, 21479, 373, 30967, 373, 14138, 373, 19206, 375, 12716, 1222, 634, 773, 50747, 375, 18909, 373, 95473, 2030, 6055, 49544, 657, 11574, 13203, 715, 5372, 32906, 696, 3868, 2109, 868, 773, 643, 375, 6055, 49544, 16444, 10978, 4605, 16383, 853, 855, 2373, 3051, 16524, 33468, 1371, 696, 1770, 2024, 1067, 54110, 95473, 16444, 10978, 4605, 16383, 853, 855, 2373, 3051, 16524, 33468, 4605, 3387, 8789, 24835, 60354, 375, 51257, 79184, 4605, 5465, 1130, 15913, 15533, 657, 59588, 657, 1332, 1282, 13452, 657, 3897, 2373, 2414, 56794, 16444, 59588, 2030, 18296, 37305, 12870, 2158, 25430, 11301, 14010, 375, 95473, 37305, 59588, 657, 95473, 41728, 11235, 5414, 35730, 13452, 657, 59588, 634, 853, 373, 6055, 49544, 16444, 59588, 657, 21014, 962, 1415, 41728, 11235, 5414, 35730, 13452, 657, 59588, 10996, 375, 95473, 37305, 59588, 657, 12847, 4605, 92284, 691, 657, 869, 7245, 6801, 634, 853, 373, 6055, 49544, 16444, 59588, 657, 61559, 730, 42225, 4605, 23245, 1130, 15913, 2112, 10996, 375, 95473, 16444, 2030, 56794, 730, 7957, 10547, 732, 60728, 715, 691, 15913, 740, 362, 5429, 712, 17086, 730, 13602, 4605, 5337, 13910, 50747, 375, 64157, 730, 13602, 64157, 730, 2448, 1546, 18302, 31113, 28607, 375, 64157, 730, 7991, 1050, 657, 1488, 20654, 2425, 24688, 33377, 4605, 2364, 7332, 905, 9062, 657, 13203, 4605, 18296, 2373, 740, 1774, 10348, 373, 3011, 18296, 657, 5299, 8254, 2373, 99822, 10348, 9583, 10996, 375, 16167, 942, 905, 3293, 696, 8254, 2870, 1105, 2373, 1043, 362, 95473, 41728, 5299, 13203, 4605, 9596, 823, 657, 23890, 21212, 7356, 375, 1387, 36647, 1216, 1130, 942, 838, 373, 7332, 657, 18296, 715, 4560, 4650, 3231, 4605, 1374, 25539, 722, 4313, 373, 8887, 373, 4650, 3293, 696, 8254, 21046, 4375, 1216, 1548, 1119, 50747, 375, 12926, 2373, 33063, 2870, 1105, 23807, 27013, 9506, 1130, 657, 1022, 67157, 5797, 12099, 392, 16591, 18296, 2373, 1060, 27013, 4830, 4605, 8254, 76766, 4313, 1956, 13203, 4605, 8254, 21046, 1043, 5039, 15913, 373, 35457, 3231, 6016, 1126, 97300, 13203, 4605, 5346, 2870, 868, 1107, 2957, 722, 1668, 2373, 29650, 8254, 1075, 13203, 4605, 32583, 3239, 13456, 9534, 3245, 5623, 924, 10996, 21339, 5438, 8050, 1371, 732, 5255, 32583, 3239, 2705, 4830, 905, 1995, 14010, 375, 4383, 634, 2264, 582, 62632, 4605, 2785, 2662, 722, 1668, 634, 12099, 11258, 370, 75983, 36226, 799, 5569, 2373, 15454, 722, 2104, 1075, 16993, 732, 17086, 87364, 696, 33094, 657, 8800, 696, 11137, 14010, 375, 17787, 22226, 75983, 36226, 10996, 375, 75983, 36226, 4605, 2112, 838, 373, 19589, 657, 4650, 15447, 696, 18296, 715, 4560, 1374, 657, 924, 634, 10454, 375, 18909, 373, 19589, 657, 4650, 11574, 7696, 715, 51034, 657, 924, 634, 10454, 375, 27299, 373, 9725, 1075, 11574, 7696, 1080, 41728, 27591, 696, 8171, 1130, 1060, 2873, 375, 740, 1774, 13203, 41728, 3730, 10940, 2373, 2376, 49854, 18420, 4605, 2112, 853, 373, 3311, 2373, 2376, 3801, 1130, 5847, 375, 58301, 10996, 18420, 3885, 9347, 3401, 844, 64429, 375, 16167, 942, 730, 6594, 715, 4560, 46456, 657, 5299, 3730, 1548, 3311, 634, 44037, 27591, 696, 3405, 50747, 375, 3011, 657, 20100, 88354, 42225, 4605, 2364, 11574, 95473, 2373, 5299, 3730, 1548, 3311, 696, 24134, 14010, 375, 51257, 95473, 657, 8254, 696, 5547, 48199, 20100, 373, 11353, 7597, 15214, 696, 20100, 88354, 42225, 2373, 24134, 14010, 375, 27150, 373, 46456, 905, 5299, 16352, 3231, 4605, 27591, 2373, 35027, 375, 10008, 3336, 7696, 905, 2069, 52232, 76456, 75983, 36226, 4605, 2112, 838, 4650, 15447, 696, 18296, 715, 4560, 69597, 1137, 691, 657, 924, 634, 10454, 375, 74038, 1075, 13203, 730, 5720, 4605, 10122, 2870, 8952, 773, 657, 1995, 35604, 45523, 375, 29635, 41281, 7332, 5106, 41728, 657, 7696, 5346, 634, 3449, 13452, 698, 1145, 853, 13203, 5424, 5005, 1043, 5735, 1060, 2873, 375, 24961, 13203, 4532, 4605, 694, 39655, 691, 657, 924, 634, 1579, 789, 2578, 1043, 20867, 868, 773, 1060, 970, 657, 924, 10996, 375, 5366, 5658, 13203, 730, 5346, 2705, 13203, 5424, 41728, 4830, 4605, 22356, 3336, 4605, 17653, 1130, 657, 924, 696, 2109, 868, 773, 796, 475, 392, 5763, 1689, 27013, 40269, 1130, 38835, 55216, 18296, 3609, 12847, 2030, 7514, 76766, 4313, 11574, 95473, 14288, 634, 2327, 1075, 896, 373, 17540, 13203, 4605, 8766, 698, 1145, 853, 8254, 3336, 1043, 5476, 44700, 49354, 838, 9312, 2873, 375, 799, 2068, 15169, 10239, 63320, 19570, 2927, 373, 47700, 17557, 3093, 373, 25801, 15774, 902, 70806, 1987, 3897, 2373, 7667, 1130, 657, 5124, 373, 6577, 10269, 3670, 7429, 2841, 14010, 39065, 27896, 391, 67884, 1817, 657, 11574, 13203, 4532, 4605, 7237, 86183, 1130, 698, 1145, 94925, 373, 11574, 13203, 730, 47792, 1043, 696, 21522, 2870, 868, 773, 1060, 844, 6916, 375, 18909, 62632, 4605, 2785, 16559, 2599, 33388, 7179, 11693, 41728, 18296, 2030, 7514, 22226, 373, 855, 3336, 4605, 11574, 13203, 730, 47792, 2373, 1043, 10269, 2870, 868, 773, 50747, 375, 17540, 18296, 2030, 657, 2775, 1548, 1119, 732, 2841, 1075, 7075, 730, 7957, 4605, 33052, 696, 868, 773, 50747, 375, 34613, 52991, 24961, 20151, 2754, 11038, 1222, 67884, 1817, 730, 7306, 67884, 1817, 4605, 2785, 16559, 2775, 1548, 1119, 732, 7306, 634, 773, 50747, 76456, 378, 375, 51257, 13203, 4532, 4605, 2257, 86183, 1130, 698, 1145, 94925, 373, 11574, 13203, 730, 47792, 1043, 696, 21522, 2870, 868, 773, 50747, 375, 379, 375, 11574, 13203, 905, 17099, 16524, 1452, 2373, 18296, 715, 7957, 8254, 696, 17681, 868, 773, 50747, 375, 688, 19889, 4605, 2364, 7812, 696, 18296, 3609, 13456, 7820, 999, 5547, 13452, 853, 69597, 3009, 868, 773, 1040, 370, 380, 375, 11574, 13203, 905, 17099, 16524, 1452, 2373, 18296, 715, 4560, 7957, 4605, 1374, 696, 868, 773, 50747, 375, 381, 375, 2599, 33388, 7179, 11693, 41728, 18296, 715, 7957, 4605, 17681, 868, 773, 50747, 375, 67884, 1817, 730, 13263, 67884, 1817, 4605, 2785, 16559, 2690, 7306, 696, 2034, 2597, 373, 62632, 715, 720, 2775, 1548, 1119, 732, 955, 1371, 732, 5547, 2870, 868, 1107, 50747, 76456, 378, 375, 67884, 1817, 657, 56794, 905, 18296, 2373, 7957, 4605, 8254, 1130, 657, 56794, 3320, 3890, 5073, 369, 16167, 942, 905, 3492, 8254, 370, 696, 1821, 1130, 8158, 373, 95473, 83791, 5073, 369, 6953, 954, 5006, 1324, 1119, 732, 370, 730, 17557, 3670, 657, 2069, 868, 1107, 50747, 375, 379, 375, 62632, 715, 657, 5308, 2088, 760, 7957, 4605, 3399, 16519, 1374, 696, 868, 1107, 50747, 375, 380, 375, 62632, 59588, 905, 4666, 16524, 18296, 905, 2993, 2126, 18296, 715, 62632, 8254, 696, 17681, 868, 657, 1107, 50747, 375, 381, 375, 6055, 49544, 730, 4769, 715, 62632, 8254, 696, 17681, 868, 657, 1107, 50747, 375, 67884, 1817, 4394, 9517, 374, 11574, 13203, 730, 5233, 696, 3125, 24961, 1548, 20772, 374, 7957, 2373, 10625, 1130, 16519, 9836, 4394, 696, 1368, 41281, 15597, 76766, 1902, 1821, 13452, 657, 53148, 5927, 374, 7957, 730, 10547, 696, 3125, 34613, 37891, 20100, 374, 11574, 18296, 2030, 730, 1202, 50048, 1286, 7514, 696, 3125, 52991, 88354, 42225, 374, 1144, 41728, 10198, 1075, 2904, 3755, 696, 15581, 22226, 7332, 730, 3644, 11019, 696, 23245, 1130, 657, 1736, 1821, 13452, 657, 942, 1987, 4183, 56386, 378, 756, 7332, 2373, 14095, 8254, 6594, 905, 3449, 14010, 375, 6169, 391, 1056, 13238, 379, 381, 377, 23807, 16769, 8254, 3117, 370, 379, 756, 8254, 6594, 905, 3449, 16559, 6594, 22437, 1030, 2373, 9428, 47201, 4183, 56386, 905, 39038, 837, 1318, 375, 380, 756, 47201, 4183, 56386, 657, 20100, 88354, 42225, 4605, 1821, 22226, 18296, 715, 8254, 696, 63149, 375, 17540, 11574, 61559, 657, 8254, 696, 3399, 853, 11030, 373, 95473, 730, 16352, 696, 30567, 2327, 2705, 6472, 3644, 696, 5547, 2870, 868, 773, 50747, 375, 381, 756, 18296, 657, 7820, 6912, 732, 20100, 88354, 42225, 4605, 2034, 853, 62632, 8254, 696, 5547, 14010, 375, 382, 373, 383, 756, 18296, 657, 5547, 1075, 3336, 4605, 15447, 373, 20100, 4978, 15214, 7075, 730, 7957, 715, 11574, 61559, 2373, 7820, 14010, 375, 17540, 7820, 13452, 657, 16352, 732, 1956, 13203, 7853, 3399, 657, 924, 634, 1579, 789, 2327, 1075, 7957, 1043, 696, 7820, 14010, 21339, 24802, 14360, 16167, 70476, 21212, 15837, 370, 384, 756, 18296, 715, 4560, 7820, 6912, 732, 7957, 4605, 2034, 853, 11574, 13203, 730, 47792, 1043, 696, 21522, 1130, 657, 47201, 4183, 56386, 4605, 39038, 14010, 375, 385, 756, 9350, 13456, 11574, 13203, 730, 47792, 1043, 634, 2257, 86183, 13452, 721, 10269, 837, 1318, 375, 6169, 391, 3519, 1821, 1126, 798, 23807, 10996, 362, 370, 52991, 88354, 42225, 67884, 1817, 730, 2472, 8771, 1965, 798, 4394, 9517, 657, 2264, 20100, 88354, 42225, 10996, 375, 67884, 1817, 41728, 20100, 88354, 42225, 657, 51257, 61559, 905, 18296, 2030, 7957, 4605, 10547, 2870, 1105, 1821, 837, 1318, 375, 51257, 61559, 905, 2599, 33388, 7179, 41728, 3063, 5414, 18296, 2030, 7514, 2870, 868, 773, 657, 924, 732, 2264, 650, 42225, 4605, 1821, 76766, 1668, 10996, 375, 3538, 3825, 13427, 801, 1539, 20100, 88354, 60621, 13766, 13456, 18296, 37305, 373, 56794, 730, 9711, 1548, 855, 3136, 634, 3656, 7957, 4605, 10547, 1130, 59985, 5337, 19850, 50747, 375, 48689, 48689, 48689, 48689, 48689, 2626, 2272, 732, 4630, 48199, 1015, 657, 924, 2373, 18073, 696, 1546, 2957, 722, 1668, 2373, 1590, 634, 1719, 14012, 2957, 15913, 1018, 3301, 11881, 608, 460, 421, 31724, 1075, 9711, 96201, 3102, 4520, 25661, 954, 15913, 3577, 634, 970, 2957, 8235, 1104, 13910, 50747, 455, 11258, 8179, 2247, 720, 16400, 1130, 5797, 50747, 455, 16874, 11574, 79184, 387, 13656, 387, 9413, 14298, 1557, 22662, 375, 3256, 376, 2740, 1817, 376, 2740, 1817, 424, 52062, 424, 7125], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:33782 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:09:50 logger.py:39] Received request cmpl-4efde6b0e7e9411d9002136db87b264f-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        서버 사이드 개발은 웹 애플리케이션의 백엔드 측을 구축하는 프로그래밍 작업으로, 사용자 요청을 처리하고 데이터를 제공하는 역할을 합니다. 이 글에서는 서버 사이드 개발의 개념과 중요성에 대해 알아보고, 백엔드 개발의 주요 내용을 다룰 것입니다.\n서버 사이드 개발의 개념\n서버 사이드 개발은 웹 애플리케이션 또는 다른 네트워크 기반 애플리케이션에서 클라이언트 요청을 처리하고 데이터를 제공하는 부분을 담당하는 개발 프로세스입니다. 서버 사이드 개발은 서버 측에서 실행되며, 클라이언트의 요청에 응답하고 필요한 데이터를 처리하고 반환합니다. 서버 사이드 개발은 다양한 언어와 프레임워크를 사용하여 이루어집니다. 주로 사용되는 언어로는 Java, Python, Ruby, PHP 등이 있으며, 프레임워크로는 Spring, Django, Ruby on Rails, Laravel 등이 있습니다. 이러한 언어와 프레임워크는 개발자가 효율적이고 안정적인 서버 사이드 애플리케이션을 구축할 수 있도록 도와줍니다. 서버 사이드 개발은 다양한 기능과 기술을 다룹니다. 데이터베이스와의 상호작용, 보안 및 인증, 성능 최적화, API 설계, 비즈니스 로직 구현 등이 그중 일부입니다. 또한, 서버 사이드 개발은 확장성과 활용성을 고려하여 서버 아키텍처를 설계하고, 클라이언트와의 효율적인 통신을 위해 RESTful API, 웹 소켓 등과 같은 통신 프로토콜을 사용하기도 합니다.\n백엔드 프로그래밍 언어와 프레임워크\n주로 사용되는 백엔드 프로그래밍 언어로는 Java, Python, Ruby, PHP, Node.js 등이 있습니다. 각 언어마다 특징과 장단점이 있으며, 개발자는 프로젝트의 요구 사항과 성격에 맞는 언어를 선택합니다. Java는 객체지향적이고 안정적인 성능을 제공하며, Python은 가독성이 높고 생산성이 좋습니다. Ruby는 간결하고 유연한 문법을 가지며, PHP는 웹 개발에 특화되어 있습니다. Node.js는 JavaScript 기반으로 동작하며, 비동기식 프로그래밍을 지원하여 높은 처리량과 확장성을 가집니다. 각 백엔드 프로그래밍 언어에는 해당 언어를 활용한 다양한 프레임워크가 존재합니다. 프레임워크는 개발자가 애플리케이션의 핵심 로직에 집중할 수 있도록 기본 구조와 기능을 제공합니다. 예를 들어, Java의 Spring 프레임워크는 의존성 주입(Dependency Injection), MVC 아키텍처 패턴, 데이터베이스 연동 등을 지원하여 개발자가 생산성을 높이고 품질 좋은 애플리케이션을 개발할 수 있도록 도와줍니다. Python의 Django, Ruby의 Ruby on Rails, PHP의 Laravel 등도 마찬가지로 각 언어에 대한 효율적인 개발 환경을 제공합니다.\n데이터베이스와의 연동\n백엔드 프로그래밍에서 데이터베이스와의 연동은 핵심적인 역할을 수행합니다. 데이터베이스는 애플리케이션의 데이터를 저장하고 관리하는 역할을 담당하며, 백엔드 개발자는 데이터베이스와의 연동을 통해 데이터를 읽고 쓰며 애플리케이션의 비즈니스 로직을 구현합니다. 데이터베이스와의 연동을 위해 백엔드 개발자는 SQL(Structured Query Language)을 사용합니다. SQL은 데이터베이스 관리 시스템(DBMS)과 상호 작용하기 위한 표준화된 언어로, 데이터베이스에 쿼리를 전달하고 결과를 받아오는 역할을 수행합니다. SQL을 사용하여 데이터베이스에 테이블을 생성하고 수정하며, 데이터를 삽입, 수정, 삭제하고 조회할 수 있습니다. 데이터베이스와의 연동은 일반적으로 DBMS와의 드라이버를 사용하여 이루어집니다. 백엔드 프로그래밍 언어에는 다양한 DBMS와의 연동을 지원하는 드라이버가 제공되며, 이를 활용하여 데이터베이스에 접속하고 쿼리를 실행합니다. 드라이버를 통해 데이터베이스와의 연결을 설정하고, SQL 문을 실행하여 데이터를 조회하거나 수정할 수 있습니다. 이를 통해 백엔드 개발자는 데이터베이스의 테이블과 컬럼을 활용하여 데이터를 조작하고 필요한 정보를 애플리케이션에 제공할 수 있습니다. 데이터베이스와의 연동은 애플리케이션의 데이터 관리와 동시에 데이터의 일관성, 안전성, 보안성을 보장하는 중요한 요소입니다. 백엔드 개발자는 데이터베이스 스키마 설계, 쿼리의 최적화, 트랜잭션 관리 등을 고려하여 데이터베이스와의 효율적이고 안정적인 연동을 구현해야 합니다. 또한, ORM(Object-Relational Mapping)을 활용하여 객체와 데이터베이스 간의 매핑을 자동화할 수도 있으며, 이를 통해 개발자는 보다 직관적이고 편리한 방식으로 데이터를 다룰 수 있습니다.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 95473, 16444, 4003, 732, 11574, 38217, 730, 2599, 65840, 4387, 696, 9472, 1130, 657, 42980, 3644, 13456, 373, 7332, 8254, 696, 5547, 48199, 7957, 4605, 4078, 1130, 657, 6034, 696, 1481, 375, 650, 2272, 41728, 657, 18296, 16444, 4003, 730, 9711, 1548, 2963, 1210, 2373, 2409, 5337, 853, 373, 2599, 65840, 4003, 730, 7245, 3311, 696, 48149, 924, 10996, 375, 560, 95473, 16444, 4003, 730, 9711, 560, 95473, 16444, 4003, 732, 11574, 38217, 4978, 2126, 15227, 8898, 38217, 41728, 56794, 8254, 696, 5547, 48199, 7957, 4605, 4078, 1130, 657, 2578, 696, 8065, 1130, 657, 4003, 33427, 10996, 375, 18296, 16444, 4003, 732, 18296, 4387, 41728, 12944, 13452, 1877, 373, 56794, 730, 8254, 2373, 16352, 48199, 2327, 1075, 7957, 4605, 5547, 48199, 30824, 14010, 375, 18296, 16444, 4003, 732, 2841, 1075, 10978, 2030, 18286, 13518, 4605, 1821, 22226, 68635, 375, 8011, 1821, 13452, 657, 10978, 715, 657, 11154, 373, 14138, 373, 30967, 373, 21479, 1222, 634, 773, 5718, 373, 18286, 13518, 715, 657, 16934, 373, 38493, 373, 30967, 807, 50760, 373, 82417, 1222, 634, 773, 50747, 375, 4476, 1075, 10978, 2030, 18286, 13518, 657, 33468, 905, 9687, 1965, 634, 853, 5957, 1965, 798, 18296, 16444, 38217, 696, 9472, 2870, 868, 773, 37728, 6153, 24244, 375, 18296, 16444, 4003, 732, 2841, 1075, 4198, 1548, 3755, 696, 694, 6516, 819, 375, 51359, 2030, 730, 14885, 14052, 373, 13949, 2425, 7741, 373, 11758, 64620, 373, 8682, 9449, 373, 18938, 54794, 19495, 1222, 634, 82729, 5720, 10996, 375, 3662, 373, 18296, 16444, 4003, 732, 12472, 1210, 1548, 4703, 1210, 696, 6581, 22226, 18296, 42188, 20151, 2351, 4605, 9449, 48199, 373, 56794, 2030, 730, 9687, 1965, 798, 7514, 696, 1902, 35231, 1993, 8682, 373, 11574, 92194, 1222, 1548, 1119, 732, 7514, 72829, 696, 1821, 1130, 46461, 1481, 375, 560, 3387, 65840, 42980, 10978, 2030, 18286, 13518, 560, 32512, 1821, 13452, 657, 2599, 65840, 42980, 10978, 715, 657, 11154, 373, 14138, 373, 30967, 373, 21479, 373, 19206, 375, 12716, 1222, 634, 773, 50747, 375, 2534, 10978, 34445, 8574, 1548, 42622, 634, 773, 5718, 373, 33468, 657, 10902, 730, 6453, 6318, 1548, 8984, 2373, 1867, 657, 10978, 4605, 3329, 14010, 375, 11154, 657, 42225, 698, 2368, 1965, 634, 853, 5957, 1965, 798, 11758, 696, 4078, 1130, 1877, 373, 14138, 732, 713, 2822, 35604, 2388, 853, 5865, 35604, 1104, 50747, 375, 30967, 657, 48360, 48199, 20211, 1075, 28664, 696, 2034, 1877, 373, 21479, 657, 11574, 4003, 2373, 24778, 13452, 721, 773, 50747, 375, 19206, 375, 12716, 657, 20820, 8898, 13456, 14288, 1130, 1877, 373, 1202, 50048, 1286, 42980, 696, 3157, 22226, 2388, 732, 5547, 1983, 1548, 12472, 1210, 696, 713, 11903, 375, 2534, 2599, 65840, 42980, 10978, 97300, 5299, 10978, 4605, 4703, 1075, 2841, 1075, 18286, 13518, 905, 5582, 14010, 375, 18286, 13518, 657, 33468, 905, 38217, 730, 8771, 54794, 2373, 5359, 2870, 868, 773, 37728, 4214, 5630, 2030, 4198, 696, 4078, 14010, 375, 1288, 4605, 1944, 373, 11154, 730, 16934, 18286, 13518, 657, 20665, 1210, 27218, 369, 97620, 74760, 5445, 49108, 42188, 20151, 2351, 13249, 373, 51359, 24108, 1222, 696, 3157, 22226, 33468, 905, 5865, 1210, 696, 7485, 853, 12326, 1104, 732, 38217, 696, 4003, 2870, 868, 773, 37728, 6153, 24244, 375, 14138, 730, 38493, 373, 30967, 730, 30967, 807, 50760, 373, 21479, 730, 82417, 1222, 720, 9190, 715, 2534, 10978, 2373, 2047, 9687, 1965, 798, 4003, 4576, 696, 4078, 14010, 375, 560, 64766, 35972, 2030, 730, 24108, 560, 3387, 65840, 42980, 41728, 51359, 2030, 730, 24108, 732, 8771, 1965, 798, 6034, 696, 9425, 14010, 375, 51359, 657, 38217, 730, 7957, 4605, 11503, 48199, 2645, 1130, 657, 6034, 696, 8065, 1130, 1877, 373, 2599, 65840, 33468, 657, 51359, 2030, 730, 24108, 696, 2364, 7957, 4605, 3405, 853, 2112, 1877, 38217, 730, 18938, 54794, 696, 19495, 14010, 375, 51359, 2030, 730, 24108, 696, 1902, 2599, 65840, 33468, 657, 14339, 369, 412, 47243, 29796, 20709, 370, 696, 1821, 14010, 375, 14339, 732, 51359, 2645, 5309, 369, 14947, 6865, 370, 1548, 14885, 9368, 76766, 3125, 16203, 1255, 16524, 10978, 715, 373, 51359, 2373, 100048, 4605, 7820, 48199, 3336, 4605, 1374, 40223, 657, 6034, 696, 9425, 14010, 375, 14339, 696, 1821, 22226, 51359, 2373, 6807, 696, 16769, 48199, 10122, 1130, 1877, 373, 7957, 4605, 30599, 373, 10122, 373, 14829, 48199, 20127, 2870, 868, 773, 50747, 375, 51359, 2030, 730, 24108, 732, 4400, 41281, 12847, 6865, 2030, 730, 32179, 4605, 1821, 22226, 68635, 375, 2599, 65840, 42980, 10978, 97300, 2841, 1075, 12847, 6865, 2030, 730, 24108, 696, 3157, 1130, 657, 32179, 905, 4078, 13452, 1877, 373, 38069, 4703, 22226, 51359, 2373, 18979, 48199, 100048, 4605, 12944, 14010, 375, 32179, 4605, 2364, 51359, 2030, 730, 5810, 696, 8587, 48199, 373, 14339, 1451, 696, 12944, 22226, 7957, 4605, 20127, 1130, 16519, 10122, 2870, 868, 773, 50747, 375, 38069, 2364, 2599, 65840, 33468, 657, 51359, 730, 6807, 1548, 82625, 696, 4703, 22226, 7957, 4605, 15597, 48199, 2327, 1075, 3231, 4605, 38217, 2373, 4078, 2870, 868, 773, 50747, 375, 51359, 2030, 730, 24108, 732, 38217, 730, 7957, 2645, 2030, 6873, 2373, 7957, 730, 27883, 1210, 373, 58935, 373, 13949, 1210, 696, 7859, 1130, 657, 2963, 1075, 9517, 10996, 375, 2599, 65840, 33468, 657, 51359, 17722, 1200, 9449, 373, 100048, 730, 64620, 373, 34626, 62345, 2481, 2645, 1222, 696, 6581, 22226, 51359, 2030, 730, 9687, 1965, 634, 853, 5957, 1965, 798, 24108, 696, 19495, 21046, 1481, 375, 3662, 373, 83200, 369, 10913, 374, 16631, 2016, 48808, 370, 696, 4703, 22226, 42225, 2030, 51359, 1682, 730, 1484, 4102, 696, 4440, 1255, 2870, 8952, 773, 5718, 373, 38069, 2364, 33468, 657, 1738, 37846, 1965, 634, 853, 9621, 1075, 5073, 13456, 7957, 4605, 48149, 868, 773, 50747, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:33796 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:09:50 logger.py:39] Received request cmpl-9b5d96e23ae24ed897d6ff3b42a9955c-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        \n![](https://velog.velcdn.com/images/hope1213/post/54bce33a-07d8-4d3d-96c5-6a99b9d9cdc7/image.png)\n\n웹 개발을 할 때 가장 중요한 결정 중 하나는 어떤 작업을 서버 사이드(Server-side)에서 처리할지, 클라이언트 사이드(Client-side)에서 처리할지를 결정하는 것입니다. 이 글에서는 서버 사이드와 클라이언트 사이드의 차이점, 각 방식의 장단점, 그리고 어떤 상황에서 어떤 방식을 선택해야 하는지에 대해 살펴보겠습니다.\n\n#### 서버 사이드(Server-side)란?\n\n서버 사이드 프로그래밍은 웹 서버에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 클라이언트(사용자의 브라우저)에서 요청을 받을 때 실행됩니다. 서버 사이드 스크립트는 데이터베이스에 접근하고, 데이터를 처리하고, HTML 페이지를 동적으로 생성하는 데 사용됩니다.\n즉 웹에서 서버와 클라이언트는 정해진 웹 페이지로 서로 커뮤니케이션을 한다고 볼 수 있다.\n\n\n**주요 언어 및 기술:**\n![](https://velog.velcdn.com/images/hope1213/post/6f8e3e86-7b7d-453a-8684-da3898c25af4/image.png)\n\n- PHP\n- Python (Django, Flask)\n- Ruby (Ruby on Rails)\n- Java (Spring)\n- Node.js\n\n**장점:**\n1. **보안**: 중요한 로직과 데이터베이스 접근이 서버에서 처리되어 클라이언트에서 접근할 수 없습니다.\n2. **데이터베이스 접근**: 서버에서 직접 데이터베이스와 상호작용할 수 있어 데이터 처리와 저장이 용이합니다.\n3. **호환성**: 모든 클라이언트가 동일한 서버 측 코드를 실행하므로 브라우저 호환성 문제를 줄일 수 있습니다.\n\n**단점:**\n1. **서버 부하**: 모든 처리가 서버에서 이루어지기 때문에 서버의 부하가 증가할 수 있습니다.\n2. **응답 시간**: 클라이언트가 요청을 보내고 서버가 응답할 때까지 시간이 걸릴 수 있습니다.\n\n#### 클라이언트 사이드(Client-side)란?\n\n클라이언트 사이드 프로그래밍은 사용자의 브라우저에서 실행되는 코드를 작성하는 것을 의미합니다. 이 코드는 HTML, CSS, JavaScript로 작성되며, 사용자의 인터페이스를 조작하고 사용자와 상호작용합니다.\n\n![](https://velog.velcdn.com/images/hope1213/post/d9319a2f-6c80-477b-987e-2102e2d24bbe/image.png) 일반적으로 Chrome과 같은 웹브라우저는 굉장히 많은 메모리를 차지합니다.\n\n단순히 탐색을 진행했을 뿐인데 다른 프로세스에 비해 굉장히 많은 메모리를 사용한다는 점에서 의문을 가질수 있습니다. 그 이유는 현재 Web쪽에 무거운 처리 대부분은 클라이언트 사이드 언어로 작업하기 때문입니다.\n\n\n**주요 언어 및 기술:**\n- HTML\n- CSS\n- JavaScript (React, Angular, Vue.js)\n\n\n**장점:**\n1. **빠른 응답**: 서버에 요청을 보내지 않고 브라우저에서 바로 처리하므로 응답 속도가 빠릅니다.\n2. **서버 부하 감소**: 많은 작업을 클라이언트에서 처리함으로써 서버의 부담을 줄일 수 있습니다.\n3. **향상된 사용자 경험**: 애니메이션, 실시간 업데이트 등 사용자 인터페이스를 더욱 풍부하게 만들 수 있습니다.\n\n**단점:**\n1. **보안 문제**: 클라이언트 사이드 코드가 브라우저에 노출되므로 보안에 취약할 수 있습니다.\n2. **브라우저 호환성**: 다양한 브라우저에서 동일하게 작동하도록 코드 작성이 어려울 수 있습니다.\n3. **제한된 성능**: 클라이언트의 기기 성능에 따라 처리 속도가 달라질 수 있습니다.\n\n#### 언제 서버 사이드를 선택해야 할까?\n\n- **보안이 중요한 경우**: 민감한 데이터나 중요한 비즈니스 로직이 포함된 경우 서버 사이드 처리가 필요합니다.\n- **데이터베이스 작업**: 데이터베이스와의 상호작용이 빈번하게 이루어질 때 서버 사이드가 적합합니다.\n- **복잡한 처리**: 복잡한 계산이나 대량의 데이터 처리가 필요할 때 서버 측에서 처리하는 것이 좋습니다.\n\n#### 언제 클라이언트 사이드를 선택해야 할까?\n\n- **실시간 상호작용**: 사용자와의 실시간 상호작용이 중요한 경우 클라이언트 사이드 처리가 필요합니다.\n- **인터페이스 동적 처리**: 동적인 사용자 인터페이스, 애니메이션, 실시간 업데이트 등은 클라이언트 사이드에서 처리하는 것이 좋습니다.\n- **서버 부하 분산**: 서버의 부하를 줄이고자 할 때 일부 처리를 클라이언트 사이드로 이동할 수 있습니다.\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 382, 381, 427, 828, 380, 380, 426, 374, 377, 384, 429, 385, 374, 381, 429, 380, 429, 374, 386, 383, 428, 382, 374, 383, 426, 386, 386, 427, 386, 429, 386, 18748, 428, 384, 376, 18958, 375, 441, 2345, 370, 560, 560, 51257, 4003, 696, 1051, 1105, 2472, 2963, 1075, 4024, 1126, 1799, 657, 3090, 3644, 696, 18296, 16444, 369, 23423, 374, 4261, 370, 41728, 5547, 93047, 373, 56794, 16444, 369, 16483, 374, 4261, 370, 41728, 5547, 93047, 4605, 4024, 1130, 657, 924, 10996, 375, 650, 2272, 41728, 657, 18296, 16444, 2030, 56794, 16444, 730, 29289, 373, 2534, 5073, 730, 42622, 373, 2210, 3090, 2876, 41728, 3090, 5073, 696, 3329, 21046, 691, 59985, 2373, 2409, 8926, 13910, 50747, 375, 560, 560, 3673, 18296, 16444, 369, 23423, 374, 4261, 370, 1868, 392, 560, 560, 95473, 16444, 42980, 732, 11574, 18296, 41728, 12944, 13452, 657, 12291, 4605, 6016, 1130, 657, 924, 696, 4536, 14010, 375, 650, 12291, 657, 56794, 369, 16167, 942, 730, 61559, 370, 41728, 8254, 696, 1374, 696, 1105, 12944, 837, 1318, 375, 18296, 16444, 59588, 657, 51359, 2373, 10625, 48199, 373, 7957, 4605, 5547, 48199, 373, 15447, 13203, 4605, 1368, 41281, 16769, 1130, 657, 1736, 1821, 837, 1318, 375, 560, 18909, 11574, 41728, 18296, 2030, 56794, 657, 24730, 11574, 13203, 715, 5372, 32906, 696, 3868, 2109, 868, 773, 643, 375, 560, 560, 560, 2484, 42008, 10978, 2425, 3755, 387, 2484, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 383, 431, 385, 430, 380, 430, 385, 383, 374, 384, 427, 384, 429, 374, 381, 382, 380, 426, 374, 385, 383, 385, 381, 374, 3695, 380, 385, 386, 385, 428, 379, 382, 3543, 381, 376, 18958, 375, 441, 2345, 370, 560, 560, 374, 21479, 560, 374, 14138, 688, 78680, 10380, 373, 58607, 370, 560, 374, 30967, 688, 65566, 450, 807, 50760, 370, 560, 374, 11154, 688, 60192, 370, 560, 374, 19206, 375, 12716, 560, 560, 2484, 50938, 387, 2484, 560, 378, 375, 1316, 1280, 1336, 2484, 387, 2963, 1075, 54794, 1548, 51359, 10625, 634, 18296, 41728, 5547, 13452, 721, 56794, 41728, 10625, 2870, 868, 1107, 50747, 375, 560, 379, 375, 1316, 64766, 35972, 10625, 2484, 387, 18296, 41728, 3492, 51359, 2030, 14885, 14052, 2870, 868, 773, 721, 7957, 5547, 2030, 11503, 634, 26188, 14010, 375, 560, 380, 375, 1316, 1818, 2401, 1210, 2484, 387, 2904, 56794, 905, 9725, 1075, 18296, 4387, 12291, 4605, 12944, 1130, 8158, 61559, 39833, 1210, 2372, 4605, 23006, 868, 773, 50747, 375, 560, 560, 2484, 29376, 387, 2484, 560, 378, 375, 1316, 95473, 33473, 2484, 387, 2904, 5547, 905, 18296, 41728, 14572, 722, 1668, 2373, 18296, 730, 33473, 905, 5010, 2870, 868, 773, 50747, 375, 560, 379, 375, 1316, 99822, 1590, 2484, 387, 56794, 905, 8254, 696, 3399, 853, 18296, 905, 16352, 2870, 1105, 76876, 1590, 634, 20589, 868, 773, 50747, 375, 560, 560, 3673, 56794, 16444, 369, 16483, 374, 4261, 370, 1868, 392, 560, 560, 6055, 49544, 16444, 42980, 732, 7332, 730, 61559, 41728, 12944, 13452, 657, 12291, 4605, 6016, 1130, 657, 924, 696, 4536, 14010, 375, 650, 12291, 657, 15447, 373, 20772, 373, 20820, 715, 6016, 13452, 1877, 373, 7332, 730, 51299, 4605, 15597, 48199, 7332, 2030, 14885, 14052, 14010, 375, 560, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 97201, 378, 379, 378, 380, 376, 26713, 376, 429, 386, 380, 378, 386, 426, 379, 431, 374, 383, 428, 385, 377, 374, 381, 384, 384, 427, 374, 386, 385, 384, 430, 374, 379, 378, 377, 379, 430, 379, 429, 379, 381, 100800, 376, 18958, 375, 441, 2345, 370, 4400, 41281, 25698, 1548, 1119, 732, 11574, 21014, 962, 80649, 6121, 1180, 732, 21497, 4605, 8145, 14010, 375, 560, 560, 50375, 30694, 696, 2379, 2662, 696, 3075, 74914, 2126, 33427, 2373, 7322, 6121, 1180, 732, 21497, 4605, 1821, 1075, 4264, 1694, 41728, 15539, 696, 17640, 800, 773, 50747, 375, 855, 3071, 657, 3570, 8545, 2155, 2373, 20671, 5547, 5255, 732, 56794, 16444, 10978, 715, 3644, 76766, 1668, 10996, 375, 560, 560, 560, 2484, 42008, 10978, 2425, 3755, 387, 2484, 560, 374, 15447, 560, 374, 20772, 560, 374, 20820, 688, 72936, 373, 43047, 373, 46552, 375, 12716, 370, 560, 560, 560, 2484, 50938, 387, 2484, 560, 378, 375, 1316, 42750, 16352, 2484, 387, 18296, 2373, 8254, 696, 3399, 698, 1145, 853, 61559, 41728, 2264, 5547, 1130, 8158, 16352, 7818, 905, 92987, 375, 560, 379, 375, 1316, 95473, 33473, 7632, 2484, 387, 1180, 732, 3644, 696, 56794, 41728, 5547, 3117, 13456, 2500, 18296, 730, 4649, 696, 23006, 868, 773, 50747, 375, 560, 380, 375, 1316, 2368, 1029, 16524, 7332, 4503, 2484, 387, 25022, 373, 17557, 18240, 1222, 7332, 51299, 4605, 3892, 10482, 1130, 1060, 2069, 868, 773, 50747, 375, 560, 560, 2484, 29376, 387, 2484, 560, 378, 375, 1316, 1280, 1336, 2372, 2484, 387, 56794, 16444, 12291, 905, 61559, 2373, 12448, 13452, 8158, 13949, 2373, 17954, 2870, 868, 773, 50747, 375, 560, 379, 375, 1316, 21014, 962, 1415, 39833, 1210, 2484, 387, 2841, 1075, 61559, 41728, 9725, 1130, 1060, 13981, 1130, 37728, 12291, 6016, 634, 17717, 868, 773, 50747, 375, 560, 380, 375, 1316, 68118, 16524, 11758, 2484, 387, 56794, 730, 11241, 11758, 2373, 2414, 5547, 7818, 905, 27309, 868, 773, 50747, 375, 560, 560, 3673, 4269, 18296, 16444, 4605, 3329, 21046, 8354, 392, 560, 560, 374, 1316, 1280, 1336, 634, 2963, 1075, 2042, 2484, 387, 15480, 1075, 7957, 902, 2963, 1075, 18938, 54794, 634, 4666, 16524, 2042, 18296, 16444, 5547, 905, 2327, 14010, 375, 560, 374, 1316, 64766, 35972, 3644, 2484, 387, 51359, 2030, 730, 14885, 14052, 634, 39765, 1130, 1060, 40711, 1105, 18296, 16444, 905, 13329, 14010, 375, 560, 374, 1316, 67972, 1075, 5547, 2484, 387, 12037, 1075, 9939, 37891, 23536, 730, 7957, 5547, 905, 2327, 2870, 1105, 18296, 4387, 41728, 5547, 1130, 657, 924, 634, 1104, 50747, 375, 560, 560, 3673, 4269, 56794, 16444, 4605, 3329, 21046, 8354, 392, 560, 560, 374, 1316, 91144, 14885, 14052, 2484, 387, 7332, 2030, 730, 17557, 14885, 14052, 634, 2963, 1075, 2042, 56794, 16444, 5547, 905, 2327, 14010, 375, 560, 374, 1316, 17111, 27512, 84906, 5547, 2484, 387, 84906, 798, 7332, 51299, 373, 25022, 373, 17557, 18240, 1222, 732, 56794, 16444, 41728, 5547, 1130, 657, 924, 634, 1104, 50747, 375, 560, 374, 1316, 95473, 33473, 28350, 2484, 387, 18296, 730, 33473, 4605, 10466, 853, 942, 1051, 1105, 5720, 5547, 4605, 56794, 16444, 715, 5346, 2870, 868, 773, 50747, 375, 560], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:33800 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:09:50 engine.py:275] Added request cmpl-54864ce3dcb94d2881691b4514e85cd1-0.
INFO 02-17 00:09:50 engine.py:275] Added request cmpl-4efde6b0e7e9411d9002136db87b264f-0.
INFO 02-17 00:09:50 engine.py:275] Added request cmpl-9b5d96e23ae24ed897d6ff3b42a9955c-0.
INFO 02-17 00:09:50 metrics.py:455] Avg prompt throughput: 99.6 tokens/s, Avg generation throughput: 38.7 tokens/s, Running: 3 reqs, Swapped: 0 reqs, Pending: 1 reqs, GPU KV cache usage: 2.3%, CPU KV cache usage: 0.0%.
INFO 02-17 00:09:51 logger.py:39] Received request cmpl-12cb8ebf9c724d809bea33fa109e2222-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        403 Forbidden\nRequest forbidden by administrative rules.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 381, 377, 380, 101630, 560, 13427, 37644, 956, 15021, 6827, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:33782 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:09:51 engine.py:275] Added request cmpl-12cb8ebf9c724d809bea33fa109e2222-0.
INFO 02-17 00:09:51 logger.py:39] Received request cmpl-6e65ff5a101d4294915cc64e29083ebd-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        MDN의 초심자용 서버 사이드 프로그래밍에 대한 기사를 읽고 그에 대한 공부를 해볼 예정이다.\n여기서 서버 측 프로그래밍이 무엇이고, 어떤 일을 할 수 있는지, 클라이언트 프로그래밍과 어떤 점이 다른지에 대해 배워볼 것이다.\n\n현대의 전 세계 웹 개발자들은 서버측 개발을 공부하는 것을 권고 하고 있다. 대부분의 큰 사이트들은 동적으로 보여주기 위한 다양한 데이터가 필요할 때 서버측의 코드를 사용한다.\n일반적으로 서버에 있는 데이터베이스에 저장된 데이터를 빼내서 일부 코드를 통해 보일 수 있도록 클라이언트(HTML 또는 JavaScript)에게 송신한다.\n서버측 코드의 큰 장점은 개별 사용자를 위한 맞춤 웹사이트 컨텐츠를 제공한다는 것이다. 동적 웹사이트는 사용자의 선호도 및 습관에 따라 더 관련성 높은 컨텐츠를 강조 표시할 수 있다.\n또한 이것은 사이트를 저장된 개인 선호와 정보를 사용하기 쉽게 만들어 준다.\n\n### 서버사이드 웹사이트 프로그래밍이 무엇인가?\n웹 서버와 통신하는 웹 브라우저는 HyperText Transport Protocol(HTTP)을 사용하고 있다.\n우리가 웹페이지의 링크를 클릭하거나 폼을 전송하거나 검색을 시작할 때 우리의 웹 브라우저는 HTTP request를 목적 서버에 전달한다. 요청에는 영향을 받는 리소스를 식별하는 URL, 필요 작업을 정의하는 메서드가 포함된다.\n(메소드의 예시로는 리소스를 가져오거나, 삭제하거나 게시하는 것이 있다.\n그리고 URL 매개변수(query 문자열 통해 전송된 값-쌍으로 이루어진 객체), POST 데이터(HTTP POST 메소드에 의해 전송된 데이터), 관련 쿠키 파일을 이용해 인코딩된 추가 정보를 포함할 수 있다.\n\n웹 서버는 클라이언트의 요청이 오길 기다리고, 요청이 도착하면 작업을 진행해, 웹 브라우저에 \\u003cstrong>HTTP 응답 메세지\\u003c/strong>를 보낸다. 그 응답은 요청이 성공 또는 실패를 지시하는 상태 라인을 포함하고 있다.\n요청에 대한 응답이 성공적이라면 본문은 요청 리소스를 포함할 것이고 이는 웹 브라우저에 보여질 수 있다.\n\n\n#### 정적 웹 사이트 (Static Website)\n아래 그림은 정적 웹 사이트의 기본 웹 구조를 보여준다. (정적 웹 사이트는 특별한 리소스 요청이 들어올 때 서버에서 하드 코딩된 동일 컨텐츠를 반환한다.)\n사용자가 페이지를 탐색하거나, 브라우저가 지정된 URL에 HTTP \\"GET\\" 요청을 보낼 때 서버는 파일 시스템에서 요청한 문서를 검색하고 문서과 `success status`를 포함한 HTTP 응답을 반환한다.\n만일 어떠한 이유 때문에 파일을 검색 할 수 없는 경우 `error status`가 반환된다.\n![](https://velog.velcdn.com/images/lmyno/post/ccf3fe62-5d7d-48b3-a397-abe391546c1b/image.png)\n\n#### 동적 웹사이트 (Dynamic Website)\n동적 웹사이트는 필요할 때마다 동적으로 응답 컨텐츠가 생성된다.\n동적 웹사이트의 웹페이지는 보통 HTML 템플릿에 있는 자리 표시자에 데이터베이스에서 가져온 데이터를 넣어 생성된다. (이 방법은 많은 양의 컨텐츠를 저장하기에 정적 웹사이트를 이용하는 것보다 효과적이다.)\n동적 웹사이트는 사용자 또는 저장된 환경을 기반으로 URL에 대해 다른 데이터를 반환할 수 있고, 응답을 반환하는 과정에서 다른 작업을 수행할 수 있다.\n\n동적 웹사이트를 지원하는 코드는 서버에서 실행되어야 한다. 이러한 코드를 만드는 것을 \\u003cspan style=\\"font-size: 150%\\">\\"sever-side programming\\"\\u003c/span>이라 알려져 있다. (또는 \\u003cspan style=\\"font-size: 150%\\">\\"back-end scripting\\"\\u003c/span>이라고도 불린다.)\n\n아래 그림은 동적 웹사이트의 간단한 구조를 보여주고 있다.\n정적 웹사이트와 같이 브라우저는 HTTP 요청을 서버에 보내고, 서버는 요청을 처리하고 적절한 HTTP 응답을 반환한다. 정적 리소스의 요청은 정적 사이트에서의 방법과 같은 방법으로 처리한다. (정적 리소스, 파일은 변하지 않는 파일로 일반적으로 CSS, JS, Image 등등이 있다.)\n![](https://velog.velcdn.com/images/lmyno/post/d971cb86-b6ee-4361-b7b6-be5f03d9f499/image.png)\n\n동적 리소스를 위한 요청은 ② 서버측 코드에 대신 전달(위 그림에서 웹 애플리케이션으로 보이는 부분), ③\\"동적 응답\\"을 위해 서버는 응답을 해석해 필요한 정보를 데이터베이스에서 읽고, ④탐색한 데이터와 HTML 템플릿을 결합하고, ⑤⑥생성된 HTML을 포함한 응답을 다시 보내준다.\n\n서버 사이드와 클라이언트 사이드의 프로그래밍은 같은가?\n이전으로 돌아와서 서버 측에 관여하는 코드와 클라이언트 측에 관여하는 코드를 살펴 보자.\n각각의 케이스마다 코드는 명확히 다른데, 두 사이드의 차이를 보면\n> 1) 그들의 목적과 고민이 서로 다르다.\n2) 일반적으로 같은 프로그래밍 언어를 쓰지 않는다. (JS는 예외적으로 서버와 클라이언트 사이드 둘 다 사용 가능하다.)\n3) 그들은 다른 운영체제 환경에서 수행된다.\n\n브라우저에서 실행되는 코드는 `client-side code`로 알려져 있다. `client-side code`의 주 관심사는 렌더링된 웹페이지의 모양과 행동을 개선시키는 것이다.\n이것은 UI 구성요소 선택 및 스타일 지정, 레이아웃 만들기, 탐색, 양식 유효성 검사 등을 포함하고 있다. 대조적으로, server-side 웹 사이트 프로그래밍은 대부분 브라우저의 요청에 대한 응답으로 어떤 컨텐츠를 반환하는 지 선택하는 것을 포함한다. server-side code는 제출된 데이터 및 요청의 유효성 검사, 데이터 저장 및 검색을 위한 데이터베이스 사용, 필요에 따라 올바른 데이터 전송과 같은 작업을 처리한다.\n\n클라이언트 측 코드는 HTML, CSS, 그리고 JS로 작성된다.\n이것들은 웹 브라우저 안에서 실행되고 기본 운영체제와 연결되지 않거나 아주 약간 연결된다. (파일 시스템의 연결의 제한이 포함되어 있다.) 웹 개발자는 모든 사용자가 웹사이트를 보는 데 사용할 수 있는 브라우저를 조작할 수 없다.\n브라우저는 클라이언트 측 코드 기능과 일관성 없는 수준의 호환성을 제공해, 클라이언트 측 프로그래밍의 어려움은 브라우저 지원의 차이를 정상적으로 처리하는 것이다.\n\n서버측 코드는 다양한 프로그래밍 언어로 작성 가능하다.\n대중적인 서버측 웹 언어를 포함한 예시로 PHP, Python, Ruby, 그리고 C#이 있다. 서버측 코드는 서버의 운영체제와 모든 접속 권한을 가지고, 개발자는 그들이 원하는 프로그래밍 언어를 사용 가능하다.\n\n개발자는 일반적으로 \\u003cstrong>web frameworks(웹 프레임워크)\\u003c/strong>를 이용해 코드를 작성한다. 웹 프레임워크는 일반적인 문제를 해결하고 개발 속도를 높이며 특정 도메인에서 직면하는 다양한 유형의 작업을 단순화하기 위해 설계된 함수, 객체, 규칙 및 기타 코드 구성 요소의 모음이다.\n다시 말하면 클라이언트와 서버 사이드 코드 둘 다 프레임워크를 사용하지만 도메인은 다르지 때문에 프레임워크도 다르다. 클라이언트 측 웹 프레임워크는 레이아웃 및 프레젠테이션 작업을 단순화하는 반면 서버 측 웹 프레임워크는 직접 구현해야 하는 많은 \\"공통\\" 웹 서버 기능을 제공한다.\n(서버 측 공통 웹 서버 기능으로 세션 지원, 사용자와 인증을 지원, 데이터베이스와 쉬운 연결 등등이 있다.)\n\n>참고\n클라이언트 측 프레임워크는 때때로 클라이언트 측 코드를 개발하는 속도를 올릴 수 있게 도와주도록 사용하지만, 우리는 모든 코드를 직접 작성할 수도 있다. **사실 우리가 작고 간단한 사이트의 UI를 만든다면 우리가 직접 작성하는 코드가 더 빠르고 효과적일 수 있다.**\n이와 대조적으로, 우리가 서버측 웹 애플리케이션의 컴포넌트를 **프레임워크 없이 작성하는 것은 거의 생각하기 어려울 것**이다. (Python에서 HTTP 서버와 같은 중요한 기능 구현을 처음부터 하는 것은 어렵지만 Django와 같은 Python 웹 프레임워크는 다른 유용한 도구와 함께 즉시 사용할 수 있는 도구를 제공한다.)\n', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 25460, 407, 730, 51970, 942, 1018, 18296, 16444, 42980, 2373, 2047, 6536, 4605, 3405, 853, 855, 2373, 2047, 3833, 4605, 844, 5161, 3864, 40379, 375, 560, 5429, 712, 18296, 4387, 42980, 634, 4262, 634, 853, 373, 3090, 955, 696, 1051, 868, 773, 59985, 373, 56794, 42980, 1548, 3090, 1694, 634, 83109, 2373, 2409, 17422, 5161, 924, 40379, 375, 560, 560, 16888, 730, 987, 3539, 11574, 33468, 1371, 732, 18296, 5989, 4003, 696, 3833, 1130, 657, 924, 696, 25491, 9858, 773, 643, 375, 5255, 730, 2491, 8050, 1371, 732, 1368, 41281, 3303, 71219, 3125, 2841, 1075, 7957, 905, 2327, 2870, 1105, 18296, 5989, 730, 12291, 4605, 1821, 10348, 375, 560, 15527, 41281, 18296, 2373, 773, 657, 51359, 2373, 11503, 16524, 7957, 4605, 45484, 712, 5720, 12291, 4605, 2364, 10964, 868, 773, 37728, 56794, 369, 24961, 4978, 20820, 370, 2373, 1060, 4533, 1254, 10348, 375, 560, 95473, 5989, 12291, 730, 2491, 7306, 732, 14836, 7332, 4605, 3125, 9010, 11574, 79184, 26886, 4605, 4078, 1075, 4264, 924, 40379, 375, 84906, 11574, 79184, 657, 7332, 730, 44022, 2425, 8724, 2373, 2414, 1047, 3051, 1210, 2388, 732, 26886, 4605, 6707, 10269, 2870, 868, 773, 643, 375, 560, 8625, 4383, 732, 8050, 4605, 11503, 16524, 3728, 11195, 2030, 3231, 4605, 1821, 76766, 3497, 1060, 2069, 721, 8002, 375, 560, 560, 5941, 18296, 37305, 11574, 79184, 42980, 634, 4262, 798, 905, 392, 560, 51257, 18296, 2030, 7514, 1130, 657, 11574, 61559, 657, 25894, 9096, 21804, 28607, 369, 64157, 370, 696, 1821, 48199, 773, 643, 375, 560, 3718, 905, 11574, 7696, 730, 10853, 4605, 9144, 1130, 16519, 8809, 696, 24134, 1130, 16519, 6276, 696, 2104, 2870, 1105, 1740, 730, 11574, 61559, 657, 17086, 3951, 4605, 6801, 18296, 2373, 7820, 10348, 375, 8254, 97300, 5282, 696, 1374, 657, 100357, 4605, 50682, 1130, 657, 3293, 373, 2327, 3644, 696, 11476, 1130, 657, 2012, 712, 1147, 905, 4666, 16524, 643, 375, 560, 369, 3022, 24284, 730, 32604, 715, 657, 100357, 4605, 21395, 16519, 373, 14829, 1130, 16519, 10207, 1130, 657, 924, 634, 773, 643, 375, 560, 3011, 3293, 40564, 80363, 369, 16287, 66894, 2364, 24134, 16524, 7812, 374, 17586, 13456, 23640, 42225, 5445, 17040, 7957, 369, 64157, 17040, 71801, 2373, 9428, 24134, 16524, 7957, 5445, 3051, 13466, 11038, 696, 87633, 893, 75265, 16524, 3713, 3231, 4605, 4666, 2870, 868, 773, 643, 375, 560, 560, 51257, 18296, 657, 56794, 730, 8254, 634, 1052, 2885, 3710, 1766, 373, 8254, 634, 4550, 16559, 3644, 696, 2379, 999, 373, 11574, 61559, 2373, 895, 446, 377, 377, 380, 428, 82394, 391, 64157, 16352, 31014, 421, 446, 377, 377, 380, 428, 376, 82394, 391, 4605, 49087, 375, 855, 16352, 732, 8254, 634, 4907, 4978, 8501, 4605, 17228, 1130, 657, 3004, 6148, 696, 4666, 48199, 773, 643, 375, 560, 740, 1774, 2373, 2047, 16352, 634, 4907, 1965, 634, 17663, 18484, 732, 8254, 100357, 4605, 4666, 2870, 924, 634, 853, 650, 657, 11574, 61559, 2373, 3303, 1811, 868, 773, 643, 375, 560, 560, 560, 3673, 44742, 11574, 8050, 688, 67965, 26593, 370, 560, 13696, 5124, 732, 44742, 11574, 8050, 730, 4214, 11574, 5630, 4605, 30456, 375, 688, 1002, 1965, 11574, 8050, 657, 5149, 1075, 100357, 8254, 634, 26706, 1105, 18296, 41728, 19573, 32828, 16524, 9725, 26886, 4605, 30824, 10348, 22442, 560, 16167, 942, 905, 13203, 4605, 30694, 1130, 16519, 373, 61559, 905, 9384, 16524, 3293, 2373, 17086, 8708, 36487, 31128, 8254, 696, 17681, 1105, 18296, 657, 11038, 5309, 41728, 8254, 1075, 20440, 4605, 6276, 48199, 20440, 1548, 1958, 42243, 4667, 425, 4605, 4666, 1075, 17086, 16352, 696, 30824, 10348, 375, 560, 64323, 9269, 1075, 3071, 1668, 2373, 11038, 696, 6276, 1051, 868, 1107, 657, 2042, 1958, 25030, 4667, 425, 905, 30824, 16524, 643, 375, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 63121, 2590, 440, 376, 26713, 376, 2071, 431, 380, 12300, 383, 379, 374, 382, 429, 384, 429, 374, 381, 385, 427, 380, 374, 426, 380, 386, 384, 374, 18310, 380, 386, 378, 382, 381, 383, 428, 378, 427, 376, 18958, 375, 441, 2345, 370, 560, 560, 3673, 84906, 11574, 79184, 688, 64453, 26593, 370, 560, 977, 1965, 11574, 79184, 657, 2327, 2870, 1105, 34445, 1368, 41281, 16352, 26886, 905, 16769, 16524, 643, 375, 560, 977, 1965, 11574, 79184, 730, 11574, 7696, 657, 6586, 15447, 58181, 5509, 2373, 773, 657, 3184, 10269, 942, 2373, 51359, 41728, 28481, 7957, 4605, 2635, 721, 16769, 16524, 643, 375, 688, 634, 2818, 732, 1180, 732, 1907, 730, 26886, 4605, 11503, 1130, 37817, 44742, 11574, 79184, 4605, 2785, 1130, 657, 924, 30885, 3562, 1965, 40379, 22442, 560, 977, 1965, 11574, 79184, 657, 7332, 4978, 11503, 16524, 4576, 696, 8898, 13456, 3293, 2373, 2409, 2126, 7957, 4605, 30824, 2870, 868, 773, 853, 373, 16352, 696, 30824, 1130, 657, 3540, 41728, 2126, 3644, 696, 9425, 2870, 868, 773, 643, 375, 560, 560, 977, 1965, 11574, 79184, 4605, 3157, 1130, 657, 12291, 657, 18296, 41728, 12944, 13452, 36309, 1367, 375, 4476, 1075, 12291, 4605, 5799, 657, 924, 696, 895, 446, 377, 377, 380, 428, 26497, 4212, 14448, 363, 13424, 374, 23489, 387, 582, 378, 382, 377, 101184, 9896, 31128, 72856, 374, 4261, 13575, 31128, 421, 446, 377, 377, 380, 428, 376, 26497, 391, 56415, 15576, 773, 643, 375, 688, 50663, 895, 446, 377, 377, 380, 428, 26497, 4212, 14448, 363, 13424, 374, 23489, 387, 582, 378, 382, 377, 101184, 9896, 31128, 3714, 374, 984, 69175, 31128, 421, 446, 377, 377, 380, 428, 376, 26497, 391, 634, 3885, 720, 54361, 22442, 560, 560, 13696, 5124, 732, 84906, 11574, 79184, 730, 5488, 1075, 5630, 4605, 3303, 823, 853, 773, 643, 375, 560, 1002, 1965, 11574, 79184, 2030, 2485, 61559, 657, 17086, 8254, 696, 18296, 2373, 3399, 853, 373, 18296, 657, 8254, 696, 5547, 48199, 10252, 1075, 17086, 16352, 696, 30824, 10348, 375, 44742, 100357, 730, 8254, 732, 44742, 8050, 41728, 730, 2818, 1548, 1119, 732, 2818, 13456, 5547, 10348, 375, 688, 1002, 1965, 100357, 373, 11038, 732, 14276, 698, 1145, 657, 11038, 715, 4400, 41281, 20772, 373, 10907, 373, 12013, 7429, 634, 773, 643, 22442, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 63121, 2590, 440, 376, 26713, 376, 429, 386, 384, 378, 37212, 385, 383, 374, 427, 383, 2305, 374, 381, 380, 383, 378, 374, 427, 384, 427, 383, 374, 2617, 382, 431, 377, 380, 429, 386, 431, 381, 386, 386, 376, 18958, 375, 441, 2345, 370, 560, 560, 977, 1965, 100357, 4605, 3125, 8254, 732, 582, 379, 18296, 5989, 12291, 2373, 6414, 7820, 369, 1595, 5124, 41728, 11574, 38217, 13456, 2323, 657, 2578, 5445, 582, 380, 31128, 977, 1965, 16352, 31128, 696, 1902, 18296, 657, 16352, 696, 11235, 999, 2327, 1075, 3231, 4605, 51359, 41728, 3405, 853, 373, 582, 381, 24779, 2229, 1075, 7957, 2030, 15447, 58181, 5509, 696, 15581, 48199, 373, 582, 382, 383, 1384, 1210, 16524, 15447, 696, 4666, 1075, 16352, 696, 2257, 3399, 15622, 375, 560, 560, 95473, 16444, 2030, 56794, 16444, 730, 42980, 732, 1119, 732, 905, 392, 560, 32983, 13456, 28656, 18296, 4387, 2373, 29952, 1130, 657, 12291, 2030, 56794, 4387, 2373, 29952, 1130, 657, 12291, 4605, 6689, 846, 942, 375, 560, 30650, 730, 9690, 34445, 12291, 657, 39150, 68166, 373, 1546, 16444, 730, 4935, 4605, 846, 838, 560, 391, 582, 378, 370, 855, 1371, 730, 6801, 1548, 3474, 634, 5372, 4886, 643, 375, 560, 379, 370, 4400, 41281, 1119, 732, 42980, 10978, 4605, 2112, 698, 1145, 657, 643, 375, 688, 17770, 657, 25507, 41281, 18296, 2030, 56794, 16444, 3136, 694, 1821, 1995, 96266, 22442, 560, 380, 370, 855, 1371, 732, 2126, 4022, 1400, 1050, 4576, 41728, 9425, 16524, 643, 375, 560, 560, 21014, 962, 1415, 41728, 12944, 13452, 657, 12291, 657, 1958, 25110, 374, 4261, 3065, 425, 715, 15576, 773, 643, 375, 1958, 25110, 374, 4261, 3065, 425, 730, 901, 34942, 657, 6064, 87346, 16524, 11574, 7696, 730, 5844, 1548, 6137, 696, 4982, 71181, 657, 924, 40379, 375, 560, 10847, 732, 16101, 4394, 740, 964, 3329, 2425, 5199, 9384, 373, 73850, 2069, 722, 373, 30694, 373, 15660, 24146, 1210, 4830, 1222, 696, 4666, 48199, 773, 643, 375, 36970, 41281, 373, 5580, 374, 4261, 11574, 8050, 42980, 732, 5255, 61559, 730, 8254, 2373, 2047, 16352, 13456, 3090, 26886, 4605, 30824, 1130, 657, 775, 3329, 1130, 657, 924, 696, 4666, 10348, 375, 5580, 374, 4261, 3065, 657, 10079, 16524, 7957, 2425, 8254, 730, 24146, 1210, 4830, 373, 7957, 11503, 2425, 6276, 696, 3125, 51359, 1821, 373, 2327, 2373, 2414, 18036, 7957, 24134, 1548, 1119, 732, 3644, 696, 5547, 10348, 375, 560, 560, 6055, 49544, 4387, 12291, 657, 15447, 373, 20772, 373, 2210, 10907, 715, 6016, 16524, 643, 375, 560, 10847, 1371, 732, 11574, 61559, 1084, 41728, 12944, 13452, 853, 4214, 4022, 1400, 1050, 2030, 5810, 13452, 698, 1145, 16519, 3205, 5758, 5810, 16524, 643, 375, 688, 54082, 5309, 730, 5810, 730, 8673, 634, 4666, 13452, 721, 773, 643, 22442, 11574, 33468, 657, 2904, 7332, 905, 11574, 79184, 4605, 846, 657, 1736, 1821, 2870, 868, 773, 657, 61559, 4605, 15597, 2870, 868, 1107, 643, 375, 560, 21014, 962, 80649, 56794, 4387, 12291, 4198, 1548, 27883, 1210, 1107, 657, 5213, 730, 39833, 1210, 696, 4078, 999, 373, 56794, 4387, 42980, 730, 9988, 732, 61559, 3157, 730, 4935, 4605, 5568, 41281, 5547, 1130, 657, 924, 40379, 375, 560, 560, 95473, 5989, 12291, 657, 2841, 1075, 42980, 10978, 715, 6016, 1995, 96266, 375, 560, 30490, 1965, 798, 18296, 5989, 11574, 10978, 4605, 4666, 1075, 32604, 715, 21479, 373, 14138, 373, 30967, 373, 2210, 784, 364, 634, 773, 643, 375, 18296, 5989, 12291, 657, 18296, 730, 4022, 1400, 1050, 2030, 2904, 18979, 20865, 696, 2034, 853, 373, 33468, 657, 855, 14178, 9062, 657, 42980, 10978, 4605, 1821, 1995, 96266, 375, 560, 560, 36427, 942, 657, 4400, 41281, 895, 446, 377, 377, 380, 428, 82394, 391, 33167, 34065, 369, 51257, 18286, 13518, 73865, 446, 377, 377, 380, 428, 376, 82394, 391, 4605, 87633, 12291, 4605, 6016, 10348, 375, 11574, 18286, 13518, 657, 4400, 1965, 798, 2372, 4605, 4659, 48199, 4003, 7818, 4605, 7485, 1877, 11126, 81049, 41728, 33461, 1130, 657, 2841, 1075, 13504, 730, 3644, 696, 8019, 1255, 76766, 1902, 9449, 16524, 26456, 373, 42225, 373, 14053, 2425, 11032, 12291, 4394, 9517, 730, 36538, 40379, 375, 560, 7237, 1216, 16559, 56794, 2030, 18296, 16444, 12291, 3136, 694, 18286, 13518, 4605, 1821, 4854, 81049, 732, 4886, 698, 1668, 2373, 18286, 13518, 720, 4886, 643, 375, 56794, 4387, 11574, 18286, 13518, 657, 73850, 2425, 84568, 3644, 696, 8019, 1255, 1130, 657, 11065, 18296, 4387, 11574, 18286, 13518, 657, 3492, 19495, 21046, 691, 657, 1180, 732, 8708, 1617, 1727, 31128, 11574, 18296, 4198, 696, 4078, 10348, 375, 560, 369, 95473, 4387, 18627, 11574, 18296, 4198, 13456, 47269, 3157, 373, 7332, 2030, 7741, 696, 3157, 373, 51359, 2030, 12061, 5810, 7429, 634, 773, 643, 22442, 560, 560, 391, 16874, 560, 6055, 49544, 4387, 18286, 13518, 657, 52849, 56794, 4387, 12291, 4605, 4003, 1130, 657, 7818, 4605, 15039, 868, 773, 1060, 6153, 823, 37728, 1821, 4854, 373, 1740, 657, 2904, 12291, 4605, 3492, 6016, 2870, 8952, 773, 643, 375, 1316, 6396, 1740, 905, 1662, 853, 5488, 1075, 8050, 730, 16101, 4605, 5241, 4767, 1740, 905, 3492, 6016, 1130, 657, 12291, 905, 1047, 5955, 853, 3562, 1965, 858, 868, 773, 643, 375, 2484, 560, 634, 2030, 36970, 41281, 373, 1740, 905, 18296, 5989, 11574, 38217, 730, 6224, 2086, 77427, 4605, 1316, 85600, 13518, 2705, 6016, 1130, 657, 924, 732, 4278, 1418, 76766, 17717, 924, 2484, 40379, 375, 688, 54440, 41728, 17086, 18296, 2030, 1119, 732, 2963, 1075, 4198, 19495, 696, 2718, 4560, 691, 657, 924, 732, 5333, 2597, 38493, 2030, 1119, 732, 14138, 11574, 18286, 13518, 657, 2126, 15420, 1075, 15546, 2030, 2110, 16192, 1821, 2870, 868, 773, 657, 15546, 4605, 4078, 10348, 22442, 560], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:33782 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:09:51 engine.py:275] Added request cmpl-6e65ff5a101d4294915cc64e29083ebd-0.
INFO 02-17 00:09:52 logger.py:39] Received request cmpl-91c3d056cfa1438aab3932ae31bd0055-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8d ëª¨ë\x93\x88ì\x97\x90ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x84\x9cë²\x84ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dì\x97\x90 ë\x8c\x80í\x95´ ëª\x87 ê°\x80ì§\x80 ê·¼ë³¸ì\xa0\x81ì\x9d¸ ì§\x88ë¬¸ì\x9d\x84 í\x95©ë\x8b\x88ë\x8b¤. â\x80\x94 "ê·¸ê²\x8c ë\xad\x90ì\x95¼?", "í\x81´ë\x9d¼ì\x9d´ì\x96¸í\x8a¸ ì\x82¬ì\x9d´ë\x93\x9c í\x94\x84ë¡\x9cê·¸ë\x9e\x98ë°\x8dê³¼ ë\xad\x90ê°\x80 ë\x8b¬ë\x9d¼?", "ì\x99\x9c ì\x93¸ë§\x8cí\x95´?". ì\x97¬ê¸°ì\x84\x9c ì\x9a°ë¦¬ë\x8a\x94 ì\x97¬ë\x9f¬ë¶\x84ì\x9d\x98 ì²« ì\x9b¹ì\x82¬ì\x9d´í\x8a¸ë¥¼ ë§\x8cë\x93\x9cë\x8a\x94 ë\x8d°ì\x97\x90 í\x95\x84ì\x9a\x94í\x95\x9c ê°\x80ì\x9e¥ ì\xa0\x81í\x95©í\x95\x9c í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë¥¼ ì\x96´ë\x96»ê²\x8c ì\xa0\x95í\x95\x98ë\x8a\x94 ì§\x80ì\x97\x90 ë\x8c\x80í\x95\x9c ì\xa0\x81ì\xa0\x88í\x95\x9c ì§\x80ë\x8f\x84ì\x99\x80 í\x95¨ê»\x98 ê°\x80ì\x9e¥ ì\x9d¸ê¸°ì\x9e\x88ë\x8a\x94 ì\x84\x9cë²\x84 ì\x82¬ì\x9d´ë\x93\x9c ì\x9b¹ í\x94\x84ë\xa0\x88ì\x9e\x84ì\x9b\x8cí\x81¬ë\x93¤ì\x9d\x98 ê°\x9cì\x9a\x94ë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤. ë\x81\x9dì\x9c¼ë¡\x9c ë\x86\x92ì\x9d\x80 ì\x88\x98ì¤\x80ì\x9d\x98 ì\x9b¹ ì\x84\x9cë²\x84 ë³´ì\x95\x88ì\x97\x90 ë\x8c\x80í\x95\x9c ì\x86\x8cê°\x9cë¥¼ ì\xa0\x9cê³µí\x95©ë\x8b\x88ë\x8b¤.', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 30176, 23681, 36870, 24687, 379, 23681, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 10760, 426, 19407, 24687, 97903, 35427, 30176, 488, 607, 44827, 30176, 23681, 36870, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 23681, 36870, 24687, 379, 23681, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 10834, 10760, 426, 100899, 15924, 41861, 49638, 30176, 20548, 49638, 15924, 17005, 378, 83073, 588, 381, 24687, 380, 11066, 30176, 16687, 30176, 488, 613, 11066, 9289, 20548, 35427, 24687, 61970, 11066, 30176, 488, 613, 23681, 21274, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375, 23076, 49638, 28092, 738, 12575, 17005, 11066, 12575, 379, 50189, 10760, 7452, 44827, 30176, 67176, 378, 83073, 588, 381, 392, 9417, 738, 4882, 488, 585, 10834, 24687, 488, 613, 378, 83073, 588, 381, 30176, 488, 613, 10834, 30176, 488, 606, 11066, 4882, 77721, 11066, 9289, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 12575, 380, 378, 83073, 588, 381, 10760, 7452, 44827, 12575, 41861, 49638, 10760, 488, 595, 61970, 24687, 488, 613, 378, 83073, 588, 381, 392, 9417, 738, 30176, 94485, 36870, 9289, 97903, 11066, 24687, 20548, 50189, 4882, 67176, 10834, 392, 14830, 9289, 488, 607, 61970, 12575, 29291, 470, 30176, 23681, 36870, 9289, 488, 610, 41861, 24687, 488, 461, 61970, 24687, 77721, 28092, 9289, 488, 607, 61970, 24687, 488, 615, 61970, 24687, 17558, 23681, 30176, 488, 613, 31708, 9289, 379, 39389, 9289, 488, 611, 378, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 4882, 77721, 11066, 24687, 74674, 378, 83073, 588, 381, 10760, 20548, 50189, 24687, 97903, 36870, 24687, 77721, 28092, 10760, 85395, 41861, 30176, 488, 607, 44827, 21274, 67176, 23681, 30176, 488, 610, 28092, 4882, 67176, 36870, 15924, 41861, 49638, 30176, 488, 614, 74674, 9289, 16687, 4882, 67176, 40057, 4882, 67176, 36870, 21274, 28092, 23681, 24687, 22332, 30176, 488, 614, 23681, 30176, 488, 611, 50189, 4882, 488, 585, 61970, 24687, 74674, 378, 83073, 588, 381, 9289, 488, 606, 10834, 24687, 488, 606, 41973, 12575, 379, 50189, 9289, 18737, 4882, 67176, 31708, 24687, 77721, 28092, 9289, 20548, 49638, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 36870, 9289, 16687, 30176, 22332, 4882, 67176, 36870, 9289, 20548, 49638, 24687, 488, 599, 23681, 30176, 94485, 49638, 21274, 67176, 19407, 12575, 41973, 31708, 15924, 41861, 49638, 30176, 488, 614, 74674, 9289, 488, 613, 11066, 12575, 29291, 470, 30176, 488, 614, 35427, 24687, 77721, 28092, 9289, 23681, 36870, 24687, 379, 23681, 9289, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 9289, 488, 611, 378, 21274, 28092, 23681, 24687, 22332, 30176, 488, 614, 23681, 30176, 488, 611, 50189, 4882, 488, 585, 61970, 24687, 97903, 101270, 30176, 488, 613, 31708, 15924, 41861, 36870, 30176, 488, 610, 28092, 24687, 74674, 378, 83073, 588, 381, 9289, 21301, 12575, 380, 21615, 4882, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375, 10760, 488, 585, 488, 613, 30176, 36870, 378, 83073, 588, 381, 24687, 55971, 36870, 10760, 95517, 488, 602, 30176, 488, 613, 49638, 9289, 35427, 31708, 30176, 101270, 49638, 30176, 488, 613, 31708, 9289, 488, 611, 378, 9289, 23681, 36870, 24687, 379, 23681, 10760, 380, 10834, 30176, 67176, 35427, 30176, 488, 607, 44827, 10760, 50189, 49638, 4882, 67176, 36870, 9289, 95517, 50189, 12575, 41861, 36870, 24687, 74674, 378, 83073, 588, 381, 9289, 21301, 12575, 380, 21615, 4882, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 375], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:33800 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:09:52 engine.py:275] Added request cmpl-91c3d056cfa1438aab3932ae31bd0055-0.
INFO 02-17 00:09:55 metrics.py:455] Avg prompt throughput: 1392.8 tokens/s, Avg generation throughput: 206.3 tokens/s, Running: 3 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 2.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:10:00 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 203.6 tokens/s, Running: 3 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 2.7%, CPU KV cache usage: 0.0%.
INFO 02-17 00:10:05 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 158.9 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 2.2%, CPU KV cache usage: 0.0%.
INFO 02-17 00:10:07 logger.py:39] Received request cmpl-18f9dd69bd174105a02d57fbf1814409-0: prompt: '아래 정보에 기반하여, 사용자의 질문에 답하세요.\n        할 수 있음\n    \\u003cbr>\n    \\u003cbr>\n\n### 👉 서버 사이드 스크립트의 장점과 단점\n\n---\n\n#### 장점\n\n- 서버의 자원을 최대한 활용하여 복잡한 작업을 수행할 수 있음\n- 데이터를 안전하게 처리하고 서버에 저장할 수 있음\n- 서버의 부하를 줄이고 클라이언트의 역할을 최소화할 수 있음\n- 보안성을 높일 수 있음\n    \\u003cbr>\n    \\u003cbr>\n\n#### 단점\n\n- 서버의 자원을 많이 사용하여 서버의 부하를 증가시킬 수 있음\n- 서버의 자원을 많이 사용하여 서버의 부하를 증가시킬 수 있음\n- 서버의 자원을 많이 사용하여 서버의 부하를 증가시킬 수 있음\n- 서버의 자원을 많이 사용하여 서버의 부하를 증가시킬 수 있음\n    \\u003cbr>\n    \\u003cbr>\n\n### 👉 클라이언트 사이드 스크립트의 장점과 단점\n\n---\n\n#### 장점\n\n- 클라이언트의 자원을 사용하여 서버의 부하를 줄일 수 있음\n- 사용자의 이벤트에 빠르게 반응할 수 있음\n- 사용자와의 상호 작용을 원활하게 할 수 있음\n    \\u003cbr>\n    \\u003cbr>\n\n#### 단점\n\n- 클라이언트의 자원을 많이 사용하여 사용자의 컴퓨터에 부하를 줄 수 있음\n- 서버의 자원을 많이 사용하여 서버의 부하를 증가시킬 수 있음\n- 서버의 자원을 많이 사용하여 서버의 부하를 증가시킬 수 있음\n- 서버의 자원을 많이 사용하여 서버의 부하를 증가시킬 수 있음\n    \\u003cbr>\n    \\u003cbr>\n\n### 👉 결론\n\n---\n\n- 서버 사이드 스크립트와 클라이언트 사이드 스크립트는 각각의 장단점을 가지고 있으며, 웹 개발에서는 두 가지를 모두 활용하여 최적의 성능을 이끌어내는 것이 중요함\n- 서버 사이드 스크립트는 서버의 자원을 최대한 활용하여 복잡한 작업을 처리하는 데 유리하며, 클라이언트 사이드 스크립트는 사용자와의 상호 작용을 원활하게 하고 서버의 부하를 줄이는 데 유리함\n    \\u003cbr>\n    \\u003cbr>\n\n---\n\n이 문서는 웹 개발에서 사용되는 서버 사이드 스크립트와 클라이언트 사이드 스크립트에 대해 설명하고 있습니다.\n\n문서의 주요 주제는 웹 개발에서 사용되는 서버 사이드 스크립트와 클라이언트 사이드 스크립트의 개념과 특징에 대한 설명입니다.\n\n문서의 핵심 내용은 서버 사이드 스크립트는 웹 서버에서 실행되며, 클라이언트는 실행 결과만 받는 반면, 클라이언트 사이드 스크립트는 웹 브라우저에서 실행되며, 브라우저에서 스크립트를 실행하여 동적으로 웹 페이지를 변경하거나 사용자와 상호작용한다는 점입니다.\n\n문서의 결론은 서버 사이드 스크립트와 클라이언트 사이드 스크립트는 각각의 장단점을 가지고 있으며, 웹 개발에서는 두 가지를 모두 활용하여 최적의 성능을 이끌어내는 것이 중요하다는 점입니다.\n\n문서의 메시지는 서버 사이드 스크립트는 서버의 자원을 최대한 활용하여 복잡한 작업을 처리하는 데 유리하며, 클라이언트 사이드 스크립트는 사용자와의 상호 작용을 원활하게 하고 서버의 부하를 줄이는 데 유리하다는 것입니다.\n_example.php\n\n보안 및 인증\n백엔드 개발에서 보안 및 인증은 매우 중요한 요소입니다. 웹 애플리케이션은 다양한 공격에 노출될 수 있으며, 이를 방지하기 위해 백엔드 개발자는 여러 보안 기술을 활용하여 애플리케이션을 보호해야 합니다. 보안 및 인증을 위해 백엔드 개발자는 다음과 같은 기술을 사용합니다.\n1. HTTPS: SSL/TLS를 사용하여 클라이언트와 서버 간의 통신을 암호화함으로써 중간자 공격을 방지합니다.\n2. JWT(JSON Web Token): 세션 기반의 인증 방식의 단점을 보완하는 토큰 기반의 인증 방식을 사용합니다.\n3. OAuth: 소셜 로그인과 같은 외부 인증 방식을 구현할 때 사용됩니다.\n4. CSRF(Cross-Site Request Forgery) 방지: 사용자의 의도와는 무관한 요청을 서버에 전달하는 공격을 방지합니다.\n5. XSS(Cross-Site Scripting) 방지: 사용자의 입력을 적절히 검증하고 인코딩하여 악의적인 스크립트가 실행되는 것을 방지합니다.\n6. SQL 인젝션 방지: 사용자의 입력을 적절히 검증하고 파라미터화된 쿼리를 사용하여 SQL 인젝션 공격을 방지합니다.\n7. CSRF 방지: 사용자의 의도와는 무관한 요청을 서버에 전달하는 공격을 방지합니다.\n8. XSS 방지: 사용자의 입력을 적절히 검증하고 인코딩하여 악의적인 스크립트가 실행되는 것을 방지합니다.\n9. SQL 인젝션 방지: 사용자의 입력을 적절히 검증하고 파라미터화된 쿼리를 사용하여 SQL 인젝션 공격을 방지합니다.\n\n백엔드 개발자는 이러한 보안 기술을 적절히 활용하여 애플리케이션의 보안성을 높이고, 사용자의 데이터를 안전하게 보호해야 합니다. 또한, 정기적인 보안 점검과 업데이트를 통해 최신 보안 위협에 대응해야 합니다.\n\n성능 최적화\n백엔드 개발에서 성능 최적화는 매우 중요한 요소입니다. 웹 애플리케이션의 성능은 사용자 경험에 직접적인 영향을 미치며, 서버의 처리량과 응답 속도에 따라 애플리케이션의 안정성과 확장성도 결정됩니다. 백엔드 개발자는 다음과 같은 방법을 통해 성능 최적화를 구현합니다.\n1. 코드 최적화: 비효율적인 코드를 제거하고, 중복 코드를 최소화하며, 알고리즘의 효율성을 개선합니다.\n2. 데이터베이스 최적화: 쿼리의 최적화, 인덱스의 사용, 데이터베이스 캐싱 등을 통해 데이터베이스의 성능을 향상시킵니다.\n3. 캐싱: 자주 사용되는 데이터를 메모리에 저장하여 응답 시간을 줄입니다.\n4. 비동기 처리: 비동기식 프로그래밍을 통해 I/O 작업을 병렬로 처리하여 성능을 향상시킵니다.\n5. 로드 밸런싱: 여러 서버에 부하를 분산시켜 서버의 처리량을 늘리고 응답 속도를 높입니다.\n6. 서버 아키텍처 최적화: 마이크로서비스 아키텍처, 컨테이너화, 서버리스 아키텍처 등을 통해 애플리케이션의 확장성과 가용성을 높입니다.\n\n백엔드 개발자는 이러한 성능 최적화 기법을 적절히 활용하여 애플리케이션의 성능을 최적화하고, 사용자의 요구에 빠르게 대응할 수 있는 시스템을 구축해야 합니다.\n\nAPI 설계\nAPI 설계는 백엔드 개발에서 중요한 요소입니다. API는 클라이언트와 서버 간의 통신을 위한 인터페이스로, 애플리케이션의 데이터와 기능을 노출하는 역할을 합니다. 백엔드 개발자는 다음과 같은 API 설계 원칙을 고려하여 API를 설계해야 합니다.\n1. RESTful API: 자원을 표현하는 URI와 HTTP 메서드를 사용하여 CRUD(Create, Read, Update, Delete) 연산을 수행하는 API 설계 방식입니다.\n2. JSON 기반: 클라이언트와 서버 간의 데이터 교환을 위해 JSON을 사용하는 것이 일반적입니다.\n3. 버전 관리: API의 변경 사항을 관리하기 위해 버전을 부여하고, 클라이언트가 적절한 버전을 사용할 수 있도록 합니다.\n4. 문서화: API의 사용 방법과 동작을 명확히 설명하는 문서를 제공하여 클라이언트 개발자가 쉽게 이해하고 사용할 수 있도록 합니다.\n5. 보안: API 호출 시 인증과 권한 부여를 통해 보안을 강화합니다.\n6. 상태 코드: API의 응답 상태 코드를 명확하게 정의하고, 클라이언트가 이를 이해할 수 있도록 합니다.\n7. 에러 처리: API 호출 시 발생할 수 있는 에러를 명확하게 정의하고, 클라이언트에게 적절한 에러 메시지를 반환합니다.\n\n백엔드 개발자는 이러한 API 설계 원칙을 준수하여 효율적이고 안정적인 API를 설계해야 합니다. 이를 통해 클라이언트 개발자가 쉽게 애플리케이션과 상호\n\n#### 결론\n\n서버 사이드와 클라이언트 사이드는 각각의 장단점을 가지고 있으며, 프로젝트의 특성과 요구사항에 따라 적절한 방식을 선택하는 것이 중요합니다. 보안이 중요하거나 데이터베이스 접근이 빈번한 경우에는 서버 사이드를, 실시간 상호작용이나 사용자 인터페이스의 동적 처리가 중요한 경우에는 클라이언트 사이드를 선택하는 것이 좋습니다.\n\n이 글을 통해 서버 사이드와 클라이언트 사이드의 차이점과 각각의 장단점을 이해하고, 어떤 상황에서 어떤 방식을 선택해야 할지에 대한 인사이트를 얻을 수 있기를 바랍니다.\n\n\n### 결론\n우리가 웹 사이트를 만들 때, 우리는 클라이언트 측과 서버 측을 모두 사용한다.\n우리는 클라이언트 측 코드로 웹페이지의 모양과 동작을 제어하고, 서버측 코드로 웹페이지의 컨텐츠를 제어한다.\n클라이언트 측 코드는 JavaScript로 작성되고, 서버측 코드는 다양한 프로그래밍 언어로 작성된다.\n웹 프레임워크를 사용하면, 우리는 클라이언트와 서버 측 코드를 작성하는 데 도움을 받을 수 있다.\n\n>참고\n이 문서는 2021년 3월 3일 기준으로 작성되었다.\n\n        \n        ê°\x9cì\x9a\x94ë¥1⁄4 ì \x9cê3μí\x95©ë\x8b\x88ë\x8b¤ì\x97\x90ì\x84\x9c, ì\x82¬ì\x9d ́ë\x93\x9c í\x94\x84ë¡\x9cê· ̧ë\x9e\x98ë°\x8dë¡\x9c ê°\x9cì\x9a\x94ë¥1⁄4 ì\x821⁄4ì\x9e\x90ì\x82¬ì\x9d ́í\x8a ̧ë¥1⁄4 ì\x821⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë1⁄4ë\n        사용자 질문: 서버사이드 프로그래밍에 대해 알려줘 ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [13696, 3231, 2373, 8898, 22226, 373, 7332, 730, 5962, 2373, 3455, 1130, 5847, 375, 560, 27, 2870, 868, 773, 1040, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 18296, 16444, 59588, 730, 7306, 1548, 13263, 560, 560, 4961, 560, 560, 3673, 7306, 560, 560, 374, 18296, 730, 10622, 696, 9338, 4703, 22226, 12037, 1075, 3644, 696, 9425, 2870, 868, 773, 1040, 560, 374, 7957, 4605, 4880, 1130, 1060, 5547, 48199, 18296, 2373, 11503, 2870, 868, 773, 1040, 560, 374, 18296, 730, 33473, 4605, 10466, 853, 56794, 730, 6034, 696, 8068, 1255, 2870, 868, 773, 1040, 560, 374, 13949, 1210, 696, 28941, 868, 773, 1040, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 3673, 13263, 560, 560, 374, 18296, 730, 10622, 696, 1719, 1821, 22226, 18296, 730, 33473, 4605, 5010, 954, 6351, 868, 773, 1040, 560, 374, 18296, 730, 10622, 696, 1719, 1821, 22226, 18296, 730, 33473, 4605, 5010, 954, 6351, 868, 773, 1040, 560, 374, 18296, 730, 10622, 696, 1719, 1821, 22226, 18296, 730, 33473, 4605, 5010, 954, 6351, 868, 773, 1040, 560, 374, 18296, 730, 10622, 696, 1719, 1821, 22226, 18296, 730, 33473, 4605, 5010, 954, 6351, 868, 773, 1040, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 56794, 16444, 59588, 730, 7306, 1548, 13263, 560, 560, 4961, 560, 560, 3673, 7306, 560, 560, 374, 56794, 730, 10622, 696, 1821, 22226, 18296, 730, 33473, 4605, 23006, 868, 773, 1040, 560, 374, 7332, 730, 6594, 2373, 5955, 1060, 7667, 2870, 868, 773, 1040, 560, 374, 7332, 2030, 730, 14885, 9368, 696, 17412, 1130, 1060, 1051, 868, 773, 1040, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 3673, 13263, 560, 560, 374, 56794, 730, 10622, 696, 1719, 1821, 22226, 7332, 730, 9231, 2373, 33473, 4605, 1949, 868, 773, 1040, 560, 374, 18296, 730, 10622, 696, 1719, 1821, 22226, 18296, 730, 33473, 4605, 5010, 954, 6351, 868, 773, 1040, 560, 374, 18296, 730, 10622, 696, 1719, 1821, 22226, 18296, 730, 33473, 4605, 5010, 954, 6351, 868, 773, 1040, 560, 374, 18296, 730, 10622, 696, 1719, 1821, 22226, 18296, 730, 33473, 4605, 5010, 954, 6351, 868, 773, 1040, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 5941, 76629, 593, 12550, 560, 560, 4961, 560, 560, 374, 18296, 16444, 59588, 2030, 56794, 16444, 59588, 657, 7135, 730, 42622, 696, 2034, 853, 773, 5718, 373, 11574, 4003, 41728, 657, 1546, 2034, 4605, 2618, 4703, 22226, 17028, 730, 11758, 696, 9845, 21161, 657, 924, 634, 2963, 3117, 560, 374, 18296, 16444, 59588, 657, 18296, 730, 10622, 696, 9338, 4703, 22226, 12037, 1075, 3644, 696, 5547, 1130, 657, 1736, 7167, 1130, 1877, 373, 56794, 16444, 59588, 657, 7332, 2030, 730, 14885, 9368, 696, 17412, 1130, 1060, 9858, 18296, 730, 33473, 4605, 10466, 657, 1736, 7167, 3117, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 31, 421, 446, 377, 377, 380, 428, 2489, 391, 560, 560, 4961, 560, 560, 634, 20440, 657, 11574, 4003, 41728, 1821, 13452, 657, 18296, 16444, 59588, 2030, 56794, 16444, 59588, 2373, 2409, 3328, 48199, 773, 50747, 375, 560, 560, 89098, 730, 7245, 7109, 657, 11574, 4003, 41728, 1821, 13452, 657, 18296, 16444, 59588, 2030, 56794, 16444, 59588, 730, 9711, 1548, 8574, 2373, 2047, 3328, 10996, 375, 560, 560, 89098, 730, 8771, 3311, 732, 18296, 16444, 59588, 657, 11574, 18296, 41728, 12944, 13452, 1877, 373, 56794, 657, 12944, 3336, 1043, 1374, 657, 11065, 373, 56794, 16444, 59588, 657, 11574, 61559, 41728, 12944, 13452, 1877, 373, 61559, 41728, 59588, 4605, 12944, 22226, 1368, 41281, 11574, 13203, 4605, 8171, 1130, 16519, 7332, 2030, 14885, 14052, 1075, 4264, 1694, 10996, 375, 560, 560, 89098, 730, 12550, 732, 18296, 16444, 59588, 2030, 56794, 16444, 59588, 657, 7135, 730, 42622, 696, 2034, 853, 773, 5718, 373, 11574, 4003, 41728, 657, 1546, 2034, 4605, 2618, 4703, 22226, 17028, 730, 11758, 696, 9845, 21161, 657, 924, 634, 2963, 1130, 4264, 1694, 10996, 375, 560, 560, 89098, 730, 14688, 657, 18296, 16444, 59588, 657, 18296, 730, 10622, 696, 9338, 4703, 22226, 12037, 1075, 3644, 696, 5547, 1130, 657, 1736, 7167, 1130, 1877, 373, 56794, 16444, 59588, 657, 7332, 2030, 730, 14885, 9368, 696, 17412, 1130, 1060, 9858, 18296, 730, 33473, 4605, 10466, 657, 1736, 7167, 1130, 4264, 924, 10996, 375, 560, 424, 47090, 375, 98086, 560, 560, 1280, 1336, 2425, 7741, 560, 3387, 65840, 4003, 41728, 13949, 2425, 7741, 732, 4679, 2963, 1075, 9517, 10996, 375, 11574, 38217, 732, 2841, 1075, 6779, 2373, 12448, 54689, 868, 773, 5718, 373, 38069, 8781, 76766, 1902, 2599, 65840, 33468, 657, 2690, 13949, 3755, 696, 4703, 22226, 38217, 696, 5731, 21046, 1481, 375, 13949, 2425, 7741, 696, 1902, 2599, 65840, 33468, 657, 2775, 1548, 1119, 732, 3755, 696, 1821, 14010, 375, 560, 378, 375, 60728, 387, 36053, 376, 413, 11049, 4605, 1821, 22226, 56794, 2030, 18296, 1682, 730, 7514, 696, 25997, 1255, 3117, 13456, 2500, 6208, 942, 6779, 696, 8781, 14010, 375, 560, 379, 375, 94160, 369, 34613, 8545, 32416, 65754, 47269, 8898, 730, 7741, 5073, 730, 13263, 696, 17527, 1130, 657, 57457, 8898, 730, 7741, 5073, 696, 1821, 14010, 375, 560, 380, 375, 60091, 387, 28079, 33063, 1548, 1119, 732, 9012, 7741, 5073, 696, 19495, 2870, 1105, 1821, 837, 1318, 375, 560, 381, 375, 8266, 42778, 369, 46869, 374, 46270, 19449, 2233, 8583, 370, 8781, 387, 7332, 730, 14328, 2030, 657, 26260, 1075, 8254, 696, 18296, 2373, 7820, 1130, 657, 6779, 696, 8781, 14010, 375, 560, 382, 375, 2008, 5976, 369, 46869, 374, 46270, 26695, 668, 370, 8781, 387, 7332, 730, 13385, 696, 37816, 15950, 48199, 893, 75265, 22226, 60034, 1965, 798, 59588, 905, 12944, 13452, 657, 924, 696, 8781, 14010, 375, 560, 383, 375, 14339, 893, 9899, 2481, 8781, 387, 7332, 730, 13385, 696, 37816, 15950, 48199, 1717, 19810, 1173, 1255, 16524, 100048, 4605, 1821, 22226, 14339, 893, 9899, 2481, 6779, 696, 8781, 14010, 375, 560, 384, 375, 8266, 42778, 8781, 387, 7332, 730, 14328, 2030, 657, 26260, 1075, 8254, 696, 18296, 2373, 7820, 1130, 657, 6779, 696, 8781, 14010, 375, 560, 385, 375, 2008, 5976, 8781, 387, 7332, 730, 13385, 696, 37816, 15950, 48199, 893, 75265, 22226, 60034, 1965, 798, 59588, 905, 12944, 13452, 657, 924, 696, 8781, 14010, 375, 560, 386, 375, 14339, 893, 9899, 2481, 8781, 387, 7332, 730, 13385, 696, 37816, 15950, 48199, 1717, 19810, 1173, 1255, 16524, 100048, 4605, 1821, 22226, 14339, 893, 9899, 2481, 6779, 696, 8781, 14010, 375, 560, 560, 3387, 65840, 33468, 657, 4476, 1075, 13949, 3755, 696, 37816, 4703, 22226, 38217, 730, 13949, 1210, 696, 7485, 853, 373, 7332, 730, 7957, 4605, 4880, 1130, 1060, 5731, 21046, 1481, 375, 3662, 373, 12439, 1965, 798, 13949, 9642, 1548, 18240, 4605, 2364, 16951, 13949, 15092, 2373, 8357, 21046, 1481, 375, 560, 560, 86890, 64620, 560, 3387, 65840, 4003, 41728, 11758, 64620, 657, 4679, 2963, 1075, 9517, 10996, 375, 11574, 38217, 730, 11758, 732, 7332, 4503, 2373, 3492, 1965, 798, 5282, 696, 11310, 1877, 373, 18296, 730, 5547, 1983, 1548, 16352, 7818, 2373, 2414, 38217, 730, 5957, 1210, 1548, 12472, 1210, 720, 4024, 837, 1318, 375, 2599, 65840, 33468, 657, 2775, 1548, 1119, 732, 2818, 696, 2364, 11758, 64620, 4605, 19495, 14010, 375, 560, 378, 375, 12291, 64620, 387, 1202, 87250, 1965, 798, 12291, 4605, 6022, 48199, 373, 27013, 12291, 4605, 8068, 1255, 1130, 1877, 373, 41565, 730, 9687, 1210, 696, 4982, 14010, 375, 560, 379, 375, 51359, 64620, 387, 100048, 730, 64620, 373, 57603, 730, 1821, 373, 51359, 4085, 6685, 1222, 696, 2364, 51359, 730, 11758, 696, 11151, 954, 34632, 375, 560, 380, 375, 4085, 6685, 387, 4597, 1821, 13452, 657, 7957, 4605, 21497, 2373, 11503, 22226, 16352, 1590, 696, 1949, 10996, 375, 560, 381, 375, 1202, 50048, 5547, 387, 1202, 50048, 1286, 42980, 696, 2364, 768, 376, 408, 3644, 696, 2623, 10544, 715, 5547, 22226, 11758, 696, 11151, 954, 34632, 375, 560, 382, 375, 17099, 12202, 1350, 6685, 387, 2690, 18296, 2373, 33473, 4605, 28350, 85765, 18296, 730, 5547, 1983, 696, 3108, 1766, 16352, 7818, 4605, 2388, 10996, 375, 560, 383, 375, 18296, 42188, 20151, 2351, 64620, 387, 88954, 29015, 42188, 20151, 2351, 373, 33674, 1255, 373, 18296, 4049, 42188, 20151, 2351, 1222, 696, 2364, 38217, 730, 12472, 1210, 1548, 58576, 1210, 696, 2388, 10996, 375, 560, 560, 3387, 65840, 33468, 657, 4476, 1075, 11758, 64620, 21985, 696, 37816, 4703, 22226, 38217, 730, 11758, 696, 64620, 48199, 373, 7332, 730, 6453, 2373, 5955, 1060, 8357, 2870, 868, 773, 657, 5309, 696, 9472, 21046, 1481, 375, 560, 560, 30340, 9449, 560, 30340, 9449, 657, 2599, 65840, 4003, 41728, 2963, 1075, 9517, 10996, 375, 8682, 657, 56794, 2030, 18296, 1682, 730, 7514, 696, 3125, 51299, 715, 373, 38217, 730, 7957, 2030, 4198, 696, 12448, 1130, 657, 6034, 696, 1481, 375, 2599, 65840, 33468, 657, 2775, 1548, 1119, 732, 8682, 9449, 13158, 696, 6581, 22226, 8682, 4605, 9449, 21046, 1481, 375, 560, 378, 375, 35231, 1993, 8682, 387, 10622, 696, 5233, 1130, 657, 37370, 2030, 17086, 2012, 712, 1147, 4605, 1821, 22226, 4017, 15573, 369, 20035, 373, 8201, 373, 18785, 373, 32811, 370, 30568, 696, 9425, 1130, 657, 8682, 9449, 5073, 10996, 375, 560, 379, 375, 15214, 8898, 387, 56794, 2030, 18296, 1682, 730, 7957, 10547, 696, 1902, 15214, 696, 1821, 1130, 657, 924, 634, 4400, 1965, 10996, 375, 560, 380, 375, 13775, 2645, 387, 8682, 730, 8171, 6318, 696, 2645, 76766, 1902, 13775, 696, 12310, 48199, 373, 56794, 905, 10252, 1075, 13775, 696, 1821, 2870, 868, 773, 37728, 1481, 375, 560, 381, 375, 20440, 1255, 387, 8682, 730, 1821, 2818, 1548, 14288, 696, 39150, 3328, 1130, 657, 20440, 4605, 4078, 22226, 56794, 33468, 905, 3497, 1060, 4630, 48199, 1821, 2870, 868, 773, 37728, 1481, 375, 560, 382, 375, 13949, 387, 8682, 39038, 834, 7741, 1548, 20865, 12310, 4605, 2364, 13949, 696, 5876, 14010, 375, 560, 383, 375, 3004, 12291, 387, 8682, 730, 16352, 3004, 12291, 4605, 16248, 1130, 1060, 11476, 48199, 373, 56794, 905, 38069, 4630, 2870, 868, 773, 37728, 1481, 375, 560, 384, 375, 53513, 5547, 387, 8682, 39038, 834, 3449, 2870, 868, 773, 657, 53513, 4605, 16248, 1130, 1060, 11476, 48199, 373, 56794, 2373, 1060, 10252, 1075, 53513, 14688, 4605, 30824, 14010, 375, 560, 560, 3387, 65840, 33468, 657, 4476, 1075, 8682, 9449, 13158, 696, 28362, 22226, 9687, 1965, 634, 853, 5957, 1965, 798, 8682, 4605, 9449, 21046, 1481, 375, 38069, 2364, 56794, 33468, 905, 3497, 1060, 38217, 1548, 14885, 560, 560, 3673, 12550, 560, 560, 95473, 16444, 2030, 56794, 16444, 657, 7135, 730, 42622, 696, 2034, 853, 773, 5718, 373, 10902, 730, 10116, 1548, 80802, 2373, 2414, 10252, 1075, 5073, 696, 3329, 1130, 657, 924, 634, 2963, 14010, 375, 13949, 634, 2963, 1130, 16519, 51359, 10625, 634, 39765, 1075, 2042, 97300, 18296, 16444, 4605, 373, 17557, 14885, 14052, 37891, 7332, 51299, 730, 84906, 5547, 905, 2963, 1075, 2042, 97300, 56794, 16444, 4605, 3329, 1130, 657, 924, 634, 1104, 50747, 375, 560, 560, 634, 2272, 696, 2364, 18296, 16444, 2030, 56794, 16444, 730, 29289, 1548, 7135, 730, 42622, 696, 4630, 48199, 373, 3090, 2876, 41728, 3090, 5073, 696, 3329, 21046, 7388, 2373, 2047, 82209, 4605, 4573, 696, 868, 773, 722, 4605, 6196, 375, 560, 560, 560, 5941, 12550, 560, 3718, 905, 11574, 8050, 4605, 2069, 1105, 373, 1740, 657, 56794, 4387, 1548, 18296, 4387, 696, 2618, 1821, 10348, 375, 560, 3718, 657, 56794, 4387, 12291, 715, 11574, 7696, 730, 5844, 1548, 14288, 696, 23245, 48199, 373, 18296, 5989, 12291, 715, 11574, 7696, 730, 26886, 4605, 23245, 10348, 375, 560, 6055, 49544, 4387, 12291, 657, 20820, 715, 6016, 13452, 853, 373, 18296, 5989, 12291, 657, 2841, 1075, 42980, 10978, 715, 6016, 16524, 643, 375, 560, 51257, 18286, 13518, 4605, 1821, 16559, 373, 1740, 657, 56794, 2030, 18296, 4387, 12291, 4605, 6016, 1130, 657, 1736, 3577, 696, 1374, 696, 868, 773, 643, 375, 560, 560, 391, 16874, 560, 634, 20440, 657, 582, 379, 377, 379, 378, 2171, 582, 380, 2751, 582, 380, 858, 4125, 13456, 6016, 13452, 2957, 643, 375, 560, 560, 27, 560, 27, 12575, 41861, 36870, 30176, 488, 610, 28092, 24687, 74674, 378, 83073, 588, 381, 9289, 21301, 12575, 380, 21615, 4882, 67176, 40057, 24687, 488, 595, 35427, 24687, 488, 595, 101270, 30176, 488, 607, 44827, 30176, 23681, 36870, 373, 9289, 488, 586, 61970, 30176, 488, 613, 10834, 24687, 97903, 36870, 21274, 28092, 23681, 24687, 55971, 36870, 12575, 17005, 11066, 24687, 488, 614, 31708, 24687, 41861, 85395, 24687, 55971, 36870, 15924, 41861, 36870, 30176, 488, 610, 28092, 24687, 74674, 378, 83073, 588, 381, 9289, 488, 586, 378, 83073, 588, 381, 30176, 488, 614, 44827, 30176, 488, 586, 61970, 30176, 488, 613, 10834, 4882, 77721, 11066, 24687, 74674, 378, 83073, 588, 381, 9289, 488, 586, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 378, 83073, 588, 381, 24687, 560, 27, 16167, 942, 5962, 387, 18296, 37305, 42980, 2373, 2409, 3504, 15887, 582], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:45332 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:10:07 engine.py:275] Added request cmpl-18f9dd69bd174105a02d57fbf1814409-0.
INFO 02-17 00:10:10 metrics.py:455] Avg prompt throughput: 608.1 tokens/s, Avg generation throughput: 70.7 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 2.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:10:15 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 70.5 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 2.2%, CPU KV cache usage: 0.0%.
INFO 02-17 00:10:26 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 5.9 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:10:36 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:11:16 logger.py:39] Received request cmpl-ac1613df04b847e0a06ead1ebce0f64a-0: prompt: '오늘은 2025년 02월 17일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.[|system|] 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요.\n4. 하위 쿼리는 최대한 간단한 질문으로 만드세요. (예: "만약 날아다니는 스파게티 괴물이 창작물이나 상상력의 산물이라면, 그 창작물의 출처나 배경 정보 파악" 대신 "날아다니는 스파게티 괴물의 출처 파악"과 같이 간단하게 만드세요.)\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n[|assistant|]\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.[|endofturn|][|example|] 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n[|endofturn|]\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    [|user|] 크롤링 라이브러리를 알아봐주고, 공통점과 차이점을 비교해줘 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2939, 732, 582, 379, 377, 379, 382, 2171, 582, 377, 379, 2751, 582, 378, 384, 858, 10996, 375, 4484, 657, 582, 379, 377, 379, 382, 2171, 10996, 375, 2626, 1578, 732, 582, 379, 2751, 10996, 15954, 453, 47982, 453, 422, 5998, 732, 7205, 657, 12037, 1075, 5962, 1371, 696, 8019, 1075, 27498, 3644, 13456, 7872, 657, 1736, 2373, 4362, 1727, 1075, 7111, 10996, 375, 560, 378, 375, 24348, 5962, 696, 39380, 41281, 17661, 3644, 13456, 7872, 5847, 375, 560, 379, 375, 2534, 27498, 100048, 657, 1799, 730, 3644, 1043, 13456, 53712, 1481, 375, 7164, 2690, 1823, 730, 3644, 696, 4666, 1130, 698, 14182, 375, 688, 3027, 387, 6873, 2373, 1546, 1208, 2329, 730, 3231, 4605, 4415, 1130, 657, 3644, 1084, 2873, 375, 23784, 1222, 720, 9190, 715, 7135, 5658, 5962, 696, 8890, 37728, 691, 5847, 22442, 560, 380, 375, 582, 380, 1823, 8099, 730, 27498, 100048, 4605, 16769, 1130, 5847, 375, 560, 381, 375, 27498, 100048, 657, 9338, 5488, 1075, 5962, 13456, 5799, 5847, 375, 688, 3027, 387, 738, 20267, 69972, 657, 28874, 30874, 634, 23993, 1113, 37891, 42738, 730, 62058, 634, 17663, 373, 855, 23993, 1113, 730, 10411, 902, 10300, 3231, 7936, 363, 6414, 738, 1945, 1023, 8367, 657, 28874, 30874, 730, 10411, 7936, 363, 1548, 2485, 5488, 1130, 1060, 5799, 5847, 22442, 560, 381, 375, 9556, 732, 4488, 2030, 2485, 15214, 12947, 13456, 1992, 1481, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 20498, 26942, 23454, 1130, 1595, 100048, 582, 378, 9417, 738, 1130, 1595, 100048, 582, 379, 9417, 4377, 10924, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 14182, 375, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 1130, 5847, 375, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 4488, 32604, 4605, 5813, 5414, 9556, 696, 6016, 1130, 5847, 375, 3027, 954, 13385, 387, 11225, 1339, 18295, 657, 7135, 3930, 11966, 2373, 9633, 392, 3136, 1780, 2373, 6930, 5571, 9500, 1162, 696, 698, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 25999, 905, 9633, 657, 11966, 9417, 738, 49065, 905, 9633, 657, 11966, 9417, 738, 25999, 2030, 18295, 1126, 1162, 696, 924, 3093, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 16993, 373, 11819, 373, 5805, 730, 11282, 7460, 732, 3656, 91728, 392, 7135, 730, 3830, 14178, 3090, 18938, 5927, 696, 1821, 48199, 773, 657, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 54529, 730, 11282, 7460, 9417, 738, 22279, 730, 11282, 7460, 9417, 738, 34724, 730, 11282, 7460, 9417, 738, 54529, 373, 11819, 373, 5805, 730, 11282, 7460, 29289, 9417, 738, 54529, 730, 18938, 5927, 9417, 738, 22279, 730, 18938, 5927, 9417, 738, 34724, 730, 18938, 5927, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 11265, 4605, 1747, 657, 924, 634, 3164, 2373, 1104, 732, 905, 392, 11265, 1747, 37817, 1104, 732, 6620, 657, 4083, 798, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 23454, 39190, 1747, 722, 905, 3164, 2373, 11310, 657, 5282, 1996, 722, 9417, 738, 39190, 1747, 37817, 1104, 732, 6620, 1996, 722, 71045, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 41728, 7991, 13456, 713, 657, 40187, 2030, 77348, 13891, 3231, 4605, 5080, 999, 823, 853, 373, 2472, 8570, 1590, 696, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 20715, 40187, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 77348, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 40187, 2030, 77348, 5080, 9417, 560, 23, 363, 8397, 374, 20715, 1601, 1430, 15767, 13891, 834, 3093, 363, 560, 27, 422, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 4113, 1146, 830, 730, 17129, 4747, 1548, 16951, 4747, 696, 3504, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 19, 363, 2839, 1146, 830, 730, 17129, 4747, 9417, 560, 19, 363, 2839, 1254, 830, 730, 16951, 4747, 363, 560, 23, 422, 582, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 2879, 41728, 7646, 999, 13186, 373, 7967, 373, 18066, 4605, 10916, 4817, 76876, 3253, 2870, 3864, 74914, 373, 2534, 2878, 730, 7245, 23512, 2030, 3093, 3501, 696, 3504, 823, 853, 373, 17028, 730, 5346, 19597, 2030, 73414, 696, 5422, 999, 15887, 375, 3662, 5210, 15767, 1590, 1548, 5262, 696, 4666, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 32122, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 32122, 7245, 23512, 9417, 560, 23, 363, 32122, 3093, 3501, 9417, 560, 23, 363, 32122, 374, 23135, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 23135, 7245, 23512, 9417, 560, 23, 363, 23135, 3093, 3501, 9417, 560, 23, 363, 23135, 374, 44868, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 44868, 7245, 23512, 9417, 560, 23, 363, 44868, 3093, 3501, 9417, 560, 23, 363, 44868, 374, 12149, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 12149, 7245, 23512, 9417, 560, 23, 363, 12149, 3093, 3501, 9417, 560, 23, 363, 17793, 3253, 5210, 15767, 1590, 2425, 5262, 363, 560, 27, 422, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 715, 3253, 696, 713, 12438, 691, 15913, 4977, 905, 3835, 34325, 392, 2210, 3835, 732, 23512, 2131, 3093, 999, 15887, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 13225, 2879, 4977, 9417, 560, 23, 363, 8397, 7245, 23512, 363, 560, 27, 422, 560, 27, 454, 560, 361, 560, 560, 6297, 5962, 696, 2690, 78028, 27498, 5962, 13456, 7872, 33413, 5847, 375, 560, 31, 420, 453, 14719, 453, 422, 1883, 10697, 3890, 67175, 4605, 55662, 823, 853, 373, 37701, 1548, 29289, 696, 5080, 999, 15887, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55218 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:11:16 engine.py:275] Added request cmpl-ac1613df04b847e0a06ead1ebce0f64a-0.
INFO 02-17 00:11:17 logger.py:39] Received request cmpl-95694ef5bca5460bafa04e43366fddb7-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 크롤링 라이브러리 종류 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 1883, 10697, 3890, 67175, 5549, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55218 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:11:17 engine.py:275] Added request cmpl-95694ef5bca5460bafa04e43366fddb7-0.
INFO 02-17 00:11:18 logger.py:39] Received request cmpl-8a37a47e14164d3c84c70b04ac02b4b5-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 크롤링 라이브러리 공통점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 1883, 10697, 3890, 67175, 37701, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55218 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:11:18 engine.py:275] Added request cmpl-8a37a47e14164d3c84c70b04ac02b4b5-0.
INFO 02-17 00:11:19 logger.py:39] Received request cmpl-2b632634f3214de58ec28a0376e4ce39-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 크롤링 라이브러리 차이점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 1883, 10697, 3890, 67175, 29289, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55218 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:11:19 engine.py:275] Added request cmpl-2b632634f3214de58ec28a0376e4ce39-0.
INFO 02-17 00:11:20 logger.py:39] Received request cmpl-02942c7b75ac42778ad8c2715d01a2f1-0: prompt: '아래 정보에 기반하여, 사용자의 질문에 답하세요.\n        \n        사용자 질문: 크롤링 라이브러리를 알아봐주고, 공통점과 차이점을 비교해줘 ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [13696, 3231, 2373, 8898, 22226, 373, 7332, 730, 5962, 2373, 3455, 1130, 5847, 375, 560, 27, 560, 27, 16167, 942, 5962, 387, 1883, 10697, 3890, 67175, 4605, 55662, 823, 853, 373, 37701, 1548, 29289, 696, 5080, 999, 15887, 582], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:55218 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:11:20 engine.py:275] Added request cmpl-02942c7b75ac42778ad8c2715d01a2f1-0.
INFO 02-17 00:11:21 metrics.py:455] Avg prompt throughput: 743.2 tokens/s, Avg generation throughput: 60.2 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-17 00:11:26 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 72.6 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.3%, CPU KV cache usage: 0.0%.
INFO 02-17 00:11:40 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 19.8 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:11:50 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:44:56 launcher.py:59] Shutting down FastAPI HTTP server.
[rank0]:[W217 00:44:57.921537712 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
INFO:     Shutting down
INFO:     Waiting for application shutdown.
INFO:     Application shutdown complete.
INFO 02-17 00:45:24 __init__.py:190] Automatically detected platform cuda.
INFO 02-17 00:45:25 api_server.py:840] vLLM API server version 0.7.2
INFO 02-17 00:45:25 api_server.py:841] args: Namespace(subparser='serve', model_tag='snunlp/bigdata_exaone3_7.8b_fft', config='', host=None, port=8000, uvicorn_log_level='info', allow_credentials=False, allowed_origins=['*'], allowed_methods=['*'], allowed_headers=['*'], api_key='token-snuintern2025', lora_modules=None, prompt_adapters=None, chat_template=None, chat_template_content_format='auto', response_role='assistant', ssl_keyfile=None, ssl_certfile=None, ssl_ca_certs=None, ssl_cert_reqs=0, root_path=None, middleware=[], return_tokens_as_token_ids=False, disable_frontend_multiprocessing=False, enable_request_id_headers=False, enable_auto_tool_choice=False, enable_reasoning=False, reasoning_parser=None, tool_call_parser=None, tool_parser_plugin='', model='snunlp/bigdata_exaone3_7.8b_fft', task='auto', tokenizer=None, skip_tokenizer_init=False, revision=None, code_revision=None, tokenizer_revision=None, tokenizer_mode='auto', trust_remote_code=False, allowed_local_media_path=None, download_dir=None, load_format='auto', config_format=<ConfigFormat.AUTO: 'auto'>, dtype='auto', kv_cache_dtype='auto', max_model_len=None, guided_decoding_backend='xgrammar', logits_processor_pattern=None, model_impl='auto', distributed_executor_backend=None, pipeline_parallel_size=1, tensor_parallel_size=4, max_parallel_loading_workers=None, ray_workers_use_nsight=False, block_size=None, enable_prefix_caching=None, disable_sliding_window=False, use_v2_block_manager=True, num_lookahead_slots=0, seed=0, swap_space=4, cpu_offload_gb=0, gpu_memory_utilization=0.9, num_gpu_blocks_override=None, max_num_batched_tokens=None, max_num_seqs=None, max_logprobs=20, disable_log_stats=False, quantization=None, rope_scaling=None, rope_theta=None, hf_overrides=None, enforce_eager=False, max_seq_len_to_capture=8192, disable_custom_all_reduce=False, tokenizer_pool_size=0, tokenizer_pool_type='ray', tokenizer_pool_extra_config=None, limit_mm_per_prompt=None, mm_processor_kwargs=None, disable_mm_preprocessor_cache=False, enable_lora=False, enable_lora_bias=False, max_loras=1, max_lora_rank=16, lora_extra_vocab_size=256, lora_dtype='auto', long_lora_scaling_factors=None, max_cpu_loras=None, fully_sharded_loras=False, enable_prompt_adapter=False, max_prompt_adapters=1, max_prompt_adapter_token=0, device='auto', num_scheduler_steps=1, multi_step_stream_outputs=True, scheduler_delay_factor=0.0, enable_chunked_prefill=None, speculative_model=None, speculative_model_quantization=None, num_speculative_tokens=None, speculative_disable_mqa_scorer=False, speculative_draft_tensor_parallel_size=None, speculative_max_model_len=None, speculative_disable_by_batch_size=None, ngram_prompt_lookup_max=None, ngram_prompt_lookup_min=None, spec_decoding_acceptance_method='rejection_sampler', typical_acceptance_sampler_posterior_threshold=None, typical_acceptance_sampler_posterior_alpha=None, disable_logprobs_during_spec_decoding=None, model_loader_extra_config=None, ignore_patterns=[], preemption_mode=None, served_model_name=None, qlora_adapter_name_or_path=None, otlp_traces_endpoint=None, collect_detailed_traces=None, disable_async_output_proc=False, scheduling_policy='fcfs', override_neuron_config=None, override_pooler_config=None, compilation_config=None, kv_transfer_config=None, worker_cls='auto', generation_config=None, override_generation_config=None, enable_sleep_mode=False, calculate_kv_scales=False, disable_log_requests=False, max_log_len=None, disable_fastapi_docs=False, enable_prompt_tokens_details=False, dispatch_function=<function serve at 0x7f8735567ec0>)
INFO 02-17 00:45:25 api_server.py:206] Started engine process with PID 3997604
INFO 02-17 00:45:29 __init__.py:190] Automatically detected platform cuda.
INFO 02-17 00:45:34 config.py:542] This model supports multiple tasks: {'generate', 'reward', 'classify', 'score', 'embed'}. Defaulting to 'generate'.
INFO 02-17 00:45:35 config.py:1401] Defaulting to use mp for distributed inference
INFO 02-17 00:45:39 config.py:542] This model supports multiple tasks: {'score', 'reward', 'classify', 'embed', 'generate'}. Defaulting to 'generate'.
INFO 02-17 00:45:39 config.py:1401] Defaulting to use mp for distributed inference
INFO 02-17 00:45:39 llm_engine.py:234] Initializing a V0 LLM engine (v0.7.2) with config: model='snunlp/bigdata_exaone3_7.8b_fft', speculative_config=None, tokenizer='snunlp/bigdata_exaone3_7.8b_fft', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=4, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=snunlp/bigdata_exaone3_7.8b_fft, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=True, 
WARNING 02-17 00:45:40 multiproc_worker_utils.py:300] Reducing Torch parallelism from 40 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
INFO 02-17 00:45:40 custom_cache_manager.py:19] Setting Triton cache manager to: vllm.triton_utils.custom_cache_manager:CustomCacheManager
INFO 02-17 00:45:42 cuda.py:230] Using Flash Attention backend.
INFO 02-17 00:45:44 __init__.py:190] Automatically detected platform cuda.
INFO 02-17 00:45:44 __init__.py:190] Automatically detected platform cuda.
INFO 02-17 00:45:44 __init__.py:190] Automatically detected platform cuda.
[1;36m(VllmWorkerProcess pid=3998182)[0;0m INFO 02-17 00:45:45 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3998181)[0;0m INFO 02-17 00:45:45 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3998183)[0;0m INFO 02-17 00:45:46 multiproc_worker_utils.py:229] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=3998182)[0;0m INFO 02-17 00:45:47 cuda.py:230] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=3998181)[0;0m INFO 02-17 00:45:47 cuda.py:230] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=3998183)[0;0m INFO 02-17 00:45:47 cuda.py:230] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=3998181)[0;0m INFO 02-17 00:45:48 utils.py:950] Found nccl from library libnccl.so.2
INFO 02-17 00:45:48 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3998181)[0;0m INFO 02-17 00:45:48 pynccl.py:69] vLLM is using nccl==2.21.5
INFO 02-17 00:45:48 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3998182)[0;0m INFO 02-17 00:45:48 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3998183)[0;0m INFO 02-17 00:45:48 utils.py:950] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=3998182)[0;0m INFO 02-17 00:45:48 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3998183)[0;0m INFO 02-17 00:45:48 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=3998183)[0;0m WARNING 02-17 00:45:49 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
[1;36m(VllmWorkerProcess pid=3998181)[0;0m WARNING 02-17 00:45:49 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
WARNING 02-17 00:45:49 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
[1;36m(VllmWorkerProcess pid=3998182)[0;0m WARNING 02-17 00:45:49 custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
INFO 02-17 00:45:49 shm_broadcast.py:258] vLLM message queue communication handle: Handle(connect_ip='127.0.0.1', local_reader_ranks=[1, 2, 3], buffer_handle=(3, 4194304, 6, 'psm_1d143393'), local_subscribe_port=58295, remote_subscribe_port=None)
INFO 02-17 00:45:49 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3998181)[0;0m INFO 02-17 00:45:49 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3998183)[0;0m INFO 02-17 00:45:49 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3998182)[0;0m INFO 02-17 00:45:49 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
[1;36m(VllmWorkerProcess pid=3998181)[0;0m INFO 02-17 00:45:50 weight_utils.py:252] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=3998182)[0;0m INFO 02-17 00:45:50 weight_utils.py:252] Using model weights format ['*.safetensors']
INFO 02-17 00:45:50 weight_utils.py:252] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=3998181)[0;0m INFO 02-17 00:45:53 model_runner.py:1115] Loading model weights took 3.6422 GB
Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:00<00:01,  2.01it/s]
Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:01<00:01,  1.89it/s]
Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:01<00:00,  2.94it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:01<00:00,  2.52it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:01<00:00,  2.42it/s]

INFO 02-17 00:45:55 model_runner.py:1115] Loading model weights took 3.6422 GB
[1;36m(VllmWorkerProcess pid=3998182)[0;0m INFO 02-17 00:45:57 model_runner.py:1115] Loading model weights took 3.6422 GB
[1;36m(VllmWorkerProcess pid=3998183)[0;0m INFO 02-17 00:45:59 weight_utils.py:252] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=3998183)[0;0m INFO 02-17 00:46:02 model_runner.py:1115] Loading model weights took 3.6422 GB
[1;36m(VllmWorkerProcess pid=3998181)[0;0m INFO 02-17 00:46:06 worker.py:267] Memory profiling takes 3.91 seconds
[1;36m(VllmWorkerProcess pid=3998181)[0;0m INFO 02-17 00:46:06 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3998181)[0;0m INFO 02-17 00:46:06 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.25GiB; the rest of the memory reserved for KV Cache is 31.29GiB.
[1;36m(VllmWorkerProcess pid=3998182)[0;0m INFO 02-17 00:46:06 worker.py:267] Memory profiling takes 3.97 seconds
[1;36m(VllmWorkerProcess pid=3998182)[0;0m INFO 02-17 00:46:06 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3998182)[0;0m INFO 02-17 00:46:06 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.25GiB; the rest of the memory reserved for KV Cache is 31.29GiB.
INFO 02-17 00:46:06 worker.py:267] Memory profiling takes 4.01 seconds
INFO 02-17 00:46:06 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
INFO 02-17 00:46:06 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.97GiB; the rest of the memory reserved for KV Cache is 30.57GiB.
[1;36m(VllmWorkerProcess pid=3998183)[0;0m INFO 02-17 00:46:06 worker.py:267] Memory profiling takes 4.03 seconds
[1;36m(VllmWorkerProcess pid=3998183)[0;0m INFO 02-17 00:46:06 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
[1;36m(VllmWorkerProcess pid=3998183)[0;0m INFO 02-17 00:46:06 worker.py:267] model weights take 3.64GiB; non_torch_memory takes 0.28GiB; PyTorch activation peak memory takes 0.25GiB; the rest of the memory reserved for KV Cache is 31.29GiB.
INFO 02-17 00:46:06 executor_base.py:110] # CUDA blocks: 62599, # CPU blocks: 8192
INFO 02-17 00:46:06 executor_base.py:115] Maximum concurrency for 4096 tokens per request: 244.53x
[1;36m(VllmWorkerProcess pid=3998183)[0;0m INFO 02-17 00:46:09 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 02-17 00:46:09 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=3998181)[0;0m INFO 02-17 00:46:09 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s][1;36m(VllmWorkerProcess pid=3998182)[0;0m INFO 02-17 00:46:09 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:26,  1.29it/s]Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:01<00:23,  1.41it/s]Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:02<00:25,  1.28it/s]Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:03<00:23,  1.32it/s]Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:03<00:24,  1.23it/s]Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:04<00:25,  1.14it/s]Capturing CUDA graph shapes:  20%|██        | 7/35 [00:05<00:24,  1.14it/s]Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:06<00:23,  1.16it/s]Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:07<00:21,  1.19it/s]Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:08<00:20,  1.22it/s]Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:09<00:19,  1.21it/s]Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:09<00:18,  1.27it/s]Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:10<00:16,  1.33it/s]Capturing CUDA graph shapes:  40%|████      | 14/35 [00:11<00:15,  1.38it/s]Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:11<00:13,  1.44it/s]Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:12<00:12,  1.47it/s]Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:13<00:12,  1.47it/s]Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:13<00:11,  1.50it/s]Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:14<00:10,  1.53it/s]Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:14<00:09,  1.54it/s]Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:15<00:09,  1.52it/s]Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:16<00:08,  1.55it/s]Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:16<00:07,  1.57it/s]Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:17<00:06,  1.59it/s]Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:18<00:06,  1.59it/s]Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:18<00:05,  1.61it/s]Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:19<00:04,  1.62it/s]Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:19<00:04,  1.56it/s]Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:20<00:03,  1.54it/s]Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:21<00:03,  1.52it/s]Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:21<00:02,  1.54it/s]Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:22<00:01,  1.57it/s]Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:23<00:01,  1.58it/s]Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:24<00:00,  1.07it/s][1;36m(VllmWorkerProcess pid=3998183)[0;0m INFO 02-17 00:46:35 model_runner.py:1562] Graph capturing finished in 26 secs, took 1.21 GiB
[1;36m(VllmWorkerProcess pid=3998181)[0;0m INFO 02-17 00:46:35 model_runner.py:1562] Graph capturing finished in 26 secs, took 1.21 GiB
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:25<00:00,  1.04it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:25<00:00,  1.35it/s]
INFO 02-17 00:46:35 model_runner.py:1562] Graph capturing finished in 26 secs, took 1.22 GiB
[1;36m(VllmWorkerProcess pid=3998182)[0;0m INFO 02-17 00:46:35 model_runner.py:1562] Graph capturing finished in 26 secs, took 1.21 GiB
INFO 02-17 00:46:35 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 33.04 seconds
INFO 02-17 00:46:36 api_server.py:756] Using supplied chat template:
INFO 02-17 00:46:36 api_server.py:756] None
INFO 02-17 00:46:36 launcher.py:21] Available routes are:
INFO 02-17 00:46:36 launcher.py:29] Route: /openapi.json, Methods: HEAD, GET
INFO 02-17 00:46:36 launcher.py:29] Route: /docs, Methods: HEAD, GET
INFO 02-17 00:46:36 launcher.py:29] Route: /docs/oauth2-redirect, Methods: HEAD, GET
INFO 02-17 00:46:36 launcher.py:29] Route: /redoc, Methods: HEAD, GET
INFO 02-17 00:46:36 launcher.py:29] Route: /health, Methods: GET
INFO 02-17 00:46:36 launcher.py:29] Route: /ping, Methods: GET, POST
INFO 02-17 00:46:36 launcher.py:29] Route: /tokenize, Methods: POST
INFO 02-17 00:46:36 launcher.py:29] Route: /detokenize, Methods: POST
INFO 02-17 00:46:36 launcher.py:29] Route: /v1/models, Methods: GET
INFO 02-17 00:46:36 launcher.py:29] Route: /version, Methods: GET
INFO 02-17 00:46:36 launcher.py:29] Route: /v1/chat/completions, Methods: POST
INFO 02-17 00:46:36 launcher.py:29] Route: /v1/completions, Methods: POST
INFO 02-17 00:46:36 launcher.py:29] Route: /v1/embeddings, Methods: POST
INFO 02-17 00:46:36 launcher.py:29] Route: /pooling, Methods: POST
INFO 02-17 00:46:36 launcher.py:29] Route: /score, Methods: POST
INFO 02-17 00:46:36 launcher.py:29] Route: /v1/score, Methods: POST
INFO 02-17 00:46:36 launcher.py:29] Route: /rerank, Methods: POST
INFO 02-17 00:46:36 launcher.py:29] Route: /v1/rerank, Methods: POST
INFO 02-17 00:46:36 launcher.py:29] Route: /v2/rerank, Methods: POST
INFO 02-17 00:46:36 launcher.py:29] Route: /invocations, Methods: POST
INFO:     Started server process [3997426]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
INFO 02-17 00:46:38 chat_utils.py:332] Detected the chat template content format to be 'string'. You can set `--chat-template-content-format` to override this.
INFO 02-17 00:46:38 logger.py:39] Received request chatcmpl-638845e7f7fc4361a36dbf81aa0c6464: prompt: '[|system|][|endofturn|]\n[|user|]세종대왕에 대해 알려줘.\n[|assistant|]', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=4070, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: None, lora_request: None, prompt_adapter_request: None.
INFO 02-17 00:46:38 engine.py:275] Added request chatcmpl-638845e7f7fc4361a36dbf81aa0c6464.
INFO 02-17 00:46:41 metrics.py:455] Avg prompt throughput: 5.2 tokens/s, Avg generation throughput: 48.9 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO:     127.0.0.1:56704 - "POST /v1/chat/completions HTTP/1.1" 200 OK
INFO 02-17 00:46:52 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 14.9 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:47:02 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:47:54 logger.py:39] Received request cmpl-ad091878fc164c64b5aa8a7fffb688a9-0: prompt: '오늘은 2025년 02월 17일입니다. 올해는 2025년입니다. 이번 달은 2월입니다.[|system|] 당신은 들어오는 복잡한 질문들을 단순한 하위 작업으로 나누는 데에 능통한 전문가입니다.\n1. 주어진 질문을 순차적으로 세부 작업으로 나누세요.\n2. 각 하위 쿼리는 하나의 작업만으로 이루어져야 합니다. 절대 여러개의 작업을 포함하지 마세요. (예: 동시에 두 개 이상의 정보를 조사하는 작업 안 됩니다. 가격대 등도 마찬가지로 각각 따로 질문을 던지도록 하세요.)\n3. 3개 이하의 하위 쿼리를 생성하세요.\n4. 하위 쿼리는 최대한 간단한 질문으로 만드세요. (예: "만약 날아다니는 스파게티 괴물이 창작물이나 상상력의 산물이라면, 그 창작물의 출처나 배경 정보 파악" 대신 "날아다니는 스파게티 괴물의 출처 파악"과 같이 간단하게 만드세요.)\n4. 답변은 아래와 같이 JSON 형식으로 해야 합니다.\n[|assistant|]\n{\n    "response": ["하위 쿼리 1", "하위 쿼리 2", ...],\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 마세요. (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성하세요.[|endofturn|][|example|] 아래는 몇 가지 예시입니다. 아래 예시를 참고해서 답변을 작성하세요.예시 입력: 딸기랑 바나나는 각각 어느 계절에 자라? 둘중에 내일 무슨 과일 먹을지 추천해줘.\n예시 출력: {\n            "response": ["딸기가 자라는 계절", "바나나가 자라는 계절", "딸기와 바나나 중 먹을 것 추천"]\n            }\n\n예시 입력: 구글, 애플, 삼성의 마케팅 전략은 어떻게 다른가? 각각의 회사들이 어떤 비즈니스 모델을 사용하고 있는가?\n예시 출력: {\n            "response": ["구글의 마케팅 전략", "애플의 마케팅 전략", "삼성전자의 마케팅 전략", "구글, 애플, 삼성의 마케팅 전략 차이점", "구글의 비즈니스 모델", "애플의 비즈니스 모델", "삼성전자의 비즈니스 모델"]\n            }\n\n예시 입력: 자전거를 타는 것이 건강에 좋은가? 자전거 타기에 좋은 장소는 어디인가?\n예시 출력: {\n        "response": ["자전거 타기가 건강에 미치는 영향 찾기", "자전거 타기에 좋은 장소 찾기"]\n        }\n\n예시 입력: 내일 서울에서 대전으로 가는 KTX와 SRT 운행 정보를 비교해주고, 가장 빠른 시간을 추천해줘.\n예시 출력: {\n        "response": [\n            "서울-대전 KTX 운행 정보 (내일 기준)",\n            "서울-대전 SRT 운행 정보 (내일 기준)",\n            "서울-대전 KTX와 SRT 비교",\n            "서울-대전 최단 소요 운행 시 추천"\n        ]\n        }\n\n예시 입력: 뉴진스의 데뷔곡과 최신곡을 알려줘.\n예시 출력: {\n        "response": [\n                "뉴진스의 데뷔곡",\n                "뉴신스의 최신곡"\n            ] \n    }\n\n예시 입력: 서울에서 출발해 전주, 광주, 여수를 거쳐 부산까지 여행할 예정인데, 각 지역의 주요 관광지와 추천 맛집을 알려주고, 최적의 이동 경로와 교통편을 분석해줘. 또한 예상 소요 시간과 비용을 포함해줘.\n예시 출력: {\n        "response": [\n            "서울-전주 이동 경로 및 교통편",\n            "전주 주요 관광지",\n            "전주 추천 맛집",\n            "전주-광주 이동 경로 및 교통편",\n            "광주 주요 관광지",\n            "광주 추천 맛집",\n            "광주-여수 이동 경로 및 교통편",\n            "여수 주요 관광지",\n            "여수 추천 맛집",\n            "여수-부산 이동 경로 및 교통편",\n            "부산 주요 관광지",\n            "부산 추천 맛집",\n            "전체 여행 예상 소요 시간 및 비용"\n        ]\n    }\n\n예시 입력: 내일 서울로 여행을 가려고 하는데 날씨가 괜찮을까? 그리고 괜찮은 관광지 좀 추천해줘\n예시 출력: {\n        "response": [\n            "내일 서울 날씨",\n            "서울 주요 관광지"\n        ]\n        }\n[|endofturn|]\n\n다음 질문을 여러 개의 하위 질문으로 나누어주세요.\n    [|user|] 크롤링 라이브러리를 알아봐주고, 공통점과 차이점을 비교해줘 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [2939, 732, 582, 379, 377, 379, 382, 2171, 582, 377, 379, 2751, 582, 378, 384, 858, 10996, 375, 4484, 657, 582, 379, 377, 379, 382, 2171, 10996, 375, 2626, 1578, 732, 582, 379, 2751, 10996, 15954, 453, 47982, 453, 422, 5998, 732, 7205, 657, 12037, 1075, 5962, 1371, 696, 8019, 1075, 27498, 3644, 13456, 7872, 657, 1736, 2373, 4362, 1727, 1075, 7111, 10996, 375, 560, 378, 375, 24348, 5962, 696, 39380, 41281, 17661, 3644, 13456, 7872, 5847, 375, 560, 379, 375, 2534, 27498, 100048, 657, 1799, 730, 3644, 1043, 13456, 53712, 1481, 375, 7164, 2690, 1823, 730, 3644, 696, 4666, 1130, 698, 14182, 375, 688, 3027, 387, 6873, 2373, 1546, 1208, 2329, 730, 3231, 4605, 4415, 1130, 657, 3644, 1084, 2873, 375, 23784, 1222, 720, 9190, 715, 7135, 5658, 5962, 696, 8890, 37728, 691, 5847, 22442, 560, 380, 375, 582, 380, 1823, 8099, 730, 27498, 100048, 4605, 16769, 1130, 5847, 375, 560, 381, 375, 27498, 100048, 657, 9338, 5488, 1075, 5962, 13456, 5799, 5847, 375, 688, 3027, 387, 738, 20267, 69972, 657, 28874, 30874, 634, 23993, 1113, 37891, 42738, 730, 62058, 634, 17663, 373, 855, 23993, 1113, 730, 10411, 902, 10300, 3231, 7936, 363, 6414, 738, 1945, 1023, 8367, 657, 28874, 30874, 730, 10411, 7936, 363, 1548, 2485, 5488, 1130, 1060, 5799, 5847, 22442, 560, 381, 375, 9556, 732, 4488, 2030, 2485, 15214, 12947, 13456, 1992, 1481, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 20498, 26942, 23454, 1130, 1595, 100048, 582, 378, 9417, 738, 1130, 1595, 100048, 582, 379, 9417, 4377, 10924, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 14182, 375, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 1130, 5847, 375, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 4488, 32604, 4605, 5813, 5414, 9556, 696, 6016, 1130, 5847, 375, 3027, 954, 13385, 387, 11225, 1339, 18295, 657, 7135, 3930, 11966, 2373, 9633, 392, 3136, 1780, 2373, 6930, 5571, 9500, 1162, 696, 698, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 25999, 905, 9633, 657, 11966, 9417, 738, 49065, 905, 9633, 657, 11966, 9417, 738, 25999, 2030, 18295, 1126, 1162, 696, 924, 3093, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 16993, 373, 11819, 373, 5805, 730, 11282, 7460, 732, 3656, 91728, 392, 7135, 730, 3830, 14178, 3090, 18938, 5927, 696, 1821, 48199, 773, 657, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 20498, 26942, 23454, 54529, 730, 11282, 7460, 9417, 738, 22279, 730, 11282, 7460, 9417, 738, 34724, 730, 11282, 7460, 9417, 738, 54529, 373, 11819, 373, 5805, 730, 11282, 7460, 29289, 9417, 738, 54529, 730, 18938, 5927, 9417, 738, 22279, 730, 18938, 5927, 9417, 738, 34724, 730, 18938, 5927, 71045, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 11265, 4605, 1747, 657, 924, 634, 3164, 2373, 1104, 732, 905, 392, 11265, 1747, 37817, 1104, 732, 6620, 657, 4083, 798, 905, 392, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 23454, 39190, 1747, 722, 905, 3164, 2373, 11310, 657, 5282, 1996, 722, 9417, 738, 39190, 1747, 37817, 1104, 732, 6620, 1996, 722, 71045, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 41728, 7991, 13456, 713, 657, 40187, 2030, 77348, 13891, 3231, 4605, 5080, 999, 823, 853, 373, 2472, 8570, 1590, 696, 3093, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 20715, 40187, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 77348, 13891, 3231, 688, 13225, 4125, 370, 9417, 560, 23, 363, 8397, 374, 20715, 40187, 2030, 77348, 5080, 9417, 560, 23, 363, 8397, 374, 20715, 1601, 1430, 15767, 13891, 834, 3093, 363, 560, 27, 422, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 4113, 1146, 830, 730, 17129, 4747, 1548, 16951, 4747, 696, 3504, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 19, 363, 2839, 1146, 830, 730, 17129, 4747, 9417, 560, 19, 363, 2839, 1254, 830, 730, 16951, 4747, 363, 560, 23, 422, 582, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 2879, 41728, 7646, 999, 13186, 373, 7967, 373, 18066, 4605, 10916, 4817, 76876, 3253, 2870, 3864, 74914, 373, 2534, 2878, 730, 7245, 23512, 2030, 3093, 3501, 696, 3504, 823, 853, 373, 17028, 730, 5346, 19597, 2030, 73414, 696, 5422, 999, 15887, 375, 3662, 5210, 15767, 1590, 1548, 5262, 696, 4666, 999, 15887, 375, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 8397, 374, 32122, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 32122, 7245, 23512, 9417, 560, 23, 363, 32122, 3093, 3501, 9417, 560, 23, 363, 32122, 374, 23135, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 23135, 7245, 23512, 9417, 560, 23, 363, 23135, 3093, 3501, 9417, 560, 23, 363, 23135, 374, 44868, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 44868, 7245, 23512, 9417, 560, 23, 363, 44868, 3093, 3501, 9417, 560, 23, 363, 44868, 374, 12149, 5346, 19597, 2425, 73414, 9417, 560, 23, 363, 12149, 7245, 23512, 9417, 560, 23, 363, 12149, 3093, 3501, 9417, 560, 23, 363, 17793, 3253, 5210, 15767, 1590, 2425, 5262, 363, 560, 27, 422, 560, 31, 454, 560, 560, 3027, 954, 13385, 387, 6930, 2879, 715, 3253, 696, 713, 12438, 691, 15913, 4977, 905, 3835, 34325, 392, 2210, 3835, 732, 23512, 2131, 3093, 999, 15887, 560, 3027, 954, 17653, 387, 940, 560, 27, 363, 20498, 26942, 974, 560, 23, 363, 13225, 2879, 4977, 9417, 560, 23, 363, 8397, 7245, 23512, 363, 560, 27, 422, 560, 27, 454, 560, 361, 560, 560, 6297, 5962, 696, 2690, 78028, 27498, 5962, 13456, 7872, 33413, 5847, 375, 560, 31, 420, 453, 14719, 453, 422, 1883, 10697, 3890, 67175, 4605, 55662, 823, 853, 373, 37701, 1548, 29289, 696, 5080, 999, 15887, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:59628 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:47:54 engine.py:275] Added request cmpl-ad091878fc164c64b5aa8a7fffb688a9-0.
INFO 02-17 00:47:54 logger.py:39] Received request cmpl-a139d9efecaa41e7837917822e8fb242-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 크롤링 라이브러리 목록 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 1883, 10697, 3890, 67175, 23415, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:59628 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:47:54 engine.py:275] Added request cmpl-a139d9efecaa41e7837917822e8fb242-0.
INFO 02-17 00:47:55 logger.py:39] Received request cmpl-f44fb17db9d548ae9b63096f098f6dbc-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 크롤링 라이브러리 공통점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 1883, 10697, 3890, 67175, 37701, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:59628 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:47:55 engine.py:275] Added request cmpl-f44fb17db9d548ae9b63096f098f6dbc-0.
INFO 02-17 00:47:57 metrics.py:455] Avg prompt throughput: 557.2 tokens/s, Avg generation throughput: 67.5 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-17 00:48:00 logger.py:39] Received request cmpl-a8f6f89e22dd49998ad1a80c9cd2a359-0: prompt: '[|system|] 주어진 질문에 대답하기 위해, 당신은 인터넷 검색이 필요한지 판단해야 한다.\n먼저 {"subquery": 를 쓴 후 그 옆에 사용자의 입력을 써라.\n그 옆에 "routing" 을 적고 주어진 질문이 현재 LLM이 알고 있는 정보만으로 답변을 낼 수 있는 경우 "web", 아닌 경우 "none"을 적어라.\n마지막으로 "reasoning"을 적어라. 이는 왜 인터넷 검색이 필요한지에 대한 이유를 설명해야 한다. 이유는 최대한 간단하게 적어라.}\n3. 인터넷 검색 필요 여부는 아래를 참고하라.\n- 시의성: 주제가 최신 정보와 관련이 있는가? 최신 정보가 답변의 질을 향상시키는가?\n- 정밀성: 답변을 구성하기 위해 구체적이고 정확한 정보가 필요한가?\n- 전문성: 질문의 주제가 전문 지식이나 첨단 연구와 관련이 있는가?\n- 신뢰성: 외부 자료를 통한 교차검증이 답변의 질을 향상시키는가?\n4. 답변은 아래와 같은 JSON 형식으로 해야 한다.\n[|assistant|]\n{\n    "subquery": "사용자 입력",\n    "routing": "web" or "none",\n    "reasoning": "이유"\n}\n[|endofturn|]\n5. 답변에는 JSON 형식 이외의 다른 내용을 포함하지 말 것 (```json``` 태그로도 작성하지 마세요.)\n6. 오늘 날짜를 반영하여 결과를 생성할 것[|endofturn|][|example|] 아래는 몇 가지 예시입니다.예시 입력: 대전 주요 관광지 추천\n예시 출력: {\n            "subquery": "대전 주요 관광지 추천", "routing": "web", "reasoning": "대전의 주요 관광지는 시의성이 크고 신뢰성이 중요하므로, 외부 정보 필요"\n            }\n\n예시 입력: 지난 주 있었던 지진 정보\n예시 출력: {\n            "subquery": "지난 주 있었던 지진 정보", "routing": "web", "reasoning": "지난 주 있었던 지진은 시의성이 크므로, 외부 정보 필요"\n            }\n\n예시 입력: 2x + 4 = 0에서 x값\n예시 출력: {\n            "subquery": "2x + 4 = 0에서 x값", "routing": "none", "reasoning": "일차방정식의 풀이는 외부 정보를 필요로 하지 않음"\n            }\n\n예시 입력: 서울 맛집 추천\n예시 출력: {\n            "subquery": "서울 맛집 추천", "routing": "web", "reasoning": "맛집 정보는 시의성과 개인 취향에 따라 변할 수 있으므로, 외부 정보 필요"\n        }\n\n예시 입력: 프랑스 혁명 일어난 년도\n예시 출력: {\n            "subquery": "프랑스 혁명 일어난 년도", "routing": "none", "reasoning": "역사적 사실은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: Python에서 리스트와 튜플의 차이점\n예시 출력: {\n            "subquery": "Python에서 리스트와 튜플의 차이점", "routing": "none", "reasoning": "프로그래밍 언어의 기본 개념은 변하지 않는 정보이므로, 외부 정보를 필요로 하지 않음"\n        }\n\n예시 입력: 현재 환율 정보\n예시 출력: {\n            "subquery": "현재 환율 정보", "routing": "web", "reasoning": "환율은 실시간으로 변하는 정보이므로, 외부 정보 필요"\n        }\n\n예시 입력: 방탄소년단 최신 노래 제목\n예시 출력: {\n            "subquery": "방탄소년단 최신 노래 제목", "routing": "web", "reasoning": "최신 음악 정보는 변할 수 있으므로, 외부 정보 필요"\n        }\n[|endofturn|]\n\n[|user|] 크롤링 라이브러리 차이점 [|endofturn|]\n    [|assistant|]\n    ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [420, 453, 47982, 453, 422, 24348, 5962, 2373, 10874, 76766, 1902, 373, 5998, 732, 6226, 6276, 634, 2327, 1075, 698, 6582, 21046, 1367, 375, 560, 12236, 12893, 14486, 16287, 26942, 779, 7262, 1452, 855, 4013, 2373, 7332, 730, 13385, 696, 3674, 789, 375, 560, 799, 4013, 2373, 738, 443, 24511, 363, 699, 1015, 853, 24348, 5962, 634, 3570, 27663, 406, 634, 1360, 853, 773, 657, 3231, 1043, 13456, 9556, 696, 10085, 868, 773, 657, 2042, 738, 33167, 9417, 2993, 2042, 738, 69811, 363, 696, 1015, 83629, 375, 560, 9431, 13456, 738, 57190, 668, 363, 696, 1015, 83629, 375, 650, 657, 2804, 6226, 6276, 634, 2327, 1075, 698, 2373, 2047, 3071, 4605, 3328, 21046, 1367, 375, 3071, 657, 9338, 5488, 1130, 1060, 1015, 83629, 375, 454, 560, 380, 375, 6226, 6276, 2327, 8675, 657, 4488, 4605, 5813, 52592, 375, 560, 374, 834, 730, 1210, 387, 7109, 905, 16951, 3231, 2030, 3051, 634, 773, 657, 905, 392, 16951, 3231, 905, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 374, 19180, 1210, 387, 9556, 696, 4394, 76766, 1902, 10756, 1965, 634, 853, 5769, 1075, 3231, 905, 2327, 53214, 392, 560, 374, 3118, 1210, 387, 5962, 730, 7109, 905, 3118, 8333, 37891, 18952, 3758, 2030, 3051, 634, 773, 657, 905, 392, 560, 374, 9886, 1210, 387, 9012, 6784, 4605, 10015, 29260, 5290, 1469, 634, 9556, 730, 2221, 696, 11151, 71181, 657, 905, 392, 560, 381, 375, 9556, 732, 4488, 2030, 1119, 732, 15214, 12947, 13456, 1992, 1367, 375, 560, 420, 453, 1167, 8659, 453, 422, 560, 452, 560, 31, 363, 14486, 16287, 26942, 738, 16167, 942, 13385, 9417, 560, 31, 363, 443, 24511, 26942, 738, 33167, 363, 913, 738, 69811, 9417, 560, 31, 363, 57190, 668, 26942, 738, 26832, 363, 560, 454, 560, 361, 560, 382, 375, 9556, 97300, 15214, 12947, 14361, 730, 2126, 3311, 696, 4666, 1130, 698, 1216, 924, 688, 5232, 35363, 5232, 28775, 715, 720, 6016, 1130, 698, 14182, 22442, 560, 383, 375, 2247, 14710, 4605, 9209, 22226, 3336, 4605, 16769, 2870, 924, 361, 420, 453, 47090, 453, 422, 4488, 657, 3173, 2034, 32604, 10996, 375, 3027, 954, 13385, 387, 7991, 7245, 23512, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 20715, 7245, 23512, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 20715, 730, 7245, 23512, 657, 834, 730, 35604, 1883, 853, 9886, 35604, 2963, 1130, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2424, 901, 773, 2957, 5623, 24122, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 6951, 901, 773, 2957, 5623, 24122, 732, 834, 730, 35604, 1883, 8158, 373, 9012, 3231, 2327, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 582, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 379, 449, 1096, 582, 381, 801, 582, 377, 41728, 1262, 12580, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 858, 1600, 1629, 38545, 730, 21320, 657, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 23, 454, 560, 560, 3027, 954, 13385, 387, 2879, 3501, 3093, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 8397, 3501, 3093, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 40355, 3231, 657, 834, 730, 1210, 1548, 3728, 9529, 2373, 2414, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 10386, 16290, 18004, 1393, 720, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 34761, 16290, 18004, 1393, 720, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 38050, 1965, 2710, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 14138, 41728, 15209, 2030, 13162, 2970, 730, 29289, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 54440, 41728, 15209, 2030, 13162, 2970, 730, 29289, 9417, 738, 443, 24511, 26942, 738, 69811, 9417, 738, 57190, 668, 26942, 738, 21332, 2846, 9685, 10978, 730, 4214, 9711, 732, 14276, 698, 1145, 657, 3231, 634, 8158, 373, 9012, 3231, 4605, 2327, 715, 75599, 1145, 1040, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 3570, 17555, 3231, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 11240, 17555, 3231, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 2401, 3726, 732, 17557, 13456, 14276, 657, 3231, 634, 8158, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 560, 3027, 954, 13385, 387, 36054, 16951, 4841, 8612, 560, 3027, 954, 17653, 387, 940, 560, 23, 363, 14486, 16287, 26942, 738, 97351, 16951, 4841, 8612, 9417, 738, 443, 24511, 26942, 738, 33167, 9417, 738, 57190, 668, 26942, 738, 83895, 6738, 3231, 657, 47113, 868, 773, 48913, 373, 9012, 3231, 2327, 363, 560, 27, 454, 560, 361, 560, 560, 420, 453, 14719, 453, 422, 1883, 10697, 3890, 67175, 29289, 582, 361, 560, 31, 420, 453, 1167, 8659, 453, 422, 560, 31], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:59628 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:48:00 engine.py:275] Added request cmpl-a8f6f89e22dd49998ad1a80c9cd2a359-0.
INFO 02-17 00:48:02 logger.py:39] Received request cmpl-b366b61d4b144e86ac3adece53205070-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        03) 웹 스크래핑을 위한 Python 라이브러리 소개\nPython은 웹 사이트에서 데이터를 추출하는 데 도움을 주는 라이브러리들이 개발되어있어 웹 스크래핑에 큰 힘을 발휘합니다. BeautifulSoup, Scrapy, Selenium이라는 세 가지 일반적으로 사용되는 라이브러리가 그 예입니다. 이 세 가지 라이브러리는 각각 독특한 기능을 제공하며, 사용 방법은 스크래핑 프로젝트의 복잡성과 요구 사항에 따라 달라집니다.\nBeautifulSoup, Scrapy, Selenium 개요\nBeautifulSoup\n: 이 파이썬 라이브러리는 HTML 및 XML 문서를 파싱하는 데 사용되며, HTML 및 XML 파일에서 데이터를 추출하기에 좋습니다. BeautifulSoup은 웹페이지 소스 코드에서 구문 분석 트리(parse tree)를 생성하며, 이를 통해 웹페이지를 탐색하고 검색하며 수정하기 쉽습니다. BeautifulSoup은 복잡한 HTML 문서를 태그, 탐색 가능한 문자열 또는 주석 등의 파이썬 객체 트리로 변환합니다.\nfrom bs4 import BeautifulSoup\nimport requests\n\nURL = "https://www.example.com"\npage = requests.get(URL)\nsoup = BeautifulSoup(page.content, "html.parser")\n\n# 페이지에서 첫 번째 h1 태그 찾기\nh1_tag = soup.find("h1")  \nprint(h1_tag.text)  # h1 태그 내부의 텍스트 출력\nScrapy\n: 더 복잡한 스크래핑 작업을 처리할 수 있는 포괄적인 웹 크롤링 프레임워크입니다. Scrapy는 여러 요청을 동시에 처리할 수 있는 비동기 처리 프레임워크로, 대규모 스크래핑 작업에서 효율적으로 작동합니다. 웹 사이트에서 데이터를 추출하고 처리하여 원하는 형식으로 저장하는 데 필요한 모든 도구를 제공합니다.\nimport scrapy\n\nclass QuotesSpider(scrapy.Spider):\n    name = "quotes"\n    start_urls = [\'http://quotes.toscrape.com/tag/humor/\']\n\n    def parse(self, response):\n        for quote in response.css(\'div.quote\'):\n            yield {\n                \'text\': quote.css(\'span.text::text\').get(),\n                \'author\': quote.xpath(\'span/small/text()\').get(),\n            }\nSelenium\n: 웹 애플리케이션 테스트를 위해 개발된 라이브러리이지만, 웹 스크래핑에도 널리 사용됩니다. Selenium의 강점은 웹페이지와 상호작용을 자동화할 수 있는 능력에 있습니다. Selenium은 버튼 클릭이나 페이지 스크롤링과 같은 인간과 유사한 동작을 시뮬레이션할 수 있어, 비동기로 콘텐츠가 로드되거나 사용자 상호작용에 응답하는 동적 웹사이트에 적합합니다.\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\n\ndriver = webdriver.Firefox()\ndriver.get("http://www.python.org")\nassert "Python" in driver.title\nelem = driver.find_element_by_name("q")\nelem.clear()\nelem.send_keys("pycon")\nelem.send_keys(Keys.RETURN)\nassert "No results found." not in driver.page_source\ndriver.close()\n각 라이브러리의 사용 시점\nBeautifulSoup\n: 웹페이지의 HTML에서 데이터를 추출해야하는 소규모 또는 중간 규모의 스크래핑 작업에 적합합니다. 사용이 간편하며, 속도가 큰 문제가 되지 않는 프로젝트에 이상적입니다.\nScrapy\n: 대규모이고 복잡한 웹 스크래핑 작업에 가장 적합하며, 여러 요청을 처리하고 데이터를 체계적으로 처리해야 할 때 유용합니다. Scrapy는 라이브러리보다는 웹 크롤링 프레임워크에 가깝기 때문에 기능이 더 많고 학습 곡선이 더 가파릅니다.\nSelenium\n: 웹사이트가 콘텐츠를 비동기적으로 로드하거나 사용자 상호작용에 응답하는 경우에 적합합니다. 버튼 클릭이나 양식 작성과 같은 사용자 상호작용이 필요한 스크래핑 작업에 유용합니다.\n기억하세요, 라이브러리의 선택은 웹 스크래핑 프로젝트의 구체적인 요구 사항에 크게 의존합니다. 일부 경우에는 이러한 라이브러리를 조합하여 목표를 달성해야 할 수도 있습니다. 다음 섹션에서는 이러한 라이브러리 각각에 대해 자세히 알아보고 실용적인 예제를 통해 기능을 소개할 것입니다.\n마지막 편집일시 : 2023년 6월 2일 11:33 오전', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 377, 380, 370, 11574, 12870, 1117, 4102, 696, 3125, 14138, 67175, 3810, 560, 54440, 732, 11574, 8050, 41728, 7957, 4605, 13189, 1130, 657, 1736, 3577, 696, 901, 657, 67175, 14178, 4003, 13452, 721, 1840, 721, 11574, 12870, 1117, 4102, 2373, 2491, 2128, 696, 17269, 14010, 375, 83188, 373, 42574, 5754, 373, 96630, 634, 21212, 1139, 2034, 4400, 41281, 1821, 13452, 657, 67175, 905, 855, 1288, 10996, 375, 650, 1139, 2034, 67175, 657, 7135, 15803, 1075, 4198, 696, 4078, 1130, 1877, 373, 1821, 2818, 732, 12870, 1117, 4102, 10902, 730, 12037, 1210, 1548, 6453, 6318, 2373, 2414, 60636, 375, 560, 95469, 75872, 373, 42574, 5754, 373, 96630, 49408, 560, 95469, 75872, 560, 387, 650, 80044, 67175, 657, 15447, 2425, 20100, 20440, 4605, 1717, 6685, 1130, 657, 1736, 1821, 13452, 1877, 373, 15447, 2425, 20100, 11038, 41728, 7957, 4605, 13189, 1130, 37817, 1104, 50747, 375, 83188, 732, 11574, 7696, 6126, 12291, 41728, 72412, 5422, 9702, 369, 24963, 6622, 370, 4605, 16769, 1130, 1877, 373, 38069, 2364, 11574, 7696, 4605, 30694, 48199, 6276, 1130, 1877, 10122, 76766, 3497, 50747, 375, 83188, 732, 12037, 1075, 15447, 20440, 4605, 28775, 373, 30694, 1995, 1075, 66894, 4978, 28347, 53641, 80044, 42225, 9702, 715, 34398, 14010, 375, 560, 4018, 24946, 381, 2007, 83188, 560, 4393, 11168, 560, 560, 20654, 801, 738, 15385, 387, 9413, 38790, 375, 47090, 375, 3256, 363, 560, 18100, 801, 11168, 375, 4689, 369, 20654, 370, 560, 444, 4607, 801, 83188, 369, 18100, 375, 18213, 373, 738, 27092, 375, 17024, 11627, 560, 560, 364, 13203, 41728, 3257, 1457, 5088, 678, 378, 28775, 1996, 722, 560, 433, 378, 424, 4799, 801, 26950, 375, 39459, 59074, 433, 378, 11627, 33, 560, 4825, 369, 433, 378, 424, 4799, 375, 2812, 370, 33, 364, 678, 378, 28775, 5424, 730, 33728, 17653, 560, 98326, 5754, 560, 387, 1047, 12037, 1075, 12870, 1117, 4102, 3644, 696, 5547, 2870, 868, 773, 657, 36634, 1965, 798, 11574, 1883, 10697, 3890, 18286, 13518, 10996, 375, 42574, 5754, 657, 2690, 8254, 696, 6873, 2373, 5547, 2870, 868, 773, 657, 1202, 50048, 5547, 18286, 13518, 715, 373, 915, 30453, 12870, 1117, 4102, 3644, 41728, 9687, 41281, 13981, 14010, 375, 11574, 8050, 41728, 7957, 4605, 13189, 48199, 5547, 22226, 9062, 657, 12947, 13456, 11503, 1130, 657, 1736, 2327, 1075, 2904, 15546, 4605, 4078, 14010, 375, 560, 4393, 95413, 560, 560, 5138, 93831, 13541, 2063, 369, 21140, 5754, 375, 13541, 2063, 65754, 560, 31, 4726, 801, 738, 906, 6998, 363, 560, 31, 17795, 424, 790, 4720, 801, 25990, 13656, 387, 9413, 906, 6998, 375, 665, 21140, 3012, 375, 3256, 376, 4799, 376, 433, 34131, 376, 86886, 560, 560, 31, 2405, 10423, 369, 2079, 373, 3507, 65754, 560, 27, 2772, 18138, 666, 3507, 375, 66854, 48465, 30294, 375, 38013, 66353, 560, 23, 32152, 940, 560, 19, 368, 445, 6662, 25547, 18138, 375, 66854, 48465, 26497, 375, 2812, 31145, 2812, 69609, 4689, 369, 5445, 560, 19, 368, 15959, 25547, 18138, 375, 449, 9661, 48465, 26497, 376, 58300, 376, 2812, 40553, 69609, 4689, 369, 5445, 560, 23, 454, 560, 71215, 32030, 560, 387, 11574, 38217, 10990, 4605, 1902, 4003, 16524, 67175, 634, 2597, 373, 11574, 12870, 1117, 4102, 15169, 23487, 1821, 837, 1318, 375, 96630, 730, 23029, 732, 11574, 7696, 2030, 14885, 14052, 696, 4440, 1255, 2870, 868, 773, 657, 5772, 2373, 773, 50747, 375, 96630, 732, 11337, 9144, 37891, 13203, 70806, 3890, 1548, 1119, 732, 5247, 1548, 14930, 1075, 14288, 696, 50954, 2870, 868, 773, 721, 373, 1202, 50048, 715, 11821, 905, 17099, 13452, 16519, 7332, 14885, 14052, 2373, 16352, 1130, 657, 84906, 11574, 79184, 2373, 13329, 14010, 375, 560, 4018, 46818, 2007, 74871, 560, 4018, 46818, 375, 33167, 38429, 375, 54530, 375, 26690, 2007, 47705, 560, 560, 38429, 801, 74871, 375, 43059, 22121, 40553, 560, 38429, 375, 4689, 59074, 13656, 387, 9413, 38790, 375, 50475, 375, 23632, 11627, 560, 7034, 738, 54440, 363, 666, 8834, 375, 13058, 560, 96464, 801, 8834, 375, 39459, 424, 46151, 424, 3663, 424, 4726, 59074, 442, 11627, 560, 96464, 375, 45190, 40553, 560, 96464, 375, 43238, 424, 26690, 59074, 8507, 2298, 11627, 560, 96464, 375, 43238, 424, 26690, 369, 38327, 375, 42481, 44314, 370, 560, 7034, 738, 6644, 2533, 2224, 13222, 1017, 666, 8834, 375, 18100, 424, 32758, 560, 38429, 375, 31550, 40553, 560, 1246, 67175, 730, 1821, 10742, 560, 95469, 75872, 560, 387, 11574, 7696, 730, 15447, 41728, 7957, 4605, 13189, 21046, 1130, 657, 38140, 4978, 6208, 5197, 730, 12870, 1117, 4102, 3644, 2373, 13329, 14010, 375, 1821, 634, 11969, 1130, 1877, 373, 7818, 905, 2491, 2372, 905, 970, 698, 1145, 657, 10902, 2373, 2329, 1965, 10996, 375, 560, 98326, 5754, 560, 387, 915, 30453, 634, 853, 12037, 1075, 11574, 12870, 1117, 4102, 3644, 2373, 2472, 13329, 1130, 1877, 373, 2690, 8254, 696, 5547, 48199, 7957, 4605, 8846, 41281, 5547, 21046, 1051, 1105, 15420, 14010, 375, 42574, 5754, 657, 67175, 1280, 4264, 11574, 1883, 10697, 3890, 18286, 13518, 2373, 16470, 722, 1668, 2373, 4198, 634, 1047, 1180, 853, 7730, 34376, 634, 1047, 34161, 14231, 375, 560, 71215, 32030, 560, 387, 11574, 79184, 905, 11821, 4605, 1202, 50048, 41281, 17099, 1130, 16519, 7332, 14885, 14052, 2373, 16352, 1130, 657, 2042, 2373, 13329, 14010, 375, 11337, 9144, 37891, 15660, 6016, 1548, 1119, 732, 7332, 14885, 14052, 634, 2327, 1075, 12870, 1117, 4102, 3644, 2373, 15420, 14010, 375, 560, 29130, 1130, 5847, 373, 67175, 730, 3329, 732, 11574, 12870, 1117, 4102, 10902, 730, 10756, 1965, 798, 6453, 6318, 2373, 1883, 1060, 20665, 14010, 375, 5720, 2042, 97300, 4476, 1075, 67175, 4605, 7781, 22226, 5999, 4605, 11985, 21046, 1051, 8952, 773, 50747, 375, 2775, 55265, 41728, 657, 4476, 1075, 67175, 7135, 2373, 2409, 11586, 5337, 853, 19765, 1965, 798, 77481, 4605, 2364, 4198, 696, 3810, 2870, 924, 10996, 375, 560, 9431, 15025, 84149, 756, 582, 379, 377, 379, 380, 2171, 582, 383, 2751, 582, 379, 858, 582, 378, 378, 387, 380, 380, 6101], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:35128 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:48:02 engine.py:275] Added request cmpl-b366b61d4b144e86ac3adece53205070-0.
INFO 02-17 00:48:02 logger.py:39] Received request cmpl-0b7ecbb6509d43d2966397d01f54ef8d-0: prompt: '다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        \\u003caside>\n💡  최근 자바를 이용한 크롤링을 할 일이 있어서, 크롤링 도구에 대해서 학습하게 되었다.\n하지만 크롤링을 위한 라이브러리는 굉장히 많아서 어떤 라이브러리를 사용해야할 지 매우 혼란이 왔는데, 그래서 각 대표 라이브러리들은 무슨 차이가 있고, 어떤 상황에서 어떤 도구를 선택해야 할까?\n\n\\u003c/aside>\n\n---\n\n## 대표 라이브러리 - Jsoup\n\n---\n\n### Jsoup이란?\n\n맨 처음으로 대표 라이브러리인 jsoup을 접하게 되었다. \n\n> jsoup은 HTML 문서에 저장된 데이터를 구문 분석, 추출 및 조작하도록 설계된 오픈 소스 Java 라이브러리입니다.\n- 위키백과\n> \n- Jsoup은 자바로 작성된 HTML 파싱및 조작 라이브러리이다. 이번에 활용한 기능은 아래와 같다.\n    1. HTML 파싱: HTML 문서를 파싱하여 **DOM 트리**를 생성하여, HTML 문서의 요소에 쉽게 접근할 수 있다.\n    2. 요소 검색: CSS 선택자를 사용하여 HTML 요소를 검색하여 데이터에 접근하거나, 추출할 수 있다.\n    - DOM 트리란 DOM(Documen Object Model) 트리는 HTML, XML 또는 다른 마크업 언어의 문서를 표현하는 트리 구조이다.\n    \n![](https://velog.velcdn.com/images/hyn_053/post/7d968d0d-7934-444b-943b-f13f8b2c2b98/image.png)\n\n    - 이런 식으로 계층적인 트리 형식으로 표현할 수 있다. \n    이를 통해 각 구조에 쉽게 접근하고 조작할 수가 있다. \n    부모 노드 - 자식 노드를 가진 트리의 형태 이므로, 탐색및 순회가 용이하다.\n\n 그래서 Jsoup을 쓰는 이유는 뭘까?\n\n### Jsoup은 왜 쓸까?\n\n 우린 여기서 정적인 웹페이지와 동적인 웹페이지, 즉 **서버 사이드 렌더링**과 **클라이언트 사이드 렌더링**에 대해 알아야 한다. \n  이 글은 이에 대한 주제가 아니기 때문에 간단하게 설명하자면,\n\n- **서버 사이드 렌더링(Server Side Rendering, SSR)**은 웹 페이지를 서버에서 렌더링을 해서 클라이언트에게 전달하는 것이다.\n- **클라이언트 사이드 렌더링(Client Side Rendering, CSR)**은 웹 페이지 초기 로딩시 레이아웃과 자바 스크립트 코드를 전달하고 이후 브라우저가 자바 스크립트를 실행하여 데이터를 불러와 동적으로 웹 페이지를 생성한다.\n\n \n\n Jsoup은 SSR을 통해 미리 렌더링된 정적인 HTML 코드를 반환한다. Jsoup은 Http Request를 통해 서버에서 보내오는 HTML 문서를 그대로 받아와 사용하고 처리한다. \n\n따라서, **정적인 웹페이지**를 크롤링하는데 다음과 강점을 가지고 있다.\n\n- 간편하고 직관적인 API\n- CSS 선택자를 사용해 요소를 선택하고 추출 ex) **`select`** 메서드\n- 빠르고 경량화되어 좋은 성능을 보유\n- DOM 트리 형태로 HTML 문서 구조 접근에 용이하고, 이를 바탕으로 한 다양한 메서드들을 제공한다. ex) **`getElementById`**, **`getElementsByClass`**, **`getElementsByTag`**\n\n 그럼 **동적인 웹페이지**에선 Jsoup이 왜 안좋을까? 여기엔 다음과 같은 이유가 있다.\n\n1. Jsoup은 Http Request를 통해 서버에서 보내오는 HTML 문서를 그대로 받아와 사용하고 처리한다. \n2. 하지만 동적인 웹페이지에선 CSR 방식으로 웹페이지 초기 로딩시 레이아웃과 자바 스크립트 코드를 전달하고, 이후 브라우저가 자바 스크립트를 실행하여 데이터를 불러와 동적으로 웹 페이지를 생성한다. \n3. 때문에 웹 페이지가 로딩되고 난 후 웹 브라우저에서 자바스크립트가 실행되어야 하기 때문에 Http 요청만으로는 완전한 구조를 가져올 수 없기 때문에, Jsoup이 좋지 않다.\n\n 따라서, 동적인 웹페이지 처리하는 도구가 필요하다. 그래서 Selenium과 같은 라이브러리를 사용한다.\n\n## 대표적인 동적 웹 페이지 도구 Selenium\n\n---\n\n> 셀레늄은 웹 애플리케이션 자동화 및 테스트를 위한 포터블 프레임워크이다. 셀레늄은 테스트 스크립트 언어를 학습할 필요 없이 기능 테스트를 만들기 위한 플레이백 도구를 제공한다.\n-\xa0[위키백과](https://ko.wikipedia.org/wiki/%EC%85%80%EB%A0%88%EB%8A%84_(%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4))\n> \n\n Selenium을 이용하면 동적 웹 페이지를 크롤링 할 수 있는데, Selenium의 동작 방식은 다음과 같다.\n\n1. 웹 드라이버를 설정한다. 이는 각 브라우저별로 제공되는 독립 실행형 실행파일로, 각 브라우저와 통신 할 수 있게 도와준다.\n2. 웹 드라이버를 사용해 웹 브라우저를 열어 자동으로 제어할 수 있는 객체를 얻는다.\n3. 웹 페이지를 로드하고, DOM 트리를 구성한다.\n4. 자바스크립트를 하고 AJAX 요청을 처리해 동적으로 웹 페이지를 구성한다.\n5. 웹 페이지가 완전히 로드되면, 데이터를 추출한다.\n\n\n 동적인 웹페이지에선 **브라우저**가 자바 스크립트를 실행하여 데이터를 불러와 동적으로 웹 페이지를 생성한다.\n\n 즉, Selenium은 웹 드라이버를 사용해 웹 브라우저를 활용해 자바 스크립트를 실행하여 웹 페이지를 그리는 것이다 !\n\n## 🤔\xa0그래서 뭘 써야 할까?\n\n---\n\n 앞서 살펴본 동작방식에서 차이가 있다. 그래서 어떤 상황에서 무엇을 써야할까?\n\n 정적인 웹페이지를 크롤링 해야되는 상황에는 Jsoup과 같은 라이브러리를 사용하면 좋은 이유는 다음과 같다.\n Jsoup은 웹 브라우저를 사용하지 않아 브라우저 자체의 로딩 시간과 자바스크립트 실행에 필요한 시간이 없다. URL을 이용해 웹 페이지를 로드하거나, 직접 HTML 코드를 입력해 로드가 가능하기 때문에, 빠르고 경량화 된 것이다.\n\n동적인 웹페이지를 크롤링 해야되는 상황에는 Selenium과 Puppeteer와 같은 라이브러리를 사용하면 좋고, 이유는 다음과 같다.\n\n Jsoup은 Http Request를 통해 서버에서 보내오는 HTML 문서를 그대로 받아와 사용하고 처리한다. 그래서 CSR 상황에는 적절하지 않고, 브라우저를 이용해 웹 페이지를 그리고 가져와야 하기 때문 Selenium과 Puppeteer와 같은 라이브러리를 사용하는 것이 좋다.\n\n## 알게 된 점\n\n---\n\n 위와 같이 학습 내용을 정리하면서, 아래의 항목에 대해 깨닫게 되었다.\n\n- CSR과 SSR의 차이\n- Jsoup과 Selenium의 동작 방식\n- DOM 트리\n- 어떤 상황에서 어떠한 도구를 선택하는게 적절한지\n\n 크롤링을 처음하면서, 많은 내용을 학습하게 되었다. 예전부터 라이브러리를 선택할 때, 왜 그 라이브러리를 선택했고 어떤 방식으로 동작하는지 다른 라이브러리들과 차이점이 뭔지에 대해서 항상 고민하고 아는 것이 중요하다고 들었다. 이번 기회에 이와 같은 학습을 하면서 무지성으로 import 했던 자신에 대해 반성하게 되었던 것 같다.\n\n 앞으로는 라이브러리를 선택할 땐 적어도 왜 쓰는진 알고 선택해보자 !', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 421, 446, 377, 377, 380, 49703, 1198, 391, 560, 11881, 602, 456, 33, 11175, 47201, 4605, 69281, 1883, 10697, 3890, 696, 1051, 955, 634, 773, 22556, 373, 1883, 10697, 3890, 15546, 2373, 4641, 7730, 1130, 1060, 970, 2957, 643, 375, 560, 4854, 1883, 10697, 3890, 696, 3125, 67175, 657, 6121, 1180, 96565, 3090, 67175, 4605, 1821, 21046, 2870, 775, 4679, 18418, 634, 2516, 15913, 373, 2949, 2534, 3163, 67175, 1371, 732, 5571, 4935, 905, 773, 853, 373, 3090, 2876, 41728, 3090, 15546, 4605, 3329, 21046, 8354, 392, 560, 560, 421, 446, 377, 377, 380, 428, 376, 689, 1198, 391, 560, 560, 4961, 560, 560, 1757, 3163, 67175, 672, 84621, 4607, 560, 560, 4961, 560, 560, 5941, 84621, 4607, 90042, 392, 560, 560, 7874, 2718, 13456, 3163, 67175, 798, 6545, 4607, 696, 20032, 1060, 970, 2957, 643, 375, 582, 560, 560, 391, 6545, 4607, 732, 15447, 20440, 2373, 11503, 16524, 7957, 4605, 72412, 5422, 373, 13189, 2425, 15597, 1130, 37728, 9449, 16524, 6941, 6126, 11154, 67175, 10996, 375, 560, 374, 49475, 3387, 1548, 560, 391, 582, 560, 374, 84621, 4607, 732, 948, 6509, 6016, 16524, 15447, 1717, 6685, 706, 599, 15597, 67175, 40379, 375, 2626, 2373, 4703, 1075, 4198, 732, 4488, 2030, 1119, 643, 375, 560, 31, 378, 375, 15447, 1717, 6685, 387, 15447, 20440, 4605, 1717, 6685, 22226, 1316, 53148, 9702, 2484, 4605, 16769, 22226, 373, 15447, 20440, 730, 9517, 2373, 3497, 1060, 10625, 2870, 868, 773, 643, 375, 560, 31, 379, 375, 9517, 6276, 387, 20772, 3329, 942, 4605, 1821, 22226, 15447, 9517, 4605, 6276, 22226, 7957, 2373, 10625, 1130, 16519, 373, 13189, 2870, 868, 773, 643, 375, 560, 31, 374, 27591, 9702, 1868, 27591, 369, 18491, 36238, 9226, 9667, 370, 9702, 657, 15447, 373, 20100, 4978, 2126, 16905, 1257, 10978, 730, 20440, 4605, 5233, 1130, 657, 9702, 5630, 40379, 375, 560, 31, 560, 27769, 8064, 15385, 387, 9413, 1311, 1091, 375, 1311, 80336, 375, 3256, 376, 54551, 376, 433, 2590, 424, 377, 382, 380, 376, 26713, 376, 384, 429, 386, 383, 385, 429, 377, 429, 374, 384, 386, 380, 381, 374, 381, 381, 381, 427, 374, 386, 381, 380, 427, 374, 431, 378, 380, 431, 385, 427, 379, 428, 379, 427, 386, 385, 376, 18958, 375, 441, 2345, 370, 560, 560, 31, 374, 2419, 1887, 13456, 19862, 1965, 798, 9702, 12947, 13456, 5233, 2870, 868, 773, 643, 375, 582, 560, 31, 634, 4605, 2364, 2534, 5630, 2373, 3497, 1060, 10625, 48199, 15597, 2870, 87460, 773, 643, 375, 582, 560, 31, 12246, 62131, 672, 14103, 62131, 4605, 7110, 9702, 730, 7075, 650, 8158, 373, 30694, 706, 599, 57041, 905, 26188, 96266, 375, 560, 560, 2949, 84621, 4607, 696, 2112, 657, 3071, 657, 36693, 392, 560, 560, 5941, 84621, 4607, 732, 2804, 76309, 392, 560, 560, 16204, 2664, 712, 44742, 798, 11574, 7696, 2030, 84906, 798, 11574, 7696, 373, 5645, 1316, 95473, 16444, 6064, 87346, 2484, 1548, 1316, 6055, 49544, 16444, 6064, 87346, 2484, 2373, 2409, 4164, 1137, 1367, 375, 582, 560, 33, 634, 2272, 732, 650, 2373, 2047, 7109, 905, 1579, 722, 1668, 2373, 5488, 1130, 1060, 3328, 1130, 942, 838, 373, 560, 560, 374, 1316, 95473, 16444, 6064, 87346, 369, 23423, 25994, 66633, 4216, 373, 68707, 370, 2484, 732, 11574, 13203, 4605, 18296, 41728, 6064, 87346, 696, 1547, 56794, 2373, 1060, 7820, 1130, 657, 924, 40379, 375, 560, 374, 1316, 6055, 49544, 16444, 6064, 87346, 369, 16483, 25994, 66633, 4216, 373, 49689, 370, 2484, 732, 11574, 13203, 9377, 86183, 954, 73850, 1548, 47201, 59588, 12291, 4605, 7820, 48199, 3428, 61559, 905, 47201, 59588, 4605, 12944, 22226, 7957, 4605, 8425, 2030, 1368, 41281, 11574, 13203, 4605, 16769, 10348, 375, 560, 560, 582, 560, 560, 84621, 4607, 732, 68707, 696, 2364, 5722, 6064, 87346, 16524, 44742, 798, 15447, 12291, 4605, 30824, 10348, 375, 84621, 4607, 732, 24166, 19449, 4605, 2364, 18296, 41728, 3399, 1235, 657, 15447, 20440, 4605, 5476, 69597, 2030, 1821, 48199, 5547, 10348, 375, 582, 560, 560, 21122, 373, 1316, 1002, 1965, 798, 11574, 7696, 2484, 4605, 1883, 10697, 3890, 1130, 15913, 2775, 1548, 23029, 696, 2034, 853, 773, 643, 375, 560, 560, 374, 11969, 48199, 37846, 1965, 798, 8682, 560, 374, 20772, 3329, 942, 4605, 1821, 999, 9517, 4605, 3329, 48199, 13189, 910, 370, 1316, 425, 26908, 425, 2484, 2012, 712, 1147, 560, 374, 5955, 853, 48093, 1255, 13452, 721, 1104, 732, 11758, 696, 8491, 560, 374, 27591, 9702, 7075, 715, 15447, 20440, 5630, 10625, 2373, 26188, 48199, 373, 38069, 10247, 13456, 764, 2841, 1075, 2012, 712, 1147, 1371, 696, 4078, 10348, 375, 910, 370, 1316, 425, 4689, 10309, 21458, 425, 2484, 373, 1316, 425, 4689, 37255, 6103, 8894, 425, 2484, 373, 1316, 425, 4689, 37255, 6103, 17756, 425, 2484, 560, 560, 5578, 1316, 977, 1965, 798, 11574, 7696, 2484, 2373, 1437, 84621, 4607, 634, 2804, 1084, 7888, 34325, 392, 2664, 8789, 2775, 1548, 1119, 732, 3071, 905, 773, 643, 375, 560, 560, 378, 375, 84621, 4607, 732, 24166, 19449, 4605, 2364, 18296, 41728, 3399, 1235, 657, 15447, 20440, 4605, 5476, 69597, 2030, 1821, 48199, 5547, 10348, 375, 582, 560, 379, 375, 3684, 84906, 798, 11574, 7696, 2373, 1437, 49689, 5073, 13456, 11574, 7696, 9377, 86183, 954, 73850, 1548, 47201, 59588, 12291, 4605, 7820, 48199, 373, 3428, 61559, 905, 47201, 59588, 4605, 12944, 22226, 7957, 4605, 8425, 2030, 1368, 41281, 11574, 13203, 4605, 16769, 10348, 375, 582, 560, 380, 375, 1668, 2373, 11574, 13203, 905, 86183, 13452, 853, 2583, 1452, 11574, 61559, 41728, 47201, 4183, 56386, 905, 12944, 13452, 36309, 691, 722, 1668, 2373, 24166, 8254, 1043, 13456, 657, 4025, 1075, 5630, 4605, 39169, 868, 1107, 722, 1668, 2373, 373, 84621, 4607, 634, 1104, 698, 1145, 643, 375, 560, 560, 6883, 373, 84906, 798, 11574, 7696, 5547, 1130, 657, 15546, 905, 2327, 96266, 375, 2949, 96630, 1548, 1119, 732, 67175, 4605, 1821, 10348, 375, 560, 560, 1757, 3163, 1965, 798, 84906, 11574, 13203, 15546, 96630, 560, 560, 4961, 560, 560, 391, 83831, 21155, 732, 11574, 38217, 4440, 1255, 2425, 10990, 4605, 3125, 47619, 2912, 18286, 13518, 40379, 375, 83831, 21155, 732, 10990, 59588, 10978, 4605, 7730, 2870, 2327, 2705, 4198, 10990, 4605, 2069, 722, 3125, 7865, 3387, 15546, 4605, 4078, 10348, 375, 560, 374, 974, 1595, 2113, 3387, 1548, 8064, 15385, 387, 9413, 13092, 375, 448, 20444, 375, 23632, 376, 89631, 376, 366, 5487, 366, 385, 382, 366, 385, 377, 366, 51692, 366, 394, 377, 366, 385, 385, 366, 51692, 366, 385, 394, 366, 385, 381, 95953, 366, 5487, 366, 385, 383, 366, 385, 396, 366, 3381, 366, 386, 381, 366, 385, 381, 366, 3381, 366, 385, 394, 366, 395, 385, 366, 5487, 366, 386, 395, 366, 394, 385, 366, 5487, 366, 386, 383, 366, 395, 381, 19146, 560, 391, 582, 560, 560, 96630, 696, 2785, 16559, 84906, 11574, 13203, 4605, 1883, 10697, 3890, 1051, 868, 773, 15913, 373, 96630, 730, 14288, 5073, 732, 2775, 1548, 1119, 643, 375, 560, 560, 378, 375, 11574, 32179, 4605, 8587, 10348, 375, 650, 657, 2534, 61559, 44065, 4078, 13452, 657, 12125, 12944, 2318, 12944, 54082, 715, 373, 2534, 61559, 2030, 7514, 1051, 868, 773, 1060, 6153, 15622, 375, 560, 379, 375, 11574, 32179, 4605, 1821, 999, 11574, 61559, 4605, 1873, 721, 4440, 13456, 23245, 2870, 868, 773, 657, 42225, 4605, 4573, 657, 643, 375, 560, 380, 375, 11574, 13203, 4605, 17099, 48199, 373, 27591, 9702, 4605, 4394, 10348, 375, 560, 381, 375, 47201, 4183, 56386, 4605, 9858, 75030, 8254, 696, 5547, 999, 1368, 41281, 11574, 13203, 4605, 4394, 10348, 375, 560, 382, 375, 11574, 13203, 905, 10839, 17099, 13452, 838, 373, 7957, 4605, 13189, 10348, 375, 560, 560, 560, 84906, 798, 11574, 7696, 2373, 1437, 1316, 21014, 962, 1415, 2484, 905, 47201, 59588, 4605, 12944, 22226, 7957, 4605, 8425, 2030, 1368, 41281, 11574, 13203, 4605, 16769, 10348, 375, 560, 560, 5645, 373, 96630, 732, 11574, 32179, 4605, 1821, 999, 11574, 61559, 4605, 4703, 999, 47201, 59588, 4605, 12944, 22226, 11574, 13203, 4605, 5097, 657, 924, 40379, 863, 560, 560, 1757, 90438, 604, 2949, 8284, 13491, 8354, 392, 560, 560, 4961, 560, 560, 8502, 55062, 14288, 52387, 41728, 4935, 905, 773, 643, 375, 2949, 3090, 2876, 41728, 4262, 696, 13491, 89493, 392, 560, 560, 44742, 798, 11574, 7696, 4605, 1883, 10697, 3890, 1992, 13452, 657, 2876, 97300, 84621, 4607, 1548, 1119, 732, 67175, 4605, 1821, 16559, 1104, 732, 3071, 657, 2775, 1548, 1119, 643, 375, 560, 84621, 4607, 732, 11574, 61559, 4605, 1821, 1130, 698, 1145, 1023, 61559, 4786, 730, 86183, 1590, 1548, 47201, 4183, 56386, 12944, 2373, 2327, 1075, 1590, 634, 1107, 643, 375, 3293, 696, 87633, 11574, 13203, 4605, 17099, 1130, 16519, 373, 3492, 15447, 12291, 4605, 13385, 999, 17099, 905, 1995, 76766, 1668, 2373, 373, 5955, 853, 48093, 1255, 1265, 924, 40379, 375, 560, 560, 977, 1965, 798, 11574, 7696, 4605, 1883, 10697, 3890, 1992, 13452, 657, 2876, 97300, 96630, 1548, 67252, 12999, 623, 2030, 1119, 732, 67175, 4605, 1821, 16559, 1104, 853, 373, 3071, 657, 2775, 1548, 1119, 643, 375, 560, 560, 84621, 4607, 732, 24166, 19449, 4605, 2364, 18296, 41728, 3399, 1235, 657, 15447, 20440, 4605, 5476, 69597, 2030, 1821, 48199, 5547, 10348, 375, 2949, 49689, 2876, 97300, 10252, 1130, 698, 1145, 853, 373, 61559, 4605, 87633, 11574, 13203, 4605, 2210, 37193, 1137, 691, 722, 1668, 96630, 1548, 67252, 12999, 623, 2030, 1119, 732, 67175, 4605, 1821, 1130, 657, 924, 634, 1104, 643, 375, 560, 560, 1757, 1360, 1060, 1265, 1694, 560, 560, 4961, 560, 560, 1144, 2030, 2485, 7730, 3311, 696, 4892, 16559, 712, 373, 4488, 730, 16966, 2373, 2409, 17165, 1060, 970, 2957, 643, 375, 560, 560, 374, 49689, 1548, 68707, 730, 4935, 560, 374, 84621, 4607, 1548, 96630, 730, 14288, 5073, 560, 374, 27591, 9702, 560, 374, 3090, 2876, 41728, 9269, 1075, 15546, 4605, 3329, 1130, 657, 1060, 10252, 1075, 698, 560, 560, 1883, 10697, 3890, 696, 2718, 16559, 712, 373, 1180, 732, 3311, 696, 7730, 1130, 1060, 970, 2957, 643, 375, 7204, 4560, 67175, 4605, 3329, 2870, 1105, 373, 2804, 855, 67175, 4605, 3329, 2662, 853, 3090, 5073, 13456, 14288, 1130, 59985, 2126, 67175, 1371, 1548, 29289, 634, 17280, 2373, 4641, 4604, 3474, 48199, 785, 657, 924, 634, 2963, 1130, 3401, 826, 2957, 643, 375, 2626, 5789, 2373, 650, 2030, 1119, 732, 7730, 696, 691, 838, 712, 14098, 1210, 13456, 2007, 932, 5623, 2572, 2373, 2409, 19358, 1130, 1060, 970, 2957, 5623, 924, 1119, 643, 375, 560, 560, 2048, 13456, 657, 67175, 4605, 3329, 2870, 6868, 19014, 2804, 2112, 657, 1146, 1360, 853, 3329, 999, 1280, 942, 863], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:35144 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:48:02 logger.py:39] Received request cmpl-0fa31b17f91e4132b4bcd12f775bbe53-0: prompt: "다음 텍스트를 읽고, 주요 아이디어와 핵심 내용을 파악하여, 간결하면서도 명확한 요약문을 작성해 주세요.\n\n        요약문은 다음 항목들을 포함해야 합니다:\n        1. 문서의 주요 주제 및 목적\n        2. 핵심 내용과 중요한 세부사항\n        3. 결론 및 전달하고자 하는 메시지\n\n        외부 정보를 포함하지 않고 제공된 텍스트에만 전적으로 의존하세요.\n        \n        파이썬 크롤링 라이브러리로 크게 BeautifulSoup4, requests, , selenium, scrapy 등이 있다.[ BeautifulSoup4 ]BeautifulSoup4는 파이썬 내장 모듈인 requests, urllib를 이용해 HTML 을 받아오고 beautifulSoup로 추출한다.장점쉽고, 빠르고(병렬 처리시), 간단하다.단점HTML을 받아오기 때문에 SPA (ex. vue.js에서 라우팅 기능을 사용하여 페이지를 하나만 유지시키는 것)이나 js가 적용된 페이지를 크롤링하기엔 어렵다.[ lxml ]기본적으로 BeautifulSoup에서는 BeautifulSoup(html, 'html.parser') 와 같이 html parser 를 사용할수도 있지만 lxml 모듈을 설치하여 속도를 빠르게 할 수 있다.\xa0사용방법으로 BeautifulSoup(html, 'lxml') 과 같다.pip install lxml[ selenium ]웹 자동화 테스트에 사용되는 프레임워크로 웹 브라우저를 실제로 실행시켜 클릭을 하고 스크롤을 올리고 내리기에 속도가 많이 느리고 메모리도 많이 차지하게 된다.장점JavaScript도 렌더링하여 데이터를 추출 할 수 있다.단점웹브라우저를 실제로 실행하기에 (우리가 보는 정보를 모두 가져올 수 있다는 장점도 될 것 같다. ) 속도가 느리고, 메모리 사용이 상대적으로 크다.[ scrapy ]유료이며 크롤링을 위해 개발된 프레임워크이다.장점Django 처럼 벡엔드 서비스와 연동하기 편리하고 플러그인이 다양하다.문서화가 잘되며 기능구현이 잘 되어있다.단점플러그인간의 호환이 안되는 경우가 있다.[ 참고 자료 ]https://keyhyuk-kim.medium.com/python-%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%9F%AC-%EB%8F%84%EA%B5%AC-%EB%B9%84%EA%B5%90-%EB%B0%8F-%EC%82%AC%EC%9A%A9-%ED%9B%84%EA%B8%B0-scrapy-vs-selenium-vs-requests-urllib-6483041ca1baPython 웹 크롤러 도구 비교 및 사용 후기(Scrapy vs selenium vs Requests, urllib)웹 크롤러 개발 언어로 Python을 선택했다면, 개발 효율성을 높혀줄 여러가지 라이브러리와 프레임워크가 있습니다.keyhyuk-kim.medium.comhttps://www.baragi.net/bbs/board.php?bo_table=dev&wr_id=8858", params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [6297, 33728, 4605, 3405, 853, 373, 7245, 16255, 2030, 8771, 3311, 696, 7936, 22226, 373, 48360, 16559, 43574, 16248, 1075, 16399, 975, 696, 6016, 999, 16976, 375, 560, 560, 27, 101161, 975, 732, 2775, 16966, 1371, 696, 4666, 21046, 1481, 387, 560, 27, 378, 375, 20440, 730, 7245, 7109, 2425, 6801, 560, 27, 379, 375, 8771, 3311, 1548, 2963, 1075, 17661, 65573, 560, 27, 380, 375, 12550, 2425, 7820, 48199, 942, 691, 657, 14688, 560, 560, 27, 38832, 3231, 4605, 4666, 1130, 698, 1145, 853, 4078, 16524, 33728, 2373, 1043, 25744, 13456, 20665, 1130, 5847, 375, 560, 27, 560, 27, 17830, 35344, 1883, 10697, 3890, 67175, 715, 1883, 1060, 83188, 381, 373, 11168, 373, 624, 46818, 373, 95413, 1222, 634, 773, 643, 15954, 83188, 381, 950, 95469, 75872, 381, 657, 80044, 16379, 28581, 798, 11168, 373, 49184, 4605, 87633, 15447, 699, 1374, 40223, 853, 8647, 75872, 715, 13189, 10348, 375, 50938, 6737, 853, 373, 5955, 853, 369, 3196, 10544, 5547, 954, 5445, 5488, 96266, 375, 29376, 24961, 696, 1374, 40223, 722, 1668, 2373, 63108, 688, 1912, 375, 19311, 375, 12716, 41728, 41962, 2399, 4198, 696, 1821, 22226, 13203, 4605, 1799, 1043, 4516, 71181, 657, 924, 370, 37891, 6545, 905, 5552, 16524, 13203, 4605, 1883, 10697, 3890, 76766, 8789, 5333, 643, 15954, 716, 23256, 950, 14367, 41281, 83188, 41728, 657, 83188, 369, 27092, 373, 741, 27092, 375, 17024, 10771, 1082, 2485, 4609, 17979, 779, 1821, 2870, 31622, 773, 2597, 716, 23256, 28581, 696, 4490, 22226, 7818, 4605, 5955, 1060, 1051, 868, 773, 643, 375, 1821, 46016, 13456, 83188, 369, 27092, 373, 741, 437, 23256, 10771, 958, 1119, 643, 375, 54485, 4251, 716, 23256, 420, 46818, 950, 51257, 4440, 1255, 10990, 2373, 1821, 13452, 657, 18286, 13518, 715, 11574, 61559, 4605, 8297, 12944, 85765, 9144, 696, 9858, 70806, 696, 1565, 1766, 7054, 37817, 7818, 905, 1719, 1585, 1766, 21497, 720, 1719, 8145, 1130, 1060, 2036, 375, 50938, 98683, 720, 6064, 87346, 22226, 7957, 4605, 13189, 1051, 868, 773, 643, 375, 29376, 51257, 21014, 962, 1415, 4605, 8297, 12944, 1130, 37817, 688, 3718, 905, 846, 657, 3231, 4605, 2618, 39169, 868, 773, 4264, 7306, 720, 2015, 924, 1119, 643, 375, 693, 7818, 905, 1585, 1766, 373, 21497, 1821, 634, 4826, 41281, 49546, 15954, 95413, 950, 1420, 1472, 634, 1877, 1883, 10697, 3890, 696, 1902, 4003, 16524, 18286, 13518, 40379, 375, 50938, 78680, 10380, 2352, 37588, 65840, 3670, 2030, 24108, 76766, 9621, 48199, 87518, 634, 2841, 96266, 375, 89098, 55196, 1353, 13452, 1877, 4198, 887, 2252, 634, 1353, 970, 721, 1840, 643, 375, 29376, 39283, 799, 25284, 730, 39833, 634, 1084, 13452, 657, 2042, 905, 773, 643, 15954, 5813, 6784, 950, 15385, 387, 9413, 8025, 6254, 5386, 374, 89418, 375, 2913, 2692, 375, 3256, 376, 50475, 374, 366, 5487, 366, 386, 395, 366, 395, 386, 374, 366, 3381, 366, 385, 378, 366, 4145, 366, 51692, 366, 394, 378, 366, 394, 381, 366, 51692, 366, 386, 399, 366, 4145, 374, 366, 51692, 366, 385, 399, 366, 385, 381, 366, 13879, 366, 395, 382, 366, 4145, 374, 366, 51692, 366, 395, 386, 366, 385, 381, 366, 13879, 366, 395, 382, 366, 386, 377, 374, 366, 51692, 366, 395, 377, 366, 385, 399, 374, 366, 5487, 366, 385, 379, 366, 4145, 366, 5487, 366, 386, 394, 366, 394, 386, 374, 366, 3381, 366, 386, 395, 366, 385, 381, 366, 13879, 366, 395, 385, 366, 395, 377, 374, 21140, 5754, 374, 26631, 374, 7136, 32030, 374, 26631, 374, 101281, 374, 790, 45053, 374, 383, 381, 385, 380, 377, 381, 378, 12262, 378, 8278, 54440, 11574, 1883, 10697, 1030, 15546, 5080, 2425, 1821, 5131, 369, 98326, 5754, 6382, 46818, 6382, 70540, 373, 49184, 370, 51257, 1883, 10697, 1030, 4003, 10978, 715, 14138, 696, 3329, 2662, 4767, 373, 4003, 9687, 1210, 696, 2388, 2994, 6539, 2690, 6576, 67175, 2030, 18286, 13518, 905, 773, 50747, 375, 8025, 6254, 5386, 374, 89418, 375, 2913, 2692, 375, 3256, 15385, 387, 9413, 38790, 375, 5961, 43705, 375, 9281, 376, 427, 2218, 376, 7119, 375, 98086, 392, 2354, 424, 3032, 390, 23169, 367, 40649, 424, 766, 390, 385, 385, 382, 385], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:35150 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:48:02 engine.py:275] Added request cmpl-0b7ecbb6509d43d2966397d01f54ef8d-0.
INFO 02-17 00:48:02 engine.py:275] Added request cmpl-0fa31b17f91e4132b4bcd12f775bbe53-0.
INFO 02-17 00:48:02 metrics.py:455] Avg prompt throughput: 891.0 tokens/s, Avg generation throughput: 77.1 tokens/s, Running: 2 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.3%, CPU KV cache usage: 0.0%.
INFO 02-17 00:48:07 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 149.9 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.2%, CPU KV cache usage: 0.0%.
INFO 02-17 00:48:10 logger.py:39] Received request cmpl-ebcff9e6cdb14406941be78910d732d5-0: prompt: '아래 정보에 기반하여, 사용자의 질문에 답하세요.\n         UTC\n\n\n---\n\n## 참고 문헌\n\n---\n\n> Jsoup\n> [https://jsoup.org/](https://jsoup.org/)\n> [https://velog.me/@hyn_053/selenium-%EC%9B%90%EB%A6%AC%EC%8A%A4-%EC%97%B0%EB%A0%B9-%EC%9D%91%EC%9A%B0%ED%95%B4%ED%95%9C-%EB%B3%B5%EB%A1%9C%EB%B0%94-%EB%B3%B5%EA%B0%80-%EB%A7%8C%EB%93%A4%EB%B0%94-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%B0%94%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0%94-%EC%A0%95%EB%A6%AC-%EB%A7%8C%EB%93%A4%EB%B0\n- 웹 크롤링 라이브러리 비교(Scrapy vs Selenium vs Requests, urllib)웹 크롤링 라이브러리 비교(Scrapy vs Selenium vs Requests, urllib)2021. 1. 1. 19:42 댓글 0 web-crawling-libraries-comparison.jpg(221.67 KB)웹 크롤링 라이브러리 비교(Scrapy vs Selenium vs Requests, urllib)웹 크롤링 라이브러리를 비교하는 글을 읽어보았다.keyhyuk-kim.medium.com\n        사용자 질문: 크롤링 라이브러리를 알아봐주고, 공통점과 차이점을 비교해줘 ', params: SamplingParams(n=1, presence_penalty=0.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=0.7, top_p=0.85, top_k=-1, min_p=0.0, seed=None, stop=[], stop_token_ids=[], bad_words=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=1000, min_tokens=0, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True, truncate_prompt_tokens=None, guided_decoding=None), prompt_token_ids: [13696, 3231, 2373, 8898, 22226, 373, 7332, 730, 5962, 2373, 3455, 1130, 5847, 375, 560, 26, 94595, 560, 560, 560, 4961, 560, 560, 1757, 5813, 45635, 560, 560, 4961, 560, 560, 391, 84621, 4607, 560, 391, 974, 15385, 387, 9413, 12716, 4607, 375, 23632, 376, 8064, 15385, 387, 9413, 12716, 4607, 375, 23632, 376, 370, 560, 391, 974, 15385, 387, 9413, 1311, 1091, 375, 2297, 376, 393, 433, 2590, 424, 377, 382, 380, 376, 7136, 32030, 374, 366, 5487, 366, 386, 395, 366, 386, 377, 366, 51692, 366, 394, 383, 366, 4145, 366, 5487, 366, 385, 394, 366, 394, 381, 374, 366, 5487, 366, 386, 384, 366, 395, 377, 366, 51692, 366, 394, 377, 366, 395, 386, 374, 366, 5487, 366, 386, 397, 366, 386, 378, 366, 5487, 366, 386, 394, 366, 395, 377, 366, 3381, 366, 386, 382, 366, 395, 381, 366, 3381, 366, 386, 382, 366, 386, 396, 374, 366, 51692, 366, 395, 380, 366, 395, 382, 366, 51692, 366, 394, 378, 366, 386, 396, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 51692, 366, 395, 380, 366, 395, 382, 366, 13879, 366, 395, 377, 366, 385, 377, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 395, 377, 366, 386, 381, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 366, 386, 381, 374, 366, 5487, 366, 394, 377, 366, 386, 382, 366, 51692, 366, 394, 383, 366, 4145, 374, 366, 51692, 366, 394, 384, 366, 385, 396, 366, 51692, 366, 386, 380, 366, 394, 381, 366, 51692, 366, 395, 377, 560, 374, 11574, 1883, 10697, 3890, 67175, 5080, 369, 98326, 5754, 6382, 96630, 6382, 70540, 373, 49184, 370, 51257, 1883, 10697, 3890, 67175, 5080, 369, 98326, 5754, 6382, 96630, 6382, 70540, 373, 49184, 370, 379, 377, 379, 378, 375, 582, 378, 375, 582, 378, 375, 582, 378, 386, 387, 381, 379, 9004, 582, 377, 4226, 374, 428, 3870, 3162, 374, 437, 3740, 6070, 374, 98727, 4068, 375, 435, 11460, 369, 379, 379, 378, 375, 383, 384, 18135, 370, 51257, 1883, 10697, 3890, 67175, 5080, 369, 98326, 5754, 6382, 96630, 6382, 70540, 373, 49184, 370, 51257, 1883, 10697, 3890, 67175, 4605, 5080, 1130, 657, 2272, 696, 3405, 39564, 19850, 643, 375, 8025, 6254, 5386, 374, 89418, 375, 2913, 2692, 375, 3256, 560, 27, 16167, 942, 5962, 387, 1883, 10697, 3890, 67175, 4605, 55662, 823, 853, 373, 37701, 1548, 29289, 696, 5080, 999, 15887, 582], lora_request: None, prompt_adapter_request: None.
INFO:     127.0.0.1:48748 - "POST /v1/completions HTTP/1.1" 200 OK
INFO 02-17 00:48:10 engine.py:275] Added request cmpl-ebcff9e6cdb14406941be78910d732d5-0.
INFO 02-17 00:48:12 metrics.py:455] Avg prompt throughput: 232.0 tokens/s, Avg generation throughput: 123.9 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.1%, CPU KV cache usage: 0.0%.
INFO 02-17 00:48:17 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 128.3 tokens/s, Running: 1 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.2%, CPU KV cache usage: 0.0%.
INFO 02-17 00:48:28 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 9.4 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:48:38 metrics.py:455] Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Swapped: 0 reqs, Pending: 0 reqs, GPU KV cache usage: 0.0%, CPU KV cache usage: 0.0%.
INFO 02-17 00:51:00 launcher.py:59] Shutting down FastAPI HTTP server.
INFO 02-17 00:51:00 multiproc_worker_utils.py:141] Terminating local vLLM worker processes
[1;36m(VllmWorkerProcess pid=3998183)[0;0m INFO 02-17 00:51:00 multiproc_worker_utils.py:253] Worker exiting
[1;36m(VllmWorkerProcess pid=3998182)[0;0m INFO 02-17 00:51:00 multiproc_worker_utils.py:253] Worker exiting
[1;36m(VllmWorkerProcess pid=3998181)[0;0m INFO 02-17 00:51:00 multiproc_worker_utils.py:253] Worker exiting
[rank0]:[W217 00:51:02.738689275 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
INFO:     Shutting down
INFO:     Waiting for application shutdown.
INFO:     Application shutdown complete.
/opt/anaconda3/lib/python3.12/multiprocessing/resource_tracker.py:254: UserWarning: resource_tracker: There appear to be 1 leaked shared_memory objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
INFO 02-17 01:08:30 __init__.py:190] Automatically detected platform cuda.
INFO 02-17 01:08:31 api_server.py:840] vLLM API server version 0.7.2
INFO 02-17 01:08:31 api_server.py:841] args: Namespace(subparser='serve', model_tag='snunlp/bigdata_exaone3_7.8b_fft', config='', host=None, port=8000, uvicorn_log_level='info', allow_credentials=False, allowed_origins=['*'], allowed_methods=['*'], allowed_headers=['*'], api_key='token-snuintern2025', lora_modules=None, prompt_adapters=None, chat_template=None, chat_template_content_format='auto', response_role='assistant', ssl_keyfile=None, ssl_certfile=None, ssl_ca_certs=None, ssl_cert_reqs=0, root_path=None, middleware=[], return_tokens_as_token_ids=False, disable_frontend_multiprocessing=False, enable_request_id_headers=False, enable_auto_tool_choice=False, enable_reasoning=False, reasoning_parser=None, tool_call_parser=None, tool_parser_plugin='', model='snunlp/bigdata_exaone3_7.8b_fft', task='auto', tokenizer=None, skip_tokenizer_init=False, revision=None, code_revision=None, tokenizer_revision=None, tokenizer_mode='auto', trust_remote_code=False, allowed_local_media_path=None, download_dir=None, load_format='auto', config_format=<ConfigFormat.AUTO: 'auto'>, dtype='auto', kv_cache_dtype='auto', max_model_len=None, guided_decoding_backend='xgrammar', logits_processor_pattern=None, model_impl='auto', distributed_executor_backend=None, pipeline_parallel_size=1, tensor_parallel_size=1, max_parallel_loading_workers=None, ray_workers_use_nsight=False, block_size=None, enable_prefix_caching=None, disable_sliding_window=False, use_v2_block_manager=True, num_lookahead_slots=0, seed=0, swap_space=4, cpu_offload_gb=0, gpu_memory_utilization=0.9, num_gpu_blocks_override=None, max_num_batched_tokens=None, max_num_seqs=None, max_logprobs=20, disable_log_stats=False, quantization=None, rope_scaling=None, rope_theta=None, hf_overrides=None, enforce_eager=False, max_seq_len_to_capture=8192, disable_custom_all_reduce=False, tokenizer_pool_size=0, tokenizer_pool_type='ray', tokenizer_pool_extra_config=None, limit_mm_per_prompt=None, mm_processor_kwargs=None, disable_mm_preprocessor_cache=False, enable_lora=False, enable_lora_bias=False, max_loras=1, max_lora_rank=16, lora_extra_vocab_size=256, lora_dtype='auto', long_lora_scaling_factors=None, max_cpu_loras=None, fully_sharded_loras=False, enable_prompt_adapter=False, max_prompt_adapters=1, max_prompt_adapter_token=0, device='auto', num_scheduler_steps=1, multi_step_stream_outputs=True, scheduler_delay_factor=0.0, enable_chunked_prefill=None, speculative_model=None, speculative_model_quantization=None, num_speculative_tokens=None, speculative_disable_mqa_scorer=False, speculative_draft_tensor_parallel_size=None, speculative_max_model_len=None, speculative_disable_by_batch_size=None, ngram_prompt_lookup_max=None, ngram_prompt_lookup_min=None, spec_decoding_acceptance_method='rejection_sampler', typical_acceptance_sampler_posterior_threshold=None, typical_acceptance_sampler_posterior_alpha=None, disable_logprobs_during_spec_decoding=None, model_loader_extra_config=None, ignore_patterns=[], preemption_mode=None, served_model_name=None, qlora_adapter_name_or_path=None, otlp_traces_endpoint=None, collect_detailed_traces=None, disable_async_output_proc=False, scheduling_policy='fcfs', override_neuron_config=None, override_pooler_config=None, compilation_config=None, kv_transfer_config=None, worker_cls='auto', generation_config=None, override_generation_config=None, enable_sleep_mode=False, calculate_kv_scales=False, disable_log_requests=False, max_log_len=None, disable_fastapi_docs=False, enable_prompt_tokens_details=False, dispatch_function=<function serve at 0x7fa976a5bec0>)
INFO 02-17 01:08:31 api_server.py:206] Started engine process with PID 4004359
INFO 02-17 01:08:35 __init__.py:190] Automatically detected platform cuda.
INFO 02-17 01:08:49 config.py:542] This model supports multiple tasks: {'embed', 'generate', 'score', 'classify', 'reward'}. Defaulting to 'generate'.
INFO 02-17 01:08:49 llm_engine.py:234] Initializing a V0 LLM engine (v0.7.2) with config: model='snunlp/bigdata_exaone3_7.8b_fft', speculative_config=None, tokenizer='snunlp/bigdata_exaone3_7.8b_fft', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=snunlp/bigdata_exaone3_7.8b_fft, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=True, 
INFO 02-17 01:08:50 cuda.py:230] Using Flash Attention backend.
INFO 02-17 01:08:51 model_runner.py:1110] Starting to load model snunlp/bigdata_exaone3_7.8b_fft...
INFO 02-17 01:08:51 config.py:542] This model supports multiple tasks: {'generate', 'reward', 'embed', 'score', 'classify'}. Defaulting to 'generate'.
INFO 02-17 01:08:52 weight_utils.py:252] Using model weights format ['*.safetensors']
Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:01<00:04,  1.36s/it]
Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:02<00:02,  1.39s/it]
Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:03<00:00,  1.10it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:04<00:00,  1.07s/it]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:04<00:00,  1.11s/it]

INFO 02-17 01:08:57 model_runner.py:1115] Loading model weights took 14.5640 GB
INFO 02-17 01:08:58 worker.py:267] Memory profiling takes 1.35 seconds
INFO 02-17 01:08:58 worker.py:267] the current vLLM instance can use total_gpu_memory (39.39GiB) x gpu_memory_utilization (0.90) = 35.45GiB
INFO 02-17 01:08:58 worker.py:267] model weights take 14.56GiB; non_torch_memory takes 0.09GiB; PyTorch activation peak memory takes 0.97GiB; the rest of the memory reserved for KV Cache is 19.83GiB.
INFO 02-17 01:08:59 executor_base.py:110] # CUDA blocks: 10153, # CPU blocks: 2048
INFO 02-17 01:08:59 executor_base.py:115] Maximum concurrency for 4096 tokens per request: 39.66x
INFO 02-17 01:09:00 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s]Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:20,  1.65it/s]Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:01<00:19,  1.67it/s]Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:01<00:18,  1.75it/s]Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:02<00:17,  1.81it/s]Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:02<00:16,  1.85it/s]Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:03<00:15,  1.87it/s]Capturing CUDA graph shapes:  20%|██        | 7/35 [00:03<00:14,  1.88it/s]Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:04<00:14,  1.89it/s]Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:04<00:13,  1.91it/s]Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:05<00:13,  1.90it/s]Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:05<00:12,  1.89it/s]Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:06<00:12,  1.90it/s]Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:07<00:11,  1.88it/s]Capturing CUDA graph shapes:  40%|████      | 14/35 [00:07<00:11,  1.90it/s]Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:08<00:10,  1.92it/s]Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:08<00:09,  1.92it/s]Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:09<00:09,  1.92it/s]Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:09<00:08,  1.95it/s]Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:10<00:08,  1.96it/s]Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:10<00:07,  1.98it/s]Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:11<00:07,  1.99it/s]Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:11<00:06,  2.00it/s]Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:12<00:05,  2.01it/s]Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:12<00:05,  2.01it/s]Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:13<00:05,  2.00it/s]Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:13<00:04,  2.01it/s]Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:14<00:03,  2.03it/s]Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:14<00:03,  2.05it/s]Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:14<00:02,  2.06it/s]Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:15<00:02,  2.07it/s]Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:15<00:01,  2.04it/s]Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:16<00:01,  2.06it/s]Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:16<00:00,  2.06it/s]Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:17<00:00,  2.07it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:17<00:00,  2.05it/s]Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:17<00:00,  1.96it/s]
INFO 02-17 01:09:18 model_runner.py:1562] Graph capturing finished in 18 secs, took 0.88 GiB
INFO 02-17 01:09:18 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 21.62 seconds
INFO 02-17 01:09:19 api_server.py:756] Using supplied chat template:
INFO 02-17 01:09:19 api_server.py:756] None
INFO 02-17 01:09:19 launcher.py:21] Available routes are:
INFO 02-17 01:09:19 launcher.py:29] Route: /openapi.json, Methods: HEAD, GET
INFO 02-17 01:09:19 launcher.py:29] Route: /docs, Methods: HEAD, GET
INFO 02-17 01:09:19 launcher.py:29] Route: /docs/oauth2-redirect, Methods: HEAD, GET
INFO 02-17 01:09:19 launcher.py:29] Route: /redoc, Methods: HEAD, GET
INFO 02-17 01:09:19 launcher.py:29] Route: /health, Methods: GET
INFO 02-17 01:09:19 launcher.py:29] Route: /ping, Methods: POST, GET
INFO 02-17 01:09:19 launcher.py:29] Route: /tokenize, Methods: POST
INFO 02-17 01:09:19 launcher.py:29] Route: /detokenize, Methods: POST
INFO 02-17 01:09:19 launcher.py:29] Route: /v1/models, Methods: GET
INFO 02-17 01:09:19 launcher.py:29] Route: /version, Methods: GET
INFO 02-17 01:09:19 launcher.py:29] Route: /v1/chat/completions, Methods: POST
INFO 02-17 01:09:19 launcher.py:29] Route: /v1/completions, Methods: POST
INFO 02-17 01:09:19 launcher.py:29] Route: /v1/embeddings, Methods: POST
INFO 02-17 01:09:19 launcher.py:29] Route: /pooling, Methods: POST
INFO 02-17 01:09:19 launcher.py:29] Route: /score, Methods: POST
INFO 02-17 01:09:19 launcher.py:29] Route: /v1/score, Methods: POST
INFO 02-17 01:09:19 launcher.py:29] Route: /rerank, Methods: POST
INFO 02-17 01:09:19 launcher.py:29] Route: /v1/rerank, Methods: POST
INFO 02-17 01:09:19 launcher.py:29] Route: /v2/rerank, Methods: POST
INFO 02-17 01:09:19 launcher.py:29] Route: /invocations, Methods: POST
INFO:     Started server process [4004189]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
INFO:     199.45.154.150:58338 - "GET / HTTP/1.1" 404 Not Found
INFO:     199.45.154.150:57996 - "GET / HTTP/1.1" 404 Not Found
WARNING:  Invalid HTTP request received.
INFO 02-17 01:23:46 launcher.py:59] Shutting down FastAPI HTTP server.
[rank0]:[W217 01:23:47.437178114 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
INFO:     Shutting down
INFO:     Waiting for application shutdown.
INFO:     Application shutdown complete.
Traceback (most recent call last):
  File "/home/hyeznee/.local/bin/vllm", line 5, in <module>
    from vllm.scripts import main
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/__init__.py", line 7, in <module>
    from vllm.engine.arg_utils import AsyncEngineArgs, EngineArgs
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/engine/arg_utils.py", line 13, in <module>
    from vllm.config import (CacheConfig, CompilationConfig, ConfigFormat,
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/config.py", line 19, in <module>
    from transformers import PretrainedConfig
ModuleNotFoundError: No module named 'transformers'
Traceback (most recent call last):
  File "/home/hyeznee/.local/bin/vllm", line 5, in <module>
    from vllm.scripts import main
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/__init__.py", line 7, in <module>
    from vllm.engine.arg_utils import AsyncEngineArgs, EngineArgs
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/engine/arg_utils.py", line 13, in <module>
    from vllm.config import (CacheConfig, CompilationConfig, ConfigFormat,
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/config.py", line 19, in <module>
    from transformers import PretrainedConfig
ModuleNotFoundError: No module named 'transformers'
Traceback (most recent call last):
  File "/home/hyeznee/.local/bin/vllm", line 5, in <module>
    from vllm.scripts import main
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/__init__.py", line 7, in <module>
    from vllm.engine.arg_utils import AsyncEngineArgs, EngineArgs
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/engine/arg_utils.py", line 13, in <module>
    from vllm.config import (CacheConfig, CompilationConfig, ConfigFormat,
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/config.py", line 19, in <module>
    from transformers import PretrainedConfig
ModuleNotFoundError: No module named 'transformers'
Traceback (most recent call last):
  File "/home/hyeznee/.local/bin/vllm", line 5, in <module>
    from vllm.scripts import main
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/__init__.py", line 7, in <module>
    from vllm.engine.arg_utils import AsyncEngineArgs, EngineArgs
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/engine/arg_utils.py", line 13, in <module>
    from vllm.config import (CacheConfig, CompilationConfig, ConfigFormat,
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/config.py", line 19, in <module>
    from transformers import PretrainedConfig
ModuleNotFoundError: No module named 'transformers'
Traceback (most recent call last):
  File "/home/hyeznee/.local/bin/vllm", line 5, in <module>
    from vllm.scripts import main
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/__init__.py", line 7, in <module>
    from vllm.engine.arg_utils import AsyncEngineArgs, EngineArgs
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/engine/arg_utils.py", line 13, in <module>
    from vllm.config import (CacheConfig, CompilationConfig, ConfigFormat,
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/config.py", line 19, in <module>
    from transformers import PretrainedConfig
ModuleNotFoundError: No module named 'transformers'
Traceback (most recent call last):
  File "/home/hyeznee/.local/bin/vllm", line 5, in <module>
    from vllm.scripts import main
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/__init__.py", line 7, in <module>
    from vllm.engine.arg_utils import AsyncEngineArgs, EngineArgs
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/engine/arg_utils.py", line 13, in <module>
    from vllm.config import (CacheConfig, CompilationConfig, ConfigFormat,
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/config.py", line 19, in <module>
    from transformers import PretrainedConfig
ModuleNotFoundError: No module named 'transformers'
Traceback (most recent call last):
  File "/home/hyeznee/.local/bin/vllm", line 5, in <module>
    from vllm.scripts import main
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/__init__.py", line 7, in <module>
    from vllm.engine.arg_utils import AsyncEngineArgs, EngineArgs
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/engine/arg_utils.py", line 13, in <module>
    from vllm.config import (CacheConfig, CompilationConfig, ConfigFormat,
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/config.py", line 19, in <module>
    from transformers import PretrainedConfig
ModuleNotFoundError: No module named 'transformers'
Traceback (most recent call last):
  File "/home/hyeznee/.local/bin/vllm", line 5, in <module>
    from vllm.scripts import main
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/__init__.py", line 7, in <module>
    from vllm.engine.arg_utils import AsyncEngineArgs, EngineArgs
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/engine/arg_utils.py", line 13, in <module>
    from vllm.config import (CacheConfig, CompilationConfig, ConfigFormat,
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/config.py", line 19, in <module>
    from transformers import PretrainedConfig
ModuleNotFoundError: No module named 'transformers'
Traceback (most recent call last):
  File "/home/hyeznee/.local/bin/vllm", line 5, in <module>
    from vllm.scripts import main
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/__init__.py", line 7, in <module>
    from vllm.engine.arg_utils import AsyncEngineArgs, EngineArgs
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/engine/arg_utils.py", line 13, in <module>
    from vllm.config import (CacheConfig, CompilationConfig, ConfigFormat,
  File "/home/hyeznee/.local/lib/python3.12/site-packages/vllm/config.py", line 19, in <module>
    from transformers import PretrainedConfig
ModuleNotFoundError: No module named 'transformers'
